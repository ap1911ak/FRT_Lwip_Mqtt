
F767_RTOS_LwIP_MQTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a980  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000042d0  0801ab80  0801ab80  0002ab80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ee50  0801ee50  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801ee50  0801ee50  0002ee50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ee58  0801ee58  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ee58  0801ee58  0002ee58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ee5c  0801ee5c  0002ee5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0801ee60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fb98  200001f0  0801f050  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000fd88  0801f050  0003fd88  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004f4ee  00000000  00000000  0003021e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009076  00000000  00000000  0007f70c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002610  00000000  00000000  00088788  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000024d0  00000000  00000000  0008ad98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003b4b1  00000000  00000000  0008d268  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00031c12  00000000  00000000  000c8719  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011db96  00000000  00000000  000fa32b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00217ec1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a17c  00000000  00000000  00217f3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f0 	.word	0x200001f0
 800021c:	00000000 	.word	0x00000000
 8000220:	0801ab68 	.word	0x0801ab68

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f4 	.word	0x200001f4
 800023c:	0801ab68 	.word	0x0801ab68

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000620:	4803      	ldr	r0, [pc, #12]	; (8000630 <vApplicationStackOverflowHook+0x20>)
 8000622:	f002 f88d 	bl	8002740 <HAL_GPIO_WritePin>

 //turn on red led when detects stack overflow

}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40020400 	.word	0x40020400

08000634 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	4a07      	ldr	r2, [pc, #28]	; (8000660 <vApplicationGetIdleTaskMemory+0x2c>)
 8000644:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	4a06      	ldr	r2, [pc, #24]	; (8000664 <vApplicationGetIdleTaskMemory+0x30>)
 800064a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2280      	movs	r2, #128	; 0x80
 8000650:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	2000020c 	.word	0x2000020c
 8000664:	20000260 	.word	0x20000260

08000668 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000668:	b5b0      	push	{r4, r5, r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MX_FREERTOS_Init+0x30>)
 8000670:	1d3c      	adds	r4, r7, #4
 8000672:	461d      	mov	r5, r3
 8000674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000678:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800067c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f003 fca0 	bl	8003fca <osThreadCreate>
 800068a:	4602      	mov	r2, r0
 800068c:	4b03      	ldr	r3, [pc, #12]	; (800069c <MX_FREERTOS_Init+0x34>)
 800068e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000690:	bf00      	nop
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bdb0      	pop	{r4, r5, r7, pc}
 8000698:	0801ab8c 	.word	0x0801ab8c
 800069c:	200087a4 	.word	0x200087a4

080006a0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006a0:	b5b0      	push	{r4, r5, r7, lr}
 80006a2:	b090      	sub	sp, #64	; 0x40
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80006a8:	f002 ffe2 	bl	8003670 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
		osThreadDef(mqttClientSubTask, MqttClientSubTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE); //subscribe task
 80006ac:	4b17      	ldr	r3, [pc, #92]	; (800070c <StartDefaultTask+0x6c>)
 80006ae:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80006b2:	461d      	mov	r5, r3
 80006b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		osThreadDef(mqttClientPubTask, MqttClientPubTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE); //publish task
 80006c0:	4b13      	ldr	r3, [pc, #76]	; (8000710 <StartDefaultTask+0x70>)
 80006c2:	f107 0408 	add.w	r4, r7, #8
 80006c6:	461d      	mov	r5, r3
 80006c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		mqttClientSubTaskHandle = osThreadCreate(osThread(mqttClientSubTask), NULL);
 80006d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f003 fc75 	bl	8003fca <osThreadCreate>
 80006e0:	4602      	mov	r2, r0
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <StartDefaultTask+0x74>)
 80006e4:	601a      	str	r2, [r3, #0]
		mqttClientPubTaskHandle = osThreadCreate(osThread(mqttClientPubTask), NULL);
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f003 fc6c 	bl	8003fca <osThreadCreate>
 80006f2:	4602      	mov	r2, r0
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <StartDefaultTask+0x78>)
 80006f6:	601a      	str	r2, [r3, #0]

		/* Infinite loop */
		for(;;)
		{
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin); //toggle running led
 80006f8:	2101      	movs	r1, #1
 80006fa:	4808      	ldr	r0, [pc, #32]	; (800071c <StartDefaultTask+0x7c>)
 80006fc:	f002 f839 	bl	8002772 <HAL_GPIO_TogglePin>
			osDelay(500);
 8000700:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000704:	f003 fcad 	bl	8004062 <osDelay>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin); //toggle running led
 8000708:	e7f6      	b.n	80006f8 <StartDefaultTask+0x58>
 800070a:	bf00      	nop
 800070c:	0801abbc 	.word	0x0801abbc
 8000710:	0801abec 	.word	0x0801abec
 8000714:	20009424 	.word	0x20009424
 8000718:	20009020 	.word	0x20009020
 800071c:	40020400 	.word	0x40020400

08000720 <MqttClientSubTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void MqttClientSubTask(void const *argument)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//waiting for valid ip address
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MqttClientSubTask+0x60>)
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d007      	beq.n	8000740 <MqttClientSubTask+0x20>
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MqttClientSubTask+0x60>)
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d003      	beq.n	8000740 <MqttClientSubTask+0x20>
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MqttClientSubTask+0x60>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d104      	bne.n	800074a <MqttClientSubTask+0x2a>
		{
			osDelay(1000);
 8000740:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000744:	f003 fc8d 	bl	8004062 <osDelay>
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 8000748:	e7ee      	b.n	8000728 <MqttClientSubTask+0x8>
			continue;
		}
		else
		{
			printf("DHCP/Static IP O.K.\n");
 800074a:	480e      	ldr	r0, [pc, #56]	; (8000784 <MqttClientSubTask+0x64>)
 800074c:	f019 fadc 	bl	8019d08 <puts>
			break;
 8000750:	bf00      	nop
		}
	}

	while(1)
	{
		if(!mqttClient.isconnected)
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <MqttClientSubTask+0x68>)
 8000754:	6a1b      	ldr	r3, [r3, #32]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d109      	bne.n	800076e <MqttClientSubTask+0x4e>
		{
			//try to connect to the broker
			MQTTDisconnect(&mqttClient);
 800075a:	480b      	ldr	r0, [pc, #44]	; (8000788 <MqttClientSubTask+0x68>)
 800075c:	f018 f9f5 	bl	8018b4a <MQTTDisconnect>
			MqttConnectBroker();
 8000760:	f000 f838 	bl	80007d4 <MqttConnectBroker>
			osDelay(1000);
 8000764:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000768:	f003 fc7b 	bl	8004062 <osDelay>
 800076c:	e7f1      	b.n	8000752 <MqttClientSubTask+0x32>
		}
		else
		{
			MQTTYield(&mqttClient, 1000); //handle timer
 800076e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MqttClientSubTask+0x68>)
 8000774:	f017 ff22 	bl	80185bc <MQTTYield>
			osDelay(100);
 8000778:	2064      	movs	r0, #100	; 0x64
 800077a:	f003 fc72 	bl	8004062 <osDelay>
		if(!mqttClient.isconnected)
 800077e:	e7e8      	b.n	8000752 <MqttClientSubTask+0x32>
 8000780:	20009474 	.word	0x20009474
 8000784:	0801ac08 	.word	0x0801ac08
 8000788:	200087a8 	.word	0x200087a8

0800078c <MqttClientPubTask>:
		}
	}
}

void MqttClientPubTask(void const *argument)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	const char* str = "MQTT message from STM32";
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MqttClientPubTask+0x3c>)
 8000796:	61fb      	str	r3, [r7, #28]
	MQTTMessage message;

	while(1)
	{
		if(mqttClient.isconnected)
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MqttClientPubTask+0x40>)
 800079a:	6a1b      	ldr	r3, [r3, #32]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d00d      	beq.n	80007bc <MqttClientPubTask+0x30>
		{
			message.payload = (void*)str;
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	617b      	str	r3, [r7, #20]
			message.payloadlen = strlen(str);
 80007a4:	69f8      	ldr	r0, [r7, #28]
 80007a6:	f7ff fd55 	bl	8000254 <strlen>
 80007aa:	4603      	mov	r3, r0
 80007ac:	61bb      	str	r3, [r7, #24]

			MQTTPublish(&mqttClient, "test", &message); //publish a message
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	461a      	mov	r2, r3
 80007b4:	4906      	ldr	r1, [pc, #24]	; (80007d0 <MqttClientPubTask+0x44>)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MqttClientPubTask+0x40>)
 80007b8:	f018 f901 	bl	80189be <MQTTPublish>
		}

		osDelay(1000);
 80007bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c0:	f003 fc4f 	bl	8004062 <osDelay>
		if(mqttClient.isconnected)
 80007c4:	e7e8      	b.n	8000798 <MqttClientPubTask+0xc>
 80007c6:	bf00      	nop
 80007c8:	0801ac1c 	.word	0x0801ac1c
 80007cc:	200087a8 	.word	0x200087a8
 80007d0:	0801ac34 	.word	0x0801ac34

080007d4 <MqttConnectBroker>:
	}
}
int MqttConnectBroker()
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b09c      	sub	sp, #112	; 0x70
 80007d8:	af04      	add	r7, sp, #16
	int ret;

	NewNetwork(&net);
 80007da:	482e      	ldr	r0, [pc, #184]	; (8000894 <MqttConnectBroker+0xc0>)
 80007dc:	f018 fa4e 	bl	8018c7c <NewNetwork>
	ret = ConnectNetwork(&net, BROKER_IP, MQTT_PORT);
 80007e0:	f240 725b 	movw	r2, #1883	; 0x75b
 80007e4:	492c      	ldr	r1, [pc, #176]	; (8000898 <MqttConnectBroker+0xc4>)
 80007e6:	482b      	ldr	r0, [pc, #172]	; (8000894 <MqttConnectBroker+0xc0>)
 80007e8:	f018 fa64 	bl	8018cb4 <ConnectNetwork>
 80007ec:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 80007ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d005      	beq.n	8000800 <MqttConnectBroker+0x2c>
	{
		printf("ConnectNetwork failed.\n");
 80007f4:	4829      	ldr	r0, [pc, #164]	; (800089c <MqttConnectBroker+0xc8>)
 80007f6:	f019 fa87 	bl	8019d08 <puts>
		return -1;
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
 80007fe:	e044      	b.n	800088a <MqttConnectBroker+0xb6>
	}

	MQTTClientInit(&mqttClient, &net, 1000, sndBuffer, sizeof(sndBuffer), rcvBuffer, sizeof(rcvBuffer));
 8000800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000804:	9302      	str	r3, [sp, #8]
 8000806:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <MqttConnectBroker+0xcc>)
 8000808:	9301      	str	r3, [sp, #4]
 800080a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	4b24      	ldr	r3, [pc, #144]	; (80008a4 <MqttConnectBroker+0xd0>)
 8000812:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000816:	491f      	ldr	r1, [pc, #124]	; (8000894 <MqttConnectBroker+0xc0>)
 8000818:	4823      	ldr	r0, [pc, #140]	; (80008a8 <MqttConnectBroker+0xd4>)
 800081a:	f017 fb6f 	bl	8017efc <MQTTClientInit>

	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 800081e:	4a23      	ldr	r2, [pc, #140]	; (80008ac <MqttConnectBroker+0xd8>)
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	4611      	mov	r1, r2
 8000824:	2258      	movs	r2, #88	; 0x58
 8000826:	4618      	mov	r0, r3
 8000828:	f019 f9e7 	bl	8019bfa <memcpy>
	data.willFlag = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	77fb      	strb	r3, [r7, #31]
	data.MQTTVersion = 3;
 8000830:	2303      	movs	r3, #3
 8000832:	733b      	strb	r3, [r7, #12]
	data.clientID.cstring = "STM32F7";
 8000834:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <MqttConnectBroker+0xdc>)
 8000836:	613b      	str	r3, [r7, #16]
	data.username.cstring = "STM32F7";
 8000838:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <MqttConnectBroker+0xdc>)
 800083a:	647b      	str	r3, [r7, #68]	; 0x44
	data.password.cstring = "";
 800083c:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MqttConnectBroker+0xe0>)
 800083e:	653b      	str	r3, [r7, #80]	; 0x50
	data.keepAliveInterval = 60;
 8000840:	233c      	movs	r3, #60	; 0x3c
 8000842:	83bb      	strh	r3, [r7, #28]
	data.cleansession = 1;
 8000844:	2301      	movs	r3, #1
 8000846:	77bb      	strb	r3, [r7, #30]

	ret = MQTTConnect(&mqttClient, &data);
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	4619      	mov	r1, r3
 800084c:	4816      	ldr	r0, [pc, #88]	; (80008a8 <MqttConnectBroker+0xd4>)
 800084e:	f017 ff97 	bl	8018780 <MQTTConnect>
 8000852:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 8000854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000856:	2b00      	cmp	r3, #0
 8000858:	d004      	beq.n	8000864 <MqttConnectBroker+0x90>
	{
		printf("MQTTConnect failed.\n");
 800085a:	4817      	ldr	r0, [pc, #92]	; (80008b8 <MqttConnectBroker+0xe4>)
 800085c:	f019 fa54 	bl	8019d08 <puts>
		return ret;
 8000860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000862:	e012      	b.n	800088a <MqttConnectBroker+0xb6>
	}

	ret = MQTTSubscribe(&mqttClient, "test", QOS0, MqttMessageArrived);
 8000864:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MqttConnectBroker+0xe8>)
 8000866:	2200      	movs	r2, #0
 8000868:	4915      	ldr	r1, [pc, #84]	; (80008c0 <MqttConnectBroker+0xec>)
 800086a:	480f      	ldr	r0, [pc, #60]	; (80008a8 <MqttConnectBroker+0xd4>)
 800086c:	f018 f891 	bl	8018992 <MQTTSubscribe>
 8000870:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 8000872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000874:	2b00      	cmp	r3, #0
 8000876:	d004      	beq.n	8000882 <MqttConnectBroker+0xae>
	{
		printf("MQTTSubscribe failed.\n");
 8000878:	4812      	ldr	r0, [pc, #72]	; (80008c4 <MqttConnectBroker+0xf0>)
 800087a:	f019 fa45 	bl	8019d08 <puts>
		return ret;
 800087e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000880:	e003      	b.n	800088a <MqttConnectBroker+0xb6>
	}

	printf("MQTT_ConnectBroker O.K.\n");
 8000882:	4811      	ldr	r0, [pc, #68]	; (80008c8 <MqttConnectBroker+0xf4>)
 8000884:	f019 fa40 	bl	8019d08 <puts>
	return MQTT_SUCCESS;
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3760      	adds	r7, #96	; 0x60
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20008810 	.word	0x20008810
 8000898:	0801ac3c 	.word	0x0801ac3c
 800089c:	0801ac48 	.word	0x0801ac48
 80008a0:	20009024 	.word	0x20009024
 80008a4:	20008c20 	.word	0x20008c20
 80008a8:	200087a8 	.word	0x200087a8
 80008ac:	0801acb0 	.word	0x0801acb0
 80008b0:	0801ac60 	.word	0x0801ac60
 80008b4:	0801ac68 	.word	0x0801ac68
 80008b8:	0801ac6c 	.word	0x0801ac6c
 80008bc:	080008cd 	.word	0x080008cd
 80008c0:	0801ac34 	.word	0x0801ac34
 80008c4:	0801ac80 	.word	0x0801ac80
 80008c8:	0801ac98 	.word	0x0801ac98

080008cc <MqttMessageArrived>:

void MqttMessageArrived(MessageData* msg)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin); //toggle pin when new message arrived
 80008d4:	2180      	movs	r1, #128	; 0x80
 80008d6:	480f      	ldr	r0, [pc, #60]	; (8000914 <MqttMessageArrived+0x48>)
 80008d8:	f001 ff4b 	bl	8002772 <HAL_GPIO_TogglePin>

	MQTTMessage* message = msg->message;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	60fb      	str	r3, [r7, #12]
	memset(msgBuffer, 0, sizeof(msgBuffer));
 80008e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008e6:	2100      	movs	r1, #0
 80008e8:	480b      	ldr	r0, [pc, #44]	; (8000918 <MqttMessageArrived+0x4c>)
 80008ea:	f019 f991 	bl	8019c10 <memset>
	memcpy(msgBuffer, message->payload,message->payloadlen);
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	6899      	ldr	r1, [r3, #8]
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	461a      	mov	r2, r3
 80008f8:	4807      	ldr	r0, [pc, #28]	; (8000918 <MqttMessageArrived+0x4c>)
 80008fa:	f019 f97e 	bl	8019bfa <memcpy>

	printf("MQTT MSG[%d]:%s\n", (int)message->payloadlen, msgBuffer);
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	68db      	ldr	r3, [r3, #12]
 8000902:	4a05      	ldr	r2, [pc, #20]	; (8000918 <MqttMessageArrived+0x4c>)
 8000904:	4619      	mov	r1, r3
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MqttMessageArrived+0x50>)
 8000908:	f019 f98a 	bl	8019c20 <iprintf>
}
 800090c:	bf00      	nop
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40020400 	.word	0x40020400
 8000918:	20008820 	.word	0x20008820
 800091c:	0801ad08 	.word	0x0801ad08

08000920 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <MX_GPIO_Init+0xa8>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a23      	ldr	r2, [pc, #140]	; (80009c8 <MX_GPIO_Init+0xa8>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <MX_GPIO_Init+0xa8>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094e:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <MX_GPIO_Init+0xa8>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a1d      	ldr	r2, [pc, #116]	; (80009c8 <MX_GPIO_Init+0xa8>)
 8000954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_GPIO_Init+0xa8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <MX_GPIO_Init+0xa8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a17      	ldr	r2, [pc, #92]	; (80009c8 <MX_GPIO_Init+0xa8>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_GPIO_Init+0xa8>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_GPIO_Init+0xa8>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a11      	ldr	r2, [pc, #68]	; (80009c8 <MX_GPIO_Init+0xa8>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_GPIO_Init+0xa8>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f244 0181 	movw	r1, #16513	; 0x4081
 800099c:	480b      	ldr	r0, [pc, #44]	; (80009cc <MX_GPIO_Init+0xac>)
 800099e:	f001 fecf 	bl	8002740 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 80009a2:	f244 0381 	movw	r3, #16513	; 0x4081
 80009a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_GPIO_Init+0xac>)
 80009bc:	f001 fd16 	bl	80023ec <HAL_GPIO_Init>

}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	; 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020400 	.word	0x40020400

080009d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d013      	beq.n	8000a10 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80009e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80009f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d00b      	beq.n	8000a10 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80009f8:	e000      	b.n	80009fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80009fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80009fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0f9      	beq.n	80009fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000a06:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	b2d2      	uxtb	r2, r2
 8000a0e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000a10:	687b      	ldr	r3, [r7, #4]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	60f8      	str	r0, [r7, #12]
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	e009      	b.n	8000a44 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	1c5a      	adds	r2, r3, #1
 8000a34:	60ba      	str	r2, [r7, #8]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ffc9 	bl	80009d0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	3301      	adds	r3, #1
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	697a      	ldr	r2, [r7, #20]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	dbf1      	blt.n	8000a30 <_write+0x12>
  }
  return len;
 8000a4c:	687b      	ldr	r3, [r7, #4]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5c:	f000 fa0f 	bl	8000e7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a60:	f000 f80c 	bl	8000a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a64:	f7ff ff5c 	bl	8000920 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  printf("Don't remove this printf to prevent hard fault.\r\n");
 8000a68:	4803      	ldr	r0, [pc, #12]	; (8000a78 <main+0x20>)
 8000a6a:	f019 f94d 	bl	8019d08 <puts>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000a6e:	f7ff fdfb 	bl	8000668 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000a72:	f003 fa93 	bl	8003f9c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <main+0x1e>
 8000a78:	0801ad1c 	.word	0x0801ad1c

08000a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b094      	sub	sp, #80	; 0x50
 8000a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	2234      	movs	r2, #52	; 0x34
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f019 f8c0 	bl	8019c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a90:	f107 0308 	add.w	r3, r7, #8
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000aa0:	f001 fe82 	bl	80027a8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa4:	4b2a      	ldr	r3, [pc, #168]	; (8000b50 <SystemClock_Config+0xd4>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	4a29      	ldr	r2, [pc, #164]	; (8000b50 <SystemClock_Config+0xd4>)
 8000aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aae:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab0:	4b27      	ldr	r3, [pc, #156]	; (8000b50 <SystemClock_Config+0xd4>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000abc:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <SystemClock_Config+0xd8>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a24      	ldr	r2, [pc, #144]	; (8000b54 <SystemClock_Config+0xd8>)
 8000ac2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <SystemClock_Config+0xd8>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000adc:	2310      	movs	r3, #16
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ae8:	2308      	movs	r3, #8
 8000aea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000aec:	23d8      	movs	r3, #216	; 0xd8
 8000aee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af0:	2302      	movs	r3, #2
 8000af2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000af4:	2302      	movs	r3, #2
 8000af6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 feb3 	bl	8002868 <HAL_RCC_OscConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b08:	f000 f844 	bl	8000b94 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b0c:	f001 fe5c 	bl	80027c8 <HAL_PWREx_EnableOverDrive>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b16:	f000 f83d 	bl	8000b94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1a:	230f      	movs	r3, #15
 8000b1c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b26:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b30:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000b32:	f107 0308 	add.w	r3, r7, #8
 8000b36:	2107      	movs	r1, #7
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f002 f943 	bl	8002dc4 <HAL_RCC_ClockConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000b44:	f000 f826 	bl	8000b94 <Error_Handler>
  }
}
 8000b48:	bf00      	nop
 8000b4a:	3750      	adds	r7, #80	; 0x50
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40007000 	.word	0x40007000

08000b58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a09      	ldr	r2, [pc, #36]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d101      	bne.n	8000b6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b6a:	f000 f995 	bl	8000e98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6) {
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a06      	ldr	r2, [pc, #24]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d104      	bne.n	8000b82 <HAL_TIM_PeriodElapsedCallback+0x2a>
      MilliTimer++;
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000b80:	6013      	str	r3, [r2, #0]
    }

  /* USER CODE END Callback 1 */
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40001000 	.word	0x40001000
 8000b90:	2000fd84 	.word	0x2000fd84

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	210f      	movs	r1, #15
 8000bde:	f06f 0001 	mvn.w	r0, #1
 8000be2:	f000 fa53 	bl	800108c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08c      	sub	sp, #48	; 0x30
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000c04:	2200      	movs	r2, #0
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	2036      	movs	r0, #54	; 0x36
 8000c0a:	f000 fa3f 	bl	800108c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000c0e:	2036      	movs	r0, #54	; 0x36
 8000c10:	f000 fa58 	bl	80010c4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c14:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <HAL_InitTick+0xa0>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	4a1e      	ldr	r2, [pc, #120]	; (8000c94 <HAL_InitTick+0xa0>)
 8000c1a:	f043 0310 	orr.w	r3, r3, #16
 8000c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c20:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <HAL_InitTick+0xa0>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c24:	f003 0310 	and.w	r3, r3, #16
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c2c:	f107 0210 	add.w	r2, r7, #16
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4611      	mov	r1, r2
 8000c36:	4618      	mov	r0, r3
 8000c38:	f002 fa82 	bl	8003140 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c3c:	f002 fa6c 	bl	8003118 <HAL_RCC_GetPCLK1Freq>
 8000c40:	4603      	mov	r3, r0
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c48:	4a13      	ldr	r2, [pc, #76]	; (8000c98 <HAL_InitTick+0xa4>)
 8000c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4e:	0c9b      	lsrs	r3, r3, #18
 8000c50:	3b01      	subs	r3, #1
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <HAL_InitTick+0xa8>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <HAL_InitTick+0xac>)
 8000c58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <HAL_InitTick+0xa8>)
 8000c5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c60:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c62:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <HAL_InitTick+0xa8>)
 8000c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c66:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <HAL_InitTick+0xa8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <HAL_InitTick+0xa8>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c74:	4809      	ldr	r0, [pc, #36]	; (8000c9c <HAL_InitTick+0xa8>)
 8000c76:	f002 fa95 	bl	80031a4 <HAL_TIM_Base_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d104      	bne.n	8000c8a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c80:	4806      	ldr	r0, [pc, #24]	; (8000c9c <HAL_InitTick+0xa8>)
 8000c82:	f002 fac5 	bl	8003210 <HAL_TIM_Base_Start_IT>
 8000c86:	4603      	mov	r3, r0
 8000c88:	e000      	b.n	8000c8c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3730      	adds	r7, #48	; 0x30
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40023800 	.word	0x40023800
 8000c98:	431bde83 	.word	0x431bde83
 8000c9c:	20009428 	.word	0x20009428
 8000ca0:	40001000 	.word	0x40001000

08000ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <HardFault_Handler+0x4>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <MemManage_Handler+0x4>

08000cbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <BusFault_Handler+0x4>

08000cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <UsageFault_Handler+0x4>

08000cca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <TIM6_DAC_IRQHandler+0x10>)
 8000cde:	f002 fac1 	bl	8003264 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20009428 	.word	0x20009428

08000cec <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <ETH_IRQHandler+0x10>)
 8000cf2:	f000 fdd9 	bl	80018a8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2000ad88 	.word	0x2000ad88

08000d00 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	e00a      	b.n	8000d28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d12:	f3af 8000 	nop.w
 8000d16:	4601      	mov	r1, r0
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	1c5a      	adds	r2, r3, #1
 8000d1c:	60ba      	str	r2, [r7, #8]
 8000d1e:	b2ca      	uxtb	r2, r1
 8000d20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3301      	adds	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	dbf0      	blt.n	8000d12 <_read+0x12>
	}

return len;
 8000d30:	687b      	ldr	r3, [r7, #4]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
	return -1;
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d62:	605a      	str	r2, [r3, #4]
	return 0;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <_isatty>:

int _isatty(int file)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
	return 1;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
	return 0;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <_sbrk+0x50>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d102      	bne.n	8000dba <_sbrk+0x16>
		heap_end = &end;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <_sbrk+0x50>)
 8000db6:	4a10      	ldr	r2, [pc, #64]	; (8000df8 <_sbrk+0x54>)
 8000db8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <_sbrk+0x50>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <_sbrk+0x50>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	466a      	mov	r2, sp
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d905      	bls.n	8000dda <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <_sbrk+0x58>)
 8000dd0:	220c      	movs	r2, #12
 8000dd2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd8:	e006      	b.n	8000de8 <_sbrk+0x44>
	}

	heap_end += incr;
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <_sbrk+0x50>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <_sbrk+0x50>)
 8000de4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	20000460 	.word	0x20000460
 8000df8:	2000fd88 	.word	0x2000fd88
 8000dfc:	2000fd7c 	.word	0x2000fd7c

08000e00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <SystemInit+0x28>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0a:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <SystemInit+0x28>)
 8000e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <SystemInit+0x28>)
 8000e16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e1a:	609a      	str	r2, [r3, #8]
#endif
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e32:	e003      	b.n	8000e3c <LoopCopyDataInit>

08000e34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e3a:	3104      	adds	r1, #4

08000e3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e3c:	480b      	ldr	r0, [pc, #44]	; (8000e6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e44:	d3f6      	bcc.n	8000e34 <CopyDataInit>
  ldr  r2, =_sbss
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e48:	e002      	b.n	8000e50 <LoopFillZerobss>

08000e4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e4c:	f842 3b04 	str.w	r3, [r2], #4

08000e50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e54:	d3f9      	bcc.n	8000e4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e56:	f7ff ffd3 	bl	8000e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f018 fe7b 	bl	8019b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5e:	f7ff fdfb 	bl	8000a58 <main>
  bx  lr    
 8000e62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e64:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000e68:	0801ee60 	.word	0x0801ee60
  ldr  r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e70:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8000e74:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 8000e78:	2000fd88 	.word	0x2000fd88

08000e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC_IRQHandler>

08000e7e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e82:	2003      	movs	r0, #3
 8000e84:	f000 f8f7 	bl	8001076 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f7ff feb3 	bl	8000bf4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e8e:	f7ff fe89 	bl	8000ba4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20009468 	.word	0x20009468

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20009468 	.word	0x20009468

08000ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff ffee 	bl	8000ec0 <HAL_GetTick>
 8000ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d005      	beq.n	8000efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <HAL_Delay+0x40>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000efe:	bf00      	nop
 8000f00:	f7ff ffde 	bl	8000ec0 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8f7      	bhi.n	8000f00 <HAL_Delay+0x28>
  {
  }
}
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000008 	.word	0x20000008

08000f1c <__NVIC_SetPriorityGrouping>:
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <__NVIC_SetPriorityGrouping+0x40>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f46:	4313      	orrs	r3, r2
 8000f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4a:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <__NVIC_SetPriorityGrouping+0x40>)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	60d3      	str	r3, [r2, #12]
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00
 8000f60:	05fa0000 	.word	0x05fa0000

08000f64 <__NVIC_GetPriorityGrouping>:
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <__NVIC_GetPriorityGrouping+0x18>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	f003 0307 	and.w	r3, r3, #7
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_EnableIRQ>:
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	db0b      	blt.n	8000faa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f003 021f 	and.w	r2, r3, #31
 8000f98:	4907      	ldr	r1, [pc, #28]	; (8000fb8 <__NVIC_EnableIRQ+0x38>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	095b      	lsrs	r3, r3, #5
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000e100 	.word	0xe000e100

08000fbc <__NVIC_SetPriority>:
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db0a      	blt.n	8000fe6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	490c      	ldr	r1, [pc, #48]	; (8001008 <__NVIC_SetPriority+0x4c>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	0112      	lsls	r2, r2, #4
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	440b      	add	r3, r1
 8000fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fe4:	e00a      	b.n	8000ffc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4908      	ldr	r1, [pc, #32]	; (800100c <__NVIC_SetPriority+0x50>)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	3b04      	subs	r3, #4
 8000ff4:	0112      	lsls	r2, r2, #4
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	761a      	strb	r2, [r3, #24]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000e100 	.word	0xe000e100
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <NVIC_EncodePriority>:
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	; 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f1c3 0307 	rsb	r3, r3, #7
 800102a:	2b04      	cmp	r3, #4
 800102c:	bf28      	it	cs
 800102e:	2304      	movcs	r3, #4
 8001030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3304      	adds	r3, #4
 8001036:	2b06      	cmp	r3, #6
 8001038:	d902      	bls.n	8001040 <NVIC_EncodePriority+0x30>
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3b03      	subs	r3, #3
 800103e:	e000      	b.n	8001042 <NVIC_EncodePriority+0x32>
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	f04f 32ff 	mov.w	r2, #4294967295
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43da      	mvns	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	401a      	ands	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001058:	f04f 31ff 	mov.w	r1, #4294967295
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	43d9      	mvns	r1, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	4313      	orrs	r3, r2
}
 800106a:	4618      	mov	r0, r3
 800106c:	3724      	adds	r7, #36	; 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ff4c 	bl	8000f1c <__NVIC_SetPriorityGrouping>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
 8001098:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800109e:	f7ff ff61 	bl	8000f64 <__NVIC_GetPriorityGrouping>
 80010a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	68b9      	ldr	r1, [r7, #8]
 80010a8:	6978      	ldr	r0, [r7, #20]
 80010aa:	f7ff ffb1 	bl	8001010 <NVIC_EncodePriority>
 80010ae:	4602      	mov	r2, r0
 80010b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b4:	4611      	mov	r1, r2
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ff80 	bl	8000fbc <__NVIC_SetPriority>
}
 80010bc:	bf00      	nop
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff54 	bl	8000f80 <__NVIC_EnableIRQ>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80010f0:	4ba9      	ldr	r3, [pc, #676]	; (8001398 <HAL_ETH_Init+0x2b8>)
 80010f2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e183      	b.n	800140e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d106      	bne.n	8001120 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f002 fb18 	bl	8003750 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001120:	4b9e      	ldr	r3, [pc, #632]	; (800139c <HAL_ETH_Init+0x2bc>)
 8001122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001124:	4a9d      	ldr	r2, [pc, #628]	; (800139c <HAL_ETH_Init+0x2bc>)
 8001126:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112a:	6453      	str	r3, [r2, #68]	; 0x44
 800112c:	4b9b      	ldr	r3, [pc, #620]	; (800139c <HAL_ETH_Init+0x2bc>)
 800112e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001130:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001138:	4b99      	ldr	r3, [pc, #612]	; (80013a0 <HAL_ETH_Init+0x2c0>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	4a98      	ldr	r2, [pc, #608]	; (80013a0 <HAL_ETH_Init+0x2c0>)
 800113e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001142:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001144:	4b96      	ldr	r3, [pc, #600]	; (80013a0 <HAL_ETH_Init+0x2c0>)
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	4994      	ldr	r1, [pc, #592]	; (80013a0 <HAL_ETH_Init+0x2c0>)
 800114e:	4313      	orrs	r3, r2
 8001150:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f042 0201 	orr.w	r2, r2, #1
 8001164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001168:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800116a:	f7ff fea9 	bl	8000ec0 <HAL_GetTick>
 800116e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001170:	e011      	b.n	8001196 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001172:	f7ff fea5 	bl	8000ec0 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001180:	d909      	bls.n	8001196 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2203      	movs	r2, #3
 8001186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e13b      	b.n	800140e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1e4      	bne.n	8001172 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f023 031c 	bic.w	r3, r3, #28
 80011b6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80011b8:	f001 ffa2 	bl	8003100 <HAL_RCC_GetHCLKFreq>
 80011bc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	4a78      	ldr	r2, [pc, #480]	; (80013a4 <HAL_ETH_Init+0x2c4>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d908      	bls.n	80011d8 <HAL_ETH_Init+0xf8>
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	4a77      	ldr	r2, [pc, #476]	; (80013a8 <HAL_ETH_Init+0x2c8>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d804      	bhi.n	80011d8 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	f043 0308 	orr.w	r3, r3, #8
 80011d4:	61fb      	str	r3, [r7, #28]
 80011d6:	e027      	b.n	8001228 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	4a73      	ldr	r2, [pc, #460]	; (80013a8 <HAL_ETH_Init+0x2c8>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d908      	bls.n	80011f2 <HAL_ETH_Init+0x112>
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	4a72      	ldr	r2, [pc, #456]	; (80013ac <HAL_ETH_Init+0x2cc>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d804      	bhi.n	80011f2 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f043 030c 	orr.w	r3, r3, #12
 80011ee:	61fb      	str	r3, [r7, #28]
 80011f0:	e01a      	b.n	8001228 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	4a6d      	ldr	r2, [pc, #436]	; (80013ac <HAL_ETH_Init+0x2cc>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d903      	bls.n	8001202 <HAL_ETH_Init+0x122>
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	4a6c      	ldr	r2, [pc, #432]	; (80013b0 <HAL_ETH_Init+0x2d0>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d911      	bls.n	8001226 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	4a6a      	ldr	r2, [pc, #424]	; (80013b0 <HAL_ETH_Init+0x2d0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d908      	bls.n	800121c <HAL_ETH_Init+0x13c>
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	4a69      	ldr	r2, [pc, #420]	; (80013b4 <HAL_ETH_Init+0x2d4>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d804      	bhi.n	800121c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	e005      	b.n	8001228 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f043 0310 	orr.w	r3, r3, #16
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	e000      	b.n	8001228 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001226:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001230:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001234:	2100      	movs	r1, #0
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 fc19 	bl	8001a6e <HAL_ETH_WritePHYRegister>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00b      	beq.n	800125a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001246:	6939      	ldr	r1, [r7, #16]
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 fdcf 	bl	8001dec <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e0d9      	b.n	800140e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800125a:	20ff      	movs	r0, #255	; 0xff
 800125c:	f7ff fe3c 	bl	8000ed8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 80a7 	beq.w	80013b8 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800126a:	f7ff fe29 	bl	8000ec0 <HAL_GetTick>
 800126e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	461a      	mov	r2, r3
 8001276:	2101      	movs	r1, #1
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 fb90 	bl	800199e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800127e:	f7ff fe1f 	bl	8000ec0 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	f241 3288 	movw	r2, #5000	; 0x1388
 800128c:	4293      	cmp	r3, r2
 800128e:	d90f      	bls.n	80012b0 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001294:	6939      	ldr	r1, [r7, #16]
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f000 fda8 	bl	8001dec <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e0ae      	b.n	800140e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0da      	beq.n	8001270 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80012ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012be:	2100      	movs	r1, #0
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 fbd4 	bl	8001a6e <HAL_ETH_WritePHYRegister>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00b      	beq.n	80012e4 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80012d0:	6939      	ldr	r1, [r7, #16]
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 fd8a 	bl	8001dec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80012e0:	2301      	movs	r3, #1
 80012e2:	e094      	b.n	800140e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80012e4:	f7ff fdec 	bl	8000ec0 <HAL_GetTick>
 80012e8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	461a      	mov	r2, r3
 80012f0:	2101      	movs	r1, #1
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 fb53 	bl	800199e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80012f8:	f7ff fde2 	bl	8000ec0 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	f241 3288 	movw	r2, #5000	; 0x1388
 8001306:	4293      	cmp	r3, r2
 8001308:	d90f      	bls.n	800132a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800130e:	6939      	ldr	r1, [r7, #16]
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 fd6b 	bl	8001dec <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2201      	movs	r2, #1
 800131a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e071      	b.n	800140e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f003 0320 	and.w	r3, r3, #32
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0da      	beq.n	80012ea <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001334:	f107 030c 	add.w	r3, r7, #12
 8001338:	461a      	mov	r2, r3
 800133a:	211f      	movs	r1, #31
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f000 fb2e 	bl	800199e <HAL_ETH_ReadPHYRegister>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00b      	beq.n	8001360 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800134c:	6939      	ldr	r1, [r7, #16]
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 fd4c 	bl	8001dec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800135c:	2301      	movs	r3, #1
 800135e:	e056      	b.n	800140e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	2b00      	cmp	r3, #0
 8001368:	d004      	beq.n	8001374 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	e002      	b.n	800137a <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	e037      	b.n	80013fc <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	e032      	b.n	80013fc <HAL_ETH_Init+0x31c>
 8001396:	bf00      	nop
 8001398:	03938700 	.word	0x03938700
 800139c:	40023800 	.word	0x40023800
 80013a0:	40013800 	.word	0x40013800
 80013a4:	01312cff 	.word	0x01312cff
 80013a8:	02160ebf 	.word	0x02160ebf
 80013ac:	039386ff 	.word	0x039386ff
 80013b0:	05f5e0ff 	.word	0x05f5e0ff
 80013b4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	08db      	lsrs	r3, r3, #3
 80013be:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	085b      	lsrs	r3, r3, #1
 80013c6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80013c8:	4313      	orrs	r3, r2
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	2100      	movs	r1, #0
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 fb4c 	bl	8001a6e <HAL_ETH_WritePHYRegister>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d00b      	beq.n	80013f4 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80013e0:	6939      	ldr	r1, [r7, #16]
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 fd02 	bl	8001dec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2201      	movs	r2, #1
 80013ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e00c      	b.n	800140e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80013f4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80013f8:	f7ff fd6e 	bl	8000ed8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80013fc:	6939      	ldr	r1, [r7, #16]
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 fcf4 	bl	8001dec <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3720      	adds	r7, #32
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop

08001418 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001418:	b480      	push	{r7}
 800141a:	b087      	sub	sp, #28
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
 8001424:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001430:	2b01      	cmp	r3, #1
 8001432:	d101      	bne.n	8001438 <HAL_ETH_DMATxDescListInit+0x20>
 8001434:	2302      	movs	r3, #2
 8001436:	e052      	b.n	80014de <HAL_ETH_DMATxDescListInit+0xc6>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2202      	movs	r2, #2
 8001444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	e030      	b.n	80014b6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	015b      	lsls	r3, r3, #5
 8001458:	68ba      	ldr	r2, [r7, #8]
 800145a:	4413      	add	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001464:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800146c:	fb02 f303 	mul.w	r3, r2, r3
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	4413      	add	r3, r2
 8001474:	461a      	mov	r2, r3
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d105      	bne.n	800148e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	3b01      	subs	r3, #1
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	429a      	cmp	r2, r3
 8001496:	d208      	bcs.n	80014aa <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	3301      	adds	r3, #1
 800149c:	015b      	lsls	r3, r3, #5
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	4413      	add	r3, r2
 80014a2:	461a      	mov	r2, r3
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	e002      	b.n	80014b0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	3301      	adds	r3, #1
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d3ca      	bcc.n	8001454 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6819      	ldr	r1, [r3, #0]
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	f241 0310 	movw	r3, #4112	; 0x1010
 80014c8:	440b      	add	r3, r1
 80014ca:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	371c      	adds	r7, #28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b087      	sub	sp, #28
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001502:	2b01      	cmp	r3, #1
 8001504:	d101      	bne.n	800150a <HAL_ETH_DMARxDescListInit+0x20>
 8001506:	2302      	movs	r3, #2
 8001508:	e056      	b.n	80015b8 <HAL_ETH_DMARxDescListInit+0xce>
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2202      	movs	r2, #2
 8001516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	68ba      	ldr	r2, [r7, #8]
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	e034      	b.n	8001590 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	015b      	lsls	r3, r3, #5
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	4413      	add	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001536:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800153e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001546:	fb02 f303 	mul.w	r3, r2, r3
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	461a      	mov	r2, r3
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d105      	bne.n	8001568 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	3b01      	subs	r3, #1
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	429a      	cmp	r2, r3
 8001570:	d208      	bcs.n	8001584 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	3301      	adds	r3, #1
 8001576:	015b      	lsls	r3, r3, #5
 8001578:	68ba      	ldr	r2, [r7, #8]
 800157a:	4413      	add	r3, r2
 800157c:	461a      	mov	r2, r3
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	e002      	b.n	800158a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001584:	68ba      	ldr	r2, [r7, #8]
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	3301      	adds	r3, #1
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d3c6      	bcc.n	8001526 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6819      	ldr	r1, [r3, #0]
 800159c:	68ba      	ldr	r2, [r7, #8]
 800159e:	f241 030c 	movw	r3, #4108	; 0x100c
 80015a2:	440b      	add	r3, r1
 80015a4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	371c      	adds	r7, #28
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b087      	sub	sp, #28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_ETH_TransmitFrame+0x24>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e0cd      	b.n	8001784 <HAL_ETH_TransmitFrame+0x1c0>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2202      	movs	r2, #2
 80015f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d109      	bne.n	8001612 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800160e:	2301      	movs	r3, #1
 8001610:	e0b8      	b.n	8001784 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	da09      	bge.n	8001630 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2212      	movs	r2, #18
 8001620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e0a9      	b.n	8001784 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001636:	4293      	cmp	r3, r2
 8001638:	d915      	bls.n	8001666 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	4a54      	ldr	r2, [pc, #336]	; (8001790 <HAL_ETH_TransmitFrame+0x1cc>)
 800163e:	fba2 2303 	umull	r2, r3, r2, r3
 8001642:	0a9b      	lsrs	r3, r3, #10
 8001644:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	4b51      	ldr	r3, [pc, #324]	; (8001790 <HAL_ETH_TransmitFrame+0x1cc>)
 800164a:	fba3 1302 	umull	r1, r3, r3, r2
 800164e:	0a9b      	lsrs	r3, r3, #10
 8001650:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001654:	fb01 f303 	mul.w	r3, r1, r3
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d005      	beq.n	800166a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3301      	adds	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	e001      	b.n	800166a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001666:	2301      	movs	r3, #1
 8001668:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d11c      	bne.n	80016aa <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800167e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800168a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001696:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800169a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	461a      	mov	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80016a8:	e04b      	b.n	8001742 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	e044      	b.n	800173a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ba:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016be:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d107      	bne.n	80016d6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016d4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016de:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d116      	bne.n	8001718 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80016f8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	4a25      	ldr	r2, [pc, #148]	; (8001794 <HAL_ETH_TransmitFrame+0x1d0>)
 80016fe:	fb02 f203 	mul.w	r2, r2, r3
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	4413      	add	r3, r2
 8001706:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800170a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001716:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001726:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	461a      	mov	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	3301      	adds	r3, #1
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	429a      	cmp	r2, r3
 8001740:	d3b6      	bcc.n	80016b0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	f241 0314 	movw	r3, #4116	; 0x1014
 800174a:	4413      	add	r3, r2
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00d      	beq.n	8001772 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	f241 0314 	movw	r3, #4116	; 0x1014
 800175e:	4413      	add	r3, r2
 8001760:	2204      	movs	r2, #4
 8001762:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	f241 0304 	movw	r3, #4100	; 0x1004
 800176c:	4413      	add	r3, r2
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	371c      	adds	r7, #28
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	ac02b00b 	.word	0xac02b00b
 8001794:	fffffa0c 	.word	0xfffffa0c

08001798 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d101      	bne.n	80017b2 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e074      	b.n	800189c <HAL_ETH_GetReceivedFrame_IT+0x104>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2202      	movs	r2, #2
 80017be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80017c2:	e05a      	b.n	800187a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3301      	adds	r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017d8:	d10d      	bne.n	80017f6 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	461a      	mov	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	629a      	str	r2, [r3, #40]	; 0x28
 80017f4:	e041      	b.n	800187a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001800:	2b00      	cmp	r3, #0
 8001802:	d10b      	bne.n	800181c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001808:	1c5a      	adds	r2, r3, #1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	461a      	mov	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	629a      	str	r2, [r3, #40]	; 0x28
 800181a:	e02e      	b.n	800187a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001832:	2b01      	cmp	r3, #1
 8001834:	d103      	bne.n	800183e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	0c1b      	lsrs	r3, r3, #16
 8001846:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800184a:	1f1a      	subs	r2, r3, #4
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	461a      	mov	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	e010      	b.n	800189c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	db02      	blt.n	800188a <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b03      	cmp	r3, #3
 8001888:	d99c      	bls.n	80017c4 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
}
 800189c:	4618      	mov	r0, r3
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	f241 0314 	movw	r3, #4116	; 0x1014
 80018b8:	4413      	add	r3, r2
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c0:	2b40      	cmp	r3, #64	; 0x40
 80018c2:	d112      	bne.n	80018ea <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f001 ffe5 	bl	8003894 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	f241 0314 	movw	r3, #4116	; 0x1014
 80018d2:	4413      	add	r3, r2
 80018d4:	2240      	movs	r2, #64	; 0x40
 80018d6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80018e8:	e01b      	b.n	8001922 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	f241 0314 	movw	r3, #4116	; 0x1014
 80018f2:	4413      	add	r3, r2
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d111      	bne.n	8001922 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f839 	bl	8001976 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	f241 0314 	movw	r3, #4116	; 0x1014
 800190c:	4413      	add	r3, r2
 800190e:	2201      	movs	r2, #1
 8001910:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	f241 0314 	movw	r3, #4116	; 0x1014
 800192a:	4413      	add	r3, r2
 800192c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001930:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	f241 0314 	movw	r3, #4116	; 0x1014
 800193a:	4413      	add	r3, r2
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001946:	d112      	bne.n	800196e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 f81e 	bl	800198a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	f241 0314 	movw	r3, #4116	; 0x1014
 8001956:	4413      	add	r3, r2
 8001958:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800195c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	460b      	mov	r3, r1
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b82      	cmp	r3, #130	; 0x82
 80019be:	d101      	bne.n	80019c4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80019c0:	2302      	movs	r3, #2
 80019c2:	e050      	b.n	8001a66 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2282      	movs	r2, #130	; 0x82
 80019c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f003 031c 	and.w	r3, r3, #28
 80019da:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8a1b      	ldrh	r3, [r3, #16]
 80019e0:	02db      	lsls	r3, r3, #11
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80019ea:	897b      	ldrh	r3, [r7, #10]
 80019ec:	019b      	lsls	r3, r3, #6
 80019ee:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f023 0302 	bic.w	r3, r3, #2
 80019fe:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a10:	f7ff fa56 	bl	8000ec0 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a16:	e015      	b.n	8001a44 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001a18:	f7ff fa52 	bl	8000ec0 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a26:	d309      	bcc.n	8001a3c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e014      	b.n	8001a66 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1e4      	bne.n	8001a18 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	461a      	mov	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b086      	sub	sp, #24
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	60f8      	str	r0, [r7, #12]
 8001a76:	460b      	mov	r3, r1
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b42      	cmp	r3, #66	; 0x42
 8001a8e:	d101      	bne.n	8001a94 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001a90:	2302      	movs	r3, #2
 8001a92:	e04e      	b.n	8001b32 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2242      	movs	r2, #66	; 0x42
 8001a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f003 031c 	and.w	r3, r3, #28
 8001aaa:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8a1b      	ldrh	r3, [r3, #16]
 8001ab0:	02db      	lsls	r3, r3, #11
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001aba:	897b      	ldrh	r3, [r7, #10]
 8001abc:	019b      	lsls	r3, r3, #6
 8001abe:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f043 0302 	orr.w	r3, r3, #2
 8001ace:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001aea:	f7ff f9e9 	bl	8000ec0 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001af0:	e015      	b.n	8001b1e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001af2:	f7ff f9e5 	bl	8000ec0 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b00:	d309      	bcc.n	8001b16 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e00d      	b.n	8001b32 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1e4      	bne.n	8001af2 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_ETH_Start+0x16>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e01f      	b.n	8001b90 <HAL_ETH_Start+0x56>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 fb45 	bl	80021f0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 fb7c 	bl	8002264 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 fc13 	bl	8002398 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 fbb0 	bl	80022d8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 fbdd 	bl	8002338 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d101      	bne.n	8001bae <HAL_ETH_Stop+0x16>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e01f      	b.n	8001bee <HAL_ETH_Stop+0x56>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2202      	movs	r2, #2
 8001bba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 fba2 	bl	8002308 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 fbcf 	bl	8002368 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 fb67 	bl	800229e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 fbe1 	bl	8002398 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 fb27 	bl	800222a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_ETH_ConfigMAC+0x1c>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e0e4      	b.n	8001dde <HAL_ETH_ConfigMAC+0x1e6>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 80b1 	beq.w	8001d8e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	4b6c      	ldr	r3, [pc, #432]	; (8001de8 <HAL_ETH_ConfigMAC+0x1f0>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001c44:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001c4a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001c50:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001c56:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001c5c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001c62:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001c68:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001c6e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001c74:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001c7a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001c80:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001c86:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f7ff f91a 	bl	8000ed8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001cb4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001cba:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001cc0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001cc6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001ccc:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001cd2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001cde:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ce0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cea:	2001      	movs	r0, #1
 8001cec:	f7ff f8f4 	bl	8000ed8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d00:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d0a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d22:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001d28:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001d2e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001d34:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001d3a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001d40:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d58:	2001      	movs	r0, #1
 8001d5a:	f7ff f8bd 	bl	8000ed8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d7e:	2001      	movs	r0, #1
 8001d80:	f7ff f8aa 	bl	8000ed8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	61da      	str	r2, [r3, #28]
 8001d8c:	e01e      	b.n	8001dcc <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001d9c:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	f7ff f88a 	bl	8000ed8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	ff20810f 	.word	0xff20810f

08001dec <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b0b0      	sub	sp, #192	; 0xc0
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d007      	beq.n	8001e12 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e08:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e10:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d103      	bne.n	8001e3a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e36:	663b      	str	r3, [r7, #96]	; 0x60
 8001e38:	e001      	b.n	8001e3e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001e3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e42:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001e58:	2340      	movs	r3, #64	; 0x40
 8001e5a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001ec0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ec4:	4bab      	ldr	r3, [pc, #684]	; (8002174 <ETH_MACDMAConfig+0x388>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001ecc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001ed0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001ed4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001ed8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001ede:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001ee0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001ee2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001ee6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001eec:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001ef0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001ef2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001ef4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001ef6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001ef8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001efc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001efe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001f00:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001f02:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f06:	4313      	orrs	r3, r2
 8001f08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f14:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f20:	2001      	movs	r0, #1
 8001f22:	f7fe ffd9 	bl	8000ed8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f2e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f30:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001f32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f34:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001f36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001f38:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001f3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001f3e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001f40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001f44:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001f46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001f4a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001f4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001f50:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001f54:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001f5c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f5e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	f7fe ffb4 	bl	8000ed8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f78:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f82:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001f8c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001f98:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f9c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001fa6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001faa:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001fac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001fb0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001fb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001fb6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001fb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001fbc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001fc2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001fc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001fc8:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001fca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fdc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fe8:	2001      	movs	r0, #1
 8001fea:	f7fe ff75 	bl	8000ed8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ff6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001ff8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001ffc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002012:	2001      	movs	r0, #1
 8002014:	f7fe ff60 	bl	8000ed8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002020:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002026:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800202a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800202c:	2300      	movs	r3, #0
 800202e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002030:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002034:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002036:	2300      	movs	r3, #0
 8002038:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002042:	2300      	movs	r3, #0
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002046:	2304      	movs	r3, #4
 8002048:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800204a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800204e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002050:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002054:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002056:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800205a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800205c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002060:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002062:	2380      	movs	r3, #128	; 0x80
 8002064:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002066:	2300      	movs	r3, #0
 8002068:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800206a:	2300      	movs	r3, #0
 800206c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	f241 0318 	movw	r3, #4120	; 0x1018
 8002076:	4413      	add	r3, r2
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800207e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002082:	4b3d      	ldr	r3, [pc, #244]	; (8002178 <ETH_MACDMAConfig+0x38c>)
 8002084:	4013      	ands	r3, r2
 8002086:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800208a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800208c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800208e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002090:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002092:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002094:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002096:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002098:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800209a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800209c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800209e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80020a0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80020a2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80020a6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80020a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80020aa:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	f241 0318 	movw	r3, #4120	; 0x1018
 80020be:	4413      	add	r3, r2
 80020c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020c4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	f241 0318 	movw	r3, #4120	; 0x1018
 80020ce:	4413      	add	r3, r2
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020d6:	2001      	movs	r0, #1
 80020d8:	f7fe fefe 	bl	8000ed8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	f241 0318 	movw	r3, #4120	; 0x1018
 80020e4:	4413      	add	r3, r2
 80020e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020ea:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80020ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80020ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80020f0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80020f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80020f4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80020f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80020f8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80020fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80020fc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80020fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002100:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002102:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002106:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002114:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002124:	2001      	movs	r0, #1
 8002126:	f7fe fed7 	bl	8000ed8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002132:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002136:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d10d      	bne.n	800215c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	f241 031c 	movw	r3, #4124	; 0x101c
 8002148:	4413      	add	r3, r2
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6811      	ldr	r1, [r2, #0]
 8002150:	4a0a      	ldr	r2, [pc, #40]	; (800217c <ETH_MACDMAConfig+0x390>)
 8002152:	431a      	orrs	r2, r3
 8002154:	f241 031c 	movw	r3, #4124	; 0x101c
 8002158:	440b      	add	r3, r1
 800215a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	461a      	mov	r2, r3
 8002162:	2100      	movs	r1, #0
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f80b 	bl	8002180 <ETH_MACAddressConfig>
}
 800216a:	bf00      	nop
 800216c:	37c0      	adds	r7, #192	; 0xc0
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	ff20810f 	.word	0xff20810f
 8002178:	f8de3f23 	.word	0xf8de3f23
 800217c:	00010040 	.word	0x00010040

08002180 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3305      	adds	r3, #5
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	021b      	lsls	r3, r3, #8
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	3204      	adds	r2, #4
 8002198:	7812      	ldrb	r2, [r2, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <ETH_MACAddressConfig+0x68>)
 80021a2:	4413      	add	r3, r2
 80021a4:	461a      	mov	r2, r3
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3303      	adds	r3, #3
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	061a      	lsls	r2, r3, #24
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3302      	adds	r3, #2
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	041b      	lsls	r3, r3, #16
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3301      	adds	r3, #1
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	4313      	orrs	r3, r2
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	7812      	ldrb	r2, [r2, #0]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <ETH_MACAddressConfig+0x6c>)
 80021d2:	4413      	add	r3, r2
 80021d4:	461a      	mov	r2, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	6013      	str	r3, [r2, #0]
}
 80021da:	bf00      	nop
 80021dc:	371c      	adds	r7, #28
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40028040 	.word	0x40028040
 80021ec:	40028044 	.word	0x40028044

080021f0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0208 	orr.w	r2, r2, #8
 800220a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002214:	2001      	movs	r0, #1
 8002216:	f7fe fe5f 	bl	8000ed8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	601a      	str	r2, [r3, #0]
}
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0208 	bic.w	r2, r2, #8
 8002244:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800224e:	2001      	movs	r0, #1
 8002250:	f7fe fe42 	bl	8000ed8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	601a      	str	r2, [r3, #0]
}
 800225c:	bf00      	nop
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0204 	orr.w	r2, r2, #4
 800227e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002288:	2001      	movs	r0, #1
 800228a:	f7fe fe25 	bl	8000ed8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	601a      	str	r2, [r3, #0]
}
 8002296:	bf00      	nop
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0204 	bic.w	r2, r2, #4
 80022b8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022c2:	2001      	movs	r0, #1
 80022c4:	f7fe fe08 	bl	8000ed8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	601a      	str	r2, [r3, #0]
}
 80022d0:	bf00      	nop
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	f241 0318 	movw	r3, #4120	; 0x1018
 80022e8:	4413      	add	r3, r2
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6811      	ldr	r1, [r2, #0]
 80022f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80022f4:	f241 0318 	movw	r3, #4120	; 0x1018
 80022f8:	440b      	add	r3, r1
 80022fa:	601a      	str	r2, [r3, #0]
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	f241 0318 	movw	r3, #4120	; 0x1018
 8002318:	4413      	add	r3, r2
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6811      	ldr	r1, [r2, #0]
 8002320:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002324:	f241 0318 	movw	r3, #4120	; 0x1018
 8002328:	440b      	add	r3, r1
 800232a:	601a      	str	r2, [r3, #0]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	f241 0318 	movw	r3, #4120	; 0x1018
 8002348:	4413      	add	r3, r2
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6811      	ldr	r1, [r2, #0]
 8002350:	f043 0202 	orr.w	r2, r3, #2
 8002354:	f241 0318 	movw	r3, #4120	; 0x1018
 8002358:	440b      	add	r3, r1
 800235a:	601a      	str	r2, [r3, #0]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	f241 0318 	movw	r3, #4120	; 0x1018
 8002378:	4413      	add	r3, r2
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6811      	ldr	r1, [r2, #0]
 8002380:	f023 0202 	bic.w	r2, r3, #2
 8002384:	f241 0318 	movw	r3, #4120	; 0x1018
 8002388:	440b      	add	r3, r1
 800238a:	601a      	str	r2, [r3, #0]
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	f241 0318 	movw	r3, #4120	; 0x1018
 80023ac:	4413      	add	r3, r2
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6811      	ldr	r1, [r2, #0]
 80023b4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023b8:	f241 0318 	movw	r3, #4120	; 0x1018
 80023bc:	440b      	add	r3, r1
 80023be:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	f241 0318 	movw	r3, #4120	; 0x1018
 80023c8:	4413      	add	r3, r2
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023ce:	2001      	movs	r0, #1
 80023d0:	f7fe fd82 	bl	8000ed8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6819      	ldr	r1, [r3, #0]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	f241 0318 	movw	r3, #4120	; 0x1018
 80023de:	440b      	add	r3, r1
 80023e0:	601a      	str	r2, [r3, #0]
}
 80023e2:	bf00      	nop
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	; 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002402:	2300      	movs	r3, #0
 8002404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	e175      	b.n	80026f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800240c:	2201      	movs	r2, #1
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	429a      	cmp	r2, r3
 8002426:	f040 8164 	bne.w	80026f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d00b      	beq.n	800244a <HAL_GPIO_Init+0x5e>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d007      	beq.n	800244a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800243e:	2b11      	cmp	r3, #17
 8002440:	d003      	beq.n	800244a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b12      	cmp	r3, #18
 8002448:	d130      	bne.n	80024ac <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	2203      	movs	r2, #3
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002480:	2201      	movs	r2, #1
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 0201 	and.w	r2, r3, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	2203      	movs	r2, #3
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x100>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b12      	cmp	r3, #18
 80024ea:	d123      	bne.n	8002534 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	08da      	lsrs	r2, r3, #3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3208      	adds	r2, #8
 80024f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	220f      	movs	r2, #15
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	08da      	lsrs	r2, r3, #3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3208      	adds	r2, #8
 800252e:	69b9      	ldr	r1, [r7, #24]
 8002530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	2203      	movs	r2, #3
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0203 	and.w	r2, r3, #3
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 80be 	beq.w	80026f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002576:	4b65      	ldr	r3, [pc, #404]	; (800270c <HAL_GPIO_Init+0x320>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	4a64      	ldr	r2, [pc, #400]	; (800270c <HAL_GPIO_Init+0x320>)
 800257c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002580:	6453      	str	r3, [r2, #68]	; 0x44
 8002582:	4b62      	ldr	r3, [pc, #392]	; (800270c <HAL_GPIO_Init+0x320>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800258e:	4a60      	ldr	r2, [pc, #384]	; (8002710 <HAL_GPIO_Init+0x324>)
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	3302      	adds	r3, #2
 8002596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	220f      	movs	r2, #15
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a57      	ldr	r2, [pc, #348]	; (8002714 <HAL_GPIO_Init+0x328>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d037      	beq.n	800262a <HAL_GPIO_Init+0x23e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a56      	ldr	r2, [pc, #344]	; (8002718 <HAL_GPIO_Init+0x32c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d031      	beq.n	8002626 <HAL_GPIO_Init+0x23a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a55      	ldr	r2, [pc, #340]	; (800271c <HAL_GPIO_Init+0x330>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d02b      	beq.n	8002622 <HAL_GPIO_Init+0x236>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a54      	ldr	r2, [pc, #336]	; (8002720 <HAL_GPIO_Init+0x334>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d025      	beq.n	800261e <HAL_GPIO_Init+0x232>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a53      	ldr	r2, [pc, #332]	; (8002724 <HAL_GPIO_Init+0x338>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d01f      	beq.n	800261a <HAL_GPIO_Init+0x22e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a52      	ldr	r2, [pc, #328]	; (8002728 <HAL_GPIO_Init+0x33c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d019      	beq.n	8002616 <HAL_GPIO_Init+0x22a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a51      	ldr	r2, [pc, #324]	; (800272c <HAL_GPIO_Init+0x340>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <HAL_GPIO_Init+0x226>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a50      	ldr	r2, [pc, #320]	; (8002730 <HAL_GPIO_Init+0x344>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00d      	beq.n	800260e <HAL_GPIO_Init+0x222>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4f      	ldr	r2, [pc, #316]	; (8002734 <HAL_GPIO_Init+0x348>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d007      	beq.n	800260a <HAL_GPIO_Init+0x21e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4e      	ldr	r2, [pc, #312]	; (8002738 <HAL_GPIO_Init+0x34c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <HAL_GPIO_Init+0x21a>
 8002602:	2309      	movs	r3, #9
 8002604:	e012      	b.n	800262c <HAL_GPIO_Init+0x240>
 8002606:	230a      	movs	r3, #10
 8002608:	e010      	b.n	800262c <HAL_GPIO_Init+0x240>
 800260a:	2308      	movs	r3, #8
 800260c:	e00e      	b.n	800262c <HAL_GPIO_Init+0x240>
 800260e:	2307      	movs	r3, #7
 8002610:	e00c      	b.n	800262c <HAL_GPIO_Init+0x240>
 8002612:	2306      	movs	r3, #6
 8002614:	e00a      	b.n	800262c <HAL_GPIO_Init+0x240>
 8002616:	2305      	movs	r3, #5
 8002618:	e008      	b.n	800262c <HAL_GPIO_Init+0x240>
 800261a:	2304      	movs	r3, #4
 800261c:	e006      	b.n	800262c <HAL_GPIO_Init+0x240>
 800261e:	2303      	movs	r3, #3
 8002620:	e004      	b.n	800262c <HAL_GPIO_Init+0x240>
 8002622:	2302      	movs	r3, #2
 8002624:	e002      	b.n	800262c <HAL_GPIO_Init+0x240>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <HAL_GPIO_Init+0x240>
 800262a:	2300      	movs	r3, #0
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	f002 0203 	and.w	r2, r2, #3
 8002632:	0092      	lsls	r2, r2, #2
 8002634:	4093      	lsls	r3, r2
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800263c:	4934      	ldr	r1, [pc, #208]	; (8002710 <HAL_GPIO_Init+0x324>)
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	089b      	lsrs	r3, r3, #2
 8002642:	3302      	adds	r3, #2
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800264a:	4b3c      	ldr	r3, [pc, #240]	; (800273c <HAL_GPIO_Init+0x350>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800266e:	4a33      	ldr	r2, [pc, #204]	; (800273c <HAL_GPIO_Init+0x350>)
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002674:	4b31      	ldr	r3, [pc, #196]	; (800273c <HAL_GPIO_Init+0x350>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002698:	4a28      	ldr	r2, [pc, #160]	; (800273c <HAL_GPIO_Init+0x350>)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800269e:	4b27      	ldr	r3, [pc, #156]	; (800273c <HAL_GPIO_Init+0x350>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026c2:	4a1e      	ldr	r2, [pc, #120]	; (800273c <HAL_GPIO_Init+0x350>)
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026c8:	4b1c      	ldr	r3, [pc, #112]	; (800273c <HAL_GPIO_Init+0x350>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026ec:	4a13      	ldr	r2, [pc, #76]	; (800273c <HAL_GPIO_Init+0x350>)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3301      	adds	r3, #1
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	2b0f      	cmp	r3, #15
 80026fc:	f67f ae86 	bls.w	800240c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002700:	bf00      	nop
 8002702:	3724      	adds	r7, #36	; 0x24
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	40023800 	.word	0x40023800
 8002710:	40013800 	.word	0x40013800
 8002714:	40020000 	.word	0x40020000
 8002718:	40020400 	.word	0x40020400
 800271c:	40020800 	.word	0x40020800
 8002720:	40020c00 	.word	0x40020c00
 8002724:	40021000 	.word	0x40021000
 8002728:	40021400 	.word	0x40021400
 800272c:	40021800 	.word	0x40021800
 8002730:	40021c00 	.word	0x40021c00
 8002734:	40022000 	.word	0x40022000
 8002738:	40022400 	.word	0x40022400
 800273c:	40013c00 	.word	0x40013c00

08002740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	807b      	strh	r3, [r7, #2]
 800274c:	4613      	mov	r3, r2
 800274e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002750:	787b      	ldrb	r3, [r7, #1]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002756:	887a      	ldrh	r2, [r7, #2]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800275c:	e003      	b.n	8002766 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800275e:	887b      	ldrh	r3, [r7, #2]
 8002760:	041a      	lsls	r2, r3, #16
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	619a      	str	r2, [r3, #24]
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	460b      	mov	r3, r1
 800277c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	887b      	ldrh	r3, [r7, #2]
 8002784:	4013      	ands	r3, r2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d004      	beq.n	8002794 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800278a:	887b      	ldrh	r3, [r7, #2]
 800278c:	041a      	lsls	r2, r3, #16
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002792:	e002      	b.n	800279a <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002794:	887a      	ldrh	r2, [r7, #2]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	619a      	str	r2, [r3, #24]
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
	...

080027a8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a04      	ldr	r2, [pc, #16]	; (80027c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b6:	6013      	str	r3, [r2, #0]
}
 80027b8:	bf00      	nop
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40007000 	.word	0x40007000

080027c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80027d2:	4b23      	ldr	r3, [pc, #140]	; (8002860 <HAL_PWREx_EnableOverDrive+0x98>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	4a22      	ldr	r2, [pc, #136]	; (8002860 <HAL_PWREx_EnableOverDrive+0x98>)
 80027d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027dc:	6413      	str	r3, [r2, #64]	; 0x40
 80027de:	4b20      	ldr	r3, [pc, #128]	; (8002860 <HAL_PWREx_EnableOverDrive+0x98>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80027ea:	4b1e      	ldr	r3, [pc, #120]	; (8002864 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a1d      	ldr	r2, [pc, #116]	; (8002864 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027f6:	f7fe fb63 	bl	8000ec0 <HAL_GetTick>
 80027fa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027fc:	e009      	b.n	8002812 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027fe:	f7fe fb5f 	bl	8000ec0 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800280c:	d901      	bls.n	8002812 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e022      	b.n	8002858 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002812:	4b14      	ldr	r3, [pc, #80]	; (8002864 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800281e:	d1ee      	bne.n	80027fe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002820:	4b10      	ldr	r3, [pc, #64]	; (8002864 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a0f      	ldr	r2, [pc, #60]	; (8002864 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800282a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800282c:	f7fe fb48 	bl	8000ec0 <HAL_GetTick>
 8002830:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002832:	e009      	b.n	8002848 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002834:	f7fe fb44 	bl	8000ec0 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002842:	d901      	bls.n	8002848 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e007      	b.n	8002858 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002848:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_PWREx_EnableOverDrive+0x9c>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002850:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002854:	d1ee      	bne.n	8002834 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40023800 	.word	0x40023800
 8002864:	40007000 	.word	0x40007000

08002868 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002870:	2300      	movs	r3, #0
 8002872:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e29b      	b.n	8002db6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 8087 	beq.w	800299a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800288c:	4b96      	ldr	r3, [pc, #600]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 030c 	and.w	r3, r3, #12
 8002894:	2b04      	cmp	r3, #4
 8002896:	d00c      	beq.n	80028b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002898:	4b93      	ldr	r3, [pc, #588]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 030c 	and.w	r3, r3, #12
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	d112      	bne.n	80028ca <HAL_RCC_OscConfig+0x62>
 80028a4:	4b90      	ldr	r3, [pc, #576]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028b0:	d10b      	bne.n	80028ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b2:	4b8d      	ldr	r3, [pc, #564]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d06c      	beq.n	8002998 <HAL_RCC_OscConfig+0x130>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d168      	bne.n	8002998 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e275      	b.n	8002db6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d2:	d106      	bne.n	80028e2 <HAL_RCC_OscConfig+0x7a>
 80028d4:	4b84      	ldr	r3, [pc, #528]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a83      	ldr	r2, [pc, #524]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 80028da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	e02e      	b.n	8002940 <HAL_RCC_OscConfig+0xd8>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10c      	bne.n	8002904 <HAL_RCC_OscConfig+0x9c>
 80028ea:	4b7f      	ldr	r3, [pc, #508]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a7e      	ldr	r2, [pc, #504]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 80028f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	4b7c      	ldr	r3, [pc, #496]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a7b      	ldr	r2, [pc, #492]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 80028fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	e01d      	b.n	8002940 <HAL_RCC_OscConfig+0xd8>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800290c:	d10c      	bne.n	8002928 <HAL_RCC_OscConfig+0xc0>
 800290e:	4b76      	ldr	r3, [pc, #472]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a75      	ldr	r2, [pc, #468]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 8002914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	4b73      	ldr	r3, [pc, #460]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a72      	ldr	r2, [pc, #456]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 8002920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	e00b      	b.n	8002940 <HAL_RCC_OscConfig+0xd8>
 8002928:	4b6f      	ldr	r3, [pc, #444]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a6e      	ldr	r2, [pc, #440]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 800292e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	4b6c      	ldr	r3, [pc, #432]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a6b      	ldr	r2, [pc, #428]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 800293a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800293e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d013      	beq.n	8002970 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7fe faba 	bl	8000ec0 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002950:	f7fe fab6 	bl	8000ec0 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	; 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e229      	b.n	8002db6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	4b61      	ldr	r3, [pc, #388]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCC_OscConfig+0xe8>
 800296e:	e014      	b.n	800299a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7fe faa6 	bl	8000ec0 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002978:	f7fe faa2 	bl	8000ec0 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	; 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e215      	b.n	8002db6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298a:	4b57      	ldr	r3, [pc, #348]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x110>
 8002996:	e000      	b.n	800299a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d069      	beq.n	8002a7a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029a6:	4b50      	ldr	r3, [pc, #320]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 030c 	and.w	r3, r3, #12
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00b      	beq.n	80029ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029b2:	4b4d      	ldr	r3, [pc, #308]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 030c 	and.w	r3, r3, #12
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d11c      	bne.n	80029f8 <HAL_RCC_OscConfig+0x190>
 80029be:	4b4a      	ldr	r3, [pc, #296]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d116      	bne.n	80029f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ca:	4b47      	ldr	r3, [pc, #284]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <HAL_RCC_OscConfig+0x17a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d001      	beq.n	80029e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e1e9      	b.n	8002db6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e2:	4b41      	ldr	r3, [pc, #260]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	493d      	ldr	r1, [pc, #244]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f6:	e040      	b.n	8002a7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d023      	beq.n	8002a48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a00:	4b39      	ldr	r3, [pc, #228]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a38      	ldr	r2, [pc, #224]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7fe fa58 	bl	8000ec0 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a14:	f7fe fa54 	bl	8000ec0 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e1c7      	b.n	8002db6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a26:	4b30      	ldr	r3, [pc, #192]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a32:	4b2d      	ldr	r3, [pc, #180]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	4929      	ldr	r1, [pc, #164]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	600b      	str	r3, [r1, #0]
 8002a46:	e018      	b.n	8002a7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a48:	4b27      	ldr	r3, [pc, #156]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a26      	ldr	r2, [pc, #152]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 8002a4e:	f023 0301 	bic.w	r3, r3, #1
 8002a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a54:	f7fe fa34 	bl	8000ec0 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a5c:	f7fe fa30 	bl	8000ec0 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e1a3      	b.n	8002db6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d038      	beq.n	8002af8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d019      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a8e:	4b16      	ldr	r3, [pc, #88]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 8002a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a92:	4a15      	ldr	r2, [pc, #84]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9a:	f7fe fa11 	bl	8000ec0 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa2:	f7fe fa0d 	bl	8000ec0 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e180      	b.n	8002db6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 8002ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x23a>
 8002ac0:	e01a      	b.n	8002af8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac2:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 8002ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac6:	4a08      	ldr	r2, [pc, #32]	; (8002ae8 <HAL_RCC_OscConfig+0x280>)
 8002ac8:	f023 0301 	bic.w	r3, r3, #1
 8002acc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ace:	f7fe f9f7 	bl	8000ec0 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad4:	e00a      	b.n	8002aec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ad6:	f7fe f9f3 	bl	8000ec0 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d903      	bls.n	8002aec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e166      	b.n	8002db6 <HAL_RCC_OscConfig+0x54e>
 8002ae8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aec:	4b92      	ldr	r3, [pc, #584]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1ee      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80a4 	beq.w	8002c4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b06:	4b8c      	ldr	r3, [pc, #560]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10d      	bne.n	8002b2e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b12:	4b89      	ldr	r3, [pc, #548]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	4a88      	ldr	r2, [pc, #544]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1e:	4b86      	ldr	r3, [pc, #536]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b2e:	4b83      	ldr	r3, [pc, #524]	; (8002d3c <HAL_RCC_OscConfig+0x4d4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d118      	bne.n	8002b6c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b3a:	4b80      	ldr	r3, [pc, #512]	; (8002d3c <HAL_RCC_OscConfig+0x4d4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a7f      	ldr	r2, [pc, #508]	; (8002d3c <HAL_RCC_OscConfig+0x4d4>)
 8002b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b46:	f7fe f9bb 	bl	8000ec0 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4e:	f7fe f9b7 	bl	8000ec0 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b64      	cmp	r3, #100	; 0x64
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e12a      	b.n	8002db6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b60:	4b76      	ldr	r3, [pc, #472]	; (8002d3c <HAL_RCC_OscConfig+0x4d4>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d106      	bne.n	8002b82 <HAL_RCC_OscConfig+0x31a>
 8002b74:	4b70      	ldr	r3, [pc, #448]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b78:	4a6f      	ldr	r2, [pc, #444]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b80:	e02d      	b.n	8002bde <HAL_RCC_OscConfig+0x376>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x33c>
 8002b8a:	4b6b      	ldr	r3, [pc, #428]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8e:	4a6a      	ldr	r2, [pc, #424]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002b90:	f023 0301 	bic.w	r3, r3, #1
 8002b94:	6713      	str	r3, [r2, #112]	; 0x70
 8002b96:	4b68      	ldr	r3, [pc, #416]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9a:	4a67      	ldr	r2, [pc, #412]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002b9c:	f023 0304 	bic.w	r3, r3, #4
 8002ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba2:	e01c      	b.n	8002bde <HAL_RCC_OscConfig+0x376>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b05      	cmp	r3, #5
 8002baa:	d10c      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x35e>
 8002bac:	4b62      	ldr	r3, [pc, #392]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb0:	4a61      	ldr	r2, [pc, #388]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002bb2:	f043 0304 	orr.w	r3, r3, #4
 8002bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb8:	4b5f      	ldr	r3, [pc, #380]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbc:	4a5e      	ldr	r2, [pc, #376]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc4:	e00b      	b.n	8002bde <HAL_RCC_OscConfig+0x376>
 8002bc6:	4b5c      	ldr	r3, [pc, #368]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bca:	4a5b      	ldr	r2, [pc, #364]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002bcc:	f023 0301 	bic.w	r3, r3, #1
 8002bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd2:	4b59      	ldr	r3, [pc, #356]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	4a58      	ldr	r2, [pc, #352]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002bd8:	f023 0304 	bic.w	r3, r3, #4
 8002bdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d015      	beq.n	8002c12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be6:	f7fe f96b 	bl	8000ec0 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bec:	e00a      	b.n	8002c04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bee:	f7fe f967 	bl	8000ec0 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e0d8      	b.n	8002db6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c04:	4b4c      	ldr	r3, [pc, #304]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0ee      	beq.n	8002bee <HAL_RCC_OscConfig+0x386>
 8002c10:	e014      	b.n	8002c3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c12:	f7fe f955 	bl	8000ec0 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c18:	e00a      	b.n	8002c30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c1a:	f7fe f951 	bl	8000ec0 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e0c2      	b.n	8002db6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c30:	4b41      	ldr	r3, [pc, #260]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1ee      	bne.n	8002c1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c3c:	7dfb      	ldrb	r3, [r7, #23]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d105      	bne.n	8002c4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c42:	4b3d      	ldr	r3, [pc, #244]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	4a3c      	ldr	r2, [pc, #240]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 80ae 	beq.w	8002db4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c58:	4b37      	ldr	r3, [pc, #220]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 030c 	and.w	r3, r3, #12
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d06d      	beq.n	8002d40 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d14b      	bne.n	8002d04 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6c:	4b32      	ldr	r3, [pc, #200]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a31      	ldr	r2, [pc, #196]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c78:	f7fe f922 	bl	8000ec0 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c80:	f7fe f91e 	bl	8000ec0 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e091      	b.n	8002db6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c92:	4b29      	ldr	r3, [pc, #164]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69da      	ldr	r2, [r3, #28]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	019b      	lsls	r3, r3, #6
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb4:	085b      	lsrs	r3, r3, #1
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	041b      	lsls	r3, r3, #16
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	061b      	lsls	r3, r3, #24
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc8:	071b      	lsls	r3, r3, #28
 8002cca:	491b      	ldr	r1, [pc, #108]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cd0:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a18      	ldr	r2, [pc, #96]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cdc:	f7fe f8f0 	bl	8000ec0 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce4:	f7fe f8ec 	bl	8000ec0 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e05f      	b.n	8002db6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf6:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x47c>
 8002d02:	e057      	b.n	8002db4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d04:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a0b      	ldr	r2, [pc, #44]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d10:	f7fe f8d6 	bl	8000ec0 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d18:	f7fe f8d2 	bl	8000ec0 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e045      	b.n	8002db6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2a:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <HAL_RCC_OscConfig+0x4d0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x4b0>
 8002d36:	e03d      	b.n	8002db4 <HAL_RCC_OscConfig+0x54c>
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d40:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <HAL_RCC_OscConfig+0x558>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d030      	beq.n	8002db0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d129      	bne.n	8002db0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d122      	bne.n	8002db0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d70:	4013      	ands	r3, r2
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d76:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d119      	bne.n	8002db0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	085b      	lsrs	r3, r3, #1
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d10f      	bne.n	8002db0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d107      	bne.n	8002db0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e000      	b.n	8002db6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40023800 	.word	0x40023800

08002dc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0d0      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ddc:	4b6a      	ldr	r3, [pc, #424]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d910      	bls.n	8002e0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dea:	4b67      	ldr	r3, [pc, #412]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 020f 	bic.w	r2, r3, #15
 8002df2:	4965      	ldr	r1, [pc, #404]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfa:	4b63      	ldr	r3, [pc, #396]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0b8      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d020      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e24:	4b59      	ldr	r3, [pc, #356]	; (8002f8c <HAL_RCC_ClockConfig+0x1c8>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	4a58      	ldr	r2, [pc, #352]	; (8002f8c <HAL_RCC_ClockConfig+0x1c8>)
 8002e2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e3c:	4b53      	ldr	r3, [pc, #332]	; (8002f8c <HAL_RCC_ClockConfig+0x1c8>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4a52      	ldr	r2, [pc, #328]	; (8002f8c <HAL_RCC_ClockConfig+0x1c8>)
 8002e42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e48:	4b50      	ldr	r3, [pc, #320]	; (8002f8c <HAL_RCC_ClockConfig+0x1c8>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	494d      	ldr	r1, [pc, #308]	; (8002f8c <HAL_RCC_ClockConfig+0x1c8>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d040      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d107      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6e:	4b47      	ldr	r3, [pc, #284]	; (8002f8c <HAL_RCC_ClockConfig+0x1c8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d115      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e07f      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d107      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e86:	4b41      	ldr	r3, [pc, #260]	; (8002f8c <HAL_RCC_ClockConfig+0x1c8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e073      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e96:	4b3d      	ldr	r3, [pc, #244]	; (8002f8c <HAL_RCC_ClockConfig+0x1c8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e06b      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ea6:	4b39      	ldr	r3, [pc, #228]	; (8002f8c <HAL_RCC_ClockConfig+0x1c8>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f023 0203 	bic.w	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4936      	ldr	r1, [pc, #216]	; (8002f8c <HAL_RCC_ClockConfig+0x1c8>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb8:	f7fe f802 	bl	8000ec0 <HAL_GetTick>
 8002ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ebe:	e00a      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec0:	f7fd fffe 	bl	8000ec0 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e053      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed6:	4b2d      	ldr	r3, [pc, #180]	; (8002f8c <HAL_RCC_ClockConfig+0x1c8>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 020c 	and.w	r2, r3, #12
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d1eb      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ee8:	4b27      	ldr	r3, [pc, #156]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d210      	bcs.n	8002f18 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef6:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 020f 	bic.w	r2, r3, #15
 8002efe:	4922      	ldr	r1, [pc, #136]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f06:	4b20      	ldr	r3, [pc, #128]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d001      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e032      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f24:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <HAL_RCC_ClockConfig+0x1c8>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	4916      	ldr	r1, [pc, #88]	; (8002f8c <HAL_RCC_ClockConfig+0x1c8>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d009      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f42:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <HAL_RCC_ClockConfig+0x1c8>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	490e      	ldr	r1, [pc, #56]	; (8002f8c <HAL_RCC_ClockConfig+0x1c8>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f56:	f000 f821 	bl	8002f9c <HAL_RCC_GetSysClockFreq>
 8002f5a:	4601      	mov	r1, r0
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <HAL_RCC_ClockConfig+0x1c8>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	4a0a      	ldr	r2, [pc, #40]	; (8002f90 <HAL_RCC_ClockConfig+0x1cc>)
 8002f68:	5cd3      	ldrb	r3, [r2, r3]
 8002f6a:	fa21 f303 	lsr.w	r3, r1, r3
 8002f6e:	4a09      	ldr	r2, [pc, #36]	; (8002f94 <HAL_RCC_ClockConfig+0x1d0>)
 8002f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f72:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <HAL_RCC_ClockConfig+0x1d4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fd fe3c 	bl	8000bf4 <HAL_InitTick>

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40023c00 	.word	0x40023c00
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	0801eb0c 	.word	0x0801eb0c
 8002f94:	20000000 	.word	0x20000000
 8002f98:	20000004 	.word	0x20000004

08002f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	607b      	str	r3, [r7, #4]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	2300      	movs	r3, #0
 8002fac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fb2:	4b50      	ldr	r3, [pc, #320]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d007      	beq.n	8002fce <HAL_RCC_GetSysClockFreq+0x32>
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d008      	beq.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x38>
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f040 808d 	bne.w	80030e2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fc8:	4b4b      	ldr	r3, [pc, #300]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002fca:	60bb      	str	r3, [r7, #8]
      break;
 8002fcc:	e08c      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fce:	4b4b      	ldr	r3, [pc, #300]	; (80030fc <HAL_RCC_GetSysClockFreq+0x160>)
 8002fd0:	60bb      	str	r3, [r7, #8]
      break;
 8002fd2:	e089      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fd4:	4b47      	ldr	r3, [pc, #284]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fdc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002fde:	4b45      	ldr	r3, [pc, #276]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d023      	beq.n	8003032 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fea:	4b42      	ldr	r3, [pc, #264]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	099b      	lsrs	r3, r3, #6
 8002ff0:	f04f 0400 	mov.w	r4, #0
 8002ff4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	ea03 0501 	and.w	r5, r3, r1
 8003000:	ea04 0602 	and.w	r6, r4, r2
 8003004:	4a3d      	ldr	r2, [pc, #244]	; (80030fc <HAL_RCC_GetSysClockFreq+0x160>)
 8003006:	fb02 f106 	mul.w	r1, r2, r6
 800300a:	2200      	movs	r2, #0
 800300c:	fb02 f205 	mul.w	r2, r2, r5
 8003010:	440a      	add	r2, r1
 8003012:	493a      	ldr	r1, [pc, #232]	; (80030fc <HAL_RCC_GetSysClockFreq+0x160>)
 8003014:	fba5 0101 	umull	r0, r1, r5, r1
 8003018:	1853      	adds	r3, r2, r1
 800301a:	4619      	mov	r1, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f04f 0400 	mov.w	r4, #0
 8003022:	461a      	mov	r2, r3
 8003024:	4623      	mov	r3, r4
 8003026:	f7fd f973 	bl	8000310 <__aeabi_uldivmod>
 800302a:	4603      	mov	r3, r0
 800302c:	460c      	mov	r4, r1
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	e049      	b.n	80030c6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003032:	4b30      	ldr	r3, [pc, #192]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	099b      	lsrs	r3, r3, #6
 8003038:	f04f 0400 	mov.w	r4, #0
 800303c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	ea03 0501 	and.w	r5, r3, r1
 8003048:	ea04 0602 	and.w	r6, r4, r2
 800304c:	4629      	mov	r1, r5
 800304e:	4632      	mov	r2, r6
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	f04f 0400 	mov.w	r4, #0
 8003058:	0154      	lsls	r4, r2, #5
 800305a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800305e:	014b      	lsls	r3, r1, #5
 8003060:	4619      	mov	r1, r3
 8003062:	4622      	mov	r2, r4
 8003064:	1b49      	subs	r1, r1, r5
 8003066:	eb62 0206 	sbc.w	r2, r2, r6
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	f04f 0400 	mov.w	r4, #0
 8003072:	0194      	lsls	r4, r2, #6
 8003074:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003078:	018b      	lsls	r3, r1, #6
 800307a:	1a5b      	subs	r3, r3, r1
 800307c:	eb64 0402 	sbc.w	r4, r4, r2
 8003080:	f04f 0100 	mov.w	r1, #0
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	00e2      	lsls	r2, r4, #3
 800308a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800308e:	00d9      	lsls	r1, r3, #3
 8003090:	460b      	mov	r3, r1
 8003092:	4614      	mov	r4, r2
 8003094:	195b      	adds	r3, r3, r5
 8003096:	eb44 0406 	adc.w	r4, r4, r6
 800309a:	f04f 0100 	mov.w	r1, #0
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	02a2      	lsls	r2, r4, #10
 80030a4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80030a8:	0299      	lsls	r1, r3, #10
 80030aa:	460b      	mov	r3, r1
 80030ac:	4614      	mov	r4, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	4621      	mov	r1, r4
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f04f 0400 	mov.w	r4, #0
 80030b8:	461a      	mov	r2, r3
 80030ba:	4623      	mov	r3, r4
 80030bc:	f7fd f928 	bl	8000310 <__aeabi_uldivmod>
 80030c0:	4603      	mov	r3, r0
 80030c2:	460c      	mov	r4, r1
 80030c4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80030c6:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	0c1b      	lsrs	r3, r3, #16
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	3301      	adds	r3, #1
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	fbb2 f3f3 	udiv	r3, r2, r3
 80030de:	60bb      	str	r3, [r7, #8]
      break;
 80030e0:	e002      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030e2:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80030e4:	60bb      	str	r3, [r7, #8]
      break;
 80030e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030e8:	68bb      	ldr	r3, [r7, #8]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40023800 	.word	0x40023800
 80030f8:	00f42400 	.word	0x00f42400
 80030fc:	017d7840 	.word	0x017d7840

08003100 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003104:	4b03      	ldr	r3, [pc, #12]	; (8003114 <HAL_RCC_GetHCLKFreq+0x14>)
 8003106:	681b      	ldr	r3, [r3, #0]
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	20000000 	.word	0x20000000

08003118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800311c:	f7ff fff0 	bl	8003100 <HAL_RCC_GetHCLKFreq>
 8003120:	4601      	mov	r1, r0
 8003122:	4b05      	ldr	r3, [pc, #20]	; (8003138 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	0a9b      	lsrs	r3, r3, #10
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	4a03      	ldr	r2, [pc, #12]	; (800313c <HAL_RCC_GetPCLK1Freq+0x24>)
 800312e:	5cd3      	ldrb	r3, [r2, r3]
 8003130:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003134:	4618      	mov	r0, r3
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40023800 	.word	0x40023800
 800313c:	0801eb1c 	.word	0x0801eb1c

08003140 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	220f      	movs	r2, #15
 800314e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003150:	4b12      	ldr	r3, [pc, #72]	; (800319c <HAL_RCC_GetClockConfig+0x5c>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 0203 	and.w	r2, r3, #3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800315c:	4b0f      	ldr	r3, [pc, #60]	; (800319c <HAL_RCC_GetClockConfig+0x5c>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003168:	4b0c      	ldr	r3, [pc, #48]	; (800319c <HAL_RCC_GetClockConfig+0x5c>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003174:	4b09      	ldr	r3, [pc, #36]	; (800319c <HAL_RCC_GetClockConfig+0x5c>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	08db      	lsrs	r3, r3, #3
 800317a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003182:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <HAL_RCC_GetClockConfig+0x60>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 020f 	and.w	r2, r3, #15
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	601a      	str	r2, [r3, #0]
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40023800 	.word	0x40023800
 80031a0:	40023c00 	.word	0x40023c00

080031a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e01d      	b.n	80031f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f815 	bl	80031fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3304      	adds	r3, #4
 80031e0:	4619      	mov	r1, r3
 80031e2:	4610      	mov	r0, r2
 80031e4:	f000 f986 	bl	80034f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
	...

08003210 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <HAL_TIM_Base_Start_IT+0x50>)
 8003230:	4013      	ands	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2b06      	cmp	r3, #6
 8003238:	d00b      	beq.n	8003252 <HAL_TIM_Base_Start_IT+0x42>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003240:	d007      	beq.n	8003252 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0201 	orr.w	r2, r2, #1
 8003250:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	00010007 	.word	0x00010007

08003264 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b02      	cmp	r3, #2
 8003278:	d122      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b02      	cmp	r3, #2
 8003286:	d11b      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0202 	mvn.w	r2, #2
 8003290:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f905 	bl	80034b6 <HAL_TIM_IC_CaptureCallback>
 80032ac:	e005      	b.n	80032ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f8f7 	bl	80034a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f908 	bl	80034ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d122      	bne.n	8003314 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d11b      	bne.n	8003314 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0204 	mvn.w	r2, #4
 80032e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2202      	movs	r2, #2
 80032ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f8db 	bl	80034b6 <HAL_TIM_IC_CaptureCallback>
 8003300:	e005      	b.n	800330e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f8cd 	bl	80034a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f8de 	bl	80034ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b08      	cmp	r3, #8
 8003320:	d122      	bne.n	8003368 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b08      	cmp	r3, #8
 800332e:	d11b      	bne.n	8003368 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f06f 0208 	mvn.w	r2, #8
 8003338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2204      	movs	r2, #4
 800333e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f8b1 	bl	80034b6 <HAL_TIM_IC_CaptureCallback>
 8003354:	e005      	b.n	8003362 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f8a3 	bl	80034a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f8b4 	bl	80034ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	2b10      	cmp	r3, #16
 8003374:	d122      	bne.n	80033bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 0310 	and.w	r3, r3, #16
 8003380:	2b10      	cmp	r3, #16
 8003382:	d11b      	bne.n	80033bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0210 	mvn.w	r2, #16
 800338c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2208      	movs	r2, #8
 8003392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f887 	bl	80034b6 <HAL_TIM_IC_CaptureCallback>
 80033a8:	e005      	b.n	80033b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f879 	bl	80034a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f88a 	bl	80034ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d10e      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d107      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f06f 0201 	mvn.w	r2, #1
 80033e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fd fbb8 	bl	8000b58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f2:	2b80      	cmp	r3, #128	; 0x80
 80033f4:	d10e      	bne.n	8003414 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003400:	2b80      	cmp	r3, #128	; 0x80
 8003402:	d107      	bne.n	8003414 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800340c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f91a 	bl	8003648 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003422:	d10e      	bne.n	8003442 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342e:	2b80      	cmp	r3, #128	; 0x80
 8003430:	d107      	bne.n	8003442 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800343a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f90d 	bl	800365c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344c:	2b40      	cmp	r3, #64	; 0x40
 800344e:	d10e      	bne.n	800346e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345a:	2b40      	cmp	r3, #64	; 0x40
 800345c:	d107      	bne.n	800346e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f838 	bl	80034de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	f003 0320 	and.w	r3, r3, #32
 8003478:	2b20      	cmp	r3, #32
 800347a:	d10e      	bne.n	800349a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b20      	cmp	r3, #32
 8003488:	d107      	bne.n	800349a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f06f 0220 	mvn.w	r2, #32
 8003492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f8cd 	bl	8003634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
	...

080034f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a40      	ldr	r2, [pc, #256]	; (8003608 <TIM_Base_SetConfig+0x114>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d013      	beq.n	8003534 <TIM_Base_SetConfig+0x40>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003512:	d00f      	beq.n	8003534 <TIM_Base_SetConfig+0x40>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a3d      	ldr	r2, [pc, #244]	; (800360c <TIM_Base_SetConfig+0x118>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d00b      	beq.n	8003534 <TIM_Base_SetConfig+0x40>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a3c      	ldr	r2, [pc, #240]	; (8003610 <TIM_Base_SetConfig+0x11c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d007      	beq.n	8003534 <TIM_Base_SetConfig+0x40>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a3b      	ldr	r2, [pc, #236]	; (8003614 <TIM_Base_SetConfig+0x120>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d003      	beq.n	8003534 <TIM_Base_SetConfig+0x40>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a3a      	ldr	r2, [pc, #232]	; (8003618 <TIM_Base_SetConfig+0x124>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d108      	bne.n	8003546 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a2f      	ldr	r2, [pc, #188]	; (8003608 <TIM_Base_SetConfig+0x114>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d02b      	beq.n	80035a6 <TIM_Base_SetConfig+0xb2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003554:	d027      	beq.n	80035a6 <TIM_Base_SetConfig+0xb2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a2c      	ldr	r2, [pc, #176]	; (800360c <TIM_Base_SetConfig+0x118>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d023      	beq.n	80035a6 <TIM_Base_SetConfig+0xb2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a2b      	ldr	r2, [pc, #172]	; (8003610 <TIM_Base_SetConfig+0x11c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d01f      	beq.n	80035a6 <TIM_Base_SetConfig+0xb2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a2a      	ldr	r2, [pc, #168]	; (8003614 <TIM_Base_SetConfig+0x120>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d01b      	beq.n	80035a6 <TIM_Base_SetConfig+0xb2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a29      	ldr	r2, [pc, #164]	; (8003618 <TIM_Base_SetConfig+0x124>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d017      	beq.n	80035a6 <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a28      	ldr	r2, [pc, #160]	; (800361c <TIM_Base_SetConfig+0x128>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d013      	beq.n	80035a6 <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a27      	ldr	r2, [pc, #156]	; (8003620 <TIM_Base_SetConfig+0x12c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00f      	beq.n	80035a6 <TIM_Base_SetConfig+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a26      	ldr	r2, [pc, #152]	; (8003624 <TIM_Base_SetConfig+0x130>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00b      	beq.n	80035a6 <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a25      	ldr	r2, [pc, #148]	; (8003628 <TIM_Base_SetConfig+0x134>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d007      	beq.n	80035a6 <TIM_Base_SetConfig+0xb2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a24      	ldr	r2, [pc, #144]	; (800362c <TIM_Base_SetConfig+0x138>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d003      	beq.n	80035a6 <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a23      	ldr	r2, [pc, #140]	; (8003630 <TIM_Base_SetConfig+0x13c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d108      	bne.n	80035b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a0a      	ldr	r2, [pc, #40]	; (8003608 <TIM_Base_SetConfig+0x114>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d003      	beq.n	80035ec <TIM_Base_SetConfig+0xf8>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a0c      	ldr	r2, [pc, #48]	; (8003618 <TIM_Base_SetConfig+0x124>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d103      	bne.n	80035f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	615a      	str	r2, [r3, #20]
}
 80035fa:	bf00      	nop
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40010000 	.word	0x40010000
 800360c:	40000400 	.word	0x40000400
 8003610:	40000800 	.word	0x40000800
 8003614:	40000c00 	.word	0x40000c00
 8003618:	40010400 	.word	0x40010400
 800361c:	40014000 	.word	0x40014000
 8003620:	40014400 	.word	0x40014400
 8003624:	40014800 	.word	0x40014800
 8003628:	40001800 	.word	0x40001800
 800362c:	40001c00 	.word	0x40001c00
 8003630:	40002000 	.word	0x40002000

08003634 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003670:	b5b0      	push	{r4, r5, r7, lr}
 8003672:	b08e      	sub	sp, #56	; 0x38
 8003674:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8003676:	2100      	movs	r1, #0
 8003678:	2000      	movs	r0, #0
 800367a:	f007 f915 	bl	800a8a8 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800367e:	4b2a      	ldr	r3, [pc, #168]	; (8003728 <MX_LWIP_Init+0xb8>)
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8003684:	4b29      	ldr	r3, [pc, #164]	; (800372c <MX_LWIP_Init+0xbc>)
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800368a:	4b29      	ldr	r3, [pc, #164]	; (8003730 <MX_LWIP_Init+0xc0>)
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003690:	4b28      	ldr	r3, [pc, #160]	; (8003734 <MX_LWIP_Init+0xc4>)
 8003692:	9302      	str	r3, [sp, #8]
 8003694:	4b28      	ldr	r3, [pc, #160]	; (8003738 <MX_LWIP_Init+0xc8>)
 8003696:	9301      	str	r3, [sp, #4]
 8003698:	2300      	movs	r3, #0
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	4b24      	ldr	r3, [pc, #144]	; (8003730 <MX_LWIP_Init+0xc0>)
 800369e:	4a23      	ldr	r2, [pc, #140]	; (800372c <MX_LWIP_Init+0xbc>)
 80036a0:	4921      	ldr	r1, [pc, #132]	; (8003728 <MX_LWIP_Init+0xb8>)
 80036a2:	4826      	ldr	r0, [pc, #152]	; (800373c <MX_LWIP_Init+0xcc>)
 80036a4:	f007 fe84 	bl	800b3b0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80036a8:	4824      	ldr	r0, [pc, #144]	; (800373c <MX_LWIP_Init+0xcc>)
 80036aa:	f008 f83b 	bl	800b724 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80036ae:	4b23      	ldr	r3, [pc, #140]	; (800373c <MX_LWIP_Init+0xcc>)
 80036b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80036b4:	089b      	lsrs	r3, r3, #2
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80036c0:	481e      	ldr	r0, [pc, #120]	; (800373c <MX_LWIP_Init+0xcc>)
 80036c2:	f008 f83f 	bl	800b744 <netif_set_up>
 80036c6:	e002      	b.n	80036ce <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80036c8:	481c      	ldr	r0, [pc, #112]	; (800373c <MX_LWIP_Init+0xcc>)
 80036ca:	f008 f8a7 	bl	800b81c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80036ce:	491c      	ldr	r1, [pc, #112]	; (8003740 <MX_LWIP_Init+0xd0>)
 80036d0:	481a      	ldr	r0, [pc, #104]	; (800373c <MX_LWIP_Init+0xcc>)
 80036d2:	f008 f93d 	bl	800b950 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 80036d6:	2300      	movs	r3, #0
 80036d8:	623b      	str	r3, [r7, #32]
 80036da:	2300      	movs	r3, #0
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80036de:	f107 0320 	add.w	r3, r7, #32
 80036e2:	2101      	movs	r1, #1
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 fd6d 	bl	80041c4 <osSemaphoreCreate>
 80036ea:	4602      	mov	r2, r0
 80036ec:	4b15      	ldr	r3, [pc, #84]	; (8003744 <MX_LWIP_Init+0xd4>)
 80036ee:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 80036f0:	4b15      	ldr	r3, [pc, #84]	; (8003748 <MX_LWIP_Init+0xd8>)
 80036f2:	4a12      	ldr	r2, [pc, #72]	; (800373c <MX_LWIP_Init+0xcc>)
 80036f4:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80036f6:	4b13      	ldr	r3, [pc, #76]	; (8003744 <MX_LWIP_Init+0xd4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a13      	ldr	r2, [pc, #76]	; (8003748 <MX_LWIP_Init+0xd8>)
 80036fc:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80036fe:	4b13      	ldr	r3, [pc, #76]	; (800374c <MX_LWIP_Init+0xdc>)
 8003700:	1d3c      	adds	r4, r7, #4
 8003702:	461d      	mov	r5, r3
 8003704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003708:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800370c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8003710:	1d3b      	adds	r3, r7, #4
 8003712:	490d      	ldr	r1, [pc, #52]	; (8003748 <MX_LWIP_Init+0xd8>)
 8003714:	4618      	mov	r0, r3
 8003716:	f000 fc58 	bl	8003fca <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800371a:	4808      	ldr	r0, [pc, #32]	; (800373c <MX_LWIP_Init+0xcc>)
 800371c:	f010 fa50 	bl	8013bc0 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003720:	bf00      	nop
 8003722:	3728      	adds	r7, #40	; 0x28
 8003724:	46bd      	mov	sp, r7
 8003726:	bdb0      	pop	{r4, r5, r7, pc}
 8003728:	200094ac 	.word	0x200094ac
 800372c:	200094b0 	.word	0x200094b0
 8003730:	200094b4 	.word	0x200094b4
 8003734:	0800a7b9 	.word	0x0800a7b9
 8003738:	08003d59 	.word	0x08003d59
 800373c:	20009474 	.word	0x20009474
 8003740:	08003e3d 	.word	0x08003e3d
 8003744:	20000464 	.word	0x20000464
 8003748:	2000946c 	.word	0x2000946c
 800374c:	0801ad58 	.word	0x0801ad58

08003750 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08e      	sub	sp, #56	; 0x38
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	605a      	str	r2, [r3, #4]
 8003762:	609a      	str	r2, [r3, #8]
 8003764:	60da      	str	r2, [r3, #12]
 8003766:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a44      	ldr	r2, [pc, #272]	; (8003880 <HAL_ETH_MspInit+0x130>)
 800376e:	4293      	cmp	r3, r2
 8003770:	f040 8081 	bne.w	8003876 <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003774:	4b43      	ldr	r3, [pc, #268]	; (8003884 <HAL_ETH_MspInit+0x134>)
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	4a42      	ldr	r2, [pc, #264]	; (8003884 <HAL_ETH_MspInit+0x134>)
 800377a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800377e:	6313      	str	r3, [r2, #48]	; 0x30
 8003780:	4b40      	ldr	r3, [pc, #256]	; (8003884 <HAL_ETH_MspInit+0x134>)
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003788:	623b      	str	r3, [r7, #32]
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	4b3d      	ldr	r3, [pc, #244]	; (8003884 <HAL_ETH_MspInit+0x134>)
 800378e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003790:	4a3c      	ldr	r2, [pc, #240]	; (8003884 <HAL_ETH_MspInit+0x134>)
 8003792:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003796:	6313      	str	r3, [r2, #48]	; 0x30
 8003798:	4b3a      	ldr	r3, [pc, #232]	; (8003884 <HAL_ETH_MspInit+0x134>)
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037a0:	61fb      	str	r3, [r7, #28]
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	4b37      	ldr	r3, [pc, #220]	; (8003884 <HAL_ETH_MspInit+0x134>)
 80037a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a8:	4a36      	ldr	r2, [pc, #216]	; (8003884 <HAL_ETH_MspInit+0x134>)
 80037aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80037ae:	6313      	str	r3, [r2, #48]	; 0x30
 80037b0:	4b34      	ldr	r3, [pc, #208]	; (8003884 <HAL_ETH_MspInit+0x134>)
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037bc:	4b31      	ldr	r3, [pc, #196]	; (8003884 <HAL_ETH_MspInit+0x134>)
 80037be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c0:	4a30      	ldr	r2, [pc, #192]	; (8003884 <HAL_ETH_MspInit+0x134>)
 80037c2:	f043 0304 	orr.w	r3, r3, #4
 80037c6:	6313      	str	r3, [r2, #48]	; 0x30
 80037c8:	4b2e      	ldr	r3, [pc, #184]	; (8003884 <HAL_ETH_MspInit+0x134>)
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d4:	4b2b      	ldr	r3, [pc, #172]	; (8003884 <HAL_ETH_MspInit+0x134>)
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	4a2a      	ldr	r2, [pc, #168]	; (8003884 <HAL_ETH_MspInit+0x134>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	6313      	str	r3, [r2, #48]	; 0x30
 80037e0:	4b28      	ldr	r3, [pc, #160]	; (8003884 <HAL_ETH_MspInit+0x134>)
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ec:	4b25      	ldr	r3, [pc, #148]	; (8003884 <HAL_ETH_MspInit+0x134>)
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	4a24      	ldr	r2, [pc, #144]	; (8003884 <HAL_ETH_MspInit+0x134>)
 80037f2:	f043 0302 	orr.w	r3, r3, #2
 80037f6:	6313      	str	r3, [r2, #48]	; 0x30
 80037f8:	4b22      	ldr	r3, [pc, #136]	; (8003884 <HAL_ETH_MspInit+0x134>)
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003804:	2332      	movs	r3, #50	; 0x32
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003808:	2302      	movs	r3, #2
 800380a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380c:	2300      	movs	r3, #0
 800380e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003810:	2303      	movs	r3, #3
 8003812:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003814:	230b      	movs	r3, #11
 8003816:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800381c:	4619      	mov	r1, r3
 800381e:	481a      	ldr	r0, [pc, #104]	; (8003888 <HAL_ETH_MspInit+0x138>)
 8003820:	f7fe fde4 	bl	80023ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003824:	2386      	movs	r3, #134	; 0x86
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003828:	2302      	movs	r3, #2
 800382a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382c:	2300      	movs	r3, #0
 800382e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003830:	2303      	movs	r3, #3
 8003832:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003834:	230b      	movs	r3, #11
 8003836:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800383c:	4619      	mov	r1, r3
 800383e:	4813      	ldr	r0, [pc, #76]	; (800388c <HAL_ETH_MspInit+0x13c>)
 8003840:	f7fe fdd4 	bl	80023ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003844:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384a:	2302      	movs	r3, #2
 800384c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384e:	2300      	movs	r3, #0
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003852:	2303      	movs	r3, #3
 8003854:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003856:	230b      	movs	r3, #11
 8003858:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800385a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800385e:	4619      	mov	r1, r3
 8003860:	480b      	ldr	r0, [pc, #44]	; (8003890 <HAL_ETH_MspInit+0x140>)
 8003862:	f7fe fdc3 	bl	80023ec <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8003866:	2200      	movs	r2, #0
 8003868:	2105      	movs	r1, #5
 800386a:	203d      	movs	r0, #61	; 0x3d
 800386c:	f7fd fc0e 	bl	800108c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003870:	203d      	movs	r0, #61	; 0x3d
 8003872:	f7fd fc27 	bl	80010c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003876:	bf00      	nop
 8003878:	3738      	adds	r7, #56	; 0x38
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40028000 	.word	0x40028000
 8003884:	40023800 	.word	0x40023800
 8003888:	40020800 	.word	0x40020800
 800388c:	40020000 	.word	0x40020000
 8003890:	40020400 	.word	0x40020400

08003894 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800389c:	4b04      	ldr	r3, [pc, #16]	; (80038b0 <HAL_ETH_RxCpltCallback+0x1c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fd11 	bl	80042c8 <osSemaphoreRelease>
}
 80038a6:	bf00      	nop
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20000468 	.word	0x20000468

080038b4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 80038b4:	b5b0      	push	{r4, r5, r7, lr}
 80038b6:	b090      	sub	sp, #64	; 0x40
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80038bc:	2300      	movs	r3, #0
 80038be:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80038c0:	4b5c      	ldr	r3, [pc, #368]	; (8003a34 <low_level_init+0x180>)
 80038c2:	4a5d      	ldr	r2, [pc, #372]	; (8003a38 <low_level_init+0x184>)
 80038c4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80038c6:	4b5b      	ldr	r3, [pc, #364]	; (8003a34 <low_level_init+0x180>)
 80038c8:	2201      	movs	r2, #1
 80038ca:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80038cc:	4b59      	ldr	r3, [pc, #356]	; (8003a34 <low_level_init+0x180>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80038d2:	2300      	movs	r3, #0
 80038d4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 80038d8:	2380      	movs	r3, #128	; 0x80
 80038da:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 80038de:	23e1      	movs	r3, #225	; 0xe1
 80038e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 80038e4:	2300      	movs	r3, #0
 80038e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 80038ea:	2300      	movs	r3, #0
 80038ec:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80038f6:	4a4f      	ldr	r2, [pc, #316]	; (8003a34 <low_level_init+0x180>)
 80038f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038fc:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80038fe:	4b4d      	ldr	r3, [pc, #308]	; (8003a34 <low_level_init+0x180>)
 8003900:	2201      	movs	r2, #1
 8003902:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003904:	4b4b      	ldr	r3, [pc, #300]	; (8003a34 <low_level_init+0x180>)
 8003906:	2200      	movs	r2, #0
 8003908:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800390a:	4b4a      	ldr	r3, [pc, #296]	; (8003a34 <low_level_init+0x180>)
 800390c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003910:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003912:	4848      	ldr	r0, [pc, #288]	; (8003a34 <low_level_init+0x180>)
 8003914:	f7fd fbe4 	bl	80010e0 <HAL_ETH_Init>
 8003918:	4603      	mov	r3, r0
 800391a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800391e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003922:	2b00      	cmp	r3, #0
 8003924:	d108      	bne.n	8003938 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800392c:	f043 0304 	orr.w	r3, r3, #4
 8003930:	b2da      	uxtb	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003938:	2304      	movs	r3, #4
 800393a:	4a40      	ldr	r2, [pc, #256]	; (8003a3c <low_level_init+0x188>)
 800393c:	4940      	ldr	r1, [pc, #256]	; (8003a40 <low_level_init+0x18c>)
 800393e:	483d      	ldr	r0, [pc, #244]	; (8003a34 <low_level_init+0x180>)
 8003940:	f7fd fd6a 	bl	8001418 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003944:	2304      	movs	r3, #4
 8003946:	4a3f      	ldr	r2, [pc, #252]	; (8003a44 <low_level_init+0x190>)
 8003948:	493f      	ldr	r1, [pc, #252]	; (8003a48 <low_level_init+0x194>)
 800394a:	483a      	ldr	r0, [pc, #232]	; (8003a34 <low_level_init+0x180>)
 800394c:	f7fd fdcd 	bl	80014ea <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2206      	movs	r2, #6
 8003954:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003958:	4b36      	ldr	r3, [pc, #216]	; (8003a34 <low_level_init+0x180>)
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	781a      	ldrb	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003964:	4b33      	ldr	r3, [pc, #204]	; (8003a34 <low_level_init+0x180>)
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	785a      	ldrb	r2, [r3, #1]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003970:	4b30      	ldr	r3, [pc, #192]	; (8003a34 <low_level_init+0x180>)
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	789a      	ldrb	r2, [r3, #2]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800397c:	4b2d      	ldr	r3, [pc, #180]	; (8003a34 <low_level_init+0x180>)
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	78da      	ldrb	r2, [r3, #3]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003988:	4b2a      	ldr	r3, [pc, #168]	; (8003a34 <low_level_init+0x180>)
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	791a      	ldrb	r2, [r3, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003994:	4b27      	ldr	r3, [pc, #156]	; (8003a34 <low_level_init+0x180>)
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	795a      	ldrb	r2, [r3, #5]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80039a6:	851a      	strh	r2, [r3, #40]	; 0x28
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80039ae:	f043 030a 	orr.w	r3, r3, #10
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80039ba:	2300      	movs	r3, #0
 80039bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80039be:	2300      	movs	r3, #0
 80039c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80039c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039c6:	2101      	movs	r1, #1
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 fbfb 	bl	80041c4 <osSemaphoreCreate>
 80039ce:	4602      	mov	r2, r0
 80039d0:	4b1e      	ldr	r3, [pc, #120]	; (8003a4c <low_level_init+0x198>)
 80039d2:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80039d4:	4b1e      	ldr	r3, [pc, #120]	; (8003a50 <low_level_init+0x19c>)
 80039d6:	f107 040c 	add.w	r4, r7, #12
 80039da:	461d      	mov	r5, r3
 80039dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80039e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80039e8:	f107 030c 	add.w	r3, r7, #12
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 faeb 	bl	8003fca <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80039f4:	480f      	ldr	r0, [pc, #60]	; (8003a34 <low_level_init+0x180>)
 80039f6:	f7fe f8a0 	bl	8001b3a <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80039fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80039fe:	461a      	mov	r2, r3
 8003a00:	211d      	movs	r1, #29
 8003a02:	480c      	ldr	r0, [pc, #48]	; (8003a34 <low_level_init+0x180>)
 8003a04:	f7fd ffcb 	bl	800199e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0a:	f043 030b 	orr.w	r3, r3, #11
 8003a0e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a12:	461a      	mov	r2, r3
 8003a14:	211d      	movs	r1, #29
 8003a16:	4807      	ldr	r0, [pc, #28]	; (8003a34 <low_level_init+0x180>)
 8003a18:	f7fe f829 	bl	8001a6e <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003a1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003a20:	461a      	mov	r2, r3
 8003a22:	211d      	movs	r1, #29
 8003a24:	4803      	ldr	r0, [pc, #12]	; (8003a34 <low_level_init+0x180>)
 8003a26:	f7fd ffba 	bl	800199e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8003a2a:	bf00      	nop
 8003a2c:	3740      	adds	r7, #64	; 0x40
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bdb0      	pop	{r4, r5, r7, pc}
 8003a32:	bf00      	nop
 8003a34:	2000ad88 	.word	0x2000ad88
 8003a38:	40028000 	.word	0x40028000
 8003a3c:	2000add0 	.word	0x2000add0
 8003a40:	200094b8 	.word	0x200094b8
 8003a44:	20009538 	.word	0x20009538
 8003a48:	2000ad08 	.word	0x2000ad08
 8003a4c:	20000468 	.word	0x20000468
 8003a50:	0801ad7c 	.word	0x0801ad7c

08003a54 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08a      	sub	sp, #40	; 0x28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003a5e:	4b4b      	ldr	r3, [pc, #300]	; (8003b8c <low_level_output+0x138>)
 8003a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003a72:	2300      	movs	r3, #0
 8003a74:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003a76:	4b45      	ldr	r3, [pc, #276]	; (8003b8c <low_level_output+0x138>)
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	623b      	str	r3, [r7, #32]
 8003a84:	e05a      	b.n	8003b3c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	da03      	bge.n	8003a96 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003a8e:	23f8      	movs	r3, #248	; 0xf8
 8003a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003a94:	e05c      	b.n	8003b50 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	895b      	ldrh	r3, [r3, #10]
 8003a9a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003aa0:	e02f      	b.n	8003b02 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003aa2:	69fa      	ldr	r2, [r7, #28]
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	18d0      	adds	r0, r2, r3
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	18d1      	adds	r1, r2, r3
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8003ab6:	1a9b      	subs	r3, r3, r2
 8003ab8:	461a      	mov	r2, r3
 8003aba:	f016 f89e 	bl	8019bfa <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	da03      	bge.n	8003ad4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003acc:	23f8      	movs	r3, #248	; 0xf8
 8003ace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003ad2:	e03d      	b.n	8003b50 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003ae4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003af0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003afc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	4413      	add	r3, r2
 8003b08:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d8c8      	bhi.n	8003aa2 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003b10:	69fa      	ldr	r2, [r7, #28]
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	18d0      	adds	r0, r2, r3
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4619      	mov	r1, r3
 8003b22:	f016 f86a 	bl	8019bfa <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4413      	add	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	623b      	str	r3, [r7, #32]
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1a1      	bne.n	8003a86 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003b42:	6979      	ldr	r1, [r7, #20]
 8003b44:	4811      	ldr	r0, [pc, #68]	; (8003b8c <low_level_output+0x138>)
 8003b46:	f7fd fd3d 	bl	80015c4 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003b50:	4b0e      	ldr	r3, [pc, #56]	; (8003b8c <low_level_output+0x138>)
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	f241 0314 	movw	r3, #4116	; 0x1014
 8003b58:	4413      	add	r3, r2
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00d      	beq.n	8003b80 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003b64:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <low_level_output+0x138>)
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	f241 0314 	movw	r3, #4116	; 0x1014
 8003b6c:	4413      	add	r3, r2
 8003b6e:	2220      	movs	r2, #32
 8003b70:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003b72:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <low_level_output+0x138>)
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	f241 0304 	movw	r3, #4100	; 0x1004
 8003b7a:	4413      	add	r3, r2
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003b80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3728      	adds	r7, #40	; 0x28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	2000ad88 	.word	0x2000ad88

08003b90 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08c      	sub	sp, #48	; 0x30
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8003bb4:	484f      	ldr	r0, [pc, #316]	; (8003cf4 <low_level_input+0x164>)
 8003bb6:	f7fd fdef 	bl	8001798 <HAL_ETH_GetReceivedFrame_IT>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <low_level_input+0x34>
  
    return NULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	e092      	b.n	8003cea <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003bc4:	4b4b      	ldr	r3, [pc, #300]	; (8003cf4 <low_level_input+0x164>)
 8003bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003bca:	4b4a      	ldr	r3, [pc, #296]	; (8003cf4 <low_level_input+0x164>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8003bd0:	89fb      	ldrh	r3, [r7, #14]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d007      	beq.n	8003be6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003bd6:	89fb      	ldrh	r3, [r7, #14]
 8003bd8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003bdc:	4619      	mov	r1, r3
 8003bde:	2000      	movs	r0, #0
 8003be0:	f007 ff80 	bl	800bae4 <pbuf_alloc>
 8003be4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8003be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d04b      	beq.n	8003c84 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003bec:	4b41      	ldr	r3, [pc, #260]	; (8003cf4 <low_level_input+0x164>)
 8003bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bfa:	e040      	b.n	8003c7e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfe:	895b      	ldrh	r3, [r3, #10]
 8003c00:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003c06:	e021      	b.n	8003c4c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	18d0      	adds	r0, r2, r3
 8003c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	18d1      	adds	r1, r2, r3
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8003c1c:	1a9b      	subs	r3, r3, r2
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f015 ffeb 	bl	8019bfa <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003c30:	69fa      	ldr	r2, [r7, #28]
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	4413      	add	r3, r2
 8003c36:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003c3a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003c46:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	4413      	add	r3, r2
 8003c52:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d8d6      	bhi.n	8003c08 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	18d0      	adds	r0, r2, r3
 8003c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	4413      	add	r3, r2
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	f015 ffc5 	bl	8019bfa <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	4413      	add	r3, r2
 8003c76:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1bb      	bne.n	8003bfc <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003c84:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <low_level_input+0x164>)
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	e00b      	b.n	8003ca8 <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	613b      	str	r3, [r7, #16]
 8003ca8:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <low_level_input+0x164>)
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d3ee      	bcc.n	8003c90 <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8003cb2:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <low_level_input+0x164>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8003cb8:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <low_level_input+0x164>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	f241 0314 	movw	r3, #4116	; 0x1014
 8003cc0:	4413      	add	r3, r2
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00d      	beq.n	8003ce8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003ccc:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <low_level_input+0x164>)
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	f241 0314 	movw	r3, #4116	; 0x1014
 8003cd4:	4413      	add	r3, r2
 8003cd6:	2280      	movs	r2, #128	; 0x80
 8003cd8:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003cda:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <low_level_input+0x164>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	f241 0308 	movw	r3, #4104	; 0x1008
 8003ce2:	4413      	add	r3, r2
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3730      	adds	r7, #48	; 0x30
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	2000ad88 	.word	0x2000ad88

08003cf8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003d04:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <ethernetif_input+0x58>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f04f 31ff 	mov.w	r1, #4294967295
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 fa8d 	bl	800422c <osSemaphoreWait>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1f5      	bne.n	8003d04 <ethernetif_input+0xc>
    {
      do
      {   
        LOCK_TCPIP_CORE();
 8003d18:	480e      	ldr	r0, [pc, #56]	; (8003d54 <ethernetif_input+0x5c>)
 8003d1a:	f014 f81b 	bl	8017d54 <sys_mutex_lock>
        p = low_level_input( netif );
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f7ff ff36 	bl	8003b90 <low_level_input>
 8003d24:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	68f9      	ldr	r1, [r7, #12]
 8003d32:	68b8      	ldr	r0, [r7, #8]
 8003d34:	4798      	blx	r3
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d002      	beq.n	8003d42 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8003d3c:	68b8      	ldr	r0, [r7, #8]
 8003d3e:	f008 f9e3 	bl	800c108 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8003d42:	4804      	ldr	r0, [pc, #16]	; (8003d54 <ethernetif_input+0x5c>)
 8003d44:	f014 f815 	bl	8017d72 <sys_mutex_unlock>
      } while(p!=NULL);
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1e4      	bne.n	8003d18 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003d4e:	e7d9      	b.n	8003d04 <ethernetif_input+0xc>
 8003d50:	20000468 	.word	0x20000468
 8003d54:	2000c5e0 	.word	0x2000c5e0

08003d58 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <ethernetif_init+0x1c>
 8003d66:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <ethernetif_init+0x48>)
 8003d68:	f240 222b 	movw	r2, #555	; 0x22b
 8003d6c:	490d      	ldr	r1, [pc, #52]	; (8003da4 <ethernetif_init+0x4c>)
 8003d6e:	480e      	ldr	r0, [pc, #56]	; (8003da8 <ethernetif_init+0x50>)
 8003d70:	f015 ff56 	bl	8019c20 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2273      	movs	r2, #115	; 0x73
 8003d78:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2274      	movs	r2, #116	; 0x74
 8003d80:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a09      	ldr	r2, [pc, #36]	; (8003dac <ethernetif_init+0x54>)
 8003d88:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a08      	ldr	r2, [pc, #32]	; (8003db0 <ethernetif_init+0x58>)
 8003d8e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff fd8f 	bl	80038b4 <low_level_init>

  return ERR_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	0801ad98 	.word	0x0801ad98
 8003da4:	0801adb4 	.word	0x0801adb4
 8003da8:	0801adc4 	.word	0x0801adc4
 8003dac:	08015aad 	.word	0x08015aad
 8003db0:	08003a55 	.word	0x08003a55

08003db4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003db8:	f7fd f882 	bl	8000ec0 <HAL_GetTick>
 8003dbc:	4603      	mov	r3, r0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	60fb      	str	r3, [r7, #12]
  
  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003dd4:	f107 0308 	add.w	r3, r7, #8
 8003dd8:	461a      	mov	r2, r3
 8003dda:	2101      	movs	r1, #1
 8003ddc:	4816      	ldr	r0, [pc, #88]	; (8003e38 <ethernetif_set_link+0x74>)
 8003dde:	f7fd fdde 	bl	800199e <HAL_ETH_ReadPHYRegister>
    
    regvalue &= PHY_LINKED_STATUS;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	60bb      	str	r3, [r7, #8]
    
    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d108      	bne.n	8003e0c <ethernetif_set_link+0x48>
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <ethernetif_set_link+0x48>
    {
      /* network cable is connected */ 
      netif_set_link_up(link_arg->netif);        
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f007 fd3b 	bl	800b880 <netif_set_link_up>
 8003e0a:	e011      	b.n	8003e30 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003e14:	089b      	lsrs	r3, r3, #2
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d007      	beq.n	8003e30 <ethernetif_set_link+0x6c>
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d104      	bne.n	8003e30 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f007 fd60 	bl	800b8f0 <netif_set_link_down>
    }
    
    /* Suspend thread for 200 ms */
    osDelay(200);
 8003e30:	20c8      	movs	r0, #200	; 0xc8
 8003e32:	f000 f916 	bl	8004062 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003e36:	e7cd      	b.n	8003dd4 <ethernetif_set_link+0x10>
 8003e38:	2000ad88 	.word	0x2000ad88

08003e3c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60bb      	str	r3, [r7, #8]
  
  if(netif_is_link_up(netif))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003e52:	089b      	lsrs	r3, r3, #2
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d05d      	beq.n	8003f1a <ethernetif_update_config+0xde>
  { 
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003e5e:	4b34      	ldr	r3, [pc, #208]	; (8003f30 <ethernetif_update_config+0xf4>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d03f      	beq.n	8003ee6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003e66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	4830      	ldr	r0, [pc, #192]	; (8003f30 <ethernetif_update_config+0xf4>)
 8003e6e:	f7fd fdfe 	bl	8001a6e <HAL_ETH_WritePHYRegister>
      
      /* Get tick */
      tickstart = HAL_GetTick();
 8003e72:	f7fd f825 	bl	8000ec0 <HAL_GetTick>
 8003e76:	4603      	mov	r3, r0
 8003e78:	60fb      	str	r3, [r7, #12]
      
      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003e7a:	f107 0308 	add.w	r3, r7, #8
 8003e7e:	461a      	mov	r2, r3
 8003e80:	2101      	movs	r1, #1
 8003e82:	482b      	ldr	r0, [pc, #172]	; (8003f30 <ethernetif_update_config+0xf4>)
 8003e84:	f7fd fd8b 	bl	800199e <HAL_ETH_ReadPHYRegister>
        
        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003e88:	f7fd f81a 	bl	8000ec0 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e96:	d828      	bhi.n	8003eea <ethernetif_update_config+0xae>
        {     
          /* In case of timeout */ 
          goto error;
        }   
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0eb      	beq.n	8003e7a <ethernetif_update_config+0x3e>
      
      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003ea2:	f107 0308 	add.w	r3, r7, #8
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	211f      	movs	r1, #31
 8003eaa:	4821      	ldr	r0, [pc, #132]	; (8003f30 <ethernetif_update_config+0xf4>)
 8003eac:	f7fd fd77 	bl	800199e <HAL_ETH_ReadPHYRegister>
      
      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f003 0310 	and.w	r3, r3, #16
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d004      	beq.n	8003ec4 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003eba:	4b1d      	ldr	r3, [pc, #116]	; (8003f30 <ethernetif_update_config+0xf4>)
 8003ebc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ec0:	60da      	str	r2, [r3, #12]
 8003ec2:	e002      	b.n	8003eca <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003ec4:	4b1a      	ldr	r3, [pc, #104]	; (8003f30 <ethernetif_update_config+0xf4>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <ethernetif_update_config+0xa0>
      {  
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M; 
 8003ed4:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <ethernetif_update_config+0xf4>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	609a      	str	r2, [r3, #8]
 8003eda:	e016      	b.n	8003f0a <ethernetif_update_config+0xce>
      }
      else
      {   
        /* Set Ethernet speed to 100M following the auto-negotiation */ 
        heth.Init.Speed = ETH_SPEED_100M;
 8003edc:	4b14      	ldr	r3, [pc, #80]	; (8003f30 <ethernetif_update_config+0xf4>)
 8003ede:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ee2:	609a      	str	r2, [r3, #8]
 8003ee4:	e011      	b.n	8003f0a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003ee6:	bf00      	nop
 8003ee8:	e000      	b.n	8003eec <ethernetif_update_config+0xb0>
          goto error;
 8003eea:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
      
      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003eec:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <ethernetif_update_config+0xf4>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	08db      	lsrs	r3, r3, #3
 8003ef2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1))); 
 8003ef4:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <ethernetif_update_config+0xf4>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	085b      	lsrs	r3, r3, #1
 8003efa:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003efc:	4313      	orrs	r3, r2
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	461a      	mov	r2, r3
 8003f02:	2100      	movs	r1, #0
 8003f04:	480a      	ldr	r0, [pc, #40]	; (8003f30 <ethernetif_update_config+0xf4>)
 8003f06:	f7fd fdb2 	bl	8001a6e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	4808      	ldr	r0, [pc, #32]	; (8003f30 <ethernetif_update_config+0xf4>)
 8003f0e:	f7fd fe73 	bl	8001bf8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);   
 8003f12:	4807      	ldr	r0, [pc, #28]	; (8003f30 <ethernetif_update_config+0xf4>)
 8003f14:	f7fd fe11 	bl	8001b3a <HAL_ETH_Start>
 8003f18:	e002      	b.n	8003f20 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003f1a:	4805      	ldr	r0, [pc, #20]	; (8003f30 <ethernetif_update_config+0xf4>)
 8003f1c:	f7fd fe3c 	bl	8001b98 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f807 	bl	8003f34 <ethernetif_notify_conn_changed>
}
 8003f26:	bf00      	nop
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	2000ad88 	.word	0x2000ad88

08003f34 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file 
            when the callback is needed,
  */

}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	4603      	mov	r3, r0
 8003f50:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003f52:	2300      	movs	r3, #0
 8003f54:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003f56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f5a:	2b84      	cmp	r3, #132	; 0x84
 8003f5c:	d005      	beq.n	8003f6a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003f5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4413      	add	r3, r2
 8003f66:	3303      	adds	r3, #3
 8003f68:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f7e:	f3ef 8305 	mrs	r3, IPSR
 8003f82:	607b      	str	r3, [r7, #4]
  return(result);
 8003f84:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	bf14      	ite	ne
 8003f8a:	2301      	movne	r3, #1
 8003f8c:	2300      	moveq	r3, #0
 8003f8e:	b2db      	uxtb	r3, r3
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003fa0:	f001 fd5a 	bl	8005a58 <vTaskStartScheduler>
  
  return osOK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8003fae:	f7ff ffe3 	bl	8003f78 <inHandlerMode>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8003fb8:	f001 fe6c 	bl	8005c94 <xTaskGetTickCountFromISR>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	e002      	b.n	8003fc6 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8003fc0:	f001 fe58 	bl	8005c74 <xTaskGetTickCount>
 8003fc4:	4603      	mov	r3, r0
  }
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003fca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fcc:	b089      	sub	sp, #36	; 0x24
 8003fce:	af04      	add	r7, sp, #16
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d020      	beq.n	800401e <osThreadCreate+0x54>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01c      	beq.n	800401e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685c      	ldr	r4, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681d      	ldr	r5, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691e      	ldr	r6, [r3, #16]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff ffa6 	bl	8003f48 <makeFreeRtosPriority>
 8003ffc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004006:	9202      	str	r2, [sp, #8]
 8004008:	9301      	str	r3, [sp, #4]
 800400a:	9100      	str	r1, [sp, #0]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	4632      	mov	r2, r6
 8004010:	4629      	mov	r1, r5
 8004012:	4620      	mov	r0, r4
 8004014:	f001 fb4a 	bl	80056ac <xTaskCreateStatic>
 8004018:	4603      	mov	r3, r0
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	e01c      	b.n	8004058 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685c      	ldr	r4, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800402a:	b29e      	uxth	r6, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff ff88 	bl	8003f48 <makeFreeRtosPriority>
 8004038:	4602      	mov	r2, r0
 800403a:	f107 030c 	add.w	r3, r7, #12
 800403e:	9301      	str	r3, [sp, #4]
 8004040:	9200      	str	r2, [sp, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	4632      	mov	r2, r6
 8004046:	4629      	mov	r1, r5
 8004048:	4620      	mov	r0, r4
 800404a:	f001 fb8f 	bl	800576c <xTaskCreate>
 800404e:	4603      	mov	r3, r0
 8004050:	2b01      	cmp	r3, #1
 8004052:	d001      	beq.n	8004058 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004054:	2300      	movs	r3, #0
 8004056:	e000      	b.n	800405a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004058:	68fb      	ldr	r3, [r7, #12]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004062 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <osDelay+0x16>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	e000      	b.n	800407a <osDelay+0x18>
 8004078:	2301      	movs	r3, #1
 800407a:	4618      	mov	r0, r3
 800407c:	f001 fcb6 	bl	80059ec <vTaskDelay>
  
  return osOK;
 8004080:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d007      	beq.n	80040aa <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4619      	mov	r1, r3
 80040a0:	2001      	movs	r0, #1
 80040a2:	f000 fc8e 	bl	80049c2 <xQueueCreateMutexStatic>
 80040a6:	4603      	mov	r3, r0
 80040a8:	e003      	b.n	80040b2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80040aa:	2001      	movs	r0, #1
 80040ac:	f000 fc71 	bl	8004992 <xQueueCreateMutex>
 80040b0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80040c6:	2300      	movs	r3, #0
 80040c8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <osMutexWait+0x18>
    return osErrorParameter;
 80040d0:	2380      	movs	r3, #128	; 0x80
 80040d2:	e03a      	b.n	800414a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040de:	d103      	bne.n	80040e8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80040e0:	f04f 33ff 	mov.w	r3, #4294967295
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	e009      	b.n	80040fc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d006      	beq.n	80040fc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <osMutexWait+0x40>
      ticks = 1;
 80040f8:	2301      	movs	r3, #1
 80040fa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80040fc:	f7ff ff3c 	bl	8003f78 <inHandlerMode>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d017      	beq.n	8004136 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004106:	f107 0308 	add.w	r3, r7, #8
 800410a:	461a      	mov	r2, r3
 800410c:	2100      	movs	r1, #0
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f001 f894 	bl	800523c <xQueueReceiveFromISR>
 8004114:	4603      	mov	r3, r0
 8004116:	2b01      	cmp	r3, #1
 8004118:	d001      	beq.n	800411e <osMutexWait+0x62>
      return osErrorOS;
 800411a:	23ff      	movs	r3, #255	; 0xff
 800411c:	e015      	b.n	800414a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d011      	beq.n	8004148 <osMutexWait+0x8c>
 8004124:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <osMutexWait+0x98>)
 8004126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	e008      	b.n	8004148 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004136:	68f9      	ldr	r1, [r7, #12]
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 ff6f 	bl	800501c <xQueueSemaphoreTake>
 800413e:	4603      	mov	r3, r0
 8004140:	2b01      	cmp	r3, #1
 8004142:	d001      	beq.n	8004148 <osMutexWait+0x8c>
    return osErrorOS;
 8004144:	23ff      	movs	r3, #255	; 0xff
 8004146:	e000      	b.n	800414a <osMutexWait+0x8e>
  }
  
  return osOK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	e000ed04 	.word	0xe000ed04

08004158 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004160:	2300      	movs	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004164:	2300      	movs	r3, #0
 8004166:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004168:	f7ff ff06 	bl	8003f78 <inHandlerMode>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d016      	beq.n	80041a0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004172:	f107 0308 	add.w	r3, r7, #8
 8004176:	4619      	mov	r1, r3
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 fddb 	bl	8004d34 <xQueueGiveFromISR>
 800417e:	4603      	mov	r3, r0
 8004180:	2b01      	cmp	r3, #1
 8004182:	d001      	beq.n	8004188 <osMutexRelease+0x30>
      return osErrorOS;
 8004184:	23ff      	movs	r3, #255	; 0xff
 8004186:	e017      	b.n	80041b8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d013      	beq.n	80041b6 <osMutexRelease+0x5e>
 800418e:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <osMutexRelease+0x68>)
 8004190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	e00a      	b.n	80041b6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80041a0:	2300      	movs	r3, #0
 80041a2:	2200      	movs	r2, #0
 80041a4:	2100      	movs	r1, #0
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 fc26 	bl	80049f8 <xQueueGenericSend>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d001      	beq.n	80041b6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80041b2:	23ff      	movs	r3, #255	; 0xff
 80041b4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80041b6:	68fb      	ldr	r3, [r7, #12]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	e000ed04 	.word	0xe000ed04

080041c4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d010      	beq.n	80041f8 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d10b      	bne.n	80041f4 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	2303      	movs	r3, #3
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	4613      	mov	r3, r2
 80041e6:	2200      	movs	r2, #0
 80041e8:	2100      	movs	r1, #0
 80041ea:	2001      	movs	r0, #1
 80041ec:	f000 fada 	bl	80047a4 <xQueueGenericCreateStatic>
 80041f0:	4603      	mov	r3, r0
 80041f2:	e016      	b.n	8004222 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	e014      	b.n	8004222 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d110      	bne.n	8004220 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80041fe:	2203      	movs	r2, #3
 8004200:	2100      	movs	r1, #0
 8004202:	2001      	movs	r0, #1
 8004204:	f000 fb4b 	bl	800489e <xQueueGenericCreate>
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <osSemaphoreCreate+0x58>
 8004210:	2300      	movs	r3, #0
 8004212:	2200      	movs	r2, #0
 8004214:	2100      	movs	r1, #0
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 fbee 	bl	80049f8 <xQueueGenericSend>
      return sema;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	e000      	b.n	8004222 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004220:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
	...

0800422c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004236:	2300      	movs	r3, #0
 8004238:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004240:	2380      	movs	r3, #128	; 0x80
 8004242:	e03a      	b.n	80042ba <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424e:	d103      	bne.n	8004258 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004250:	f04f 33ff 	mov.w	r3, #4294967295
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	e009      	b.n	800426c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d006      	beq.n	800426c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <osSemaphoreWait+0x40>
      ticks = 1;
 8004268:	2301      	movs	r3, #1
 800426a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800426c:	f7ff fe84 	bl	8003f78 <inHandlerMode>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d017      	beq.n	80042a6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004276:	f107 0308 	add.w	r3, r7, #8
 800427a:	461a      	mov	r2, r3
 800427c:	2100      	movs	r1, #0
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 ffdc 	bl	800523c <xQueueReceiveFromISR>
 8004284:	4603      	mov	r3, r0
 8004286:	2b01      	cmp	r3, #1
 8004288:	d001      	beq.n	800428e <osSemaphoreWait+0x62>
      return osErrorOS;
 800428a:	23ff      	movs	r3, #255	; 0xff
 800428c:	e015      	b.n	80042ba <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d011      	beq.n	80042b8 <osSemaphoreWait+0x8c>
 8004294:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <osSemaphoreWait+0x98>)
 8004296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	e008      	b.n	80042b8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80042a6:	68f9      	ldr	r1, [r7, #12]
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 feb7 	bl	800501c <xQueueSemaphoreTake>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d001      	beq.n	80042b8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80042b4:	23ff      	movs	r3, #255	; 0xff
 80042b6:	e000      	b.n	80042ba <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	e000ed04 	.word	0xe000ed04

080042c8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80042d4:	2300      	movs	r3, #0
 80042d6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80042d8:	f7ff fe4e 	bl	8003f78 <inHandlerMode>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d016      	beq.n	8004310 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80042e2:	f107 0308 	add.w	r3, r7, #8
 80042e6:	4619      	mov	r1, r3
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 fd23 	bl	8004d34 <xQueueGiveFromISR>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d001      	beq.n	80042f8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80042f4:	23ff      	movs	r3, #255	; 0xff
 80042f6:	e017      	b.n	8004328 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d013      	beq.n	8004326 <osSemaphoreRelease+0x5e>
 80042fe:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <osSemaphoreRelease+0x68>)
 8004300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	e00a      	b.n	8004326 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004310:	2300      	movs	r3, #0
 8004312:	2200      	movs	r2, #0
 8004314:	2100      	movs	r1, #0
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 fb6e 	bl	80049f8 <xQueueGenericSend>
 800431c:	4603      	mov	r3, r0
 800431e:	2b01      	cmp	r3, #1
 8004320:	d001      	beq.n	8004326 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004322:	23ff      	movs	r3, #255	; 0xff
 8004324:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004326:	68fb      	ldr	r3, [r7, #12]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	e000ed04 	.word	0xe000ed04

08004334 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800433c:	f7ff fe1c 	bl	8003f78 <inHandlerMode>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8004346:	2382      	movs	r3, #130	; 0x82
 8004348:	e003      	b.n	8004352 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f001 f837 	bl	80053be <vQueueDelete>

  return osOK; 
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800435a:	b590      	push	{r4, r7, lr}
 800435c:	b085      	sub	sp, #20
 800435e:	af02      	add	r7, sp, #8
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d012      	beq.n	8004392 <osMessageCreate+0x38>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00e      	beq.n	8004392 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6818      	ldr	r0, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6859      	ldr	r1, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68dc      	ldr	r4, [r3, #12]
 8004384:	2300      	movs	r3, #0
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	4623      	mov	r3, r4
 800438a:	f000 fa0b 	bl	80047a4 <xQueueGenericCreateStatic>
 800438e:	4603      	mov	r3, r0
 8004390:	e008      	b.n	80043a4 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	4619      	mov	r1, r3
 800439e:	f000 fa7e 	bl	800489e <xQueueGenericCreate>
 80043a2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd90      	pop	{r4, r7, pc}

080043ac <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80043b8:	2300      	movs	r3, #0
 80043ba:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <osMessagePut+0x1e>
    ticks = 1;
 80043c6:	2301      	movs	r3, #1
 80043c8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80043ca:	f7ff fdd5 	bl	8003f78 <inHandlerMode>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d018      	beq.n	8004406 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80043d4:	f107 0210 	add.w	r2, r7, #16
 80043d8:	f107 0108 	add.w	r1, r7, #8
 80043dc:	2300      	movs	r3, #0
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 fc0c 	bl	8004bfc <xQueueGenericSendFromISR>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d001      	beq.n	80043ee <osMessagePut+0x42>
      return osErrorOS;
 80043ea:	23ff      	movs	r3, #255	; 0xff
 80043ec:	e018      	b.n	8004420 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d014      	beq.n	800441e <osMessagePut+0x72>
 80043f4:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <osMessagePut+0x7c>)
 80043f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	f3bf 8f6f 	isb	sy
 8004404:	e00b      	b.n	800441e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004406:	f107 0108 	add.w	r1, r7, #8
 800440a:	2300      	movs	r3, #0
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 faf2 	bl	80049f8 <xQueueGenericSend>
 8004414:	4603      	mov	r3, r0
 8004416:	2b01      	cmp	r3, #1
 8004418:	d001      	beq.n	800441e <osMessagePut+0x72>
      return osErrorOS;
 800441a:	23ff      	movs	r3, #255	; 0xff
 800441c:	e000      	b.n	8004420 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3718      	adds	r7, #24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	e000ed04 	.word	0xe000ed04

0800442c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800442c:	b590      	push	{r4, r7, lr}
 800442e:	b08b      	sub	sp, #44	; 0x2c
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800443c:	2300      	movs	r3, #0
 800443e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10a      	bne.n	800445c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004446:	2380      	movs	r3, #128	; 0x80
 8004448:	617b      	str	r3, [r7, #20]
    return event;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	461c      	mov	r4, r3
 800444e:	f107 0314 	add.w	r3, r7, #20
 8004452:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004456:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800445a:	e054      	b.n	8004506 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800445c:	2300      	movs	r3, #0
 800445e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446a:	d103      	bne.n	8004474 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800446c:	f04f 33ff 	mov.w	r3, #4294967295
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
 8004472:	e009      	b.n	8004488 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d006      	beq.n	8004488 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <osMessageGet+0x5c>
      ticks = 1;
 8004484:	2301      	movs	r3, #1
 8004486:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004488:	f7ff fd76 	bl	8003f78 <inHandlerMode>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d01c      	beq.n	80044cc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004492:	f107 0220 	add.w	r2, r7, #32
 8004496:	f107 0314 	add.w	r3, r7, #20
 800449a:	3304      	adds	r3, #4
 800449c:	4619      	mov	r1, r3
 800449e:	68b8      	ldr	r0, [r7, #8]
 80044a0:	f000 fecc 	bl	800523c <xQueueReceiveFromISR>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d102      	bne.n	80044b0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80044aa:	2310      	movs	r3, #16
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	e001      	b.n	80044b4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d01d      	beq.n	80044f6 <osMessageGet+0xca>
 80044ba:	4b15      	ldr	r3, [pc, #84]	; (8004510 <osMessageGet+0xe4>)
 80044bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	e014      	b.n	80044f6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80044cc:	f107 0314 	add.w	r3, r7, #20
 80044d0:	3304      	adds	r3, #4
 80044d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d4:	4619      	mov	r1, r3
 80044d6:	68b8      	ldr	r0, [r7, #8]
 80044d8:	f000 fcbe 	bl	8004e58 <xQueueReceive>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d102      	bne.n	80044e8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80044e2:	2310      	movs	r3, #16
 80044e4:	617b      	str	r3, [r7, #20]
 80044e6:	e006      	b.n	80044f6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <osMessageGet+0xc6>
 80044ee:	2300      	movs	r3, #0
 80044f0:	e000      	b.n	80044f4 <osMessageGet+0xc8>
 80044f2:	2340      	movs	r3, #64	; 0x40
 80044f4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	461c      	mov	r4, r3
 80044fa:	f107 0314 	add.w	r3, r7, #20
 80044fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004502:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	372c      	adds	r7, #44	; 0x2c
 800450a:	46bd      	mov	sp, r7
 800450c:	bd90      	pop	{r4, r7, pc}
 800450e:	bf00      	nop
 8004510:	e000ed04 	.word	0xe000ed04

08004514 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800451c:	f7ff fd2c 	bl	8003f78 <inHandlerMode>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d004      	beq.n	8004530 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 ff2a 	bl	8005380 <uxQueueMessagesWaitingFromISR>
 800452c:	4603      	mov	r3, r0
 800452e:	e003      	b.n	8004538 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 ff06 	bl	8005342 <uxQueueMessagesWaiting>
 8004536:	4603      	mov	r3, r0
  }
}
 8004538:	4618      	mov	r0, r3
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004548:	f7ff fd16 	bl	8003f78 <inHandlerMode>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <osMessageDelete+0x16>
    return osErrorISR;
 8004552:	2382      	movs	r3, #130	; 0x82
 8004554:	e003      	b.n	800455e <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 ff31 	bl	80053be <vQueueDelete>

  return osOK; 
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f103 0208 	add.w	r2, r3, #8
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f04f 32ff 	mov.w	r2, #4294967295
 800457e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f103 0208 	add.w	r2, r3, #8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f103 0208 	add.w	r2, r3, #8
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80045a6:	b480      	push	{r7}
 80045a8:	b083      	sub	sp, #12
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	601a      	str	r2, [r3, #0]
}
 80045fc:	bf00      	nop
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461e:	d103      	bne.n	8004628 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	e00c      	b.n	8004642 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3308      	adds	r3, #8
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	e002      	b.n	8004636 <vListInsert+0x2e>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	429a      	cmp	r2, r3
 8004640:	d2f6      	bcs.n	8004630 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	601a      	str	r2, [r3, #0]
}
 800466e:	bf00      	nop
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800467a:	b480      	push	{r7}
 800467c:	b085      	sub	sp, #20
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6892      	ldr	r2, [r2, #8]
 8004690:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6852      	ldr	r2, [r2, #4]
 800469a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d103      	bne.n	80046ae <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	1e5a      	subs	r2, r3, #1
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
	...

080046d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10b      	bne.n	80046fc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80046e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e8:	b672      	cpsid	i
 80046ea:	f383 8811 	msr	BASEPRI, r3
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	b662      	cpsie	i
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	e7fe      	b.n	80046fa <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80046fc:	f002 f944 	bl	8006988 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004708:	68f9      	ldr	r1, [r7, #12]
 800470a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800470c:	fb01 f303 	mul.w	r3, r1, r3
 8004710:	441a      	add	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472c:	3b01      	subs	r3, #1
 800472e:	68f9      	ldr	r1, [r7, #12]
 8004730:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004732:	fb01 f303 	mul.w	r3, r1, r3
 8004736:	441a      	add	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	22ff      	movs	r2, #255	; 0xff
 8004740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	22ff      	movs	r2, #255	; 0xff
 8004748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d114      	bne.n	800477c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d01a      	beq.n	8004790 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	3310      	adds	r3, #16
 800475e:	4618      	mov	r0, r3
 8004760:	f001 fc0c 	bl	8005f7c <xTaskRemoveFromEventList>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d012      	beq.n	8004790 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800476a:	4b0d      	ldr	r3, [pc, #52]	; (80047a0 <xQueueGenericReset+0xd0>)
 800476c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	e009      	b.n	8004790 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3310      	adds	r3, #16
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff fef0 	bl	8004566 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3324      	adds	r3, #36	; 0x24
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff feeb 	bl	8004566 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004790:	f002 f92c 	bl	80069ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004794:	2301      	movs	r3, #1
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	e000ed04 	.word	0xe000ed04

080047a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b08e      	sub	sp, #56	; 0x38
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
 80047b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10b      	bne.n	80047d0 <xQueueGenericCreateStatic+0x2c>
 80047b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047bc:	b672      	cpsid	i
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	b662      	cpsie	i
 80047cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ce:	e7fe      	b.n	80047ce <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10b      	bne.n	80047ee <xQueueGenericCreateStatic+0x4a>
 80047d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047da:	b672      	cpsid	i
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	b662      	cpsie	i
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24
 80047ec:	e7fe      	b.n	80047ec <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <xQueueGenericCreateStatic+0x56>
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <xQueueGenericCreateStatic+0x5a>
 80047fa:	2301      	movs	r3, #1
 80047fc:	e000      	b.n	8004800 <xQueueGenericCreateStatic+0x5c>
 80047fe:	2300      	movs	r3, #0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10b      	bne.n	800481c <xQueueGenericCreateStatic+0x78>
 8004804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004808:	b672      	cpsid	i
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	b662      	cpsie	i
 8004818:	623b      	str	r3, [r7, #32]
 800481a:	e7fe      	b.n	800481a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d102      	bne.n	8004828 <xQueueGenericCreateStatic+0x84>
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <xQueueGenericCreateStatic+0x88>
 8004828:	2301      	movs	r3, #1
 800482a:	e000      	b.n	800482e <xQueueGenericCreateStatic+0x8a>
 800482c:	2300      	movs	r3, #0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10b      	bne.n	800484a <xQueueGenericCreateStatic+0xa6>
 8004832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004836:	b672      	cpsid	i
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	b662      	cpsie	i
 8004846:	61fb      	str	r3, [r7, #28]
 8004848:	e7fe      	b.n	8004848 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800484a:	2348      	movs	r3, #72	; 0x48
 800484c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b48      	cmp	r3, #72	; 0x48
 8004852:	d00b      	beq.n	800486c <xQueueGenericCreateStatic+0xc8>
 8004854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004858:	b672      	cpsid	i
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	b662      	cpsie	i
 8004868:	61bb      	str	r3, [r7, #24]
 800486a:	e7fe      	b.n	800486a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800486c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00d      	beq.n	8004894 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004880:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	4613      	mov	r3, r2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	68b9      	ldr	r1, [r7, #8]
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 f846 	bl	8004920 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004896:	4618      	mov	r0, r3
 8004898:	3730      	adds	r7, #48	; 0x30
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b08a      	sub	sp, #40	; 0x28
 80048a2:	af02      	add	r7, sp, #8
 80048a4:	60f8      	str	r0, [r7, #12]
 80048a6:	60b9      	str	r1, [r7, #8]
 80048a8:	4613      	mov	r3, r2
 80048aa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10b      	bne.n	80048ca <xQueueGenericCreate+0x2c>
 80048b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b6:	b672      	cpsid	i
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	b662      	cpsie	i
 80048c6:	613b      	str	r3, [r7, #16]
 80048c8:	e7fe      	b.n	80048c8 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d102      	bne.n	80048d6 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80048d0:	2300      	movs	r3, #0
 80048d2:	61fb      	str	r3, [r7, #28]
 80048d4:	e004      	b.n	80048e0 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	fb02 f303 	mul.w	r3, r2, r3
 80048de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	3348      	adds	r3, #72	; 0x48
 80048e4:	4618      	mov	r0, r3
 80048e6:	f002 f971 	bl	8006bcc <pvPortMalloc>
 80048ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d011      	beq.n	8004916 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	3348      	adds	r3, #72	; 0x48
 80048fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004904:	79fa      	ldrb	r2, [r7, #7]
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	4613      	mov	r3, r2
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	68b9      	ldr	r1, [r7, #8]
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 f805 	bl	8004920 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004916:	69bb      	ldr	r3, [r7, #24]
	}
 8004918:	4618      	mov	r0, r3
 800491a:	3720      	adds	r7, #32
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d103      	bne.n	800493c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	e002      	b.n	8004942 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800494e:	2101      	movs	r1, #1
 8004950:	69b8      	ldr	r0, [r7, #24]
 8004952:	f7ff febd 	bl	80046d0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004956:	bf00      	nop
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800495e:	b580      	push	{r7, lr}
 8004960:	b082      	sub	sp, #8
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00e      	beq.n	800498a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800497e:	2300      	movs	r3, #0
 8004980:	2200      	movs	r2, #0
 8004982:	2100      	movs	r1, #0
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f837 	bl	80049f8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800498a:	bf00      	nop
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004992:	b580      	push	{r7, lr}
 8004994:	b086      	sub	sp, #24
 8004996:	af00      	add	r7, sp, #0
 8004998:	4603      	mov	r3, r0
 800499a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800499c:	2301      	movs	r3, #1
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	2300      	movs	r3, #0
 80049a2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80049a4:	79fb      	ldrb	r3, [r7, #7]
 80049a6:	461a      	mov	r2, r3
 80049a8:	6939      	ldr	r1, [r7, #16]
 80049aa:	6978      	ldr	r0, [r7, #20]
 80049ac:	f7ff ff77 	bl	800489e <xQueueGenericCreate>
 80049b0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f7ff ffd3 	bl	800495e <prvInitialiseMutex>

		return xNewQueue;
 80049b8:	68fb      	ldr	r3, [r7, #12]
	}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b088      	sub	sp, #32
 80049c6:	af02      	add	r7, sp, #8
 80049c8:	4603      	mov	r3, r0
 80049ca:	6039      	str	r1, [r7, #0]
 80049cc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80049ce:	2301      	movs	r3, #1
 80049d0:	617b      	str	r3, [r7, #20]
 80049d2:	2300      	movs	r3, #0
 80049d4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80049d6:	79fb      	ldrb	r3, [r7, #7]
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2200      	movs	r2, #0
 80049de:	6939      	ldr	r1, [r7, #16]
 80049e0:	6978      	ldr	r0, [r7, #20]
 80049e2:	f7ff fedf 	bl	80047a4 <xQueueGenericCreateStatic>
 80049e6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f7ff ffb8 	bl	800495e <prvInitialiseMutex>

		return xNewQueue;
 80049ee:	68fb      	ldr	r3, [r7, #12]
	}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08e      	sub	sp, #56	; 0x38
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a06:	2300      	movs	r3, #0
 8004a08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10b      	bne.n	8004a2c <xQueueGenericSend+0x34>
 8004a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a18:	b672      	cpsid	i
 8004a1a:	f383 8811 	msr	BASEPRI, r3
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	b662      	cpsie	i
 8004a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a2a:	e7fe      	b.n	8004a2a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d103      	bne.n	8004a3a <xQueueGenericSend+0x42>
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <xQueueGenericSend+0x46>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e000      	b.n	8004a40 <xQueueGenericSend+0x48>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10b      	bne.n	8004a5c <xQueueGenericSend+0x64>
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	b672      	cpsid	i
 8004a4a:	f383 8811 	msr	BASEPRI, r3
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	b662      	cpsie	i
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24
 8004a5a:	e7fe      	b.n	8004a5a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d103      	bne.n	8004a6a <xQueueGenericSend+0x72>
 8004a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <xQueueGenericSend+0x76>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <xQueueGenericSend+0x78>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10b      	bne.n	8004a8c <xQueueGenericSend+0x94>
 8004a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a78:	b672      	cpsid	i
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	b662      	cpsie	i
 8004a88:	623b      	str	r3, [r7, #32]
 8004a8a:	e7fe      	b.n	8004a8a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a8c:	f001 fc34 	bl	80062f8 <xTaskGetSchedulerState>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d102      	bne.n	8004a9c <xQueueGenericSend+0xa4>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <xQueueGenericSend+0xa8>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e000      	b.n	8004aa2 <xQueueGenericSend+0xaa>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10b      	bne.n	8004abe <xQueueGenericSend+0xc6>
 8004aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aaa:	b672      	cpsid	i
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	b662      	cpsie	i
 8004aba:	61fb      	str	r3, [r7, #28]
 8004abc:	e7fe      	b.n	8004abc <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004abe:	f001 ff63 	bl	8006988 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d302      	bcc.n	8004ad4 <xQueueGenericSend+0xdc>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d129      	bne.n	8004b28 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	68b9      	ldr	r1, [r7, #8]
 8004ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ada:	f000 fcac 	bl	8005436 <prvCopyDataToQueue>
 8004ade:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d010      	beq.n	8004b0a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aea:	3324      	adds	r3, #36	; 0x24
 8004aec:	4618      	mov	r0, r3
 8004aee:	f001 fa45 	bl	8005f7c <xTaskRemoveFromEventList>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d013      	beq.n	8004b20 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004af8:	4b3f      	ldr	r3, [pc, #252]	; (8004bf8 <xQueueGenericSend+0x200>)
 8004afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	e00a      	b.n	8004b20 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d007      	beq.n	8004b20 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b10:	4b39      	ldr	r3, [pc, #228]	; (8004bf8 <xQueueGenericSend+0x200>)
 8004b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b20:	f001 ff64 	bl	80069ec <vPortExitCritical>
				return pdPASS;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e063      	b.n	8004bf0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d103      	bne.n	8004b36 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b2e:	f001 ff5d 	bl	80069ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	e05c      	b.n	8004bf0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d106      	bne.n	8004b4a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b3c:	f107 0314 	add.w	r3, r7, #20
 8004b40:	4618      	mov	r0, r3
 8004b42:	f001 fa7f 	bl	8006044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b46:	2301      	movs	r3, #1
 8004b48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b4a:	f001 ff4f 	bl	80069ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b4e:	f000 ffe5 	bl	8005b1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b52:	f001 ff19 	bl	8006988 <vPortEnterCritical>
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b5c:	b25b      	sxtb	r3, r3
 8004b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b62:	d103      	bne.n	8004b6c <xQueueGenericSend+0x174>
 8004b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b72:	b25b      	sxtb	r3, r3
 8004b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b78:	d103      	bne.n	8004b82 <xQueueGenericSend+0x18a>
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b82:	f001 ff33 	bl	80069ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b86:	1d3a      	adds	r2, r7, #4
 8004b88:	f107 0314 	add.w	r3, r7, #20
 8004b8c:	4611      	mov	r1, r2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f001 fa6e 	bl	8006070 <xTaskCheckForTimeOut>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d124      	bne.n	8004be4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b9c:	f000 fd43 	bl	8005626 <prvIsQueueFull>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d018      	beq.n	8004bd8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba8:	3310      	adds	r3, #16
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	4611      	mov	r1, r2
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f001 f9be 	bl	8005f30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bb6:	f000 fcce 	bl	8005556 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004bba:	f000 ffbd 	bl	8005b38 <xTaskResumeAll>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f47f af7c 	bne.w	8004abe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004bc6:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <xQueueGenericSend+0x200>)
 8004bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	e772      	b.n	8004abe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bda:	f000 fcbc 	bl	8005556 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bde:	f000 ffab 	bl	8005b38 <xTaskResumeAll>
 8004be2:	e76c      	b.n	8004abe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004be6:	f000 fcb6 	bl	8005556 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bea:	f000 ffa5 	bl	8005b38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004bee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3738      	adds	r7, #56	; 0x38
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	e000ed04 	.word	0xe000ed04

08004bfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08e      	sub	sp, #56	; 0x38
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10b      	bne.n	8004c2c <xQueueGenericSendFromISR+0x30>
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	b672      	cpsid	i
 8004c1a:	f383 8811 	msr	BASEPRI, r3
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	b662      	cpsie	i
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
 8004c2a:	e7fe      	b.n	8004c2a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d103      	bne.n	8004c3a <xQueueGenericSendFromISR+0x3e>
 8004c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <xQueueGenericSendFromISR+0x42>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <xQueueGenericSendFromISR+0x44>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10b      	bne.n	8004c5c <xQueueGenericSendFromISR+0x60>
 8004c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c48:	b672      	cpsid	i
 8004c4a:	f383 8811 	msr	BASEPRI, r3
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	b662      	cpsie	i
 8004c58:	623b      	str	r3, [r7, #32]
 8004c5a:	e7fe      	b.n	8004c5a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d103      	bne.n	8004c6a <xQueueGenericSendFromISR+0x6e>
 8004c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d101      	bne.n	8004c6e <xQueueGenericSendFromISR+0x72>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e000      	b.n	8004c70 <xQueueGenericSendFromISR+0x74>
 8004c6e:	2300      	movs	r3, #0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10b      	bne.n	8004c8c <xQueueGenericSendFromISR+0x90>
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	b672      	cpsid	i
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	b662      	cpsie	i
 8004c88:	61fb      	str	r3, [r7, #28]
 8004c8a:	e7fe      	b.n	8004c8a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c8c:	f001 ff5c 	bl	8006b48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c90:	f3ef 8211 	mrs	r2, BASEPRI
 8004c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c98:	b672      	cpsid	i
 8004c9a:	f383 8811 	msr	BASEPRI, r3
 8004c9e:	f3bf 8f6f 	isb	sy
 8004ca2:	f3bf 8f4f 	dsb	sy
 8004ca6:	b662      	cpsie	i
 8004ca8:	61ba      	str	r2, [r7, #24]
 8004caa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004cac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d302      	bcc.n	8004cc2 <xQueueGenericSendFromISR+0xc6>
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d12c      	bne.n	8004d1c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	68b9      	ldr	r1, [r7, #8]
 8004cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cd2:	f000 fbb0 	bl	8005436 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004cd6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cde:	d112      	bne.n	8004d06 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d016      	beq.n	8004d16 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cea:	3324      	adds	r3, #36	; 0x24
 8004cec:	4618      	mov	r0, r3
 8004cee:	f001 f945 	bl	8005f7c <xTaskRemoveFromEventList>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00e      	beq.n	8004d16 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00b      	beq.n	8004d16 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	e007      	b.n	8004d16 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	b25a      	sxtb	r2, r3
 8004d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004d16:	2301      	movs	r3, #1
 8004d18:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004d1a:	e001      	b.n	8004d20 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d22:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3738      	adds	r7, #56	; 0x38
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08e      	sub	sp, #56	; 0x38
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10b      	bne.n	8004d60 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8004d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4c:	b672      	cpsid	i
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	b662      	cpsie	i
 8004d5c:	623b      	str	r3, [r7, #32]
 8004d5e:	e7fe      	b.n	8004d5e <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00b      	beq.n	8004d80 <xQueueGiveFromISR+0x4c>
 8004d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6c:	b672      	cpsid	i
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	b662      	cpsie	i
 8004d7c:	61fb      	str	r3, [r7, #28]
 8004d7e:	e7fe      	b.n	8004d7e <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d103      	bne.n	8004d90 <xQueueGiveFromISR+0x5c>
 8004d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <xQueueGiveFromISR+0x60>
 8004d90:	2301      	movs	r3, #1
 8004d92:	e000      	b.n	8004d96 <xQueueGiveFromISR+0x62>
 8004d94:	2300      	movs	r3, #0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10b      	bne.n	8004db2 <xQueueGiveFromISR+0x7e>
 8004d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9e:	b672      	cpsid	i
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	b662      	cpsie	i
 8004dae:	61bb      	str	r3, [r7, #24]
 8004db0:	e7fe      	b.n	8004db0 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004db2:	f001 fec9 	bl	8006b48 <vPortValidateInterruptPriority>
	__asm volatile
 8004db6:	f3ef 8211 	mrs	r2, BASEPRI
 8004dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbe:	b672      	cpsid	i
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	b662      	cpsie	i
 8004dce:	617a      	str	r2, [r7, #20]
 8004dd0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004dd2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dda:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d22b      	bcs.n	8004e3e <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004df8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e00:	d112      	bne.n	8004e28 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d016      	beq.n	8004e38 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0c:	3324      	adds	r3, #36	; 0x24
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f001 f8b4 	bl	8005f7c <xTaskRemoveFromEventList>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00e      	beq.n	8004e38 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00b      	beq.n	8004e38 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2201      	movs	r2, #1
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	e007      	b.n	8004e38 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	b25a      	sxtb	r2, r3
 8004e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e3c:	e001      	b.n	8004e42 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	637b      	str	r3, [r7, #52]	; 0x34
 8004e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e44:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3738      	adds	r7, #56	; 0x38
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08c      	sub	sp, #48	; 0x30
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e64:	2300      	movs	r3, #0
 8004e66:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10b      	bne.n	8004e8a <xQueueReceive+0x32>
	__asm volatile
 8004e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e76:	b672      	cpsid	i
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	b662      	cpsie	i
 8004e86:	623b      	str	r3, [r7, #32]
 8004e88:	e7fe      	b.n	8004e88 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d103      	bne.n	8004e98 <xQueueReceive+0x40>
 8004e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <xQueueReceive+0x44>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e000      	b.n	8004e9e <xQueueReceive+0x46>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10b      	bne.n	8004eba <xQueueReceive+0x62>
 8004ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea6:	b672      	cpsid	i
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	b662      	cpsie	i
 8004eb6:	61fb      	str	r3, [r7, #28]
 8004eb8:	e7fe      	b.n	8004eb8 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004eba:	f001 fa1d 	bl	80062f8 <xTaskGetSchedulerState>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d102      	bne.n	8004eca <xQueueReceive+0x72>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <xQueueReceive+0x76>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e000      	b.n	8004ed0 <xQueueReceive+0x78>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10b      	bne.n	8004eec <xQueueReceive+0x94>
 8004ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed8:	b672      	cpsid	i
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	b662      	cpsie	i
 8004ee8:	61bb      	str	r3, [r7, #24]
 8004eea:	e7fe      	b.n	8004eea <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004eec:	f001 fd4c 	bl	8006988 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01f      	beq.n	8004f3c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004efc:	68b9      	ldr	r1, [r7, #8]
 8004efe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f00:	f000 fb03 	bl	800550a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	1e5a      	subs	r2, r3, #1
 8004f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00f      	beq.n	8004f34 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f16:	3310      	adds	r3, #16
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f001 f82f 	bl	8005f7c <xTaskRemoveFromEventList>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d007      	beq.n	8004f34 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f24:	4b3c      	ldr	r3, [pc, #240]	; (8005018 <xQueueReceive+0x1c0>)
 8004f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f34:	f001 fd5a 	bl	80069ec <vPortExitCritical>
				return pdPASS;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e069      	b.n	8005010 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d103      	bne.n	8004f4a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f42:	f001 fd53 	bl	80069ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f46:	2300      	movs	r3, #0
 8004f48:	e062      	b.n	8005010 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d106      	bne.n	8004f5e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f50:	f107 0310 	add.w	r3, r7, #16
 8004f54:	4618      	mov	r0, r3
 8004f56:	f001 f875 	bl	8006044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f5e:	f001 fd45 	bl	80069ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f62:	f000 fddb 	bl	8005b1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f66:	f001 fd0f 	bl	8006988 <vPortEnterCritical>
 8004f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f70:	b25b      	sxtb	r3, r3
 8004f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f76:	d103      	bne.n	8004f80 <xQueueReceive+0x128>
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f86:	b25b      	sxtb	r3, r3
 8004f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8c:	d103      	bne.n	8004f96 <xQueueReceive+0x13e>
 8004f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f96:	f001 fd29 	bl	80069ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f9a:	1d3a      	adds	r2, r7, #4
 8004f9c:	f107 0310 	add.w	r3, r7, #16
 8004fa0:	4611      	mov	r1, r2
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f001 f864 	bl	8006070 <xTaskCheckForTimeOut>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d123      	bne.n	8004ff6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fb0:	f000 fb23 	bl	80055fa <prvIsQueueEmpty>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d017      	beq.n	8004fea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbc:	3324      	adds	r3, #36	; 0x24
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	4611      	mov	r1, r2
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 ffb4 	bl	8005f30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004fc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fca:	f000 fac4 	bl	8005556 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004fce:	f000 fdb3 	bl	8005b38 <xTaskResumeAll>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d189      	bne.n	8004eec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004fd8:	4b0f      	ldr	r3, [pc, #60]	; (8005018 <xQueueReceive+0x1c0>)
 8004fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	e780      	b.n	8004eec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004fea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fec:	f000 fab3 	bl	8005556 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ff0:	f000 fda2 	bl	8005b38 <xTaskResumeAll>
 8004ff4:	e77a      	b.n	8004eec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ff8:	f000 faad 	bl	8005556 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ffc:	f000 fd9c 	bl	8005b38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005002:	f000 fafa 	bl	80055fa <prvIsQueueEmpty>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	f43f af6f 	beq.w	8004eec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800500e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005010:	4618      	mov	r0, r3
 8005012:	3730      	adds	r7, #48	; 0x30
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	e000ed04 	.word	0xe000ed04

0800501c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08e      	sub	sp, #56	; 0x38
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005026:	2300      	movs	r3, #0
 8005028:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800502e:	2300      	movs	r3, #0
 8005030:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10b      	bne.n	8005050 <xQueueSemaphoreTake+0x34>
 8005038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503c:	b672      	cpsid	i
 800503e:	f383 8811 	msr	BASEPRI, r3
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	b662      	cpsie	i
 800504c:	623b      	str	r3, [r7, #32]
 800504e:	e7fe      	b.n	800504e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00b      	beq.n	8005070 <xQueueSemaphoreTake+0x54>
 8005058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505c:	b672      	cpsid	i
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	b662      	cpsie	i
 800506c:	61fb      	str	r3, [r7, #28]
 800506e:	e7fe      	b.n	800506e <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005070:	f001 f942 	bl	80062f8 <xTaskGetSchedulerState>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d102      	bne.n	8005080 <xQueueSemaphoreTake+0x64>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <xQueueSemaphoreTake+0x68>
 8005080:	2301      	movs	r3, #1
 8005082:	e000      	b.n	8005086 <xQueueSemaphoreTake+0x6a>
 8005084:	2300      	movs	r3, #0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10b      	bne.n	80050a2 <xQueueSemaphoreTake+0x86>
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	b672      	cpsid	i
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	b662      	cpsie	i
 800509e:	61bb      	str	r3, [r7, #24]
 80050a0:	e7fe      	b.n	80050a0 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050a2:	f001 fc71 	bl	8006988 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80050a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050aa:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d024      	beq.n	80050fc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80050b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b4:	1e5a      	subs	r2, r3, #1
 80050b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d104      	bne.n	80050cc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80050c2:	f001 fadb 	bl	800667c <pvTaskIncrementMutexHeldCount>
 80050c6:	4602      	mov	r2, r0
 80050c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ca:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00f      	beq.n	80050f4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d6:	3310      	adds	r3, #16
 80050d8:	4618      	mov	r0, r3
 80050da:	f000 ff4f 	bl	8005f7c <xTaskRemoveFromEventList>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d007      	beq.n	80050f4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80050e4:	4b54      	ldr	r3, [pc, #336]	; (8005238 <xQueueSemaphoreTake+0x21c>)
 80050e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80050f4:	f001 fc7a 	bl	80069ec <vPortExitCritical>
				return pdPASS;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e098      	b.n	800522e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d112      	bne.n	8005128 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00b      	beq.n	8005120 <xQueueSemaphoreTake+0x104>
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	b672      	cpsid	i
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	b662      	cpsie	i
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	e7fe      	b.n	800511e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005120:	f001 fc64 	bl	80069ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005124:	2300      	movs	r3, #0
 8005126:	e082      	b.n	800522e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800512e:	f107 030c 	add.w	r3, r7, #12
 8005132:	4618      	mov	r0, r3
 8005134:	f000 ff86 	bl	8006044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005138:	2301      	movs	r3, #1
 800513a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800513c:	f001 fc56 	bl	80069ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005140:	f000 fcec 	bl	8005b1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005144:	f001 fc20 	bl	8006988 <vPortEnterCritical>
 8005148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800514e:	b25b      	sxtb	r3, r3
 8005150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005154:	d103      	bne.n	800515e <xQueueSemaphoreTake+0x142>
 8005156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800515e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005164:	b25b      	sxtb	r3, r3
 8005166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516a:	d103      	bne.n	8005174 <xQueueSemaphoreTake+0x158>
 800516c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005174:	f001 fc3a 	bl	80069ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005178:	463a      	mov	r2, r7
 800517a:	f107 030c 	add.w	r3, r7, #12
 800517e:	4611      	mov	r1, r2
 8005180:	4618      	mov	r0, r3
 8005182:	f000 ff75 	bl	8006070 <xTaskCheckForTimeOut>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d132      	bne.n	80051f2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800518c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800518e:	f000 fa34 	bl	80055fa <prvIsQueueEmpty>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d026      	beq.n	80051e6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d109      	bne.n	80051b4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80051a0:	f001 fbf2 	bl	8006988 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80051a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f001 f8c3 	bl	8006334 <xTaskPriorityInherit>
 80051ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80051b0:	f001 fc1c 	bl	80069ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80051b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b6:	3324      	adds	r3, #36	; 0x24
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	4611      	mov	r1, r2
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 feb7 	bl	8005f30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80051c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051c4:	f000 f9c7 	bl	8005556 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80051c8:	f000 fcb6 	bl	8005b38 <xTaskResumeAll>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f47f af67 	bne.w	80050a2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80051d4:	4b18      	ldr	r3, [pc, #96]	; (8005238 <xQueueSemaphoreTake+0x21c>)
 80051d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	e75d      	b.n	80050a2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80051e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051e8:	f000 f9b5 	bl	8005556 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051ec:	f000 fca4 	bl	8005b38 <xTaskResumeAll>
 80051f0:	e757      	b.n	80050a2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80051f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051f4:	f000 f9af 	bl	8005556 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051f8:	f000 fc9e 	bl	8005b38 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051fe:	f000 f9fc 	bl	80055fa <prvIsQueueEmpty>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	f43f af4c 	beq.w	80050a2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800520a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00d      	beq.n	800522c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005210:	f001 fbba 	bl	8006988 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005214:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005216:	f000 f8f6 	bl	8005406 <prvGetDisinheritPriorityAfterTimeout>
 800521a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800521c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005222:	4618      	mov	r0, r3
 8005224:	f001 f98e 	bl	8006544 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005228:	f001 fbe0 	bl	80069ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800522c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800522e:	4618      	mov	r0, r3
 8005230:	3738      	adds	r7, #56	; 0x38
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	e000ed04 	.word	0xe000ed04

0800523c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b08e      	sub	sp, #56	; 0x38
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800524c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10b      	bne.n	800526a <xQueueReceiveFromISR+0x2e>
 8005252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005256:	b672      	cpsid	i
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	b662      	cpsie	i
 8005266:	623b      	str	r3, [r7, #32]
 8005268:	e7fe      	b.n	8005268 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d103      	bne.n	8005278 <xQueueReceiveFromISR+0x3c>
 8005270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <xQueueReceiveFromISR+0x40>
 8005278:	2301      	movs	r3, #1
 800527a:	e000      	b.n	800527e <xQueueReceiveFromISR+0x42>
 800527c:	2300      	movs	r3, #0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10b      	bne.n	800529a <xQueueReceiveFromISR+0x5e>
 8005282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005286:	b672      	cpsid	i
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	b662      	cpsie	i
 8005296:	61fb      	str	r3, [r7, #28]
 8005298:	e7fe      	b.n	8005298 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800529a:	f001 fc55 	bl	8006b48 <vPortValidateInterruptPriority>
	__asm volatile
 800529e:	f3ef 8211 	mrs	r2, BASEPRI
 80052a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a6:	b672      	cpsid	i
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	b662      	cpsie	i
 80052b6:	61ba      	str	r2, [r7, #24]
 80052b8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80052ba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d02f      	beq.n	800532a <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80052ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052d8:	f000 f917 	bl	800550a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	1e5a      	subs	r2, r3, #1
 80052e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80052e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ec:	d112      	bne.n	8005314 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d016      	beq.n	8005324 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f8:	3310      	adds	r3, #16
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 fe3e 	bl	8005f7c <xTaskRemoveFromEventList>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00e      	beq.n	8005324 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00b      	beq.n	8005324 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	e007      	b.n	8005324 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005318:	3301      	adds	r3, #1
 800531a:	b2db      	uxtb	r3, r3
 800531c:	b25a      	sxtb	r2, r3
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005324:	2301      	movs	r3, #1
 8005326:	637b      	str	r3, [r7, #52]	; 0x34
 8005328:	e001      	b.n	800532e <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800532a:	2300      	movs	r3, #0
 800532c:	637b      	str	r3, [r7, #52]	; 0x34
 800532e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005330:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800533a:	4618      	mov	r0, r3
 800533c:	3738      	adds	r7, #56	; 0x38
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b084      	sub	sp, #16
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10b      	bne.n	8005368 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8005350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005354:	b672      	cpsid	i
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	b662      	cpsie	i
 8005364:	60bb      	str	r3, [r7, #8]
 8005366:	e7fe      	b.n	8005366 <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 8005368:	f001 fb0e 	bl	8006988 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005370:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005372:	f001 fb3b 	bl	80069ec <vPortExitCritical>

	return uxReturn;
 8005376:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10b      	bne.n	80053aa <uxQueueMessagesWaitingFromISR+0x2a>
 8005392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005396:	b672      	cpsid	i
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	b662      	cpsie	i
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	e7fe      	b.n	80053a8 <uxQueueMessagesWaitingFromISR+0x28>
	uxReturn = pxQueue->uxMessagesWaiting;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ae:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80053b0:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80053b2:	4618      	mov	r0, r3
 80053b4:	371c      	adds	r7, #28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b084      	sub	sp, #16
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10b      	bne.n	80053e8 <vQueueDelete+0x2a>
 80053d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d4:	b672      	cpsid	i
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	b662      	cpsie	i
 80053e4:	60bb      	str	r3, [r7, #8]
 80053e6:	e7fe      	b.n	80053e6 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 f935 	bl	8005658 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d102      	bne.n	80053fe <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f001 fcaf 	bl	8006d5c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80053fe:	bf00      	nop
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005406:	b480      	push	{r7}
 8005408:	b085      	sub	sp, #20
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	2b00      	cmp	r3, #0
 8005414:	d006      	beq.n	8005424 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f1c3 0307 	rsb	r3, r3, #7
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	e001      	b.n	8005428 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005424:	2300      	movs	r3, #0
 8005426:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005428:	68fb      	ldr	r3, [r7, #12]
	}
 800542a:	4618      	mov	r0, r3
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b086      	sub	sp, #24
 800543a:	af00      	add	r7, sp, #0
 800543c:	60f8      	str	r0, [r7, #12]
 800543e:	60b9      	str	r1, [r7, #8]
 8005440:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005442:	2300      	movs	r3, #0
 8005444:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10d      	bne.n	8005470 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d14d      	bne.n	80054f8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	4618      	mov	r0, r3
 8005462:	f000 ffe7 	bl	8006434 <xTaskPriorityDisinherit>
 8005466:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	609a      	str	r2, [r3, #8]
 800546e:	e043      	b.n	80054f8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d119      	bne.n	80054aa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6858      	ldr	r0, [r3, #4]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	461a      	mov	r2, r3
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	f014 fbba 	bl	8019bfa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	441a      	add	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	429a      	cmp	r2, r3
 800549e:	d32b      	bcc.n	80054f8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	605a      	str	r2, [r3, #4]
 80054a8:	e026      	b.n	80054f8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	68d8      	ldr	r0, [r3, #12]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	461a      	mov	r2, r3
 80054b4:	68b9      	ldr	r1, [r7, #8]
 80054b6:	f014 fba0 	bl	8019bfa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	425b      	negs	r3, r3
 80054c4:	441a      	add	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d207      	bcs.n	80054e6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	689a      	ldr	r2, [r3, #8]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	425b      	negs	r3, r3
 80054e0:	441a      	add	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d105      	bne.n	80054f8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	3b01      	subs	r3, #1
 80054f6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1c5a      	adds	r2, r3, #1
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005500:	697b      	ldr	r3, [r7, #20]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3718      	adds	r7, #24
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b082      	sub	sp, #8
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005518:	2b00      	cmp	r3, #0
 800551a:	d018      	beq.n	800554e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005524:	441a      	add	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	429a      	cmp	r2, r3
 8005534:	d303      	bcc.n	800553e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68d9      	ldr	r1, [r3, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	461a      	mov	r2, r3
 8005548:	6838      	ldr	r0, [r7, #0]
 800554a:	f014 fb56 	bl	8019bfa <memcpy>
	}
}
 800554e:	bf00      	nop
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b084      	sub	sp, #16
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800555e:	f001 fa13 	bl	8006988 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005568:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800556a:	e011      	b.n	8005590 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	2b00      	cmp	r3, #0
 8005572:	d012      	beq.n	800559a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3324      	adds	r3, #36	; 0x24
 8005578:	4618      	mov	r0, r3
 800557a:	f000 fcff 	bl	8005f7c <xTaskRemoveFromEventList>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005584:	f000 fdd8 	bl	8006138 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005588:	7bfb      	ldrb	r3, [r7, #15]
 800558a:	3b01      	subs	r3, #1
 800558c:	b2db      	uxtb	r3, r3
 800558e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005594:	2b00      	cmp	r3, #0
 8005596:	dce9      	bgt.n	800556c <prvUnlockQueue+0x16>
 8005598:	e000      	b.n	800559c <prvUnlockQueue+0x46>
					break;
 800559a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	22ff      	movs	r2, #255	; 0xff
 80055a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80055a4:	f001 fa22 	bl	80069ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80055a8:	f001 f9ee 	bl	8006988 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055b2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055b4:	e011      	b.n	80055da <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d012      	beq.n	80055e4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3310      	adds	r3, #16
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 fcda 	bl	8005f7c <xTaskRemoveFromEventList>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80055ce:	f000 fdb3 	bl	8006138 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80055d2:	7bbb      	ldrb	r3, [r7, #14]
 80055d4:	3b01      	subs	r3, #1
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	dce9      	bgt.n	80055b6 <prvUnlockQueue+0x60>
 80055e2:	e000      	b.n	80055e6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80055e4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	22ff      	movs	r2, #255	; 0xff
 80055ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80055ee:	f001 f9fd 	bl	80069ec <vPortExitCritical>
}
 80055f2:	bf00      	nop
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b084      	sub	sp, #16
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005602:	f001 f9c1 	bl	8006988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560a:	2b00      	cmp	r3, #0
 800560c:	d102      	bne.n	8005614 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800560e:	2301      	movs	r3, #1
 8005610:	60fb      	str	r3, [r7, #12]
 8005612:	e001      	b.n	8005618 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005614:	2300      	movs	r3, #0
 8005616:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005618:	f001 f9e8 	bl	80069ec <vPortExitCritical>

	return xReturn;
 800561c:	68fb      	ldr	r3, [r7, #12]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800562e:	f001 f9ab 	bl	8006988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563a:	429a      	cmp	r2, r3
 800563c:	d102      	bne.n	8005644 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800563e:	2301      	movs	r3, #1
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	e001      	b.n	8005648 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005644:	2300      	movs	r3, #0
 8005646:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005648:	f001 f9d0 	bl	80069ec <vPortExitCritical>

	return xReturn;
 800564c:	68fb      	ldr	r3, [r7, #12]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005660:	2300      	movs	r3, #0
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	e016      	b.n	8005694 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005666:	4a10      	ldr	r2, [pc, #64]	; (80056a8 <vQueueUnregisterQueue+0x50>)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	4413      	add	r3, r2
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	429a      	cmp	r2, r3
 8005674:	d10b      	bne.n	800568e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005676:	4a0c      	ldr	r2, [pc, #48]	; (80056a8 <vQueueUnregisterQueue+0x50>)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2100      	movs	r1, #0
 800567c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005680:	4a09      	ldr	r2, [pc, #36]	; (80056a8 <vQueueUnregisterQueue+0x50>)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	4413      	add	r3, r2
 8005688:	2200      	movs	r2, #0
 800568a:	605a      	str	r2, [r3, #4]
				break;
 800568c:	e005      	b.n	800569a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3301      	adds	r3, #1
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2b07      	cmp	r3, #7
 8005698:	d9e5      	bls.n	8005666 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800569a:	bf00      	nop
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	2000c5a0 	.word	0x2000c5a0

080056ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08e      	sub	sp, #56	; 0x38
 80056b0:	af04      	add	r7, sp, #16
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
 80056b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80056ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10b      	bne.n	80056d8 <xTaskCreateStatic+0x2c>
 80056c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c4:	b672      	cpsid	i
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	b662      	cpsie	i
 80056d4:	623b      	str	r3, [r7, #32]
 80056d6:	e7fe      	b.n	80056d6 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80056d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10b      	bne.n	80056f6 <xTaskCreateStatic+0x4a>
 80056de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e2:	b672      	cpsid	i
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	b662      	cpsie	i
 80056f2:	61fb      	str	r3, [r7, #28]
 80056f4:	e7fe      	b.n	80056f4 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056f6:	2354      	movs	r3, #84	; 0x54
 80056f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	2b54      	cmp	r3, #84	; 0x54
 80056fe:	d00b      	beq.n	8005718 <xTaskCreateStatic+0x6c>
 8005700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005704:	b672      	cpsid	i
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	b662      	cpsie	i
 8005714:	61bb      	str	r3, [r7, #24]
 8005716:	e7fe      	b.n	8005716 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005718:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800571a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01e      	beq.n	800575e <xTaskCreateStatic+0xb2>
 8005720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005722:	2b00      	cmp	r3, #0
 8005724:	d01b      	beq.n	800575e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800572e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	2202      	movs	r2, #2
 8005734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005738:	2300      	movs	r3, #0
 800573a:	9303      	str	r3, [sp, #12]
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	9302      	str	r3, [sp, #8]
 8005740:	f107 0314 	add.w	r3, r7, #20
 8005744:	9301      	str	r3, [sp, #4]
 8005746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	68b9      	ldr	r1, [r7, #8]
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 f850 	bl	80057f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005756:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005758:	f000 f8de 	bl	8005918 <prvAddNewTaskToReadyList>
 800575c:	e001      	b.n	8005762 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800575e:	2300      	movs	r3, #0
 8005760:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005762:	697b      	ldr	r3, [r7, #20]
	}
 8005764:	4618      	mov	r0, r3
 8005766:	3728      	adds	r7, #40	; 0x28
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08c      	sub	sp, #48	; 0x30
 8005770:	af04      	add	r7, sp, #16
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	4613      	mov	r3, r2
 800577a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800577c:	88fb      	ldrh	r3, [r7, #6]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4618      	mov	r0, r3
 8005782:	f001 fa23 	bl	8006bcc <pvPortMalloc>
 8005786:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00e      	beq.n	80057ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800578e:	2054      	movs	r0, #84	; 0x54
 8005790:	f001 fa1c 	bl	8006bcc <pvPortMalloc>
 8005794:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d003      	beq.n	80057a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	631a      	str	r2, [r3, #48]	; 0x30
 80057a2:	e005      	b.n	80057b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80057a4:	6978      	ldr	r0, [r7, #20]
 80057a6:	f001 fad9 	bl	8006d5c <vPortFree>
 80057aa:	e001      	b.n	80057b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80057ac:	2300      	movs	r3, #0
 80057ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d017      	beq.n	80057e6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80057be:	88fa      	ldrh	r2, [r7, #6]
 80057c0:	2300      	movs	r3, #0
 80057c2:	9303      	str	r3, [sp, #12]
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	9302      	str	r3, [sp, #8]
 80057c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ca:	9301      	str	r3, [sp, #4]
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	68b9      	ldr	r1, [r7, #8]
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 f80e 	bl	80057f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057da:	69f8      	ldr	r0, [r7, #28]
 80057dc:	f000 f89c 	bl	8005918 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057e0:	2301      	movs	r3, #1
 80057e2:	61bb      	str	r3, [r7, #24]
 80057e4:	e002      	b.n	80057ec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057e6:	f04f 33ff 	mov.w	r3, #4294967295
 80057ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057ec:	69bb      	ldr	r3, [r7, #24]
	}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3720      	adds	r7, #32
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b088      	sub	sp, #32
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	607a      	str	r2, [r7, #4]
 8005802:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005806:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	461a      	mov	r2, r3
 800580e:	21a5      	movs	r1, #165	; 0xa5
 8005810:	f014 f9fe 	bl	8019c10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005818:	6879      	ldr	r1, [r7, #4]
 800581a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800581e:	440b      	add	r3, r1
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	f023 0307 	bic.w	r3, r3, #7
 800582c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	f003 0307 	and.w	r3, r3, #7
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00b      	beq.n	8005850 <prvInitialiseNewTask+0x5a>
 8005838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583c:	b672      	cpsid	i
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	b662      	cpsie	i
 800584c:	617b      	str	r3, [r7, #20]
 800584e:	e7fe      	b.n	800584e <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d01f      	beq.n	8005896 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005856:	2300      	movs	r3, #0
 8005858:	61fb      	str	r3, [r7, #28]
 800585a:	e012      	b.n	8005882 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	4413      	add	r3, r2
 8005862:	7819      	ldrb	r1, [r3, #0]
 8005864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	4413      	add	r3, r2
 800586a:	3334      	adds	r3, #52	; 0x34
 800586c:	460a      	mov	r2, r1
 800586e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	4413      	add	r3, r2
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d006      	beq.n	800588a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	3301      	adds	r3, #1
 8005880:	61fb      	str	r3, [r7, #28]
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	2b0f      	cmp	r3, #15
 8005886:	d9e9      	bls.n	800585c <prvInitialiseNewTask+0x66>
 8005888:	e000      	b.n	800588c <prvInitialiseNewTask+0x96>
			{
				break;
 800588a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005894:	e003      	b.n	800589e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800589e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a0:	2b06      	cmp	r3, #6
 80058a2:	d901      	bls.n	80058a8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058a4:	2306      	movs	r3, #6
 80058a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80058ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058b2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80058b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b6:	2200      	movs	r2, #0
 80058b8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	3304      	adds	r3, #4
 80058be:	4618      	mov	r0, r3
 80058c0:	f7fe fe71 	bl	80045a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80058c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c6:	3318      	adds	r3, #24
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fe fe6c 	bl	80045a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80058ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d6:	f1c3 0207 	rsb	r2, r3, #7
 80058da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80058e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e6:	2200      	movs	r2, #0
 80058e8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	68f9      	ldr	r1, [r7, #12]
 80058f6:	69b8      	ldr	r0, [r7, #24]
 80058f8:	f000 ff3a 	bl	8006770 <pxPortInitialiseStack>
 80058fc:	4602      	mov	r2, r0
 80058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005900:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005904:	2b00      	cmp	r3, #0
 8005906:	d002      	beq.n	800590e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800590c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800590e:	bf00      	nop
 8005910:	3720      	adds	r7, #32
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
	...

08005918 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005920:	f001 f832 	bl	8006988 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005924:	4b2a      	ldr	r3, [pc, #168]	; (80059d0 <prvAddNewTaskToReadyList+0xb8>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	3301      	adds	r3, #1
 800592a:	4a29      	ldr	r2, [pc, #164]	; (80059d0 <prvAddNewTaskToReadyList+0xb8>)
 800592c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800592e:	4b29      	ldr	r3, [pc, #164]	; (80059d4 <prvAddNewTaskToReadyList+0xbc>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d109      	bne.n	800594a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005936:	4a27      	ldr	r2, [pc, #156]	; (80059d4 <prvAddNewTaskToReadyList+0xbc>)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800593c:	4b24      	ldr	r3, [pc, #144]	; (80059d0 <prvAddNewTaskToReadyList+0xb8>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d110      	bne.n	8005966 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005944:	f000 fc1c 	bl	8006180 <prvInitialiseTaskLists>
 8005948:	e00d      	b.n	8005966 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800594a:	4b23      	ldr	r3, [pc, #140]	; (80059d8 <prvAddNewTaskToReadyList+0xc0>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d109      	bne.n	8005966 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005952:	4b20      	ldr	r3, [pc, #128]	; (80059d4 <prvAddNewTaskToReadyList+0xbc>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595c:	429a      	cmp	r2, r3
 800595e:	d802      	bhi.n	8005966 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005960:	4a1c      	ldr	r2, [pc, #112]	; (80059d4 <prvAddNewTaskToReadyList+0xbc>)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005966:	4b1d      	ldr	r3, [pc, #116]	; (80059dc <prvAddNewTaskToReadyList+0xc4>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3301      	adds	r3, #1
 800596c:	4a1b      	ldr	r2, [pc, #108]	; (80059dc <prvAddNewTaskToReadyList+0xc4>)
 800596e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005974:	2201      	movs	r2, #1
 8005976:	409a      	lsls	r2, r3
 8005978:	4b19      	ldr	r3, [pc, #100]	; (80059e0 <prvAddNewTaskToReadyList+0xc8>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4313      	orrs	r3, r2
 800597e:	4a18      	ldr	r2, [pc, #96]	; (80059e0 <prvAddNewTaskToReadyList+0xc8>)
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005986:	4613      	mov	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4a15      	ldr	r2, [pc, #84]	; (80059e4 <prvAddNewTaskToReadyList+0xcc>)
 8005990:	441a      	add	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	3304      	adds	r3, #4
 8005996:	4619      	mov	r1, r3
 8005998:	4610      	mov	r0, r2
 800599a:	f7fe fe11 	bl	80045c0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800599e:	f001 f825 	bl	80069ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80059a2:	4b0d      	ldr	r3, [pc, #52]	; (80059d8 <prvAddNewTaskToReadyList+0xc0>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00e      	beq.n	80059c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059aa:	4b0a      	ldr	r3, [pc, #40]	; (80059d4 <prvAddNewTaskToReadyList+0xbc>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d207      	bcs.n	80059c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80059b8:	4b0b      	ldr	r3, [pc, #44]	; (80059e8 <prvAddNewTaskToReadyList+0xd0>)
 80059ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059c8:	bf00      	nop
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	2000056c 	.word	0x2000056c
 80059d4:	2000046c 	.word	0x2000046c
 80059d8:	20000578 	.word	0x20000578
 80059dc:	20000588 	.word	0x20000588
 80059e0:	20000574 	.word	0x20000574
 80059e4:	20000470 	.word	0x20000470
 80059e8:	e000ed04 	.word	0xe000ed04

080059ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d018      	beq.n	8005a30 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80059fe:	4b14      	ldr	r3, [pc, #80]	; (8005a50 <vTaskDelay+0x64>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00b      	beq.n	8005a1e <vTaskDelay+0x32>
 8005a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0a:	b672      	cpsid	i
 8005a0c:	f383 8811 	msr	BASEPRI, r3
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	b662      	cpsie	i
 8005a1a:	60bb      	str	r3, [r7, #8]
 8005a1c:	e7fe      	b.n	8005a1c <vTaskDelay+0x30>
			vTaskSuspendAll();
 8005a1e:	f000 f87d 	bl	8005b1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a22:	2100      	movs	r1, #0
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 fe3d 	bl	80066a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a2a:	f000 f885 	bl	8005b38 <xTaskResumeAll>
 8005a2e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d107      	bne.n	8005a46 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005a36:	4b07      	ldr	r3, [pc, #28]	; (8005a54 <vTaskDelay+0x68>)
 8005a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a46:	bf00      	nop
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000594 	.word	0x20000594
 8005a54:	e000ed04 	.word	0xe000ed04

08005a58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08a      	sub	sp, #40	; 0x28
 8005a5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a62:	2300      	movs	r3, #0
 8005a64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a66:	463a      	mov	r2, r7
 8005a68:	1d39      	adds	r1, r7, #4
 8005a6a:	f107 0308 	add.w	r3, r7, #8
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fa fde0 	bl	8000634 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a74:	6839      	ldr	r1, [r7, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	9202      	str	r2, [sp, #8]
 8005a7c:	9301      	str	r3, [sp, #4]
 8005a7e:	2300      	movs	r3, #0
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	2300      	movs	r3, #0
 8005a84:	460a      	mov	r2, r1
 8005a86:	491f      	ldr	r1, [pc, #124]	; (8005b04 <vTaskStartScheduler+0xac>)
 8005a88:	481f      	ldr	r0, [pc, #124]	; (8005b08 <vTaskStartScheduler+0xb0>)
 8005a8a:	f7ff fe0f 	bl	80056ac <xTaskCreateStatic>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	4b1e      	ldr	r3, [pc, #120]	; (8005b0c <vTaskStartScheduler+0xb4>)
 8005a92:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a94:	4b1d      	ldr	r3, [pc, #116]	; (8005b0c <vTaskStartScheduler+0xb4>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	617b      	str	r3, [r7, #20]
 8005aa0:	e001      	b.n	8005aa6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d117      	bne.n	8005adc <vTaskStartScheduler+0x84>
 8005aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab0:	b672      	cpsid	i
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	b662      	cpsie	i
 8005ac0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ac2:	4b13      	ldr	r3, [pc, #76]	; (8005b10 <vTaskStartScheduler+0xb8>)
 8005ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005aca:	4b12      	ldr	r3, [pc, #72]	; (8005b14 <vTaskStartScheduler+0xbc>)
 8005acc:	2201      	movs	r2, #1
 8005ace:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ad0:	4b11      	ldr	r3, [pc, #68]	; (8005b18 <vTaskStartScheduler+0xc0>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ad6:	f000 fedb 	bl	8006890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ada:	e00f      	b.n	8005afc <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae2:	d10b      	bne.n	8005afc <vTaskStartScheduler+0xa4>
 8005ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae8:	b672      	cpsid	i
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	b662      	cpsie	i
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	e7fe      	b.n	8005afa <vTaskStartScheduler+0xa2>
}
 8005afc:	bf00      	nop
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	0801adec 	.word	0x0801adec
 8005b08:	08006151 	.word	0x08006151
 8005b0c:	20000590 	.word	0x20000590
 8005b10:	2000058c 	.word	0x2000058c
 8005b14:	20000578 	.word	0x20000578
 8005b18:	20000570 	.word	0x20000570

08005b1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005b20:	4b04      	ldr	r3, [pc, #16]	; (8005b34 <vTaskSuspendAll+0x18>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	3301      	adds	r3, #1
 8005b26:	4a03      	ldr	r2, [pc, #12]	; (8005b34 <vTaskSuspendAll+0x18>)
 8005b28:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005b2a:	bf00      	nop
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	20000594 	.word	0x20000594

08005b38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b42:	2300      	movs	r3, #0
 8005b44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b46:	4b42      	ldr	r3, [pc, #264]	; (8005c50 <xTaskResumeAll+0x118>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10b      	bne.n	8005b66 <xTaskResumeAll+0x2e>
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	b672      	cpsid	i
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	b662      	cpsie	i
 8005b62:	603b      	str	r3, [r7, #0]
 8005b64:	e7fe      	b.n	8005b64 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b66:	f000 ff0f 	bl	8006988 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b6a:	4b39      	ldr	r3, [pc, #228]	; (8005c50 <xTaskResumeAll+0x118>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	4a37      	ldr	r2, [pc, #220]	; (8005c50 <xTaskResumeAll+0x118>)
 8005b72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b74:	4b36      	ldr	r3, [pc, #216]	; (8005c50 <xTaskResumeAll+0x118>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d161      	bne.n	8005c40 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b7c:	4b35      	ldr	r3, [pc, #212]	; (8005c54 <xTaskResumeAll+0x11c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d05d      	beq.n	8005c40 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b84:	e02e      	b.n	8005be4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b86:	4b34      	ldr	r3, [pc, #208]	; (8005c58 <xTaskResumeAll+0x120>)
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	3318      	adds	r3, #24
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fe fd71 	bl	800467a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7fe fd6c 	bl	800467a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	409a      	lsls	r2, r3
 8005baa:	4b2c      	ldr	r3, [pc, #176]	; (8005c5c <xTaskResumeAll+0x124>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	4a2a      	ldr	r2, [pc, #168]	; (8005c5c <xTaskResumeAll+0x124>)
 8005bb2:	6013      	str	r3, [r2, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb8:	4613      	mov	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4a27      	ldr	r2, [pc, #156]	; (8005c60 <xTaskResumeAll+0x128>)
 8005bc2:	441a      	add	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3304      	adds	r3, #4
 8005bc8:	4619      	mov	r1, r3
 8005bca:	4610      	mov	r0, r2
 8005bcc:	f7fe fcf8 	bl	80045c0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd4:	4b23      	ldr	r3, [pc, #140]	; (8005c64 <xTaskResumeAll+0x12c>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d302      	bcc.n	8005be4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005bde:	4b22      	ldr	r3, [pc, #136]	; (8005c68 <xTaskResumeAll+0x130>)
 8005be0:	2201      	movs	r2, #1
 8005be2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005be4:	4b1c      	ldr	r3, [pc, #112]	; (8005c58 <xTaskResumeAll+0x120>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1cc      	bne.n	8005b86 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005bf2:	f000 fb61 	bl	80062b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005bf6:	4b1d      	ldr	r3, [pc, #116]	; (8005c6c <xTaskResumeAll+0x134>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d010      	beq.n	8005c24 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c02:	f000 f859 	bl	8005cb8 <xTaskIncrementTick>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005c0c:	4b16      	ldr	r3, [pc, #88]	; (8005c68 <xTaskResumeAll+0x130>)
 8005c0e:	2201      	movs	r2, #1
 8005c10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	3b01      	subs	r3, #1
 8005c16:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1f1      	bne.n	8005c02 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005c1e:	4b13      	ldr	r3, [pc, #76]	; (8005c6c <xTaskResumeAll+0x134>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c24:	4b10      	ldr	r3, [pc, #64]	; (8005c68 <xTaskResumeAll+0x130>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d009      	beq.n	8005c40 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c30:	4b0f      	ldr	r3, [pc, #60]	; (8005c70 <xTaskResumeAll+0x138>)
 8005c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c40:	f000 fed4 	bl	80069ec <vPortExitCritical>

	return xAlreadyYielded;
 8005c44:	68bb      	ldr	r3, [r7, #8]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	20000594 	.word	0x20000594
 8005c54:	2000056c 	.word	0x2000056c
 8005c58:	2000052c 	.word	0x2000052c
 8005c5c:	20000574 	.word	0x20000574
 8005c60:	20000470 	.word	0x20000470
 8005c64:	2000046c 	.word	0x2000046c
 8005c68:	20000580 	.word	0x20000580
 8005c6c:	2000057c 	.word	0x2000057c
 8005c70:	e000ed04 	.word	0xe000ed04

08005c74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c7a:	4b05      	ldr	r3, [pc, #20]	; (8005c90 <xTaskGetTickCount+0x1c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c80:	687b      	ldr	r3, [r7, #4]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	20000570 	.word	0x20000570

08005c94 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c9a:	f000 ff55 	bl	8006b48 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005ca2:	4b04      	ldr	r3, [pc, #16]	; (8005cb4 <xTaskGetTickCountFromISR+0x20>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ca8:	683b      	ldr	r3, [r7, #0]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	20000570 	.word	0x20000570

08005cb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cc2:	4b4f      	ldr	r3, [pc, #316]	; (8005e00 <xTaskIncrementTick+0x148>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f040 8089 	bne.w	8005dde <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ccc:	4b4d      	ldr	r3, [pc, #308]	; (8005e04 <xTaskIncrementTick+0x14c>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005cd4:	4a4b      	ldr	r2, [pc, #300]	; (8005e04 <xTaskIncrementTick+0x14c>)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d121      	bne.n	8005d24 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ce0:	4b49      	ldr	r3, [pc, #292]	; (8005e08 <xTaskIncrementTick+0x150>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00b      	beq.n	8005d02 <xTaskIncrementTick+0x4a>
 8005cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cee:	b672      	cpsid	i
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	b662      	cpsie	i
 8005cfe:	603b      	str	r3, [r7, #0]
 8005d00:	e7fe      	b.n	8005d00 <xTaskIncrementTick+0x48>
 8005d02:	4b41      	ldr	r3, [pc, #260]	; (8005e08 <xTaskIncrementTick+0x150>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	4b40      	ldr	r3, [pc, #256]	; (8005e0c <xTaskIncrementTick+0x154>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a3e      	ldr	r2, [pc, #248]	; (8005e08 <xTaskIncrementTick+0x150>)
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	4a3e      	ldr	r2, [pc, #248]	; (8005e0c <xTaskIncrementTick+0x154>)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6013      	str	r3, [r2, #0]
 8005d16:	4b3e      	ldr	r3, [pc, #248]	; (8005e10 <xTaskIncrementTick+0x158>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	4a3c      	ldr	r2, [pc, #240]	; (8005e10 <xTaskIncrementTick+0x158>)
 8005d1e:	6013      	str	r3, [r2, #0]
 8005d20:	f000 faca 	bl	80062b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d24:	4b3b      	ldr	r3, [pc, #236]	; (8005e14 <xTaskIncrementTick+0x15c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d348      	bcc.n	8005dc0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d2e:	4b36      	ldr	r3, [pc, #216]	; (8005e08 <xTaskIncrementTick+0x150>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d104      	bne.n	8005d42 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d38:	4b36      	ldr	r3, [pc, #216]	; (8005e14 <xTaskIncrementTick+0x15c>)
 8005d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d3e:	601a      	str	r2, [r3, #0]
					break;
 8005d40:	e03e      	b.n	8005dc0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d42:	4b31      	ldr	r3, [pc, #196]	; (8005e08 <xTaskIncrementTick+0x150>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d203      	bcs.n	8005d62 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d5a:	4a2e      	ldr	r2, [pc, #184]	; (8005e14 <xTaskIncrementTick+0x15c>)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d60:	e02e      	b.n	8005dc0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	3304      	adds	r3, #4
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fe fc87 	bl	800467a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d004      	beq.n	8005d7e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	3318      	adds	r3, #24
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7fe fc7e 	bl	800467a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d82:	2201      	movs	r2, #1
 8005d84:	409a      	lsls	r2, r3
 8005d86:	4b24      	ldr	r3, [pc, #144]	; (8005e18 <xTaskIncrementTick+0x160>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	4a22      	ldr	r2, [pc, #136]	; (8005e18 <xTaskIncrementTick+0x160>)
 8005d8e:	6013      	str	r3, [r2, #0]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d94:	4613      	mov	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4a1f      	ldr	r2, [pc, #124]	; (8005e1c <xTaskIncrementTick+0x164>)
 8005d9e:	441a      	add	r2, r3
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	3304      	adds	r3, #4
 8005da4:	4619      	mov	r1, r3
 8005da6:	4610      	mov	r0, r2
 8005da8:	f7fe fc0a 	bl	80045c0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db0:	4b1b      	ldr	r3, [pc, #108]	; (8005e20 <xTaskIncrementTick+0x168>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d3b9      	bcc.n	8005d2e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dbe:	e7b6      	b.n	8005d2e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005dc0:	4b17      	ldr	r3, [pc, #92]	; (8005e20 <xTaskIncrementTick+0x168>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc6:	4915      	ldr	r1, [pc, #84]	; (8005e1c <xTaskIncrementTick+0x164>)
 8005dc8:	4613      	mov	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	440b      	add	r3, r1
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d907      	bls.n	8005de8 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	617b      	str	r3, [r7, #20]
 8005ddc:	e004      	b.n	8005de8 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005dde:	4b11      	ldr	r3, [pc, #68]	; (8005e24 <xTaskIncrementTick+0x16c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	3301      	adds	r3, #1
 8005de4:	4a0f      	ldr	r2, [pc, #60]	; (8005e24 <xTaskIncrementTick+0x16c>)
 8005de6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005de8:	4b0f      	ldr	r3, [pc, #60]	; (8005e28 <xTaskIncrementTick+0x170>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8005df0:	2301      	movs	r3, #1
 8005df2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005df4:	697b      	ldr	r3, [r7, #20]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	20000594 	.word	0x20000594
 8005e04:	20000570 	.word	0x20000570
 8005e08:	20000524 	.word	0x20000524
 8005e0c:	20000528 	.word	0x20000528
 8005e10:	20000584 	.word	0x20000584
 8005e14:	2000058c 	.word	0x2000058c
 8005e18:	20000574 	.word	0x20000574
 8005e1c:	20000470 	.word	0x20000470
 8005e20:	2000046c 	.word	0x2000046c
 8005e24:	2000057c 	.word	0x2000057c
 8005e28:	20000580 	.word	0x20000580

08005e2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e32:	4b3a      	ldr	r3, [pc, #232]	; (8005f1c <vTaskSwitchContext+0xf0>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e3a:	4b39      	ldr	r3, [pc, #228]	; (8005f20 <vTaskSwitchContext+0xf4>)
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e40:	e067      	b.n	8005f12 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 8005e42:	4b37      	ldr	r3, [pc, #220]	; (8005f20 <vTaskSwitchContext+0xf4>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8005e48:	4b36      	ldr	r3, [pc, #216]	; (8005f24 <vTaskSwitchContext+0xf8>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4e:	61fb      	str	r3, [r7, #28]
 8005e50:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8005e54:	61bb      	str	r3, [r7, #24]
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d111      	bne.n	8005e84 <vTaskSwitchContext+0x58>
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	3304      	adds	r3, #4
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d10b      	bne.n	8005e84 <vTaskSwitchContext+0x58>
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	3308      	adds	r3, #8
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d105      	bne.n	8005e84 <vTaskSwitchContext+0x58>
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	330c      	adds	r3, #12
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d008      	beq.n	8005e96 <vTaskSwitchContext+0x6a>
 8005e84:	4b27      	ldr	r3, [pc, #156]	; (8005f24 <vTaskSwitchContext+0xf8>)
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	4b26      	ldr	r3, [pc, #152]	; (8005f24 <vTaskSwitchContext+0xf8>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	3334      	adds	r3, #52	; 0x34
 8005e8e:	4619      	mov	r1, r3
 8005e90:	4610      	mov	r0, r2
 8005e92:	f7fa fbbd 	bl	8000610 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e96:	4b24      	ldr	r3, [pc, #144]	; (8005f28 <vTaskSwitchContext+0xfc>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	fab3 f383 	clz	r3, r3
 8005ea2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005ea4:	7afb      	ldrb	r3, [r7, #11]
 8005ea6:	f1c3 031f 	rsb	r3, r3, #31
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	491f      	ldr	r1, [pc, #124]	; (8005f2c <vTaskSwitchContext+0x100>)
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	440b      	add	r3, r1
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10b      	bne.n	8005ed8 <vTaskSwitchContext+0xac>
	__asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec4:	b672      	cpsid	i
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	b662      	cpsie	i
 8005ed4:	607b      	str	r3, [r7, #4]
 8005ed6:	e7fe      	b.n	8005ed6 <vTaskSwitchContext+0xaa>
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	4613      	mov	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4a12      	ldr	r2, [pc, #72]	; (8005f2c <vTaskSwitchContext+0x100>)
 8005ee4:	4413      	add	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	605a      	str	r2, [r3, #4]
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	3308      	adds	r3, #8
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d104      	bne.n	8005f08 <vTaskSwitchContext+0xdc>
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	605a      	str	r2, [r3, #4]
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	4a05      	ldr	r2, [pc, #20]	; (8005f24 <vTaskSwitchContext+0xf8>)
 8005f10:	6013      	str	r3, [r2, #0]
}
 8005f12:	bf00      	nop
 8005f14:	3720      	adds	r7, #32
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20000594 	.word	0x20000594
 8005f20:	20000580 	.word	0x20000580
 8005f24:	2000046c 	.word	0x2000046c
 8005f28:	20000574 	.word	0x20000574
 8005f2c:	20000470 	.word	0x20000470

08005f30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10b      	bne.n	8005f58 <vTaskPlaceOnEventList+0x28>
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	b672      	cpsid	i
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	b662      	cpsie	i
 8005f54:	60fb      	str	r3, [r7, #12]
 8005f56:	e7fe      	b.n	8005f56 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f58:	4b07      	ldr	r3, [pc, #28]	; (8005f78 <vTaskPlaceOnEventList+0x48>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3318      	adds	r3, #24
 8005f5e:	4619      	mov	r1, r3
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f7fe fb51 	bl	8004608 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f66:	2101      	movs	r1, #1
 8005f68:	6838      	ldr	r0, [r7, #0]
 8005f6a:	f000 fb9b 	bl	80066a4 <prvAddCurrentTaskToDelayedList>
}
 8005f6e:	bf00      	nop
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	2000046c 	.word	0x2000046c

08005f7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10b      	bne.n	8005faa <xTaskRemoveFromEventList+0x2e>
 8005f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f96:	b672      	cpsid	i
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	b662      	cpsie	i
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	e7fe      	b.n	8005fa8 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	3318      	adds	r3, #24
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7fe fb63 	bl	800467a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fb4:	4b1d      	ldr	r3, [pc, #116]	; (800602c <xTaskRemoveFromEventList+0xb0>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d11c      	bne.n	8005ff6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fe fb5a 	bl	800467a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fca:	2201      	movs	r2, #1
 8005fcc:	409a      	lsls	r2, r3
 8005fce:	4b18      	ldr	r3, [pc, #96]	; (8006030 <xTaskRemoveFromEventList+0xb4>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	4a16      	ldr	r2, [pc, #88]	; (8006030 <xTaskRemoveFromEventList+0xb4>)
 8005fd6:	6013      	str	r3, [r2, #0]
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fdc:	4613      	mov	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4a13      	ldr	r2, [pc, #76]	; (8006034 <xTaskRemoveFromEventList+0xb8>)
 8005fe6:	441a      	add	r2, r3
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	3304      	adds	r3, #4
 8005fec:	4619      	mov	r1, r3
 8005fee:	4610      	mov	r0, r2
 8005ff0:	f7fe fae6 	bl	80045c0 <vListInsertEnd>
 8005ff4:	e005      	b.n	8006002 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	3318      	adds	r3, #24
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	480e      	ldr	r0, [pc, #56]	; (8006038 <xTaskRemoveFromEventList+0xbc>)
 8005ffe:	f7fe fadf 	bl	80045c0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006006:	4b0d      	ldr	r3, [pc, #52]	; (800603c <xTaskRemoveFromEventList+0xc0>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600c:	429a      	cmp	r2, r3
 800600e:	d905      	bls.n	800601c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006010:	2301      	movs	r3, #1
 8006012:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006014:	4b0a      	ldr	r3, [pc, #40]	; (8006040 <xTaskRemoveFromEventList+0xc4>)
 8006016:	2201      	movs	r2, #1
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	e001      	b.n	8006020 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800601c:	2300      	movs	r3, #0
 800601e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006020:	697b      	ldr	r3, [r7, #20]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	20000594 	.word	0x20000594
 8006030:	20000574 	.word	0x20000574
 8006034:	20000470 	.word	0x20000470
 8006038:	2000052c 	.word	0x2000052c
 800603c:	2000046c 	.word	0x2000046c
 8006040:	20000580 	.word	0x20000580

08006044 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800604c:	4b06      	ldr	r3, [pc, #24]	; (8006068 <vTaskInternalSetTimeOutState+0x24>)
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006054:	4b05      	ldr	r3, [pc, #20]	; (800606c <vTaskInternalSetTimeOutState+0x28>)
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	605a      	str	r2, [r3, #4]
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	20000584 	.word	0x20000584
 800606c:	20000570 	.word	0x20000570

08006070 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b088      	sub	sp, #32
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10b      	bne.n	8006098 <xTaskCheckForTimeOut+0x28>
 8006080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006084:	b672      	cpsid	i
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	b662      	cpsie	i
 8006094:	613b      	str	r3, [r7, #16]
 8006096:	e7fe      	b.n	8006096 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10b      	bne.n	80060b6 <xTaskCheckForTimeOut+0x46>
 800609e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a2:	b672      	cpsid	i
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	b662      	cpsie	i
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	e7fe      	b.n	80060b4 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80060b6:	f000 fc67 	bl	8006988 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80060ba:	4b1d      	ldr	r3, [pc, #116]	; (8006130 <xTaskCheckForTimeOut+0xc0>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d2:	d102      	bne.n	80060da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80060d4:	2300      	movs	r3, #0
 80060d6:	61fb      	str	r3, [r7, #28]
 80060d8:	e023      	b.n	8006122 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	4b15      	ldr	r3, [pc, #84]	; (8006134 <xTaskCheckForTimeOut+0xc4>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d007      	beq.n	80060f6 <xTaskCheckForTimeOut+0x86>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	69ba      	ldr	r2, [r7, #24]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d302      	bcc.n	80060f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80060f0:	2301      	movs	r3, #1
 80060f2:	61fb      	str	r3, [r7, #28]
 80060f4:	e015      	b.n	8006122 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d20b      	bcs.n	8006118 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	1ad2      	subs	r2, r2, r3
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7ff ff99 	bl	8006044 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006112:	2300      	movs	r3, #0
 8006114:	61fb      	str	r3, [r7, #28]
 8006116:	e004      	b.n	8006122 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2200      	movs	r2, #0
 800611c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800611e:	2301      	movs	r3, #1
 8006120:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006122:	f000 fc63 	bl	80069ec <vPortExitCritical>

	return xReturn;
 8006126:	69fb      	ldr	r3, [r7, #28]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3720      	adds	r7, #32
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	20000570 	.word	0x20000570
 8006134:	20000584 	.word	0x20000584

08006138 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006138:	b480      	push	{r7}
 800613a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800613c:	4b03      	ldr	r3, [pc, #12]	; (800614c <vTaskMissedYield+0x14>)
 800613e:	2201      	movs	r2, #1
 8006140:	601a      	str	r2, [r3, #0]
}
 8006142:	bf00      	nop
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr
 800614c:	20000580 	.word	0x20000580

08006150 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006158:	f000 f852 	bl	8006200 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800615c:	4b06      	ldr	r3, [pc, #24]	; (8006178 <prvIdleTask+0x28>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d9f9      	bls.n	8006158 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006164:	4b05      	ldr	r3, [pc, #20]	; (800617c <prvIdleTask+0x2c>)
 8006166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006174:	e7f0      	b.n	8006158 <prvIdleTask+0x8>
 8006176:	bf00      	nop
 8006178:	20000470 	.word	0x20000470
 800617c:	e000ed04 	.word	0xe000ed04

08006180 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006186:	2300      	movs	r3, #0
 8006188:	607b      	str	r3, [r7, #4]
 800618a:	e00c      	b.n	80061a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	4613      	mov	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4a12      	ldr	r2, [pc, #72]	; (80061e0 <prvInitialiseTaskLists+0x60>)
 8006198:	4413      	add	r3, r2
 800619a:	4618      	mov	r0, r3
 800619c:	f7fe f9e3 	bl	8004566 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	3301      	adds	r3, #1
 80061a4:	607b      	str	r3, [r7, #4]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b06      	cmp	r3, #6
 80061aa:	d9ef      	bls.n	800618c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061ac:	480d      	ldr	r0, [pc, #52]	; (80061e4 <prvInitialiseTaskLists+0x64>)
 80061ae:	f7fe f9da 	bl	8004566 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061b2:	480d      	ldr	r0, [pc, #52]	; (80061e8 <prvInitialiseTaskLists+0x68>)
 80061b4:	f7fe f9d7 	bl	8004566 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061b8:	480c      	ldr	r0, [pc, #48]	; (80061ec <prvInitialiseTaskLists+0x6c>)
 80061ba:	f7fe f9d4 	bl	8004566 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061be:	480c      	ldr	r0, [pc, #48]	; (80061f0 <prvInitialiseTaskLists+0x70>)
 80061c0:	f7fe f9d1 	bl	8004566 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061c4:	480b      	ldr	r0, [pc, #44]	; (80061f4 <prvInitialiseTaskLists+0x74>)
 80061c6:	f7fe f9ce 	bl	8004566 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061ca:	4b0b      	ldr	r3, [pc, #44]	; (80061f8 <prvInitialiseTaskLists+0x78>)
 80061cc:	4a05      	ldr	r2, [pc, #20]	; (80061e4 <prvInitialiseTaskLists+0x64>)
 80061ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061d0:	4b0a      	ldr	r3, [pc, #40]	; (80061fc <prvInitialiseTaskLists+0x7c>)
 80061d2:	4a05      	ldr	r2, [pc, #20]	; (80061e8 <prvInitialiseTaskLists+0x68>)
 80061d4:	601a      	str	r2, [r3, #0]
}
 80061d6:	bf00      	nop
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	20000470 	.word	0x20000470
 80061e4:	200004fc 	.word	0x200004fc
 80061e8:	20000510 	.word	0x20000510
 80061ec:	2000052c 	.word	0x2000052c
 80061f0:	20000540 	.word	0x20000540
 80061f4:	20000558 	.word	0x20000558
 80061f8:	20000524 	.word	0x20000524
 80061fc:	20000528 	.word	0x20000528

08006200 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006206:	e019      	b.n	800623c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006208:	f000 fbbe 	bl	8006988 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800620c:	4b0f      	ldr	r3, [pc, #60]	; (800624c <prvCheckTasksWaitingTermination+0x4c>)
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	3304      	adds	r3, #4
 8006218:	4618      	mov	r0, r3
 800621a:	f7fe fa2e 	bl	800467a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800621e:	4b0c      	ldr	r3, [pc, #48]	; (8006250 <prvCheckTasksWaitingTermination+0x50>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3b01      	subs	r3, #1
 8006224:	4a0a      	ldr	r2, [pc, #40]	; (8006250 <prvCheckTasksWaitingTermination+0x50>)
 8006226:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006228:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <prvCheckTasksWaitingTermination+0x54>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3b01      	subs	r3, #1
 800622e:	4a09      	ldr	r2, [pc, #36]	; (8006254 <prvCheckTasksWaitingTermination+0x54>)
 8006230:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006232:	f000 fbdb 	bl	80069ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f80e 	bl	8006258 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800623c:	4b05      	ldr	r3, [pc, #20]	; (8006254 <prvCheckTasksWaitingTermination+0x54>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1e1      	bne.n	8006208 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006244:	bf00      	nop
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	20000540 	.word	0x20000540
 8006250:	2000056c 	.word	0x2000056c
 8006254:	20000554 	.word	0x20000554

08006258 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006266:	2b00      	cmp	r3, #0
 8006268:	d108      	bne.n	800627c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626e:	4618      	mov	r0, r3
 8006270:	f000 fd74 	bl	8006d5c <vPortFree>
				vPortFree( pxTCB );
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fd71 	bl	8006d5c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800627a:	e019      	b.n	80062b0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006282:	2b01      	cmp	r3, #1
 8006284:	d103      	bne.n	800628e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fd68 	bl	8006d5c <vPortFree>
	}
 800628c:	e010      	b.n	80062b0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006294:	2b02      	cmp	r3, #2
 8006296:	d00b      	beq.n	80062b0 <prvDeleteTCB+0x58>
 8006298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629c:	b672      	cpsid	i
 800629e:	f383 8811 	msr	BASEPRI, r3
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	b662      	cpsie	i
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	e7fe      	b.n	80062ae <prvDeleteTCB+0x56>
	}
 80062b0:	bf00      	nop
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062be:	4b0c      	ldr	r3, [pc, #48]	; (80062f0 <prvResetNextTaskUnblockTime+0x38>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d104      	bne.n	80062d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80062c8:	4b0a      	ldr	r3, [pc, #40]	; (80062f4 <prvResetNextTaskUnblockTime+0x3c>)
 80062ca:	f04f 32ff 	mov.w	r2, #4294967295
 80062ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80062d0:	e008      	b.n	80062e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062d2:	4b07      	ldr	r3, [pc, #28]	; (80062f0 <prvResetNextTaskUnblockTime+0x38>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	4a04      	ldr	r2, [pc, #16]	; (80062f4 <prvResetNextTaskUnblockTime+0x3c>)
 80062e2:	6013      	str	r3, [r2, #0]
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	20000524 	.word	0x20000524
 80062f4:	2000058c 	.word	0x2000058c

080062f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80062fe:	4b0b      	ldr	r3, [pc, #44]	; (800632c <xTaskGetSchedulerState+0x34>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d102      	bne.n	800630c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006306:	2301      	movs	r3, #1
 8006308:	607b      	str	r3, [r7, #4]
 800630a:	e008      	b.n	800631e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800630c:	4b08      	ldr	r3, [pc, #32]	; (8006330 <xTaskGetSchedulerState+0x38>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d102      	bne.n	800631a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006314:	2302      	movs	r3, #2
 8006316:	607b      	str	r3, [r7, #4]
 8006318:	e001      	b.n	800631e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800631a:	2300      	movs	r3, #0
 800631c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800631e:	687b      	ldr	r3, [r7, #4]
	}
 8006320:	4618      	mov	r0, r3
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	20000578 	.word	0x20000578
 8006330:	20000594 	.word	0x20000594

08006334 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006340:	2300      	movs	r3, #0
 8006342:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d069      	beq.n	800641e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800634e:	4b36      	ldr	r3, [pc, #216]	; (8006428 <xTaskPriorityInherit+0xf4>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006354:	429a      	cmp	r2, r3
 8006356:	d259      	bcs.n	800640c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	2b00      	cmp	r3, #0
 800635e:	db06      	blt.n	800636e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006360:	4b31      	ldr	r3, [pc, #196]	; (8006428 <xTaskPriorityInherit+0xf4>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006366:	f1c3 0207 	rsb	r2, r3, #7
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	6959      	ldr	r1, [r3, #20]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006376:	4613      	mov	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4a2b      	ldr	r2, [pc, #172]	; (800642c <xTaskPriorityInherit+0xf8>)
 8006380:	4413      	add	r3, r2
 8006382:	4299      	cmp	r1, r3
 8006384:	d13a      	bne.n	80063fc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	3304      	adds	r3, #4
 800638a:	4618      	mov	r0, r3
 800638c:	f7fe f975 	bl	800467a <uxListRemove>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d115      	bne.n	80063c2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800639a:	4924      	ldr	r1, [pc, #144]	; (800642c <xTaskPriorityInherit+0xf8>)
 800639c:	4613      	mov	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	440b      	add	r3, r1
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10a      	bne.n	80063c2 <xTaskPriorityInherit+0x8e>
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	2201      	movs	r2, #1
 80063b2:	fa02 f303 	lsl.w	r3, r2, r3
 80063b6:	43da      	mvns	r2, r3
 80063b8:	4b1d      	ldr	r3, [pc, #116]	; (8006430 <xTaskPriorityInherit+0xfc>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4013      	ands	r3, r2
 80063be:	4a1c      	ldr	r2, [pc, #112]	; (8006430 <xTaskPriorityInherit+0xfc>)
 80063c0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80063c2:	4b19      	ldr	r3, [pc, #100]	; (8006428 <xTaskPriorityInherit+0xf4>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d0:	2201      	movs	r2, #1
 80063d2:	409a      	lsls	r2, r3
 80063d4:	4b16      	ldr	r3, [pc, #88]	; (8006430 <xTaskPriorityInherit+0xfc>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4313      	orrs	r3, r2
 80063da:	4a15      	ldr	r2, [pc, #84]	; (8006430 <xTaskPriorityInherit+0xfc>)
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e2:	4613      	mov	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4413      	add	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4a10      	ldr	r2, [pc, #64]	; (800642c <xTaskPriorityInherit+0xf8>)
 80063ec:	441a      	add	r2, r3
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	3304      	adds	r3, #4
 80063f2:	4619      	mov	r1, r3
 80063f4:	4610      	mov	r0, r2
 80063f6:	f7fe f8e3 	bl	80045c0 <vListInsertEnd>
 80063fa:	e004      	b.n	8006406 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80063fc:	4b0a      	ldr	r3, [pc, #40]	; (8006428 <xTaskPriorityInherit+0xf4>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006406:	2301      	movs	r3, #1
 8006408:	60fb      	str	r3, [r7, #12]
 800640a:	e008      	b.n	800641e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006410:	4b05      	ldr	r3, [pc, #20]	; (8006428 <xTaskPriorityInherit+0xf4>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006416:	429a      	cmp	r2, r3
 8006418:	d201      	bcs.n	800641e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800641a:	2301      	movs	r3, #1
 800641c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800641e:	68fb      	ldr	r3, [r7, #12]
	}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	2000046c 	.word	0x2000046c
 800642c:	20000470 	.word	0x20000470
 8006430:	20000574 	.word	0x20000574

08006434 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006440:	2300      	movs	r3, #0
 8006442:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d070      	beq.n	800652c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800644a:	4b3b      	ldr	r3, [pc, #236]	; (8006538 <xTaskPriorityDisinherit+0x104>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	429a      	cmp	r2, r3
 8006452:	d00b      	beq.n	800646c <xTaskPriorityDisinherit+0x38>
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	b672      	cpsid	i
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	b662      	cpsie	i
 8006468:	60fb      	str	r3, [r7, #12]
 800646a:	e7fe      	b.n	800646a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10b      	bne.n	800648c <xTaskPriorityDisinherit+0x58>
 8006474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006478:	b672      	cpsid	i
 800647a:	f383 8811 	msr	BASEPRI, r3
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	b662      	cpsie	i
 8006488:	60bb      	str	r3, [r7, #8]
 800648a:	e7fe      	b.n	800648a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006490:	1e5a      	subs	r2, r3, #1
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800649e:	429a      	cmp	r2, r3
 80064a0:	d044      	beq.n	800652c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d140      	bne.n	800652c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	3304      	adds	r3, #4
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fe f8e3 	bl	800467a <uxListRemove>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d115      	bne.n	80064e6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064be:	491f      	ldr	r1, [pc, #124]	; (800653c <xTaskPriorityDisinherit+0x108>)
 80064c0:	4613      	mov	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	440b      	add	r3, r1
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10a      	bne.n	80064e6 <xTaskPriorityDisinherit+0xb2>
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d4:	2201      	movs	r2, #1
 80064d6:	fa02 f303 	lsl.w	r3, r2, r3
 80064da:	43da      	mvns	r2, r3
 80064dc:	4b18      	ldr	r3, [pc, #96]	; (8006540 <xTaskPriorityDisinherit+0x10c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4013      	ands	r3, r2
 80064e2:	4a17      	ldr	r2, [pc, #92]	; (8006540 <xTaskPriorityDisinherit+0x10c>)
 80064e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f2:	f1c3 0207 	rsb	r2, r3, #7
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fe:	2201      	movs	r2, #1
 8006500:	409a      	lsls	r2, r3
 8006502:	4b0f      	ldr	r3, [pc, #60]	; (8006540 <xTaskPriorityDisinherit+0x10c>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4313      	orrs	r3, r2
 8006508:	4a0d      	ldr	r2, [pc, #52]	; (8006540 <xTaskPriorityDisinherit+0x10c>)
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006510:	4613      	mov	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4a08      	ldr	r2, [pc, #32]	; (800653c <xTaskPriorityDisinherit+0x108>)
 800651a:	441a      	add	r2, r3
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	3304      	adds	r3, #4
 8006520:	4619      	mov	r1, r3
 8006522:	4610      	mov	r0, r2
 8006524:	f7fe f84c 	bl	80045c0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006528:	2301      	movs	r3, #1
 800652a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800652c:	697b      	ldr	r3, [r7, #20]
	}
 800652e:	4618      	mov	r0, r3
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	2000046c 	.word	0x2000046c
 800653c:	20000470 	.word	0x20000470
 8006540:	20000574 	.word	0x20000574

08006544 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006544:	b580      	push	{r7, lr}
 8006546:	b088      	sub	sp, #32
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006552:	2301      	movs	r3, #1
 8006554:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 8085 	beq.w	8006668 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10b      	bne.n	800657e <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8006566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656a:	b672      	cpsid	i
 800656c:	f383 8811 	msr	BASEPRI, r3
 8006570:	f3bf 8f6f 	isb	sy
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	b662      	cpsie	i
 800657a:	60fb      	str	r3, [r7, #12]
 800657c:	e7fe      	b.n	800657c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006582:	683a      	ldr	r2, [r7, #0]
 8006584:	429a      	cmp	r2, r3
 8006586:	d902      	bls.n	800658e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	61fb      	str	r3, [r7, #28]
 800658c:	e002      	b.n	8006594 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006592:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006598:	69fa      	ldr	r2, [r7, #28]
 800659a:	429a      	cmp	r2, r3
 800659c:	d064      	beq.n	8006668 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d15f      	bne.n	8006668 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80065a8:	4b31      	ldr	r3, [pc, #196]	; (8006670 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d10b      	bne.n	80065ca <vTaskPriorityDisinheritAfterTimeout+0x86>
 80065b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b6:	b672      	cpsid	i
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	b662      	cpsie	i
 80065c6:	60bb      	str	r3, [r7, #8]
 80065c8:	e7fe      	b.n	80065c8 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ce:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	69fa      	ldr	r2, [r7, #28]
 80065d4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	db04      	blt.n	80065e8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	f1c3 0207 	rsb	r2, r3, #7
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	6959      	ldr	r1, [r3, #20]
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	4613      	mov	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4a1f      	ldr	r2, [pc, #124]	; (8006674 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80065f8:	4413      	add	r3, r2
 80065fa:	4299      	cmp	r1, r3
 80065fc:	d134      	bne.n	8006668 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	3304      	adds	r3, #4
 8006602:	4618      	mov	r0, r3
 8006604:	f7fe f839 	bl	800467a <uxListRemove>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d115      	bne.n	800663a <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006612:	4918      	ldr	r1, [pc, #96]	; (8006674 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8006614:	4613      	mov	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	440b      	add	r3, r1
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10a      	bne.n	800663a <vTaskPriorityDisinheritAfterTimeout+0xf6>
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	2201      	movs	r2, #1
 800662a:	fa02 f303 	lsl.w	r3, r2, r3
 800662e:	43da      	mvns	r2, r3
 8006630:	4b11      	ldr	r3, [pc, #68]	; (8006678 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4013      	ands	r3, r2
 8006636:	4a10      	ldr	r2, [pc, #64]	; (8006678 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006638:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663e:	2201      	movs	r2, #1
 8006640:	409a      	lsls	r2, r3
 8006642:	4b0d      	ldr	r3, [pc, #52]	; (8006678 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4313      	orrs	r3, r2
 8006648:	4a0b      	ldr	r2, [pc, #44]	; (8006678 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800664a:	6013      	str	r3, [r2, #0]
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006650:	4613      	mov	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4a06      	ldr	r2, [pc, #24]	; (8006674 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800665a:	441a      	add	r2, r3
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	3304      	adds	r3, #4
 8006660:	4619      	mov	r1, r3
 8006662:	4610      	mov	r0, r2
 8006664:	f7fd ffac 	bl	80045c0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006668:	bf00      	nop
 800666a:	3720      	adds	r7, #32
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	2000046c 	.word	0x2000046c
 8006674:	20000470 	.word	0x20000470
 8006678:	20000574 	.word	0x20000574

0800667c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006680:	4b07      	ldr	r3, [pc, #28]	; (80066a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d004      	beq.n	8006692 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006688:	4b05      	ldr	r3, [pc, #20]	; (80066a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800668e:	3201      	adds	r2, #1
 8006690:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006692:	4b03      	ldr	r3, [pc, #12]	; (80066a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006694:	681b      	ldr	r3, [r3, #0]
	}
 8006696:	4618      	mov	r0, r3
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	2000046c 	.word	0x2000046c

080066a4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80066ae:	4b29      	ldr	r3, [pc, #164]	; (8006754 <prvAddCurrentTaskToDelayedList+0xb0>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066b4:	4b28      	ldr	r3, [pc, #160]	; (8006758 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3304      	adds	r3, #4
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7fd ffdd 	bl	800467a <uxListRemove>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10b      	bne.n	80066de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80066c6:	4b24      	ldr	r3, [pc, #144]	; (8006758 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066cc:	2201      	movs	r2, #1
 80066ce:	fa02 f303 	lsl.w	r3, r2, r3
 80066d2:	43da      	mvns	r2, r3
 80066d4:	4b21      	ldr	r3, [pc, #132]	; (800675c <prvAddCurrentTaskToDelayedList+0xb8>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4013      	ands	r3, r2
 80066da:	4a20      	ldr	r2, [pc, #128]	; (800675c <prvAddCurrentTaskToDelayedList+0xb8>)
 80066dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e4:	d10a      	bne.n	80066fc <prvAddCurrentTaskToDelayedList+0x58>
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d007      	beq.n	80066fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066ec:	4b1a      	ldr	r3, [pc, #104]	; (8006758 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3304      	adds	r3, #4
 80066f2:	4619      	mov	r1, r3
 80066f4:	481a      	ldr	r0, [pc, #104]	; (8006760 <prvAddCurrentTaskToDelayedList+0xbc>)
 80066f6:	f7fd ff63 	bl	80045c0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80066fa:	e026      	b.n	800674a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4413      	add	r3, r2
 8006702:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006704:	4b14      	ldr	r3, [pc, #80]	; (8006758 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	429a      	cmp	r2, r3
 8006712:	d209      	bcs.n	8006728 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006714:	4b13      	ldr	r3, [pc, #76]	; (8006764 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	4b0f      	ldr	r3, [pc, #60]	; (8006758 <prvAddCurrentTaskToDelayedList+0xb4>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3304      	adds	r3, #4
 800671e:	4619      	mov	r1, r3
 8006720:	4610      	mov	r0, r2
 8006722:	f7fd ff71 	bl	8004608 <vListInsert>
}
 8006726:	e010      	b.n	800674a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006728:	4b0f      	ldr	r3, [pc, #60]	; (8006768 <prvAddCurrentTaskToDelayedList+0xc4>)
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <prvAddCurrentTaskToDelayedList+0xb4>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3304      	adds	r3, #4
 8006732:	4619      	mov	r1, r3
 8006734:	4610      	mov	r0, r2
 8006736:	f7fd ff67 	bl	8004608 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800673a:	4b0c      	ldr	r3, [pc, #48]	; (800676c <prvAddCurrentTaskToDelayedList+0xc8>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	429a      	cmp	r2, r3
 8006742:	d202      	bcs.n	800674a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006744:	4a09      	ldr	r2, [pc, #36]	; (800676c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	6013      	str	r3, [r2, #0]
}
 800674a:	bf00      	nop
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	20000570 	.word	0x20000570
 8006758:	2000046c 	.word	0x2000046c
 800675c:	20000574 	.word	0x20000574
 8006760:	20000558 	.word	0x20000558
 8006764:	20000528 	.word	0x20000528
 8006768:	20000524 	.word	0x20000524
 800676c:	2000058c 	.word	0x2000058c

08006770 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	3b04      	subs	r3, #4
 8006780:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006788:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	3b04      	subs	r3, #4
 800678e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	f023 0201 	bic.w	r2, r3, #1
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3b04      	subs	r3, #4
 800679e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067a0:	4a0c      	ldr	r2, [pc, #48]	; (80067d4 <pxPortInitialiseStack+0x64>)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	3b14      	subs	r3, #20
 80067aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	3b04      	subs	r3, #4
 80067b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f06f 0202 	mvn.w	r2, #2
 80067be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	3b20      	subs	r3, #32
 80067c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80067c6:	68fb      	ldr	r3, [r7, #12]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	080067d9 	.word	0x080067d9

080067d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067de:	2300      	movs	r3, #0
 80067e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067e2:	4b13      	ldr	r3, [pc, #76]	; (8006830 <prvTaskExitError+0x58>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ea:	d00b      	beq.n	8006804 <prvTaskExitError+0x2c>
 80067ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f0:	b672      	cpsid	i
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	b662      	cpsie	i
 8006800:	60fb      	str	r3, [r7, #12]
 8006802:	e7fe      	b.n	8006802 <prvTaskExitError+0x2a>
 8006804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006808:	b672      	cpsid	i
 800680a:	f383 8811 	msr	BASEPRI, r3
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f3bf 8f4f 	dsb	sy
 8006816:	b662      	cpsie	i
 8006818:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800681a:	bf00      	nop
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d0fc      	beq.n	800681c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006822:	bf00      	nop
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	2000000c 	.word	0x2000000c
	...

08006840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006840:	4b07      	ldr	r3, [pc, #28]	; (8006860 <pxCurrentTCBConst2>)
 8006842:	6819      	ldr	r1, [r3, #0]
 8006844:	6808      	ldr	r0, [r1, #0]
 8006846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684a:	f380 8809 	msr	PSP, r0
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f04f 0000 	mov.w	r0, #0
 8006856:	f380 8811 	msr	BASEPRI, r0
 800685a:	4770      	bx	lr
 800685c:	f3af 8000 	nop.w

08006860 <pxCurrentTCBConst2>:
 8006860:	2000046c 	.word	0x2000046c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006864:	bf00      	nop
 8006866:	bf00      	nop

08006868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006868:	4808      	ldr	r0, [pc, #32]	; (800688c <prvPortStartFirstTask+0x24>)
 800686a:	6800      	ldr	r0, [r0, #0]
 800686c:	6800      	ldr	r0, [r0, #0]
 800686e:	f380 8808 	msr	MSP, r0
 8006872:	f04f 0000 	mov.w	r0, #0
 8006876:	f380 8814 	msr	CONTROL, r0
 800687a:	b662      	cpsie	i
 800687c:	b661      	cpsie	f
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	df00      	svc	0
 8006888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800688a:	bf00      	nop
 800688c:	e000ed08 	.word	0xe000ed08

08006890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006896:	4b36      	ldr	r3, [pc, #216]	; (8006970 <xPortStartScheduler+0xe0>)
 8006898:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	22ff      	movs	r2, #255	; 0xff
 80068a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068b0:	78fb      	ldrb	r3, [r7, #3]
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	4b2e      	ldr	r3, [pc, #184]	; (8006974 <xPortStartScheduler+0xe4>)
 80068bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068be:	4b2e      	ldr	r3, [pc, #184]	; (8006978 <xPortStartScheduler+0xe8>)
 80068c0:	2207      	movs	r2, #7
 80068c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068c4:	e009      	b.n	80068da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80068c6:	4b2c      	ldr	r3, [pc, #176]	; (8006978 <xPortStartScheduler+0xe8>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	4a2a      	ldr	r2, [pc, #168]	; (8006978 <xPortStartScheduler+0xe8>)
 80068ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068d0:	78fb      	ldrb	r3, [r7, #3]
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068da:	78fb      	ldrb	r3, [r7, #3]
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e2:	2b80      	cmp	r3, #128	; 0x80
 80068e4:	d0ef      	beq.n	80068c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068e6:	4b24      	ldr	r3, [pc, #144]	; (8006978 <xPortStartScheduler+0xe8>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f1c3 0307 	rsb	r3, r3, #7
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d00b      	beq.n	800690a <xPortStartScheduler+0x7a>
 80068f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f6:	b672      	cpsid	i
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	b662      	cpsie	i
 8006906:	60bb      	str	r3, [r7, #8]
 8006908:	e7fe      	b.n	8006908 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800690a:	4b1b      	ldr	r3, [pc, #108]	; (8006978 <xPortStartScheduler+0xe8>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	021b      	lsls	r3, r3, #8
 8006910:	4a19      	ldr	r2, [pc, #100]	; (8006978 <xPortStartScheduler+0xe8>)
 8006912:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006914:	4b18      	ldr	r3, [pc, #96]	; (8006978 <xPortStartScheduler+0xe8>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800691c:	4a16      	ldr	r2, [pc, #88]	; (8006978 <xPortStartScheduler+0xe8>)
 800691e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	b2da      	uxtb	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006928:	4b14      	ldr	r3, [pc, #80]	; (800697c <xPortStartScheduler+0xec>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a13      	ldr	r2, [pc, #76]	; (800697c <xPortStartScheduler+0xec>)
 800692e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006932:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006934:	4b11      	ldr	r3, [pc, #68]	; (800697c <xPortStartScheduler+0xec>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a10      	ldr	r2, [pc, #64]	; (800697c <xPortStartScheduler+0xec>)
 800693a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800693e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006940:	f000 f8d4 	bl	8006aec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006944:	4b0e      	ldr	r3, [pc, #56]	; (8006980 <xPortStartScheduler+0xf0>)
 8006946:	2200      	movs	r2, #0
 8006948:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800694a:	f000 f8f3 	bl	8006b34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800694e:	4b0d      	ldr	r3, [pc, #52]	; (8006984 <xPortStartScheduler+0xf4>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a0c      	ldr	r2, [pc, #48]	; (8006984 <xPortStartScheduler+0xf4>)
 8006954:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006958:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800695a:	f7ff ff85 	bl	8006868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800695e:	f7ff fa65 	bl	8005e2c <vTaskSwitchContext>
	prvTaskExitError();
 8006962:	f7ff ff39 	bl	80067d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	e000e400 	.word	0xe000e400
 8006974:	20000598 	.word	0x20000598
 8006978:	2000059c 	.word	0x2000059c
 800697c:	e000ed20 	.word	0xe000ed20
 8006980:	2000000c 	.word	0x2000000c
 8006984:	e000ef34 	.word	0xe000ef34

08006988 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006992:	b672      	cpsid	i
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	b662      	cpsie	i
 80069a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069a4:	4b0f      	ldr	r3, [pc, #60]	; (80069e4 <vPortEnterCritical+0x5c>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3301      	adds	r3, #1
 80069aa:	4a0e      	ldr	r2, [pc, #56]	; (80069e4 <vPortEnterCritical+0x5c>)
 80069ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069ae:	4b0d      	ldr	r3, [pc, #52]	; (80069e4 <vPortEnterCritical+0x5c>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d110      	bne.n	80069d8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069b6:	4b0c      	ldr	r3, [pc, #48]	; (80069e8 <vPortEnterCritical+0x60>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00b      	beq.n	80069d8 <vPortEnterCritical+0x50>
 80069c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c4:	b672      	cpsid	i
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	b662      	cpsie	i
 80069d4:	603b      	str	r3, [r7, #0]
 80069d6:	e7fe      	b.n	80069d6 <vPortEnterCritical+0x4e>
	}
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	2000000c 	.word	0x2000000c
 80069e8:	e000ed04 	.word	0xe000ed04

080069ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069f2:	4b12      	ldr	r3, [pc, #72]	; (8006a3c <vPortExitCritical+0x50>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10b      	bne.n	8006a12 <vPortExitCritical+0x26>
 80069fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fe:	b672      	cpsid	i
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	b662      	cpsie	i
 8006a0e:	607b      	str	r3, [r7, #4]
 8006a10:	e7fe      	b.n	8006a10 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8006a12:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <vPortExitCritical+0x50>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	4a08      	ldr	r2, [pc, #32]	; (8006a3c <vPortExitCritical+0x50>)
 8006a1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a1c:	4b07      	ldr	r3, [pc, #28]	; (8006a3c <vPortExitCritical+0x50>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d104      	bne.n	8006a2e <vPortExitCritical+0x42>
 8006a24:	2300      	movs	r3, #0
 8006a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a2e:	bf00      	nop
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	2000000c 	.word	0x2000000c

08006a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a40:	f3ef 8009 	mrs	r0, PSP
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	4b15      	ldr	r3, [pc, #84]	; (8006aa0 <pxCurrentTCBConst>)
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	f01e 0f10 	tst.w	lr, #16
 8006a50:	bf08      	it	eq
 8006a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5a:	6010      	str	r0, [r2, #0]
 8006a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a64:	b672      	cpsid	i
 8006a66:	f380 8811 	msr	BASEPRI, r0
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	b662      	cpsie	i
 8006a74:	f7ff f9da 	bl	8005e2c <vTaskSwitchContext>
 8006a78:	f04f 0000 	mov.w	r0, #0
 8006a7c:	f380 8811 	msr	BASEPRI, r0
 8006a80:	bc09      	pop	{r0, r3}
 8006a82:	6819      	ldr	r1, [r3, #0]
 8006a84:	6808      	ldr	r0, [r1, #0]
 8006a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a8a:	f01e 0f10 	tst.w	lr, #16
 8006a8e:	bf08      	it	eq
 8006a90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a94:	f380 8809 	msr	PSP, r0
 8006a98:	f3bf 8f6f 	isb	sy
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop

08006aa0 <pxCurrentTCBConst>:
 8006aa0:	2000046c 	.word	0x2000046c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006aa4:	bf00      	nop
 8006aa6:	bf00      	nop

08006aa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab2:	b672      	cpsid	i
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	b662      	cpsie	i
 8006ac2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ac4:	f7ff f8f8 	bl	8005cb8 <xTaskIncrementTick>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006ace:	4b06      	ldr	r3, [pc, #24]	; (8006ae8 <SysTick_Handler+0x40>)
 8006ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ad4:	601a      	str	r2, [r3, #0]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ae0:	bf00      	nop
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	e000ed04 	.word	0xe000ed04

08006aec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006aec:	b480      	push	{r7}
 8006aee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006af0:	4b0b      	ldr	r3, [pc, #44]	; (8006b20 <vPortSetupTimerInterrupt+0x34>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006af6:	4b0b      	ldr	r3, [pc, #44]	; (8006b24 <vPortSetupTimerInterrupt+0x38>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006afc:	4b0a      	ldr	r3, [pc, #40]	; (8006b28 <vPortSetupTimerInterrupt+0x3c>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a0a      	ldr	r2, [pc, #40]	; (8006b2c <vPortSetupTimerInterrupt+0x40>)
 8006b02:	fba2 2303 	umull	r2, r3, r2, r3
 8006b06:	099b      	lsrs	r3, r3, #6
 8006b08:	4a09      	ldr	r2, [pc, #36]	; (8006b30 <vPortSetupTimerInterrupt+0x44>)
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b0e:	4b04      	ldr	r3, [pc, #16]	; (8006b20 <vPortSetupTimerInterrupt+0x34>)
 8006b10:	2207      	movs	r2, #7
 8006b12:	601a      	str	r2, [r3, #0]
}
 8006b14:	bf00      	nop
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	e000e010 	.word	0xe000e010
 8006b24:	e000e018 	.word	0xe000e018
 8006b28:	20000000 	.word	0x20000000
 8006b2c:	10624dd3 	.word	0x10624dd3
 8006b30:	e000e014 	.word	0xe000e014

08006b34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b44 <vPortEnableVFP+0x10>
 8006b38:	6801      	ldr	r1, [r0, #0]
 8006b3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b3e:	6001      	str	r1, [r0, #0]
 8006b40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b42:	bf00      	nop
 8006b44:	e000ed88 	.word	0xe000ed88

08006b48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b4e:	f3ef 8305 	mrs	r3, IPSR
 8006b52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2b0f      	cmp	r3, #15
 8006b58:	d915      	bls.n	8006b86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b5a:	4a18      	ldr	r2, [pc, #96]	; (8006bbc <vPortValidateInterruptPriority+0x74>)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4413      	add	r3, r2
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b64:	4b16      	ldr	r3, [pc, #88]	; (8006bc0 <vPortValidateInterruptPriority+0x78>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	7afa      	ldrb	r2, [r7, #11]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d20b      	bcs.n	8006b86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b72:	b672      	cpsid	i
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	b662      	cpsie	i
 8006b82:	607b      	str	r3, [r7, #4]
 8006b84:	e7fe      	b.n	8006b84 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b86:	4b0f      	ldr	r3, [pc, #60]	; (8006bc4 <vPortValidateInterruptPriority+0x7c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b8e:	4b0e      	ldr	r3, [pc, #56]	; (8006bc8 <vPortValidateInterruptPriority+0x80>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d90b      	bls.n	8006bae <vPortValidateInterruptPriority+0x66>
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	b672      	cpsid	i
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	b662      	cpsie	i
 8006baa:	603b      	str	r3, [r7, #0]
 8006bac:	e7fe      	b.n	8006bac <vPortValidateInterruptPriority+0x64>
	}
 8006bae:	bf00      	nop
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	e000e3f0 	.word	0xe000e3f0
 8006bc0:	20000598 	.word	0x20000598
 8006bc4:	e000ed0c 	.word	0xe000ed0c
 8006bc8:	2000059c 	.word	0x2000059c

08006bcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b08a      	sub	sp, #40	; 0x28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006bd8:	f7fe ffa0 	bl	8005b1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006bdc:	4b5a      	ldr	r3, [pc, #360]	; (8006d48 <pvPortMalloc+0x17c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d101      	bne.n	8006be8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006be4:	f000 f916 	bl	8006e14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006be8:	4b58      	ldr	r3, [pc, #352]	; (8006d4c <pvPortMalloc+0x180>)
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4013      	ands	r3, r2
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f040 8090 	bne.w	8006d16 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d01e      	beq.n	8006c3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006bfc:	2208      	movs	r2, #8
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4413      	add	r3, r2
 8006c02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f003 0307 	and.w	r3, r3, #7
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d015      	beq.n	8006c3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f023 0307 	bic.w	r3, r3, #7
 8006c14:	3308      	adds	r3, #8
 8006c16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f003 0307 	and.w	r3, r3, #7
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00b      	beq.n	8006c3a <pvPortMalloc+0x6e>
 8006c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c26:	b672      	cpsid	i
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	b662      	cpsie	i
 8006c36:	617b      	str	r3, [r7, #20]
 8006c38:	e7fe      	b.n	8006c38 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d06a      	beq.n	8006d16 <pvPortMalloc+0x14a>
 8006c40:	4b43      	ldr	r3, [pc, #268]	; (8006d50 <pvPortMalloc+0x184>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d865      	bhi.n	8006d16 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c4a:	4b42      	ldr	r3, [pc, #264]	; (8006d54 <pvPortMalloc+0x188>)
 8006c4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c4e:	4b41      	ldr	r3, [pc, #260]	; (8006d54 <pvPortMalloc+0x188>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c54:	e004      	b.n	8006c60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d903      	bls.n	8006c72 <pvPortMalloc+0xa6>
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1f1      	bne.n	8006c56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c72:	4b35      	ldr	r3, [pc, #212]	; (8006d48 <pvPortMalloc+0x17c>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d04c      	beq.n	8006d16 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2208      	movs	r2, #8
 8006c82:	4413      	add	r3, r2
 8006c84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	685a      	ldr	r2, [r3, #4]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	1ad2      	subs	r2, r2, r3
 8006c96:	2308      	movs	r3, #8
 8006c98:	005b      	lsls	r3, r3, #1
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d920      	bls.n	8006ce0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	f003 0307 	and.w	r3, r3, #7
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00b      	beq.n	8006cc8 <pvPortMalloc+0xfc>
 8006cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb4:	b672      	cpsid	i
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	b662      	cpsie	i
 8006cc4:	613b      	str	r3, [r7, #16]
 8006cc6:	e7fe      	b.n	8006cc6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	1ad2      	subs	r2, r2, r3
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006cda:	69b8      	ldr	r0, [r7, #24]
 8006cdc:	f000 f8fc 	bl	8006ed8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ce0:	4b1b      	ldr	r3, [pc, #108]	; (8006d50 <pvPortMalloc+0x184>)
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	4a19      	ldr	r2, [pc, #100]	; (8006d50 <pvPortMalloc+0x184>)
 8006cec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cee:	4b18      	ldr	r3, [pc, #96]	; (8006d50 <pvPortMalloc+0x184>)
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	4b19      	ldr	r3, [pc, #100]	; (8006d58 <pvPortMalloc+0x18c>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d203      	bcs.n	8006d02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006cfa:	4b15      	ldr	r3, [pc, #84]	; (8006d50 <pvPortMalloc+0x184>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a16      	ldr	r2, [pc, #88]	; (8006d58 <pvPortMalloc+0x18c>)
 8006d00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	4b11      	ldr	r3, [pc, #68]	; (8006d4c <pvPortMalloc+0x180>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	431a      	orrs	r2, r3
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	2200      	movs	r2, #0
 8006d14:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d16:	f7fe ff0f 	bl	8005b38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00b      	beq.n	8006d3c <pvPortMalloc+0x170>
 8006d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d28:	b672      	cpsid	i
 8006d2a:	f383 8811 	msr	BASEPRI, r3
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f3bf 8f4f 	dsb	sy
 8006d36:	b662      	cpsie	i
 8006d38:	60fb      	str	r3, [r7, #12]
 8006d3a:	e7fe      	b.n	8006d3a <pvPortMalloc+0x16e>
	return pvReturn;
 8006d3c:	69fb      	ldr	r3, [r7, #28]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3728      	adds	r7, #40	; 0x28
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	200085a8 	.word	0x200085a8
 8006d4c:	200085b4 	.word	0x200085b4
 8006d50:	200085ac 	.word	0x200085ac
 8006d54:	200085a0 	.word	0x200085a0
 8006d58:	200085b0 	.word	0x200085b0

08006d5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d04a      	beq.n	8006e04 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d6e:	2308      	movs	r3, #8
 8006d70:	425b      	negs	r3, r3
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	4413      	add	r3, r2
 8006d76:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	685a      	ldr	r2, [r3, #4]
 8006d80:	4b22      	ldr	r3, [pc, #136]	; (8006e0c <vPortFree+0xb0>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4013      	ands	r3, r2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10b      	bne.n	8006da2 <vPortFree+0x46>
 8006d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8e:	b672      	cpsid	i
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	b662      	cpsie	i
 8006d9e:	60fb      	str	r3, [r7, #12]
 8006da0:	e7fe      	b.n	8006da0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00b      	beq.n	8006dc2 <vPortFree+0x66>
 8006daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dae:	b672      	cpsid	i
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	b662      	cpsie	i
 8006dbe:	60bb      	str	r3, [r7, #8]
 8006dc0:	e7fe      	b.n	8006dc0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	4b11      	ldr	r3, [pc, #68]	; (8006e0c <vPortFree+0xb0>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d019      	beq.n	8006e04 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d115      	bne.n	8006e04 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	4b0b      	ldr	r3, [pc, #44]	; (8006e0c <vPortFree+0xb0>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	43db      	mvns	r3, r3
 8006de2:	401a      	ands	r2, r3
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006de8:	f7fe fe98 	bl	8005b1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <vPortFree+0xb4>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4413      	add	r3, r2
 8006df6:	4a06      	ldr	r2, [pc, #24]	; (8006e10 <vPortFree+0xb4>)
 8006df8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006dfa:	6938      	ldr	r0, [r7, #16]
 8006dfc:	f000 f86c 	bl	8006ed8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006e00:	f7fe fe9a 	bl	8005b38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e04:	bf00      	nop
 8006e06:	3718      	adds	r7, #24
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	200085b4 	.word	0x200085b4
 8006e10:	200085ac 	.word	0x200085ac

08006e14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e20:	4b27      	ldr	r3, [pc, #156]	; (8006ec0 <prvHeapInit+0xac>)
 8006e22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00c      	beq.n	8006e48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	3307      	adds	r3, #7
 8006e32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0307 	bic.w	r3, r3, #7
 8006e3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	4a1f      	ldr	r2, [pc, #124]	; (8006ec0 <prvHeapInit+0xac>)
 8006e44:	4413      	add	r3, r2
 8006e46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e4c:	4a1d      	ldr	r2, [pc, #116]	; (8006ec4 <prvHeapInit+0xb0>)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e52:	4b1c      	ldr	r3, [pc, #112]	; (8006ec4 <prvHeapInit+0xb0>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e60:	2208      	movs	r2, #8
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	1a9b      	subs	r3, r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 0307 	bic.w	r3, r3, #7
 8006e6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4a15      	ldr	r2, [pc, #84]	; (8006ec8 <prvHeapInit+0xb4>)
 8006e74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e76:	4b14      	ldr	r3, [pc, #80]	; (8006ec8 <prvHeapInit+0xb4>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e7e:	4b12      	ldr	r3, [pc, #72]	; (8006ec8 <prvHeapInit+0xb4>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2200      	movs	r2, #0
 8006e84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	1ad2      	subs	r2, r2, r3
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e94:	4b0c      	ldr	r3, [pc, #48]	; (8006ec8 <prvHeapInit+0xb4>)
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	4a0a      	ldr	r2, [pc, #40]	; (8006ecc <prvHeapInit+0xb8>)
 8006ea2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	4a09      	ldr	r2, [pc, #36]	; (8006ed0 <prvHeapInit+0xbc>)
 8006eaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006eac:	4b09      	ldr	r3, [pc, #36]	; (8006ed4 <prvHeapInit+0xc0>)
 8006eae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006eb2:	601a      	str	r2, [r3, #0]
}
 8006eb4:	bf00      	nop
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	200005a0 	.word	0x200005a0
 8006ec4:	200085a0 	.word	0x200085a0
 8006ec8:	200085a8 	.word	0x200085a8
 8006ecc:	200085b0 	.word	0x200085b0
 8006ed0:	200085ac 	.word	0x200085ac
 8006ed4:	200085b4 	.word	0x200085b4

08006ed8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ee0:	4b28      	ldr	r3, [pc, #160]	; (8006f84 <prvInsertBlockIntoFreeList+0xac>)
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	e002      	b.n	8006eec <prvInsertBlockIntoFreeList+0x14>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d8f7      	bhi.n	8006ee6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	4413      	add	r3, r2
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d108      	bne.n	8006f1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	441a      	add	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	441a      	add	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d118      	bne.n	8006f60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	4b15      	ldr	r3, [pc, #84]	; (8006f88 <prvInsertBlockIntoFreeList+0xb0>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d00d      	beq.n	8006f56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	441a      	add	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	601a      	str	r2, [r3, #0]
 8006f54:	e008      	b.n	8006f68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f56:	4b0c      	ldr	r3, [pc, #48]	; (8006f88 <prvInsertBlockIntoFreeList+0xb0>)
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	601a      	str	r2, [r3, #0]
 8006f5e:	e003      	b.n	8006f68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d002      	beq.n	8006f76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f76:	bf00      	nop
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	200085a0 	.word	0x200085a0
 8006f88:	200085a8 	.word	0x200085a8

08006f8c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	330c      	adds	r3, #12
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f003 fc6b 	bl	800a87c <tcpip_send_msg_wait_sem>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8006faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d103      	bne.n	8006fba <netconn_apimsg+0x2e>
    return apimsg->err;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8006fb8:	e001      	b.n	8006fbe <netconn_apimsg+0x32>
  }
  return err;
 8006fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
	...

08006fc8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b08c      	sub	sp, #48	; 0x30
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	4603      	mov	r3, r0
 8006fd0:	603a      	str	r2, [r7, #0]
 8006fd2:	71fb      	strb	r3, [r7, #7]
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8006fd8:	79fb      	ldrb	r3, [r7, #7]
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f001 f89f 	bl	8008120 <netconn_alloc>
 8006fe2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8006fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d054      	beq.n	8007094 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8006fea:	79bb      	ldrb	r3, [r7, #6]
 8006fec:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8006fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8006ff2:	f107 0308 	add.w	r3, r7, #8
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	4829      	ldr	r0, [pc, #164]	; (80070a0 <netconn_new_with_proto_and_callback+0xd8>)
 8006ffa:	f7ff ffc7 	bl	8006f8c <netconn_apimsg>
 8006ffe:	4603      	mov	r3, r0
 8007000:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8007004:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007008:	2b00      	cmp	r3, #0
 800700a:	d043      	beq.n	8007094 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800700c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d005      	beq.n	8007020 <netconn_new_with_proto_and_callback+0x58>
 8007014:	4b23      	ldr	r3, [pc, #140]	; (80070a4 <netconn_new_with_proto_and_callback+0xdc>)
 8007016:	22a3      	movs	r2, #163	; 0xa3
 8007018:	4923      	ldr	r1, [pc, #140]	; (80070a8 <netconn_new_with_proto_and_callback+0xe0>)
 800701a:	4824      	ldr	r0, [pc, #144]	; (80070ac <netconn_new_with_proto_and_callback+0xe4>)
 800701c:	f012 fe00 	bl	8019c20 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007022:	3310      	adds	r3, #16
 8007024:	4618      	mov	r0, r3
 8007026:	f010 fdbc 	bl	8017ba2 <sys_mbox_valid>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d105      	bne.n	800703c <netconn_new_with_proto_and_callback+0x74>
 8007030:	4b1c      	ldr	r3, [pc, #112]	; (80070a4 <netconn_new_with_proto_and_callback+0xdc>)
 8007032:	22a4      	movs	r2, #164	; 0xa4
 8007034:	491e      	ldr	r1, [pc, #120]	; (80070b0 <netconn_new_with_proto_and_callback+0xe8>)
 8007036:	481d      	ldr	r0, [pc, #116]	; (80070ac <netconn_new_with_proto_and_callback+0xe4>)
 8007038:	f012 fdf2 	bl	8019c20 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800703c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703e:	3314      	adds	r3, #20
 8007040:	4618      	mov	r0, r3
 8007042:	f010 fdae 	bl	8017ba2 <sys_mbox_valid>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d005      	beq.n	8007058 <netconn_new_with_proto_and_callback+0x90>
 800704c:	4b15      	ldr	r3, [pc, #84]	; (80070a4 <netconn_new_with_proto_and_callback+0xdc>)
 800704e:	22a6      	movs	r2, #166	; 0xa6
 8007050:	4918      	ldr	r1, [pc, #96]	; (80070b4 <netconn_new_with_proto_and_callback+0xec>)
 8007052:	4816      	ldr	r0, [pc, #88]	; (80070ac <netconn_new_with_proto_and_callback+0xe4>)
 8007054:	f012 fde4 	bl	8019c20 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705a:	330c      	adds	r3, #12
 800705c:	4618      	mov	r0, r3
 800705e:	f010 fe31 	bl	8017cc4 <sys_sem_valid>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d105      	bne.n	8007074 <netconn_new_with_proto_and_callback+0xac>
 8007068:	4b0e      	ldr	r3, [pc, #56]	; (80070a4 <netconn_new_with_proto_and_callback+0xdc>)
 800706a:	22a9      	movs	r2, #169	; 0xa9
 800706c:	4912      	ldr	r1, [pc, #72]	; (80070b8 <netconn_new_with_proto_and_callback+0xf0>)
 800706e:	480f      	ldr	r0, [pc, #60]	; (80070ac <netconn_new_with_proto_and_callback+0xe4>)
 8007070:	f012 fdd6 	bl	8019c20 <iprintf>
      sys_sem_free(&conn->op_completed);
 8007074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007076:	330c      	adds	r3, #12
 8007078:	4618      	mov	r0, r3
 800707a:	f010 fe16 	bl	8017caa <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800707e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007080:	3310      	adds	r3, #16
 8007082:	4618      	mov	r0, r3
 8007084:	f010 fd06 	bl	8017a94 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007088:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800708a:	2007      	movs	r0, #7
 800708c:	f004 f95e 	bl	800b34c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007090:	2300      	movs	r3, #0
 8007092:	e000      	b.n	8007096 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007096:	4618      	mov	r0, r3
 8007098:	3730      	adds	r7, #48	; 0x30
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	080080f5 	.word	0x080080f5
 80070a4:	0801adf4 	.word	0x0801adf4
 80070a8:	0801ae28 	.word	0x0801ae28
 80070ac:	0801ae4c 	.word	0x0801ae4c
 80070b0:	0801ae74 	.word	0x0801ae74
 80070b4:	0801ae8c 	.word	0x0801ae8c
 80070b8:	0801aeb0 	.word	0x0801aeb0

080070bc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b08c      	sub	sp, #48	; 0x30
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <netconn_prepare_delete+0x12>
    return ERR_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	e014      	b.n	80070f8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80070d2:	2329      	movs	r3, #41	; 0x29
 80070d4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80070d6:	f107 030c 	add.w	r3, r7, #12
 80070da:	4619      	mov	r1, r3
 80070dc:	4808      	ldr	r0, [pc, #32]	; (8007100 <netconn_prepare_delete+0x44>)
 80070de:	f7ff ff55 	bl	8006f8c <netconn_apimsg>
 80070e2:	4603      	mov	r3, r0
 80070e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80070e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d002      	beq.n	80070f6 <netconn_prepare_delete+0x3a>
    return err;
 80070f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80070f4:	e000      	b.n	80070f8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3730      	adds	r7, #48	; 0x30
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	0800866d 	.word	0x0800866d

08007104 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <netconn_delete+0x12>
    return ERR_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	e00d      	b.n	8007132 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7ff ffd0 	bl	80070bc <netconn_prepare_delete>
 800711c:	4603      	mov	r3, r0
 800711e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8007120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d102      	bne.n	800712e <netconn_delete+0x2a>
    netconn_free(conn);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f001 f871 	bl	8008210 <netconn_free>
  }
  return err;
 800712e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
	...

0800713c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b08e      	sub	sp, #56	; 0x38
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
 8007148:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d109      	bne.n	8007164 <netconn_getaddr+0x28>
 8007150:	4b1d      	ldr	r3, [pc, #116]	; (80071c8 <netconn_getaddr+0x8c>)
 8007152:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007156:	491d      	ldr	r1, [pc, #116]	; (80071cc <netconn_getaddr+0x90>)
 8007158:	481d      	ldr	r0, [pc, #116]	; (80071d0 <netconn_getaddr+0x94>)
 800715a:	f012 fd61 	bl	8019c20 <iprintf>
 800715e:	f06f 030f 	mvn.w	r3, #15
 8007162:	e02d      	b.n	80071c0 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d109      	bne.n	800717e <netconn_getaddr+0x42>
 800716a:	4b17      	ldr	r3, [pc, #92]	; (80071c8 <netconn_getaddr+0x8c>)
 800716c:	f240 1213 	movw	r2, #275	; 0x113
 8007170:	4918      	ldr	r1, [pc, #96]	; (80071d4 <netconn_getaddr+0x98>)
 8007172:	4817      	ldr	r0, [pc, #92]	; (80071d0 <netconn_getaddr+0x94>)
 8007174:	f012 fd54 	bl	8019c20 <iprintf>
 8007178:	f06f 030f 	mvn.w	r3, #15
 800717c:	e020      	b.n	80071c0 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d109      	bne.n	8007198 <netconn_getaddr+0x5c>
 8007184:	4b10      	ldr	r3, [pc, #64]	; (80071c8 <netconn_getaddr+0x8c>)
 8007186:	f44f 728a 	mov.w	r2, #276	; 0x114
 800718a:	4913      	ldr	r1, [pc, #76]	; (80071d8 <netconn_getaddr+0x9c>)
 800718c:	4810      	ldr	r0, [pc, #64]	; (80071d0 <netconn_getaddr+0x94>)
 800718e:	f012 fd47 	bl	8019c20 <iprintf>
 8007192:	f06f 030f 	mvn.w	r3, #15
 8007196:	e013      	b.n	80071c0 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800719c:	78fb      	ldrb	r3, [r7, #3]
 800719e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 80071aa:	f107 0314 	add.w	r3, r7, #20
 80071ae:	4619      	mov	r1, r3
 80071b0:	480a      	ldr	r0, [pc, #40]	; (80071dc <netconn_getaddr+0xa0>)
 80071b2:	f7ff feeb 	bl	8006f8c <netconn_apimsg>
 80071b6:	4603      	mov	r3, r0
 80071b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 80071bc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3738      	adds	r7, #56	; 0x38
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	0801adf4 	.word	0x0801adf4
 80071cc:	0801aecc 	.word	0x0801aecc
 80071d0:	0801ae4c 	.word	0x0801ae4c
 80071d4:	0801aeec 	.word	0x0801aeec
 80071d8:	0801af0c 	.word	0x0801af0c
 80071dc:	080090e5 	.word	0x080090e5

080071e0 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08e      	sub	sp, #56	; 0x38
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	4613      	mov	r3, r2
 80071ec:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d109      	bne.n	8007208 <netconn_connect+0x28>
 80071f4:	4b11      	ldr	r3, [pc, #68]	; (800723c <netconn_connect+0x5c>)
 80071f6:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 80071fa:	4911      	ldr	r1, [pc, #68]	; (8007240 <netconn_connect+0x60>)
 80071fc:	4811      	ldr	r0, [pc, #68]	; (8007244 <netconn_connect+0x64>)
 80071fe:	f012 fd0f 	bl	8019c20 <iprintf>
 8007202:	f06f 030f 	mvn.w	r3, #15
 8007206:	e015      	b.n	8007234 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800720e:	4b0e      	ldr	r3, [pc, #56]	; (8007248 <netconn_connect+0x68>)
 8007210:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800721a:	88fb      	ldrh	r3, [r7, #6]
 800721c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800721e:	f107 0314 	add.w	r3, r7, #20
 8007222:	4619      	mov	r1, r3
 8007224:	4809      	ldr	r0, [pc, #36]	; (800724c <netconn_connect+0x6c>)
 8007226:	f7ff feb1 	bl	8006f8c <netconn_apimsg>
 800722a:	4603      	mov	r3, r0
 800722c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8007230:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8007234:	4618      	mov	r0, r3
 8007236:	3738      	adds	r7, #56	; 0x38
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	0801adf4 	.word	0x0801adf4
 8007240:	0801af68 	.word	0x0801af68
 8007244:	0801ae4c 	.word	0x0801ae4c
 8007248:	0801ec8c 	.word	0x0801ec8c
 800724c:	08008961 	.word	0x08008961

08007250 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b08c      	sub	sp, #48	; 0x30
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d109      	bne.n	8007272 <netconn_disconnect+0x22>
 800725e:	4b0d      	ldr	r3, [pc, #52]	; (8007294 <netconn_disconnect+0x44>)
 8007260:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8007264:	490c      	ldr	r1, [pc, #48]	; (8007298 <netconn_disconnect+0x48>)
 8007266:	480d      	ldr	r0, [pc, #52]	; (800729c <netconn_disconnect+0x4c>)
 8007268:	f012 fcda 	bl	8019c20 <iprintf>
 800726c:	f06f 030f 	mvn.w	r3, #15
 8007270:	e00c      	b.n	800728c <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 8007276:	f107 030c 	add.w	r3, r7, #12
 800727a:	4619      	mov	r1, r3
 800727c:	4808      	ldr	r0, [pc, #32]	; (80072a0 <netconn_disconnect+0x50>)
 800727e:	f7ff fe85 	bl	8006f8c <netconn_apimsg>
 8007282:	4603      	mov	r3, r0
 8007284:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007288:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800728c:	4618      	mov	r0, r3
 800728e:	3730      	adds	r7, #48	; 0x30
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	0801adf4 	.word	0x0801adf4
 8007298:	0801af88 	.word	0x0801af88
 800729c:	0801ae4c 	.word	0x0801ae4c
 80072a0:	08008ae9 	.word	0x08008ae9

080072a4 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b08a      	sub	sp, #40	; 0x28
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	4613      	mov	r3, r2
 80072b0:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d109      	bne.n	80072d0 <netconn_recv_data+0x2c>
 80072bc:	4b60      	ldr	r3, [pc, #384]	; (8007440 <netconn_recv_data+0x19c>)
 80072be:	f44f 7212 	mov.w	r2, #584	; 0x248
 80072c2:	4960      	ldr	r1, [pc, #384]	; (8007444 <netconn_recv_data+0x1a0>)
 80072c4:	4860      	ldr	r0, [pc, #384]	; (8007448 <netconn_recv_data+0x1a4>)
 80072c6:	f012 fcab 	bl	8019c20 <iprintf>
 80072ca:	f06f 030f 	mvn.w	r3, #15
 80072ce:	e0b2      	b.n	8007436 <netconn_recv_data+0x192>
  *new_buf = NULL;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	2200      	movs	r2, #0
 80072d4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d109      	bne.n	80072f0 <netconn_recv_data+0x4c>
 80072dc:	4b58      	ldr	r3, [pc, #352]	; (8007440 <netconn_recv_data+0x19c>)
 80072de:	f240 224a 	movw	r2, #586	; 0x24a
 80072e2:	495a      	ldr	r1, [pc, #360]	; (800744c <netconn_recv_data+0x1a8>)
 80072e4:	4858      	ldr	r0, [pc, #352]	; (8007448 <netconn_recv_data+0x1a4>)
 80072e6:	f012 fc9b 	bl	8019c20 <iprintf>
 80072ea:	f06f 030f 	mvn.w	r3, #15
 80072ee:	e0a2      	b.n	8007436 <netconn_recv_data+0x192>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3310      	adds	r3, #16
 80072f4:	4618      	mov	r0, r3
 80072f6:	f010 fc54 	bl	8017ba2 <sys_mbox_valid>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10e      	bne.n	800731e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 fb17 	bl	8007934 <netconn_err>
 8007306:	4603      	mov	r3, r0
 8007308:	77fb      	strb	r3, [r7, #31]
    if (err != ERR_OK) {
 800730a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d002      	beq.n	8007318 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8007312:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007316:	e08e      	b.n	8007436 <netconn_recv_data+0x192>
    }
    return ERR_CONN;
 8007318:	f06f 030a 	mvn.w	r3, #10
 800731c:	e08b      	b.n	8007436 <netconn_recv_data+0x192>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007324:	f003 0302 	and.w	r3, r3, #2
 8007328:	2b00      	cmp	r3, #0
 800732a:	d110      	bne.n	800734e <netconn_recv_data+0xaa>
 800732c:	79fb      	ldrb	r3, [r7, #7]
 800732e:	f003 0304 	and.w	r3, r3, #4
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10b      	bne.n	800734e <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800733c:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007340:	2b00      	cmp	r3, #0
 8007342:	d104      	bne.n	800734e <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d025      	beq.n	800739a <netconn_recv_data+0xf6>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3310      	adds	r3, #16
 8007352:	f107 0218 	add.w	r2, r7, #24
 8007356:	4611      	mov	r1, r2
 8007358:	4618      	mov	r0, r3
 800735a:	f010 fc06 	bl	8017b6a <sys_arch_mbox_tryfetch>
 800735e:	4603      	mov	r3, r0
 8007360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007364:	d121      	bne.n	80073aa <netconn_recv_data+0x106>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f000 fae4 	bl	8007934 <netconn_err>
 800736c:	4603      	mov	r3, r0
 800736e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      if (err != ERR_OK) {
 8007372:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007376:	2b00      	cmp	r3, #0
 8007378:	d002      	beq.n	8007380 <netconn_recv_data+0xdc>
        /* return pending error */
        return err;
 800737a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800737e:	e05a      	b.n	8007436 <netconn_recv_data+0x192>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	2b00      	cmp	r3, #0
 800738c:	d002      	beq.n	8007394 <netconn_recv_data+0xf0>
        return ERR_CONN;
 800738e:	f06f 030a 	mvn.w	r3, #10
 8007392:	e050      	b.n	8007436 <netconn_recv_data+0x192>
      }
      return ERR_WOULDBLOCK;
 8007394:	f06f 0306 	mvn.w	r3, #6
 8007398:	e04d      	b.n	8007436 <netconn_recv_data+0x192>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3310      	adds	r3, #16
 800739e:	f107 0118 	add.w	r1, r7, #24
 80073a2:	2200      	movs	r2, #0
 80073a4:	4618      	mov	r0, r3
 80073a6:	f010 fba1 	bl	8017aec <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073b2:	2b10      	cmp	r3, #16
 80073b4:	d117      	bne.n	80073e6 <netconn_recv_data+0x142>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	f107 0217 	add.w	r2, r7, #23
 80073bc:	4611      	mov	r1, r2
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 fb06 	bl	80079d0 <lwip_netconn_is_err_msg>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d009      	beq.n	80073de <netconn_recv_data+0x13a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80073ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073ce:	f113 0f0f 	cmn.w	r3, #15
 80073d2:	d101      	bne.n	80073d8 <netconn_recv_data+0x134>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	e02e      	b.n	8007436 <netconn_recv_data+0x192>
      }
      return err;
 80073d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073dc:	e02b      	b.n	8007436 <netconn_recv_data+0x192>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	891b      	ldrh	r3, [r3, #8]
 80073e2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80073e4:	e00d      	b.n	8007402 <netconn_recv_data+0x15e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d106      	bne.n	80073fa <netconn_recv_data+0x156>
 80073ec:	4b14      	ldr	r3, [pc, #80]	; (8007440 <netconn_recv_data+0x19c>)
 80073ee:	f240 2291 	movw	r2, #657	; 0x291
 80073f2:	4917      	ldr	r1, [pc, #92]	; (8007450 <netconn_recv_data+0x1ac>)
 80073f4:	4814      	ldr	r0, [pc, #80]	; (8007448 <netconn_recv_data+0x1a4>)
 80073f6:	f012 fc13 	bl	8019c20 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	891b      	ldrh	r3, [r3, #8]
 8007400:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
#endif /* (LWIP_UDP || LWIP_RAW) */

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
 8007402:	f010 fce9 	bl	8017dd8 <sys_arch_protect>
 8007406:	6238      	str	r0, [r7, #32]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6a1a      	ldr	r2, [r3, #32]
 800740c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800740e:	1ad2      	subs	r2, r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	621a      	str	r2, [r3, #32]
 8007414:	6a38      	ldr	r0, [r7, #32]
 8007416:	f010 fced 	bl	8017df4 <sys_arch_unprotect>
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741e:	2b00      	cmp	r3, #0
 8007420:	d005      	beq.n	800742e <netconn_recv_data+0x18a>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007426:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007428:	2101      	movs	r1, #1
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3728      	adds	r7, #40	; 0x28
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	0801adf4 	.word	0x0801adf4
 8007444:	0801b00c 	.word	0x0801b00c
 8007448:	0801ae4c 	.word	0x0801ae4c
 800744c:	0801b02c 	.word	0x0801b02c
 8007450:	0801b048 	.word	0x0801b048

08007454 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d005      	beq.n	8007472 <netconn_tcp_recvd_msg+0x1e>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800746e:	2b10      	cmp	r3, #16
 8007470:	d009      	beq.n	8007486 <netconn_tcp_recvd_msg+0x32>
 8007472:	4b0c      	ldr	r3, [pc, #48]	; (80074a4 <netconn_tcp_recvd_msg+0x50>)
 8007474:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8007478:	490b      	ldr	r1, [pc, #44]	; (80074a8 <netconn_tcp_recvd_msg+0x54>)
 800747a:	480c      	ldr	r0, [pc, #48]	; (80074ac <netconn_tcp_recvd_msg+0x58>)
 800747c:	f012 fbd0 	bl	8019c20 <iprintf>
 8007480:	f06f 030f 	mvn.w	r3, #15
 8007484:	e00a      	b.n	800749c <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8007492:	6879      	ldr	r1, [r7, #4]
 8007494:	4806      	ldr	r0, [pc, #24]	; (80074b0 <netconn_tcp_recvd_msg+0x5c>)
 8007496:	f7ff fd79 	bl	8006f8c <netconn_apimsg>
 800749a:	4603      	mov	r3, r0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	0801adf4 	.word	0x0801adf4
 80074a8:	0801b054 	.word	0x0801b054
 80074ac:	0801ae4c 	.word	0x0801ae4c
 80074b0:	08008bc1 	.word	0x08008bc1

080074b4 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b08c      	sub	sp, #48	; 0x30
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d005      	beq.n	80074d0 <netconn_tcp_recvd+0x1c>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074cc:	2b10      	cmp	r3, #16
 80074ce:	d009      	beq.n	80074e4 <netconn_tcp_recvd+0x30>
 80074d0:	4b0c      	ldr	r3, [pc, #48]	; (8007504 <netconn_tcp_recvd+0x50>)
 80074d2:	f240 22b6 	movw	r2, #694	; 0x2b6
 80074d6:	490c      	ldr	r1, [pc, #48]	; (8007508 <netconn_tcp_recvd+0x54>)
 80074d8:	480c      	ldr	r0, [pc, #48]	; (800750c <netconn_tcp_recvd+0x58>)
 80074da:	f012 fba1 	bl	8019c20 <iprintf>
 80074de:	f06f 030f 	mvn.w	r3, #15
 80074e2:	e00b      	b.n	80074fc <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 80074e4:	f107 030c 	add.w	r3, r7, #12
 80074e8:	461a      	mov	r2, r3
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7ff ffb1 	bl	8007454 <netconn_tcp_recvd_msg>
 80074f2:	4603      	mov	r3, r0
 80074f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 80074f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3730      	adds	r7, #48	; 0x30
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	0801adf4 	.word	0x0801adf4
 8007508:	0801b054 	.word	0x0801b054
 800750c:	0801ae4c 	.word	0x0801ae4c

08007510 <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b090      	sub	sp, #64	; 0x40
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	4613      	mov	r3, r2
 800751c:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3310      	adds	r3, #16
 8007522:	4618      	mov	r0, r3
 8007524:	f010 fb3d 	bl	8017ba2 <sys_mbox_valid>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d102      	bne.n	8007534 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800752e:	f06f 030a 	mvn.w	r3, #10
 8007532:	e072      	b.n	800761a <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800753a:	b25b      	sxtb	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	da09      	bge.n	8007554 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007546:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800754a:	b2da      	uxtb	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    goto handle_fin;
 8007552:	e03b      	b.n	80075cc <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8007554:	79fb      	ldrb	r3, [r7, #7]
 8007556:	461a      	mov	r2, r3
 8007558:	68b9      	ldr	r1, [r7, #8]
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f7ff fea2 	bl	80072a4 <netconn_recv_data>
 8007560:	4603      	mov	r3, r0
 8007562:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8007566:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800756a:	2b00      	cmp	r3, #0
 800756c:	d002      	beq.n	8007574 <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800756e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007572:	e052      	b.n	800761a <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800757a:	79fb      	ldrb	r3, [r7, #7]
 800757c:	f003 0308 	and.w	r3, r3, #8
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10e      	bne.n	80075a2 <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8007584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <netconn_recv_data_tcp+0x80>
 800758a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758c:	891b      	ldrh	r3, [r3, #8]
 800758e:	e000      	b.n	8007592 <netconn_recv_data_tcp+0x82>
 8007590:	2301      	movs	r3, #1
 8007592:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8007594:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007596:	f107 0214 	add.w	r2, r7, #20
 800759a:	4619      	mov	r1, r3
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f7ff ff59 	bl	8007454 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80075a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d136      	bne.n	8007616 <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 80075a8:	79fb      	ldrb	r3, [r7, #7]
 80075aa:	f003 0310 	and.w	r3, r3, #16
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00b      	beq.n	80075ca <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80075b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075bc:	b2da      	uxtb	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return ERR_WOULDBLOCK;
 80075c4:	f06f 0306 	mvn.w	r3, #6
 80075c8:	e027      	b.n	800761a <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 80075ca:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d005      	beq.n	80075e0 <netconn_recv_data_tcp+0xd0>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d8:	2200      	movs	r2, #0
 80075da:	2101      	movs	r1, #1
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10f      	bne.n	8007608 <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f000 f9a3 	bl	8007934 <netconn_err>
 80075ee:	4603      	mov	r3, r0
 80075f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 80075f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d002      	beq.n	8007602 <netconn_recv_data_tcp+0xf2>
          return err;
 80075fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007600:	e00b      	b.n	800761a <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 8007602:	f06f 030d 	mvn.w	r3, #13
 8007606:	e008      	b.n	800761a <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8007608:	2101      	movs	r1, #1
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 f962 	bl	80078d4 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8007610:	f06f 030e 	mvn.w	r3, #14
 8007614:	e001      	b.n	800761a <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 8007616:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800761a:	4618      	mov	r0, r3
 800761c:	3740      	adds	r7, #64	; 0x40
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
	...

08007624 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	4613      	mov	r3, r2
 8007630:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d005      	beq.n	8007644 <netconn_recv_tcp_pbuf_flags+0x20>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007640:	2b10      	cmp	r3, #16
 8007642:	d009      	beq.n	8007658 <netconn_recv_tcp_pbuf_flags+0x34>
 8007644:	4b0a      	ldr	r3, [pc, #40]	; (8007670 <netconn_recv_tcp_pbuf_flags+0x4c>)
 8007646:	f240 3226 	movw	r2, #806	; 0x326
 800764a:	490a      	ldr	r1, [pc, #40]	; (8007674 <netconn_recv_tcp_pbuf_flags+0x50>)
 800764c:	480a      	ldr	r0, [pc, #40]	; (8007678 <netconn_recv_tcp_pbuf_flags+0x54>)
 800764e:	f012 fae7 	bl	8019c20 <iprintf>
 8007652:	f06f 030f 	mvn.w	r3, #15
 8007656:	e006      	b.n	8007666 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 8007658:	79fb      	ldrb	r3, [r7, #7]
 800765a:	461a      	mov	r2, r3
 800765c:	68b9      	ldr	r1, [r7, #8]
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f7ff ff56 	bl	8007510 <netconn_recv_data_tcp>
 8007664:	4603      	mov	r3, r0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	0801adf4 	.word	0x0801adf4
 8007674:	0801b054 	.word	0x0801b054
 8007678:	0801ae4c 	.word	0x0801ae4c

0800767c <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	4613      	mov	r3, r2
 8007688:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d005      	beq.n	800769c <netconn_recv_udp_raw_netbuf_flags+0x20>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007698:	2b10      	cmp	r3, #16
 800769a:	d109      	bne.n	80076b0 <netconn_recv_udp_raw_netbuf_flags+0x34>
 800769c:	4b0a      	ldr	r3, [pc, #40]	; (80076c8 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800769e:	f240 324d 	movw	r2, #845	; 0x34d
 80076a2:	490a      	ldr	r1, [pc, #40]	; (80076cc <netconn_recv_udp_raw_netbuf_flags+0x50>)
 80076a4:	480a      	ldr	r0, [pc, #40]	; (80076d0 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 80076a6:	f012 fabb 	bl	8019c20 <iprintf>
 80076aa:	f06f 030f 	mvn.w	r3, #15
 80076ae:	e006      	b.n	80076be <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 80076b0:	79fb      	ldrb	r3, [r7, #7]
 80076b2:	461a      	mov	r2, r3
 80076b4:	68b9      	ldr	r1, [r7, #8]
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f7ff fdf4 	bl	80072a4 <netconn_recv_data>
 80076bc:	4603      	mov	r3, r0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	0801adf4 	.word	0x0801adf4
 80076cc:	0801b078 	.word	0x0801b078
 80076d0:	0801ae4c 	.word	0x0801ae4c

080076d4 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b08c      	sub	sp, #48	; 0x30
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d109      	bne.n	80076f8 <netconn_send+0x24>
 80076e4:	4b0e      	ldr	r3, [pc, #56]	; (8007720 <netconn_send+0x4c>)
 80076e6:	f240 32b2 	movw	r2, #946	; 0x3b2
 80076ea:	490e      	ldr	r1, [pc, #56]	; (8007724 <netconn_send+0x50>)
 80076ec:	480e      	ldr	r0, [pc, #56]	; (8007728 <netconn_send+0x54>)
 80076ee:	f012 fa97 	bl	8019c20 <iprintf>
 80076f2:	f06f 030f 	mvn.w	r3, #15
 80076f6:	e00e      	b.n	8007716 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8007700:	f107 030c 	add.w	r3, r7, #12
 8007704:	4619      	mov	r1, r3
 8007706:	4809      	ldr	r0, [pc, #36]	; (800772c <netconn_send+0x58>)
 8007708:	f7ff fc40 	bl	8006f8c <netconn_apimsg>
 800770c:	4603      	mov	r3, r0
 800770e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007712:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007716:	4618      	mov	r0, r3
 8007718:	3730      	adds	r7, #48	; 0x30
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	0801adf4 	.word	0x0801adf4
 8007724:	0801b0b0 	.word	0x0801b0b0
 8007728:	0801ae4c 	.word	0x0801ae4c
 800772c:	08008b25 	.word	0x08008b25

08007730 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b088      	sub	sp, #32
 8007734:	af02      	add	r7, sp, #8
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
 800773c:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8007746:	78fa      	ldrb	r2, [r7, #3]
 8007748:	f107 0110 	add.w	r1, r7, #16
 800774c:	6a3b      	ldr	r3, [r7, #32]
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	4613      	mov	r3, r2
 8007752:	2201      	movs	r2, #1
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f000 f805 	bl	8007764 <netconn_write_vectors_partly>
 800775a:	4603      	mov	r3, r0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3718      	adds	r7, #24
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b092      	sub	sp, #72	; 0x48
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	4611      	mov	r1, r2
 8007770:	461a      	mov	r2, r3
 8007772:	460b      	mov	r3, r1
 8007774:	80fb      	strh	r3, [r7, #6]
 8007776:	4613      	mov	r3, r2
 8007778:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d109      	bne.n	8007794 <netconn_write_vectors_partly+0x30>
 8007780:	4b4e      	ldr	r3, [pc, #312]	; (80078bc <netconn_write_vectors_partly+0x158>)
 8007782:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8007786:	494e      	ldr	r1, [pc, #312]	; (80078c0 <netconn_write_vectors_partly+0x15c>)
 8007788:	484e      	ldr	r0, [pc, #312]	; (80078c4 <netconn_write_vectors_partly+0x160>)
 800778a:	f012 fa49 	bl	8019c20 <iprintf>
 800778e:	f06f 030f 	mvn.w	r3, #15
 8007792:	e08f      	b.n	80078b4 <netconn_write_vectors_partly+0x150>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800779c:	2b10      	cmp	r3, #16
 800779e:	d009      	beq.n	80077b4 <netconn_write_vectors_partly+0x50>
 80077a0:	4b46      	ldr	r3, [pc, #280]	; (80078bc <netconn_write_vectors_partly+0x158>)
 80077a2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80077a6:	4948      	ldr	r1, [pc, #288]	; (80078c8 <netconn_write_vectors_partly+0x164>)
 80077a8:	4846      	ldr	r0, [pc, #280]	; (80078c4 <netconn_write_vectors_partly+0x160>)
 80077aa:	f012 fa39 	bl	8019c20 <iprintf>
 80077ae:	f06f 0305 	mvn.w	r3, #5
 80077b2:	e07f      	b.n	80078b4 <netconn_write_vectors_partly+0x150>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80077ba:	f003 0302 	and.w	r3, r3, #2
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d104      	bne.n	80077cc <netconn_write_vectors_partly+0x68>
 80077c2:	797b      	ldrb	r3, [r7, #5]
 80077c4:	f003 0304 	and.w	r3, r3, #4
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d001      	beq.n	80077d0 <netconn_write_vectors_partly+0x6c>
 80077cc:	2301      	movs	r3, #1
 80077ce:	e000      	b.n	80077d2 <netconn_write_vectors_partly+0x6e>
 80077d0:	2300      	movs	r3, #0
 80077d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80077d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d005      	beq.n	80077ea <netconn_write_vectors_partly+0x86>
 80077de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d102      	bne.n	80077ea <netconn_write_vectors_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80077e4:	f06f 0305 	mvn.w	r3, #5
 80077e8:	e064      	b.n	80078b4 <netconn_write_vectors_partly+0x150>
  }

  /* sum up the total size */
  size = 0;
 80077ea:	2300      	movs	r3, #0
 80077ec:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 80077ee:	2300      	movs	r3, #0
 80077f0:	643b      	str	r3, [r7, #64]	; 0x40
 80077f2:	e015      	b.n	8007820 <netconn_write_vectors_partly+0xbc>
    size += vectors[i].len;
 80077f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077f6:	00db      	lsls	r3, r3, #3
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	4413      	add	r3, r2
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007800:	4413      	add	r3, r2
 8007802:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8007804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007806:	00db      	lsls	r3, r3, #3
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	4413      	add	r3, r2
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007810:	429a      	cmp	r2, r3
 8007812:	d202      	bcs.n	800781a <netconn_write_vectors_partly+0xb6>
      /* overflow */
      return ERR_VAL;
 8007814:	f06f 0305 	mvn.w	r3, #5
 8007818:	e04c      	b.n	80078b4 <netconn_write_vectors_partly+0x150>
  for (i = 0; i < vectorcnt; i++) {
 800781a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800781c:	3301      	adds	r3, #1
 800781e:	643b      	str	r3, [r7, #64]	; 0x40
 8007820:	88fb      	ldrh	r3, [r7, #6]
 8007822:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007824:	429a      	cmp	r2, r3
 8007826:	dbe5      	blt.n	80077f4 <netconn_write_vectors_partly+0x90>
    }
  }
  if (size == 0) {
 8007828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800782a:	2b00      	cmp	r3, #0
 800782c:	d101      	bne.n	8007832 <netconn_write_vectors_partly+0xce>
    return ERR_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	e040      	b.n	80078b4 <netconn_write_vectors_partly+0x150>
  } else if (size > SSIZE_MAX) {
 8007832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007834:	2b00      	cmp	r3, #0
 8007836:	da0a      	bge.n	800784e <netconn_write_vectors_partly+0xea>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8007838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800783a:	2b00      	cmp	r3, #0
 800783c:	d102      	bne.n	8007844 <netconn_write_vectors_partly+0xe0>
      return ERR_VAL;
 800783e:	f06f 0305 	mvn.w	r3, #5
 8007842:	e037      	b.n	80078b4 <netconn_write_vectors_partly+0x150>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8007844:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007848:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800784a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784c:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8007856:	88fb      	ldrh	r3, [r7, #6]
 8007858:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800785a:	2300      	movs	r3, #0
 800785c:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800785e:	797b      	ldrb	r3, [r7, #5]
 8007860:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8007864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007866:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8007868:	2300      	movs	r3, #0
 800786a:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800786c:	f107 0314 	add.w	r3, r7, #20
 8007870:	4619      	mov	r1, r3
 8007872:	4816      	ldr	r0, [pc, #88]	; (80078cc <netconn_write_vectors_partly+0x168>)
 8007874:	f7ff fb8a 	bl	8006f8c <netconn_apimsg>
 8007878:	4603      	mov	r3, r0
 800787a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800787e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8007882:	2b00      	cmp	r3, #0
 8007884:	d114      	bne.n	80078b0 <netconn_write_vectors_partly+0x14c>
    if (bytes_written != NULL) {
 8007886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007888:	2b00      	cmp	r3, #0
 800788a:	d002      	beq.n	8007892 <netconn_write_vectors_partly+0x12e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800788c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800788e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007890:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8007892:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10a      	bne.n	80078b0 <netconn_write_vectors_partly+0x14c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800789a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800789e:	429a      	cmp	r2, r3
 80078a0:	d006      	beq.n	80078b0 <netconn_write_vectors_partly+0x14c>
 80078a2:	4b06      	ldr	r3, [pc, #24]	; (80078bc <netconn_write_vectors_partly+0x158>)
 80078a4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80078a8:	4909      	ldr	r1, [pc, #36]	; (80078d0 <netconn_write_vectors_partly+0x16c>)
 80078aa:	4806      	ldr	r0, [pc, #24]	; (80078c4 <netconn_write_vectors_partly+0x160>)
 80078ac:	f012 f9b8 	bl	8019c20 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80078b0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3748      	adds	r7, #72	; 0x48
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	0801adf4 	.word	0x0801adf4
 80078c0:	0801b0cc 	.word	0x0801b0cc
 80078c4:	0801ae4c 	.word	0x0801ae4c
 80078c8:	0801b0e8 	.word	0x0801b0e8
 80078cc:	08008fcd 	.word	0x08008fcd
 80078d0:	0801b10c 	.word	0x0801b10c

080078d4 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b08c      	sub	sp, #48	; 0x30
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	460b      	mov	r3, r1
 80078de:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d109      	bne.n	80078fa <netconn_close_shutdown+0x26>
 80078e6:	4b0f      	ldr	r3, [pc, #60]	; (8007924 <netconn_close_shutdown+0x50>)
 80078e8:	f240 4247 	movw	r2, #1095	; 0x447
 80078ec:	490e      	ldr	r1, [pc, #56]	; (8007928 <netconn_close_shutdown+0x54>)
 80078ee:	480f      	ldr	r0, [pc, #60]	; (800792c <netconn_close_shutdown+0x58>)
 80078f0:	f012 f996 	bl	8019c20 <iprintf>
 80078f4:	f06f 030f 	mvn.w	r3, #15
 80078f8:	e010      	b.n	800791c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80078fe:	78fb      	ldrb	r3, [r7, #3]
 8007900:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007902:	2329      	movs	r3, #41	; 0x29
 8007904:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8007906:	f107 030c 	add.w	r3, r7, #12
 800790a:	4619      	mov	r1, r3
 800790c:	4808      	ldr	r0, [pc, #32]	; (8007930 <netconn_close_shutdown+0x5c>)
 800790e:	f7ff fb3d 	bl	8006f8c <netconn_apimsg>
 8007912:	4603      	mov	r3, r0
 8007914:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007918:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800791c:	4618      	mov	r0, r3
 800791e:	3730      	adds	r7, #48	; 0x30
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	0801adf4 	.word	0x0801adf4
 8007928:	0801b130 	.word	0x0801b130
 800792c:	0801ae4c 	.word	0x0801ae4c
 8007930:	080091f1 	.word	0x080091f1

08007934 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d101      	bne.n	8007946 <netconn_err+0x12>
    return ERR_OK;
 8007942:	2300      	movs	r3, #0
 8007944:	e00d      	b.n	8007962 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8007946:	f010 fa47 	bl	8017dd8 <sys_arch_protect>
 800794a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	7a1b      	ldrb	r3, [r3, #8]
 8007950:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f010 fa4b 	bl	8017df4 <sys_arch_unprotect>
  return err;
 800795e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
	...

0800796c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	4603      	mov	r3, r0
 8007974:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8007976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800797a:	f113 0f0e 	cmn.w	r3, #14
 800797e:	d008      	beq.n	8007992 <lwip_netconn_err_to_msg+0x26>
 8007980:	f113 0f0d 	cmn.w	r3, #13
 8007984:	d003      	beq.n	800798e <lwip_netconn_err_to_msg+0x22>
 8007986:	f113 0f0f 	cmn.w	r3, #15
 800798a:	d004      	beq.n	8007996 <lwip_netconn_err_to_msg+0x2a>
 800798c:	e005      	b.n	800799a <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800798e:	4b0a      	ldr	r3, [pc, #40]	; (80079b8 <lwip_netconn_err_to_msg+0x4c>)
 8007990:	e00e      	b.n	80079b0 <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8007992:	4b0a      	ldr	r3, [pc, #40]	; (80079bc <lwip_netconn_err_to_msg+0x50>)
 8007994:	e00c      	b.n	80079b0 <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8007996:	4b0a      	ldr	r3, [pc, #40]	; (80079c0 <lwip_netconn_err_to_msg+0x54>)
 8007998:	e00a      	b.n	80079b0 <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800799a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d005      	beq.n	80079ae <lwip_netconn_err_to_msg+0x42>
 80079a2:	4b08      	ldr	r3, [pc, #32]	; (80079c4 <lwip_netconn_err_to_msg+0x58>)
 80079a4:	227d      	movs	r2, #125	; 0x7d
 80079a6:	4908      	ldr	r1, [pc, #32]	; (80079c8 <lwip_netconn_err_to_msg+0x5c>)
 80079a8:	4808      	ldr	r0, [pc, #32]	; (80079cc <lwip_netconn_err_to_msg+0x60>)
 80079aa:	f012 f939 	bl	8019c20 <iprintf>
      return NULL;
 80079ae:	2300      	movs	r3, #0
  }
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	0801eb24 	.word	0x0801eb24
 80079bc:	0801eb25 	.word	0x0801eb25
 80079c0:	0801eb26 	.word	0x0801eb26
 80079c4:	0801b14c 	.word	0x0801b14c
 80079c8:	0801b180 	.word	0x0801b180
 80079cc:	0801b190 	.word	0x0801b190

080079d0 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d105      	bne.n	80079ec <lwip_netconn_is_err_msg+0x1c>
 80079e0:	4b12      	ldr	r3, [pc, #72]	; (8007a2c <lwip_netconn_is_err_msg+0x5c>)
 80079e2:	2285      	movs	r2, #133	; 0x85
 80079e4:	4912      	ldr	r1, [pc, #72]	; (8007a30 <lwip_netconn_is_err_msg+0x60>)
 80079e6:	4813      	ldr	r0, [pc, #76]	; (8007a34 <lwip_netconn_is_err_msg+0x64>)
 80079e8:	f012 f91a 	bl	8019c20 <iprintf>

  if (msg == &netconn_aborted) {
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a12      	ldr	r2, [pc, #72]	; (8007a38 <lwip_netconn_is_err_msg+0x68>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d104      	bne.n	80079fe <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	22f3      	movs	r2, #243	; 0xf3
 80079f8:	701a      	strb	r2, [r3, #0]
    return 1;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e012      	b.n	8007a24 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a0e      	ldr	r2, [pc, #56]	; (8007a3c <lwip_netconn_is_err_msg+0x6c>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d104      	bne.n	8007a10 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	22f2      	movs	r2, #242	; 0xf2
 8007a0a:	701a      	strb	r2, [r3, #0]
    return 1;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e009      	b.n	8007a24 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a0b      	ldr	r2, [pc, #44]	; (8007a40 <lwip_netconn_is_err_msg+0x70>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d104      	bne.n	8007a22 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	22f1      	movs	r2, #241	; 0xf1
 8007a1c:	701a      	strb	r2, [r3, #0]
    return 1;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e000      	b.n	8007a24 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3708      	adds	r7, #8
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	0801b14c 	.word	0x0801b14c
 8007a30:	0801b1b8 	.word	0x0801b1b8
 8007a34:	0801b190 	.word	0x0801b190
 8007a38:	0801eb24 	.word	0x0801eb24
 8007a3c:	0801eb25 	.word	0x0801eb25
 8007a40:	0801eb26 	.word	0x0801eb26

08007a44 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b08a      	sub	sp, #40	; 0x28
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
 8007a50:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d105      	bne.n	8007a64 <recv_udp+0x20>
 8007a58:	4b43      	ldr	r3, [pc, #268]	; (8007b68 <recv_udp+0x124>)
 8007a5a:	22e5      	movs	r2, #229	; 0xe5
 8007a5c:	4943      	ldr	r1, [pc, #268]	; (8007b6c <recv_udp+0x128>)
 8007a5e:	4844      	ldr	r0, [pc, #272]	; (8007b70 <recv_udp+0x12c>)
 8007a60:	f012 f8de 	bl	8019c20 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d105      	bne.n	8007a76 <recv_udp+0x32>
 8007a6a:	4b3f      	ldr	r3, [pc, #252]	; (8007b68 <recv_udp+0x124>)
 8007a6c:	22e6      	movs	r2, #230	; 0xe6
 8007a6e:	4941      	ldr	r1, [pc, #260]	; (8007b74 <recv_udp+0x130>)
 8007a70:	483f      	ldr	r0, [pc, #252]	; (8007b70 <recv_udp+0x12c>)
 8007a72:	f012 f8d5 	bl	8019c20 <iprintf>
  conn = (struct netconn *)arg;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	627b      	str	r3, [r7, #36]	; 0x24

  if (conn == NULL) {
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d103      	bne.n	8007a88 <recv_udp+0x44>
    pbuf_free(p);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f004 fb41 	bl	800c108 <pbuf_free>
    return;
 8007a86:	e06b      	b.n	8007b60 <recv_udp+0x11c>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d005      	beq.n	8007a9e <recv_udp+0x5a>
 8007a92:	4b35      	ldr	r3, [pc, #212]	; (8007b68 <recv_udp+0x124>)
 8007a94:	22ee      	movs	r2, #238	; 0xee
 8007a96:	4938      	ldr	r1, [pc, #224]	; (8007b78 <recv_udp+0x134>)
 8007a98:	4835      	ldr	r0, [pc, #212]	; (8007b70 <recv_udp+0x12c>)
 8007a9a:	f012 f8c1 	bl	8019c20 <iprintf>

#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
 8007a9e:	f010 f99b 	bl	8017dd8 <sys_arch_protect>
 8007aa2:	6238      	str	r0, [r7, #32]
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	6a1b      	ldr	r3, [r3, #32]
 8007aa8:	61fb      	str	r3, [r7, #28]
 8007aaa:	6a38      	ldr	r0, [r7, #32]
 8007aac:	f010 f9a2 	bl	8017df4 <sys_arch_unprotect>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	3310      	adds	r3, #16
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f010 f874 	bl	8017ba2 <sys_mbox_valid>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d008      	beq.n	8007ad2 <recv_udp+0x8e>
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	891b      	ldrh	r3, [r3, #8]
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	441a      	add	r2, r3
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	69db      	ldr	r3, [r3, #28]
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	dd03      	ble.n	8007ada <recv_udp+0x96>
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f004 fb18 	bl	800c108 <pbuf_free>
    return;
 8007ad8:	e042      	b.n	8007b60 <recv_udp+0x11c>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8007ada:	2006      	movs	r0, #6
 8007adc:	f003 fbe4 	bl	800b2a8 <memp_malloc>
 8007ae0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d103      	bne.n	8007af0 <recv_udp+0xac>
    pbuf_free(p);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f004 fb0d 	bl	800c108 <pbuf_free>
    return;
 8007aee:	e037      	b.n	8007b60 <recv_udp+0x11c>
  } else {
    buf->p = p;
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d002      	beq.n	8007b08 <recv_udp+0xc4>
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	e000      	b.n	8007b0a <recv_udp+0xc6>
 8007b08:	2300      	movs	r3, #0
 8007b0a:	69ba      	ldr	r2, [r7, #24]
 8007b0c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8007b12:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	891b      	ldrh	r3, [r3, #8]
 8007b18:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1c:	3310      	adds	r3, #16
 8007b1e:	69b9      	ldr	r1, [r7, #24]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f00f ffc9 	bl	8017ab8 <sys_mbox_trypost>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d003      	beq.n	8007b34 <recv_udp+0xf0>
    netbuf_delete(buf);
 8007b2c:	69b8      	ldr	r0, [r7, #24]
 8007b2e:	f001 fc09 	bl	8009344 <netbuf_delete>
    return;
 8007b32:	e015      	b.n	8007b60 <recv_udp+0x11c>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
 8007b34:	f010 f950 	bl	8017dd8 <sys_arch_protect>
 8007b38:	6138      	str	r0, [r7, #16]
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3c:	6a1a      	ldr	r2, [r3, #32]
 8007b3e:	8afb      	ldrh	r3, [r7, #22]
 8007b40:	441a      	add	r2, r3
 8007b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b44:	621a      	str	r2, [r3, #32]
 8007b46:	6938      	ldr	r0, [r7, #16]
 8007b48:	f010 f954 	bl	8017df4 <sys_arch_unprotect>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d005      	beq.n	8007b60 <recv_udp+0x11c>
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b58:	8afa      	ldrh	r2, [r7, #22]
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b5e:	4798      	blx	r3
  }
}
 8007b60:	3728      	adds	r7, #40	; 0x28
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	0801b14c 	.word	0x0801b14c
 8007b6c:	0801b1c4 	.word	0x0801b1c4
 8007b70:	0801b190 	.word	0x0801b190
 8007b74:	0801b1e8 	.word	0x0801b1e8
 8007b78:	0801b208 	.word	0x0801b208

08007b7c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b088      	sub	sp, #32
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
 8007b88:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d106      	bne.n	8007b9e <recv_tcp+0x22>
 8007b90:	4b3c      	ldr	r3, [pc, #240]	; (8007c84 <recv_tcp+0x108>)
 8007b92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007b96:	493c      	ldr	r1, [pc, #240]	; (8007c88 <recv_tcp+0x10c>)
 8007b98:	483c      	ldr	r0, [pc, #240]	; (8007c8c <recv_tcp+0x110>)
 8007b9a:	f012 f841 	bl	8019c20 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d106      	bne.n	8007bb2 <recv_tcp+0x36>
 8007ba4:	4b37      	ldr	r3, [pc, #220]	; (8007c84 <recv_tcp+0x108>)
 8007ba6:	f240 122d 	movw	r2, #301	; 0x12d
 8007baa:	4939      	ldr	r1, [pc, #228]	; (8007c90 <recv_tcp+0x114>)
 8007bac:	4837      	ldr	r0, [pc, #220]	; (8007c8c <recv_tcp+0x110>)
 8007bae:	f012 f837 	bl	8019c20 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8007bb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d006      	beq.n	8007bc8 <recv_tcp+0x4c>
 8007bba:	4b32      	ldr	r3, [pc, #200]	; (8007c84 <recv_tcp+0x108>)
 8007bbc:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8007bc0:	4934      	ldr	r1, [pc, #208]	; (8007c94 <recv_tcp+0x118>)
 8007bc2:	4832      	ldr	r0, [pc, #200]	; (8007c8c <recv_tcp+0x110>)
 8007bc4:	f012 f82c 	bl	8019c20 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d102      	bne.n	8007bd8 <recv_tcp+0x5c>
    return ERR_VAL;
 8007bd2:	f06f 0305 	mvn.w	r3, #5
 8007bd6:	e051      	b.n	8007c7c <recv_tcp+0x100>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d006      	beq.n	8007bf0 <recv_tcp+0x74>
 8007be2:	4b28      	ldr	r3, [pc, #160]	; (8007c84 <recv_tcp+0x108>)
 8007be4:	f240 1235 	movw	r2, #309	; 0x135
 8007be8:	492b      	ldr	r1, [pc, #172]	; (8007c98 <recv_tcp+0x11c>)
 8007bea:	4828      	ldr	r0, [pc, #160]	; (8007c8c <recv_tcp+0x110>)
 8007bec:	f012 f818 	bl	8019c20 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	3310      	adds	r3, #16
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f00f ffd4 	bl	8017ba2 <sys_mbox_valid>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10d      	bne.n	8007c1c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d008      	beq.n	8007c18 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	891b      	ldrh	r3, [r3, #8]
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	68b8      	ldr	r0, [r7, #8]
 8007c0e:	f005 f8d7 	bl	800cdc0 <tcp_recved>
      pbuf_free(p);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f004 fa78 	bl	800c108 <pbuf_free>
    }
    return ERR_OK;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	e02f      	b.n	8007c7c <recv_tcp+0x100>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d005      	beq.n	8007c2e <recv_tcp+0xb2>
    msg = p;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	891b      	ldrh	r3, [r3, #8]
 8007c2a:	83fb      	strh	r3, [r7, #30]
 8007c2c:	e003      	b.n	8007c36 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8007c2e:	4b1b      	ldr	r3, [pc, #108]	; (8007c9c <recv_tcp+0x120>)
 8007c30:	61bb      	str	r3, [r7, #24]
    len = 0;
 8007c32:	2300      	movs	r3, #0
 8007c34:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	3310      	adds	r3, #16
 8007c3a:	69b9      	ldr	r1, [r7, #24]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f00f ff3b 	bl	8017ab8 <sys_mbox_trypost>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d002      	beq.n	8007c4e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8007c48:	f04f 33ff 	mov.w	r3, #4294967295
 8007c4c:	e016      	b.n	8007c7c <recv_tcp+0x100>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
 8007c4e:	f010 f8c3 	bl	8017dd8 <sys_arch_protect>
 8007c52:	6138      	str	r0, [r7, #16]
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	6a1a      	ldr	r2, [r3, #32]
 8007c58:	8bfb      	ldrh	r3, [r7, #30]
 8007c5a:	441a      	add	r2, r3
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	621a      	str	r2, [r3, #32]
 8007c60:	6938      	ldr	r0, [r7, #16]
 8007c62:	f010 f8c7 	bl	8017df4 <sys_arch_unprotect>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d005      	beq.n	8007c7a <recv_tcp+0xfe>
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c72:	8bfa      	ldrh	r2, [r7, #30]
 8007c74:	2100      	movs	r1, #0
 8007c76:	6978      	ldr	r0, [r7, #20]
 8007c78:	4798      	blx	r3
  }

  return ERR_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3720      	adds	r7, #32
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	0801b14c 	.word	0x0801b14c
 8007c88:	0801b228 	.word	0x0801b228
 8007c8c:	0801b190 	.word	0x0801b190
 8007c90:	0801b24c 	.word	0x0801b24c
 8007c94:	0801b26c 	.word	0x0801b26c
 8007c98:	0801b284 	.word	0x0801b284
 8007c9c:	0801eb26 	.word	0x0801eb26

08007ca0 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d106      	bne.n	8007cc2 <poll_tcp+0x22>
 8007cb4:	4b2b      	ldr	r3, [pc, #172]	; (8007d64 <poll_tcp+0xc4>)
 8007cb6:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8007cba:	492b      	ldr	r1, [pc, #172]	; (8007d68 <poll_tcp+0xc8>)
 8007cbc:	482b      	ldr	r0, [pc, #172]	; (8007d6c <poll_tcp+0xcc>)
 8007cbe:	f011 ffaf 	bl	8019c20 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	785b      	ldrb	r3, [r3, #1]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d104      	bne.n	8007cd4 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8007cca:	2101      	movs	r1, #1
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f000 ffad 	bl	8008c2c <lwip_netconn_do_writemore>
 8007cd2:	e016      	b.n	8007d02 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	785b      	ldrb	r3, [r3, #1]
 8007cd8:	2b04      	cmp	r3, #4
 8007cda:	d112      	bne.n	8007d02 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00a      	beq.n	8007cfa <poll_tcp+0x5a>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce8:	7a5b      	ldrb	r3, [r3, #9]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d005      	beq.n	8007cfa <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf2:	7a5a      	ldrb	r2, [r3, #9]
 8007cf4:	3a01      	subs	r2, #1
 8007cf6:	b2d2      	uxtb	r2, r2
 8007cf8:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8007cfa:	2101      	movs	r1, #1
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 fb4f 	bl	80083a0 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d08:	f003 0310 	and.w	r3, r3, #16
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d023      	beq.n	8007d58 <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d01f      	beq.n	8007d58 <poll_tcp+0xb8>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007d20:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8007d24:	d318      	bcc.n	8007d58 <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007d2e:	2b04      	cmp	r3, #4
 8007d30:	d812      	bhi.n	8007d58 <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d38:	f023 0310 	bic.w	r3, r3, #16
 8007d3c:	b2da      	uxtb	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d005      	beq.n	8007d58 <poll_tcp+0xb8>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d50:	2200      	movs	r2, #0
 8007d52:	2102      	movs	r1, #2
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	0801b14c 	.word	0x0801b14c
 8007d68:	0801b2a4 	.word	0x0801b2a4
 8007d6c:	0801b190 	.word	0x0801b190

08007d70 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d106      	bne.n	8007d96 <sent_tcp+0x26>
 8007d88:	4b21      	ldr	r3, [pc, #132]	; (8007e10 <sent_tcp+0xa0>)
 8007d8a:	f240 1293 	movw	r2, #403	; 0x193
 8007d8e:	4921      	ldr	r1, [pc, #132]	; (8007e14 <sent_tcp+0xa4>)
 8007d90:	4821      	ldr	r0, [pc, #132]	; (8007e18 <sent_tcp+0xa8>)
 8007d92:	f011 ff45 	bl	8019c20 <iprintf>

  if (conn) {
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d034      	beq.n	8007e06 <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	785b      	ldrb	r3, [r3, #1]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d104      	bne.n	8007dae <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8007da4:	2101      	movs	r1, #1
 8007da6:	6978      	ldr	r0, [r7, #20]
 8007da8:	f000 ff40 	bl	8008c2c <lwip_netconn_do_writemore>
 8007dac:	e007      	b.n	8007dbe <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	785b      	ldrb	r3, [r3, #1]
 8007db2:	2b04      	cmp	r3, #4
 8007db4:	d103      	bne.n	8007dbe <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8007db6:	2101      	movs	r1, #1
 8007db8:	6978      	ldr	r0, [r7, #20]
 8007dba:	f000 faf1 	bl	80083a0 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d01f      	beq.n	8007e06 <sent_tcp+0x96>
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007dce:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8007dd2:	d318      	bcc.n	8007e06 <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007ddc:	2b04      	cmp	r3, #4
 8007dde:	d812      	bhi.n	8007e06 <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007de6:	f023 0310 	bic.w	r3, r3, #16
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d005      	beq.n	8007e06 <sent_tcp+0x96>
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfe:	88fa      	ldrh	r2, [r7, #6]
 8007e00:	2102      	movs	r1, #2
 8007e02:	6978      	ldr	r0, [r7, #20]
 8007e04:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3718      	adds	r7, #24
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	0801b14c 	.word	0x0801b14c
 8007e14:	0801b2a4 	.word	0x0801b2a4
 8007e18:	0801b190 	.word	0x0801b190

08007e1c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b088      	sub	sp, #32
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d106      	bne.n	8007e40 <err_tcp+0x24>
 8007e32:	4b61      	ldr	r3, [pc, #388]	; (8007fb8 <err_tcp+0x19c>)
 8007e34:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8007e38:	4960      	ldr	r1, [pc, #384]	; (8007fbc <err_tcp+0x1a0>)
 8007e3a:	4861      	ldr	r0, [pc, #388]	; (8007fc0 <err_tcp+0x1a4>)
 8007e3c:	f011 fef0 	bl	8019c20 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8007e40:	f00f ffca 	bl	8017dd8 <sys_arch_protect>
 8007e44:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	78fa      	ldrb	r2, [r7, #3]
 8007e50:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e58:	f043 0301 	orr.w	r3, r3, #1
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	785b      	ldrb	r3, [r3, #1]
 8007e68:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8007e70:	69b8      	ldr	r0, [r7, #24]
 8007e72:	f00f ffbf 	bl	8017df4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d005      	beq.n	8007e8a <err_tcp+0x6e>
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e82:	2200      	movs	r2, #0
 8007e84:	2104      	movs	r1, #4
 8007e86:	69f8      	ldr	r0, [r7, #28]
 8007e88:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d005      	beq.n	8007e9e <err_tcp+0x82>
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e96:	2200      	movs	r2, #0
 8007e98:	2100      	movs	r1, #0
 8007e9a:	69f8      	ldr	r0, [r7, #28]
 8007e9c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d005      	beq.n	8007eb2 <err_tcp+0x96>
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eaa:	2200      	movs	r2, #0
 8007eac:	2102      	movs	r1, #2
 8007eae:	69f8      	ldr	r0, [r7, #28]
 8007eb0:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8007eb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7ff fd58 	bl	800796c <lwip_netconn_err_to_msg>
 8007ebc:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	3310      	adds	r3, #16
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f00f fe6d 	bl	8017ba2 <sys_mbox_valid>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d005      	beq.n	8007eda <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	3310      	adds	r3, #16
 8007ed2:	6939      	ldr	r1, [r7, #16]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f00f fdef 	bl	8017ab8 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	3314      	adds	r3, #20
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f00f fe5f 	bl	8017ba2 <sys_mbox_valid>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d005      	beq.n	8007ef6 <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	3314      	adds	r3, #20
 8007eee:	6939      	ldr	r1, [r7, #16]
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f00f fde1 	bl	8017ab8 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8007ef6:	7dfb      	ldrb	r3, [r7, #23]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d005      	beq.n	8007f08 <err_tcp+0xec>
 8007efc:	7dfb      	ldrb	r3, [r7, #23]
 8007efe:	2b04      	cmp	r3, #4
 8007f00:	d002      	beq.n	8007f08 <err_tcp+0xec>
 8007f02:	7dfb      	ldrb	r3, [r7, #23]
 8007f04:	2b03      	cmp	r3, #3
 8007f06:	d146      	bne.n	8007f96 <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f0e:	f003 0304 	and.w	r3, r3, #4
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	bf14      	ite	ne
 8007f16:	2301      	movne	r3, #1
 8007f18:	2300      	moveq	r3, #0
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f24:	f023 0304 	bic.w	r3, r3, #4
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (!was_nonblocking_connect) {
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d13b      	bne.n	8007fae <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d106      	bne.n	8007f4c <err_tcp+0x130>
 8007f3e:	4b1e      	ldr	r3, [pc, #120]	; (8007fb8 <err_tcp+0x19c>)
 8007f40:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007f44:	491f      	ldr	r1, [pc, #124]	; (8007fc4 <err_tcp+0x1a8>)
 8007f46:	481e      	ldr	r0, [pc, #120]	; (8007fc0 <err_tcp+0x1a4>)
 8007f48:	f011 fe6a 	bl	8019c20 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8007f4c:	7dfb      	ldrb	r3, [r7, #23]
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	d104      	bne.n	8007f5c <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f56:	2200      	movs	r2, #0
 8007f58:	711a      	strb	r2, [r3, #4]
 8007f5a:	e003      	b.n	8007f64 <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f60:	78fa      	ldrb	r2, [r7, #3]
 8007f62:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	330c      	adds	r3, #12
 8007f6c:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8007f6e:	68b8      	ldr	r0, [r7, #8]
 8007f70:	f00f fea8 	bl	8017cc4 <sys_sem_valid>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d106      	bne.n	8007f88 <err_tcp+0x16c>
 8007f7a:	4b0f      	ldr	r3, [pc, #60]	; (8007fb8 <err_tcp+0x19c>)
 8007f7c:	f240 12ef 	movw	r2, #495	; 0x1ef
 8007f80:	4911      	ldr	r1, [pc, #68]	; (8007fc8 <err_tcp+0x1ac>)
 8007f82:	480f      	ldr	r0, [pc, #60]	; (8007fc0 <err_tcp+0x1a4>)
 8007f84:	f011 fe4c 	bl	8019c20 <iprintf>
      conn->current_msg = NULL;
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	629a      	str	r2, [r3, #40]	; 0x28
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8007f8e:	68b8      	ldr	r0, [r7, #8]
 8007f90:	f00f fe7e 	bl	8017c90 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8007f94:	e00b      	b.n	8007fae <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d008      	beq.n	8007fb0 <err_tcp+0x194>
 8007f9e:	4b06      	ldr	r3, [pc, #24]	; (8007fb8 <err_tcp+0x19c>)
 8007fa0:	f240 12f7 	movw	r2, #503	; 0x1f7
 8007fa4:	4909      	ldr	r1, [pc, #36]	; (8007fcc <err_tcp+0x1b0>)
 8007fa6:	4806      	ldr	r0, [pc, #24]	; (8007fc0 <err_tcp+0x1a4>)
 8007fa8:	f011 fe3a 	bl	8019c20 <iprintf>
  }
}
 8007fac:	e000      	b.n	8007fb0 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 8007fae:	bf00      	nop
}
 8007fb0:	bf00      	nop
 8007fb2:	3720      	adds	r7, #32
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	0801b14c 	.word	0x0801b14c
 8007fbc:	0801b2a4 	.word	0x0801b2a4
 8007fc0:	0801b190 	.word	0x0801b190
 8007fc4:	0801b2b4 	.word	0x0801b2b4
 8007fc8:	0801b2d0 	.word	0x0801b2d0
 8007fcc:	0801b2ec 	.word	0x0801b2ec

08007fd0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8007fde:	6879      	ldr	r1, [r7, #4]
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f005 fec7 	bl	800dd74 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8007fe6:	490a      	ldr	r1, [pc, #40]	; (8008010 <setup_tcp+0x40>)
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f005 fed5 	bl	800dd98 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8007fee:	4909      	ldr	r1, [pc, #36]	; (8008014 <setup_tcp+0x44>)
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f005 fef3 	bl	800dddc <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	4907      	ldr	r1, [pc, #28]	; (8008018 <setup_tcp+0x48>)
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f005 ff4a 	bl	800de94 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008000:	4906      	ldr	r1, [pc, #24]	; (800801c <setup_tcp+0x4c>)
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f005 ff0c 	bl	800de20 <tcp_err>
}
 8008008:	bf00      	nop
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	08007b7d 	.word	0x08007b7d
 8008014:	08007d71 	.word	0x08007d71
 8008018:	08007ca1 	.word	0x08007ca1
 800801c:	08007e1d 	.word	0x08007e1d

08008020 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008020:	b590      	push	{r4, r7, lr}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008028:	2300      	movs	r3, #0
 800802a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d006      	beq.n	8008044 <pcb_new+0x24>
 8008036:	4b2b      	ldr	r3, [pc, #172]	; (80080e4 <pcb_new+0xc4>)
 8008038:	f240 2265 	movw	r2, #613	; 0x265
 800803c:	492a      	ldr	r1, [pc, #168]	; (80080e8 <pcb_new+0xc8>)
 800803e:	482b      	ldr	r0, [pc, #172]	; (80080ec <pcb_new+0xcc>)
 8008040:	f011 fdee 	bl	8019c20 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800804e:	2b10      	cmp	r3, #16
 8008050:	d022      	beq.n	8008098 <pcb_new+0x78>
 8008052:	2b20      	cmp	r3, #32
 8008054:	d133      	bne.n	80080be <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681c      	ldr	r4, [r3, #0]
 800805a:	7bfb      	ldrb	r3, [r7, #15]
 800805c:	4618      	mov	r0, r3
 800805e:	f00b f9f4 	bl	801344a <udp_new_ip_type>
 8008062:	4603      	mov	r3, r0
 8008064:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d02a      	beq.n	80080c6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	2b22      	cmp	r3, #34	; 0x22
 8008078:	d104      	bne.n	8008084 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6858      	ldr	r0, [r3, #4]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	461a      	mov	r2, r3
 8008090:	4917      	ldr	r1, [pc, #92]	; (80080f0 <pcb_new+0xd0>)
 8008092:	f00b f961 	bl	8013358 <udp_recv>
      }
      break;
 8008096:	e016      	b.n	80080c6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681c      	ldr	r4, [r3, #0]
 800809c:	7bfb      	ldrb	r3, [r7, #15]
 800809e:	4618      	mov	r0, r3
 80080a0:	f005 fe5a 	bl	800dd58 <tcp_new_ip_type>
 80080a4:	4603      	mov	r3, r0
 80080a6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00b      	beq.n	80080ca <pcb_new+0xaa>
        setup_tcp(msg->conn);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7ff ff8a 	bl	8007fd0 <setup_tcp>
      }
      break;
 80080bc:	e005      	b.n	80080ca <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	22fa      	movs	r2, #250	; 0xfa
 80080c2:	711a      	strb	r2, [r3, #4]
      return;
 80080c4:	e00a      	b.n	80080dc <pcb_new+0xbc>
      break;
 80080c6:	bf00      	nop
 80080c8:	e000      	b.n	80080cc <pcb_new+0xac>
      break;
 80080ca:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d102      	bne.n	80080dc <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	22ff      	movs	r2, #255	; 0xff
 80080da:	711a      	strb	r2, [r3, #4]
  }
}
 80080dc:	3714      	adds	r7, #20
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd90      	pop	{r4, r7, pc}
 80080e2:	bf00      	nop
 80080e4:	0801b14c 	.word	0x0801b14c
 80080e8:	0801b330 	.word	0x0801b330
 80080ec:	0801b190 	.word	0x0801b190
 80080f0:	08007a45 	.word	0x08007a45

080080f4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d102      	bne.n	8008116 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f7ff ff85 	bl	8008020 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8008116:	bf00      	nop
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
	...

08008120 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	4603      	mov	r3, r0
 8008128:	6039      	str	r1, [r7, #0]
 800812a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800812c:	2300      	movs	r3, #0
 800812e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008130:	2007      	movs	r0, #7
 8008132:	f003 f8b9 	bl	800b2a8 <memp_malloc>
 8008136:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <netconn_alloc+0x22>
    return NULL;
 800813e:	2300      	movs	r3, #0
 8008140:	e059      	b.n	80081f6 <netconn_alloc+0xd6>
  }

  conn->pending_err = ERR_OK;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	79fa      	ldrb	r2, [r7, #7]
 800814c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8008154:	79fb      	ldrb	r3, [r7, #7]
 8008156:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800815a:	2b10      	cmp	r3, #16
 800815c:	d004      	beq.n	8008168 <netconn_alloc+0x48>
 800815e:	2b20      	cmp	r3, #32
 8008160:	d105      	bne.n	800816e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8008162:	2306      	movs	r3, #6
 8008164:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8008166:	e00a      	b.n	800817e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8008168:	2306      	movs	r3, #6
 800816a:	617b      	str	r3, [r7, #20]
      break;
 800816c:	e007      	b.n	800817e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800816e:	4b24      	ldr	r3, [pc, #144]	; (8008200 <netconn_alloc+0xe0>)
 8008170:	f240 22e5 	movw	r2, #741	; 0x2e5
 8008174:	4923      	ldr	r1, [pc, #140]	; (8008204 <netconn_alloc+0xe4>)
 8008176:	4824      	ldr	r0, [pc, #144]	; (8008208 <netconn_alloc+0xe8>)
 8008178:	f011 fd52 	bl	8019c20 <iprintf>
      goto free_and_return;
 800817c:	e036      	b.n	80081ec <netconn_alloc+0xcc>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	3310      	adds	r3, #16
 8008182:	6979      	ldr	r1, [r7, #20]
 8008184:	4618      	mov	r0, r3
 8008186:	f00f fc63 	bl	8017a50 <sys_mbox_new>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d12c      	bne.n	80081ea <netconn_alloc+0xca>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	330c      	adds	r3, #12
 8008194:	2100      	movs	r1, #0
 8008196:	4618      	mov	r0, r3
 8008198:	f00f fd21 	bl	8017bde <sys_sem_new>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d005      	beq.n	80081ae <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	3310      	adds	r3, #16
 80081a6:	4618      	mov	r0, r3
 80081a8:	f00f fc74 	bl	8017a94 <sys_mbox_free>
    goto free_and_return;
 80081ac:	e01e      	b.n	80081ec <netconn_alloc+0xcc>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	3314      	adds	r3, #20
 80081b2:	4618      	mov	r0, r3
 80081b4:	f00f fd06 	bl	8017bc4 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f04f 32ff 	mov.w	r2, #4294967295
 80081c4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	62da      	str	r2, [r3, #44]	; 0x2c
#if LWIP_TCP
  conn->current_msg  = NULL;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
  conn->recv_bufsize = RECV_BUFSIZE_DEFAULT;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	4a0d      	ldr	r2, [pc, #52]	; (800820c <netconn_alloc+0xec>)
 80081d6:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	621a      	str	r2, [r3, #32]
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	7cfa      	ldrb	r2, [r7, #19]
 80081e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return conn;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	e005      	b.n	80081f6 <netconn_alloc+0xd6>
    goto free_and_return;
 80081ea:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80081ec:	68f9      	ldr	r1, [r7, #12]
 80081ee:	2007      	movs	r0, #7
 80081f0:	f003 f8ac 	bl	800b34c <memp_free>
  return NULL;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	0801b14c 	.word	0x0801b14c
 8008204:	0801b350 	.word	0x0801b350
 8008208:	0801b190 	.word	0x0801b190
 800820c:	77359400 	.word	0x77359400

08008210 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d006      	beq.n	800822e <netconn_free+0x1e>
 8008220:	4b1b      	ldr	r3, [pc, #108]	; (8008290 <netconn_free+0x80>)
 8008222:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008226:	491b      	ldr	r1, [pc, #108]	; (8008294 <netconn_free+0x84>)
 8008228:	481b      	ldr	r0, [pc, #108]	; (8008298 <netconn_free+0x88>)
 800822a:	f011 fcf9 	bl	8019c20 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	3310      	adds	r3, #16
 8008232:	4618      	mov	r0, r3
 8008234:	f00f fcb5 	bl	8017ba2 <sys_mbox_valid>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d006      	beq.n	800824c <netconn_free+0x3c>
 800823e:	4b14      	ldr	r3, [pc, #80]	; (8008290 <netconn_free+0x80>)
 8008240:	f44f 7249 	mov.w	r2, #804	; 0x324
 8008244:	4915      	ldr	r1, [pc, #84]	; (800829c <netconn_free+0x8c>)
 8008246:	4814      	ldr	r0, [pc, #80]	; (8008298 <netconn_free+0x88>)
 8008248:	f011 fcea 	bl	8019c20 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	3314      	adds	r3, #20
 8008250:	4618      	mov	r0, r3
 8008252:	f00f fca6 	bl	8017ba2 <sys_mbox_valid>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d006      	beq.n	800826a <netconn_free+0x5a>
 800825c:	4b0c      	ldr	r3, [pc, #48]	; (8008290 <netconn_free+0x80>)
 800825e:	f240 3227 	movw	r2, #807	; 0x327
 8008262:	490f      	ldr	r1, [pc, #60]	; (80082a0 <netconn_free+0x90>)
 8008264:	480c      	ldr	r0, [pc, #48]	; (8008298 <netconn_free+0x88>)
 8008266:	f011 fcdb 	bl	8019c20 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	330c      	adds	r3, #12
 800826e:	4618      	mov	r0, r3
 8008270:	f00f fd1b 	bl	8017caa <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	330c      	adds	r3, #12
 8008278:	4618      	mov	r0, r3
 800827a:	f00f fd34 	bl	8017ce6 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800827e:	6879      	ldr	r1, [r7, #4]
 8008280:	2007      	movs	r0, #7
 8008282:	f003 f863 	bl	800b34c <memp_free>
}
 8008286:	bf00      	nop
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	0801b14c 	.word	0x0801b14c
 8008294:	0801b378 	.word	0x0801b378
 8008298:	0801b190 	.word	0x0801b190
 800829c:	0801b3a8 	.word	0x0801b3a8
 80082a0:	0801b3e4 	.word	0x0801b3e4

080082a4 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	3310      	adds	r3, #16
 80082b0:	4618      	mov	r0, r3
 80082b2:	f00f fc76 	bl	8017ba2 <sys_mbox_valid>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d02f      	beq.n	800831c <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80082bc:	e018      	b.n	80082f0 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082c6:	2b10      	cmp	r3, #16
 80082c8:	d10e      	bne.n	80082e8 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	f107 020f 	add.w	r2, r7, #15
 80082d0:	4611      	mov	r1, r2
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7ff fb7c 	bl	80079d0 <lwip_netconn_is_err_msg>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d108      	bne.n	80082f0 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	4618      	mov	r0, r3
 80082e2:	f003 ff11 	bl	800c108 <pbuf_free>
 80082e6:	e003      	b.n	80082f0 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f001 f82a 	bl	8009344 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	3310      	adds	r3, #16
 80082f4:	f107 0210 	add.w	r2, r7, #16
 80082f8:	4611      	mov	r1, r2
 80082fa:	4618      	mov	r0, r3
 80082fc:	f00f fc35 	bl	8017b6a <sys_arch_mbox_tryfetch>
 8008300:	4603      	mov	r3, r0
 8008302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008306:	d1da      	bne.n	80082be <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	3310      	adds	r3, #16
 800830c:	4618      	mov	r0, r3
 800830e:	f00f fbc1 	bl	8017a94 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	3310      	adds	r3, #16
 8008316:	4618      	mov	r0, r3
 8008318:	f00f fc54 	bl	8017bc4 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	3314      	adds	r3, #20
 8008320:	4618      	mov	r0, r3
 8008322:	f00f fc3e 	bl	8017ba2 <sys_mbox_valid>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d034      	beq.n	8008396 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800832c:	e01d      	b.n	800836a <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	f107 020e 	add.w	r2, r7, #14
 8008334:	4611      	mov	r1, r2
 8008336:	4618      	mov	r0, r3
 8008338:	f7ff fb4a 	bl	80079d0 <lwip_netconn_is_err_msg>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d113      	bne.n	800836a <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8008346:	6978      	ldr	r0, [r7, #20]
 8008348:	f7ff ffac 	bl	80082a4 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d007      	beq.n	8008364 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	4618      	mov	r0, r3
 800835a:	f004 fccb 	bl	800ccf4 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	2200      	movs	r2, #0
 8008362:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8008364:	6978      	ldr	r0, [r7, #20]
 8008366:	f7ff ff53 	bl	8008210 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	3314      	adds	r3, #20
 800836e:	f107 0210 	add.w	r2, r7, #16
 8008372:	4611      	mov	r1, r2
 8008374:	4618      	mov	r0, r3
 8008376:	f00f fbf8 	bl	8017b6a <sys_arch_mbox_tryfetch>
 800837a:	4603      	mov	r3, r0
 800837c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008380:	d1d5      	bne.n	800832e <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	3314      	adds	r3, #20
 8008386:	4618      	mov	r0, r3
 8008388:	f00f fb84 	bl	8017a94 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	3314      	adds	r3, #20
 8008390:	4618      	mov	r0, r3
 8008392:	f00f fc17 	bl	8017bc4 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8008396:	bf00      	nop
 8008398:	3718      	adds	r7, #24
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
	...

080083a0 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	460b      	mov	r3, r1
 80083aa:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80083ac:	2300      	movs	r3, #0
 80083ae:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d106      	bne.n	80083c4 <lwip_netconn_do_close_internal+0x24>
 80083b6:	4ba1      	ldr	r3, [pc, #644]	; (800863c <lwip_netconn_do_close_internal+0x29c>)
 80083b8:	f240 32a2 	movw	r2, #930	; 0x3a2
 80083bc:	49a0      	ldr	r1, [pc, #640]	; (8008640 <lwip_netconn_do_close_internal+0x2a0>)
 80083be:	48a1      	ldr	r0, [pc, #644]	; (8008644 <lwip_netconn_do_close_internal+0x2a4>)
 80083c0:	f011 fc2e 	bl	8019c20 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083cc:	2b10      	cmp	r3, #16
 80083ce:	d006      	beq.n	80083de <lwip_netconn_do_close_internal+0x3e>
 80083d0:	4b9a      	ldr	r3, [pc, #616]	; (800863c <lwip_netconn_do_close_internal+0x29c>)
 80083d2:	f240 32a3 	movw	r2, #931	; 0x3a3
 80083d6:	499c      	ldr	r1, [pc, #624]	; (8008648 <lwip_netconn_do_close_internal+0x2a8>)
 80083d8:	489a      	ldr	r0, [pc, #616]	; (8008644 <lwip_netconn_do_close_internal+0x2a4>)
 80083da:	f011 fc21 	bl	8019c20 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	785b      	ldrb	r3, [r3, #1]
 80083e2:	2b04      	cmp	r3, #4
 80083e4:	d006      	beq.n	80083f4 <lwip_netconn_do_close_internal+0x54>
 80083e6:	4b95      	ldr	r3, [pc, #596]	; (800863c <lwip_netconn_do_close_internal+0x29c>)
 80083e8:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80083ec:	4997      	ldr	r1, [pc, #604]	; (800864c <lwip_netconn_do_close_internal+0x2ac>)
 80083ee:	4895      	ldr	r0, [pc, #596]	; (8008644 <lwip_netconn_do_close_internal+0x2a4>)
 80083f0:	f011 fc16 	bl	8019c20 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d106      	bne.n	800840a <lwip_netconn_do_close_internal+0x6a>
 80083fc:	4b8f      	ldr	r3, [pc, #572]	; (800863c <lwip_netconn_do_close_internal+0x29c>)
 80083fe:	f240 32a5 	movw	r2, #933	; 0x3a5
 8008402:	4993      	ldr	r1, [pc, #588]	; (8008650 <lwip_netconn_do_close_internal+0x2b0>)
 8008404:	488f      	ldr	r0, [pc, #572]	; (8008644 <lwip_netconn_do_close_internal+0x2a4>)
 8008406:	f011 fc0b 	bl	8019c20 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840e:	2b00      	cmp	r3, #0
 8008410:	d106      	bne.n	8008420 <lwip_netconn_do_close_internal+0x80>
 8008412:	4b8a      	ldr	r3, [pc, #552]	; (800863c <lwip_netconn_do_close_internal+0x29c>)
 8008414:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008418:	498e      	ldr	r1, [pc, #568]	; (8008654 <lwip_netconn_do_close_internal+0x2b4>)
 800841a:	488a      	ldr	r0, [pc, #552]	; (8008644 <lwip_netconn_do_close_internal+0x2a4>)
 800841c:	f011 fc00 	bl	8019c20 <iprintf>

  tpcb = conn->pcb.tcp;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800842a:	7a1b      	ldrb	r3, [r3, #8]
 800842c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800842e:	7bfb      	ldrb	r3, [r7, #15]
 8008430:	f003 0301 	and.w	r3, r3, #1
 8008434:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8008436:	7bfb      	ldrb	r3, [r7, #15]
 8008438:	f003 0302 	and.w	r3, r3, #2
 800843c:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800843e:	7bfb      	ldrb	r3, [r7, #15]
 8008440:	2b03      	cmp	r3, #3
 8008442:	d102      	bne.n	800844a <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8008444:	2301      	movs	r3, #1
 8008446:	75bb      	strb	r3, [r7, #22]
 8008448:	e01f      	b.n	800848a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800844a:	7bbb      	ldrb	r3, [r7, #14]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00e      	beq.n	800846e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8008454:	2b05      	cmp	r3, #5
 8008456:	d007      	beq.n	8008468 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800845c:	2b06      	cmp	r3, #6
 800845e:	d003      	beq.n	8008468 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8008464:	2b08      	cmp	r3, #8
 8008466:	d102      	bne.n	800846e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8008468:	2301      	movs	r3, #1
 800846a:	75bb      	strb	r3, [r7, #22]
 800846c:	e00d      	b.n	800848a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800846e:	7b7b      	ldrb	r3, [r7, #13]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d008      	beq.n	8008486 <lwip_netconn_do_close_internal+0xe6>
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	8b5b      	ldrh	r3, [r3, #26]
 8008478:	f003 0310 	and.w	r3, r3, #16
 800847c:	2b00      	cmp	r3, #0
 800847e:	d002      	beq.n	8008486 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8008480:	2301      	movs	r3, #1
 8008482:	75bb      	strb	r3, [r7, #22]
 8008484:	e001      	b.n	800848a <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8008486:	2300      	movs	r3, #0
 8008488:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800848a:	7dbb      	ldrb	r3, [r7, #22]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d003      	beq.n	8008498 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8008490:	2100      	movs	r1, #0
 8008492:	6938      	ldr	r0, [r7, #16]
 8008494:	f005 fc6e 	bl	800dd74 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	7d1b      	ldrb	r3, [r3, #20]
 800849c:	2b01      	cmp	r3, #1
 800849e:	d104      	bne.n	80084aa <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80084a0:	2100      	movs	r1, #0
 80084a2:	6938      	ldr	r0, [r7, #16]
 80084a4:	f005 fcde 	bl	800de64 <tcp_accept>
 80084a8:	e01d      	b.n	80084e6 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80084aa:	7bbb      	ldrb	r3, [r7, #14]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d007      	beq.n	80084c0 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80084b0:	2100      	movs	r1, #0
 80084b2:	6938      	ldr	r0, [r7, #16]
 80084b4:	f005 fc70 	bl	800dd98 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80084b8:	2100      	movs	r1, #0
 80084ba:	6938      	ldr	r0, [r7, #16]
 80084bc:	f005 fcd2 	bl	800de64 <tcp_accept>
    }
    if (shut_tx) {
 80084c0:	7b7b      	ldrb	r3, [r7, #13]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d003      	beq.n	80084ce <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80084c6:	2100      	movs	r1, #0
 80084c8:	6938      	ldr	r0, [r7, #16]
 80084ca:	f005 fc87 	bl	800dddc <tcp_sent>
    }
    if (shut_close) {
 80084ce:	7dbb      	ldrb	r3, [r7, #22]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d008      	beq.n	80084e6 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80084d4:	2200      	movs	r2, #0
 80084d6:	2100      	movs	r1, #0
 80084d8:	6938      	ldr	r0, [r7, #16]
 80084da:	f005 fcdb 	bl	800de94 <tcp_poll>
      tcp_err(tpcb, NULL);
 80084de:	2100      	movs	r1, #0
 80084e0:	6938      	ldr	r0, [r7, #16]
 80084e2:	f005 fc9d 	bl	800de20 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80084e6:	7dbb      	ldrb	r3, [r7, #22]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d005      	beq.n	80084f8 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80084ec:	6938      	ldr	r0, [r7, #16]
 80084ee:	f004 fabd 	bl	800ca6c <tcp_close>
 80084f2:	4603      	mov	r3, r0
 80084f4:	75fb      	strb	r3, [r7, #23]
 80084f6:	e007      	b.n	8008508 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80084f8:	7bbb      	ldrb	r3, [r7, #14]
 80084fa:	7b7a      	ldrb	r2, [r7, #13]
 80084fc:	4619      	mov	r1, r3
 80084fe:	6938      	ldr	r0, [r7, #16]
 8008500:	f004 fae0 	bl	800cac4 <tcp_shutdown>
 8008504:	4603      	mov	r3, r0
 8008506:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8008508:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d102      	bne.n	8008516 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8008510:	2301      	movs	r3, #1
 8008512:	757b      	strb	r3, [r7, #21]
 8008514:	e016      	b.n	8008544 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8008516:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800851a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800851e:	d10f      	bne.n	8008540 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008524:	7a5b      	ldrb	r3, [r3, #9]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d10c      	bne.n	8008544 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800852a:	2301      	movs	r3, #1
 800852c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800852e:	7dbb      	ldrb	r3, [r7, #22]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d007      	beq.n	8008544 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8008534:	6938      	ldr	r0, [r7, #16]
 8008536:	f004 fbdd 	bl	800ccf4 <tcp_abort>
          err = ERR_OK;
 800853a:	2300      	movs	r3, #0
 800853c:	75fb      	strb	r3, [r7, #23]
 800853e:	e001      	b.n	8008544 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8008540:	2301      	movs	r3, #1
 8008542:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8008544:	7d7b      	ldrb	r3, [r7, #21]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d044      	beq.n	80085d4 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	330c      	adds	r3, #12
 8008552:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008558:	7dfa      	ldrb	r2, [r7, #23]
 800855a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	629a      	str	r2, [r3, #40]	; 0x28
    conn->state = NETCONN_NONE;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8008568:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d129      	bne.n	80085c4 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8008570:	7dbb      	ldrb	r3, [r7, #22]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00c      	beq.n	8008590 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008580:	2b00      	cmp	r3, #0
 8008582:	d005      	beq.n	8008590 <lwip_netconn_do_close_internal+0x1f0>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008588:	2200      	movs	r2, #0
 800858a:	2104      	movs	r1, #4
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	4798      	blx	r3
      }
      if (shut_rx) {
 8008590:	7bbb      	ldrb	r3, [r7, #14]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d009      	beq.n	80085aa <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859a:	2b00      	cmp	r3, #0
 800859c:	d005      	beq.n	80085aa <lwip_netconn_do_close_internal+0x20a>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a2:	2200      	movs	r2, #0
 80085a4:	2100      	movs	r1, #0
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	4798      	blx	r3
      }
      if (shut_tx) {
 80085aa:	7b7b      	ldrb	r3, [r7, #13]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d009      	beq.n	80085c4 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d005      	beq.n	80085c4 <lwip_netconn_do_close_internal+0x224>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085bc:	2200      	movs	r2, #0
 80085be:	2102      	movs	r1, #2
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80085c4:	78fb      	ldrb	r3, [r7, #3]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d002      	beq.n	80085d0 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80085ca:	68b8      	ldr	r0, [r7, #8]
 80085cc:	f00f fb60 	bl	8017c90 <sys_sem_signal>
    }
    return ERR_OK;
 80085d0:	2300      	movs	r3, #0
 80085d2:	e02e      	b.n	8008632 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 80085d4:	7d7b      	ldrb	r3, [r7, #21]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d11e      	bne.n	8008618 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	7d1b      	ldrb	r3, [r3, #20]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d106      	bne.n	80085f0 <lwip_netconn_do_close_internal+0x250>
 80085e2:	4b16      	ldr	r3, [pc, #88]	; (800863c <lwip_netconn_do_close_internal+0x29c>)
 80085e4:	f240 4241 	movw	r2, #1089	; 0x441
 80085e8:	491b      	ldr	r1, [pc, #108]	; (8008658 <lwip_netconn_do_close_internal+0x2b8>)
 80085ea:	4816      	ldr	r0, [pc, #88]	; (8008644 <lwip_netconn_do_close_internal+0x2a4>)
 80085ec:	f011 fb18 	bl	8019c20 <iprintf>
    if (shut_tx) {
 80085f0:	7b7b      	ldrb	r3, [r7, #13]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d003      	beq.n	80085fe <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 80085f6:	4919      	ldr	r1, [pc, #100]	; (800865c <lwip_netconn_do_close_internal+0x2bc>)
 80085f8:	6938      	ldr	r0, [r7, #16]
 80085fa:	f005 fbef 	bl	800dddc <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80085fe:	2201      	movs	r2, #1
 8008600:	4917      	ldr	r1, [pc, #92]	; (8008660 <lwip_netconn_do_close_internal+0x2c0>)
 8008602:	6938      	ldr	r0, [r7, #16]
 8008604:	f005 fc46 	bl	800de94 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8008608:	4916      	ldr	r1, [pc, #88]	; (8008664 <lwip_netconn_do_close_internal+0x2c4>)
 800860a:	6938      	ldr	r0, [r7, #16]
 800860c:	f005 fc08 	bl	800de20 <tcp_err>
    tcp_arg(tpcb, conn);
 8008610:	6879      	ldr	r1, [r7, #4]
 8008612:	6938      	ldr	r0, [r7, #16]
 8008614:	f005 fbae 	bl	800dd74 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8008618:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d106      	bne.n	800862e <lwip_netconn_do_close_internal+0x28e>
 8008620:	4b06      	ldr	r3, [pc, #24]	; (800863c <lwip_netconn_do_close_internal+0x29c>)
 8008622:	f240 424d 	movw	r2, #1101	; 0x44d
 8008626:	4910      	ldr	r1, [pc, #64]	; (8008668 <lwip_netconn_do_close_internal+0x2c8>)
 8008628:	4806      	ldr	r0, [pc, #24]	; (8008644 <lwip_netconn_do_close_internal+0x2a4>)
 800862a:	f011 faf9 	bl	8019c20 <iprintf>
  return err;
 800862e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3718      	adds	r7, #24
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	0801b14c 	.word	0x0801b14c
 8008640:	0801b420 	.word	0x0801b420
 8008644:	0801b190 	.word	0x0801b190
 8008648:	0801b430 	.word	0x0801b430
 800864c:	0801b450 	.word	0x0801b450
 8008650:	0801b474 	.word	0x0801b474
 8008654:	0801b2b4 	.word	0x0801b2b4
 8008658:	0801b488 	.word	0x0801b488
 800865c:	08007d71 	.word	0x08007d71
 8008660:	08007ca1 	.word	0x08007ca1
 8008664:	08007e1d 	.word	0x08007e1d
 8008668:	0801b4ac 	.word	0x0801b4ac

0800866c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	785b      	ldrb	r3, [r3, #1]
 800867e:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8008680:	7afb      	ldrb	r3, [r7, #11]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00d      	beq.n	80086a2 <lwip_netconn_do_delconn+0x36>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008690:	2b10      	cmp	r3, #16
 8008692:	d006      	beq.n	80086a2 <lwip_netconn_do_delconn+0x36>
 8008694:	4b61      	ldr	r3, [pc, #388]	; (800881c <lwip_netconn_do_delconn+0x1b0>)
 8008696:	f240 425f 	movw	r2, #1119	; 0x45f
 800869a:	4961      	ldr	r1, [pc, #388]	; (8008820 <lwip_netconn_do_delconn+0x1b4>)
 800869c:	4861      	ldr	r0, [pc, #388]	; (8008824 <lwip_netconn_do_delconn+0x1b8>)
 800869e:	f011 fabf 	bl	8019c20 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80086a2:	7afb      	ldrb	r3, [r7, #11]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d005      	beq.n	80086b4 <lwip_netconn_do_delconn+0x48>
 80086a8:	7afb      	ldrb	r3, [r7, #11]
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d002      	beq.n	80086b4 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80086ae:	7afb      	ldrb	r3, [r7, #11]
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d10a      	bne.n	80086ca <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 80086b4:	7afb      	ldrb	r3, [r7, #11]
 80086b6:	2b03      	cmp	r3, #3
 80086b8:	d10b      	bne.n	80086d2 <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086c2:	f003 0304 	and.w	r3, r3, #4
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d103      	bne.n	80086d2 <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	22fb      	movs	r2, #251	; 0xfb
 80086ce:	711a      	strb	r2, [r3, #4]
 80086d0:	e098      	b.n	8008804 <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80086d2:	7afb      	ldrb	r3, [r7, #11]
 80086d4:	2b03      	cmp	r3, #3
 80086d6:	d10e      	bne.n	80086f6 <lwip_netconn_do_delconn+0x8a>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086e0:	f003 0304 	and.w	r3, r3, #4
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d106      	bne.n	80086f6 <lwip_netconn_do_delconn+0x8a>
 80086e8:	4b4c      	ldr	r3, [pc, #304]	; (800881c <lwip_netconn_do_delconn+0x1b0>)
 80086ea:	f240 427b 	movw	r2, #1147	; 0x47b
 80086ee:	494e      	ldr	r1, [pc, #312]	; (8008828 <lwip_netconn_do_delconn+0x1bc>)
 80086f0:	484c      	ldr	r0, [pc, #304]	; (8008824 <lwip_netconn_do_delconn+0x1b8>)
 80086f2:	f011 fa95 	bl	8019c20 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4618      	mov	r0, r3
 8008702:	f7ff fdcf 	bl	80082a4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d05f      	beq.n	80087d0 <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800871a:	2b10      	cmp	r3, #16
 800871c:	d00e      	beq.n	800873c <lwip_netconn_do_delconn+0xd0>
 800871e:	2b20      	cmp	r3, #32
 8008720:	d000      	beq.n	8008724 <lwip_netconn_do_delconn+0xb8>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 8008722:	e051      	b.n	80087c8 <lwip_netconn_do_delconn+0x15c>
          msg->conn->pcb.udp->recv_arg = NULL;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	4618      	mov	r0, r3
 8008736:	f00a fe2f 	bl	8013398 <udp_remove>
          break;
 800873a:	e045      	b.n	80087c8 <lwip_netconn_do_delconn+0x15c>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008742:	2b00      	cmp	r3, #0
 8008744:	d006      	beq.n	8008754 <lwip_netconn_do_delconn+0xe8>
 8008746:	4b35      	ldr	r3, [pc, #212]	; (800881c <lwip_netconn_do_delconn+0x1b0>)
 8008748:	f240 4294 	movw	r2, #1172	; 0x494
 800874c:	4937      	ldr	r1, [pc, #220]	; (800882c <lwip_netconn_do_delconn+0x1c0>)
 800874e:	4835      	ldr	r0, [pc, #212]	; (8008824 <lwip_netconn_do_delconn+0x1b8>)
 8008750:	f011 fa66 	bl	8019c20 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2204      	movs	r2, #4
 800875a:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2203      	movs	r2, #3
 8008760:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	629a      	str	r2, [r3, #40]	; 0x28
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2100      	movs	r1, #0
 8008770:	4618      	mov	r0, r3
 8008772:	f7ff fe15 	bl	80083a0 <lwip_netconn_do_close_internal>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d04a      	beq.n	8008812 <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	785b      	ldrb	r3, [r3, #1]
 8008782:	2b04      	cmp	r3, #4
 8008784:	d006      	beq.n	8008794 <lwip_netconn_do_delconn+0x128>
 8008786:	4b25      	ldr	r3, [pc, #148]	; (800881c <lwip_netconn_do_delconn+0x1b0>)
 8008788:	f240 429a 	movw	r2, #1178	; 0x49a
 800878c:	4928      	ldr	r1, [pc, #160]	; (8008830 <lwip_netconn_do_delconn+0x1c4>)
 800878e:	4825      	ldr	r0, [pc, #148]	; (8008824 <lwip_netconn_do_delconn+0x1b8>)
 8008790:	f011 fa46 	bl	8019c20 <iprintf>
            UNLOCK_TCPIP_CORE();
 8008794:	4827      	ldr	r0, [pc, #156]	; (8008834 <lwip_netconn_do_delconn+0x1c8>)
 8008796:	f00f faec 	bl	8017d72 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	330c      	adds	r3, #12
 80087a0:	2100      	movs	r1, #0
 80087a2:	4618      	mov	r0, r3
 80087a4:	f00f fa43 	bl	8017c2e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80087a8:	4822      	ldr	r0, [pc, #136]	; (8008834 <lwip_netconn_do_delconn+0x1c8>)
 80087aa:	f00f fad3 	bl	8017d54 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	785b      	ldrb	r3, [r3, #1]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d02c      	beq.n	8008812 <lwip_netconn_do_delconn+0x1a6>
 80087b8:	4b18      	ldr	r3, [pc, #96]	; (800881c <lwip_netconn_do_delconn+0x1b0>)
 80087ba:	f240 429e 	movw	r2, #1182	; 0x49e
 80087be:	491c      	ldr	r1, [pc, #112]	; (8008830 <lwip_netconn_do_delconn+0x1c4>)
 80087c0:	4818      	ldr	r0, [pc, #96]	; (8008824 <lwip_netconn_do_delconn+0x1b8>)
 80087c2:	f011 fa2d 	bl	8019c20 <iprintf>
          return;
 80087c6:	e024      	b.n	8008812 <lwip_netconn_do_delconn+0x1a6>
      }
      msg->conn->pcb.tcp = NULL;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2200      	movs	r2, #0
 80087ce:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d007      	beq.n	80087ea <lwip_netconn_do_delconn+0x17e>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	6810      	ldr	r0, [r2, #0]
 80087e4:	2200      	movs	r2, #0
 80087e6:	2100      	movs	r1, #0
 80087e8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d007      	beq.n	8008804 <lwip_netconn_do_delconn+0x198>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	6810      	ldr	r0, [r2, #0]
 80087fe:	2200      	movs	r2, #0
 8008800:	2102      	movs	r1, #2
 8008802:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	330c      	adds	r3, #12
 800880a:	4618      	mov	r0, r3
 800880c:	f00f fa5a 	bl	8017cc4 <sys_sem_valid>
 8008810:	e000      	b.n	8008814 <lwip_netconn_do_delconn+0x1a8>
          return;
 8008812:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	0801b14c 	.word	0x0801b14c
 8008820:	0801b4bc 	.word	0x0801b4bc
 8008824:	0801b190 	.word	0x0801b190
 8008828:	0801b4d0 	.word	0x0801b4d0
 800882c:	0801b4f0 	.word	0x0801b4f0
 8008830:	0801b50c 	.word	0x0801b50c
 8008834:	2000c5e0 	.word	0x2000c5e0

08008838 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b088      	sub	sp, #32
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	4613      	mov	r3, r2
 8008844:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8008846:	2300      	movs	r3, #0
 8008848:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d102      	bne.n	800885a <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8008854:	f06f 0305 	mvn.w	r3, #5
 8008858:	e074      	b.n	8008944 <lwip_netconn_do_connected+0x10c>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	785b      	ldrb	r3, [r3, #1]
 800885e:	2b03      	cmp	r3, #3
 8008860:	d006      	beq.n	8008870 <lwip_netconn_do_connected+0x38>
 8008862:	4b3a      	ldr	r3, [pc, #232]	; (800894c <lwip_netconn_do_connected+0x114>)
 8008864:	f240 5223 	movw	r2, #1315	; 0x523
 8008868:	4939      	ldr	r1, [pc, #228]	; (8008950 <lwip_netconn_do_connected+0x118>)
 800886a:	483a      	ldr	r0, [pc, #232]	; (8008954 <lwip_netconn_do_connected+0x11c>)
 800886c:	f011 f9d8 	bl	8019c20 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008874:	2b00      	cmp	r3, #0
 8008876:	d10d      	bne.n	8008894 <lwip_netconn_do_connected+0x5c>
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800887e:	f003 0304 	and.w	r3, r3, #4
 8008882:	2b00      	cmp	r3, #0
 8008884:	d106      	bne.n	8008894 <lwip_netconn_do_connected+0x5c>
 8008886:	4b31      	ldr	r3, [pc, #196]	; (800894c <lwip_netconn_do_connected+0x114>)
 8008888:	f240 5225 	movw	r2, #1317	; 0x525
 800888c:	4932      	ldr	r1, [pc, #200]	; (8008958 <lwip_netconn_do_connected+0x120>)
 800888e:	4831      	ldr	r0, [pc, #196]	; (8008954 <lwip_netconn_do_connected+0x11c>)
 8008890:	f011 f9c6 	bl	8019c20 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8008894:	69bb      	ldr	r3, [r7, #24]
 8008896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008898:	2b00      	cmp	r3, #0
 800889a:	d008      	beq.n	80088ae <lwip_netconn_do_connected+0x76>
    conn->current_msg->err = err;
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a0:	79fa      	ldrb	r2, [r7, #7]
 80088a2:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	330c      	adds	r3, #12
 80088ac:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088b6:	2b10      	cmp	r3, #16
 80088b8:	d106      	bne.n	80088c8 <lwip_netconn_do_connected+0x90>
 80088ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d102      	bne.n	80088c8 <lwip_netconn_do_connected+0x90>
    setup_tcp(conn);
 80088c2:	69b8      	ldr	r0, [r7, #24]
 80088c4:	f7ff fb84 	bl	8007fd0 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80088ce:	f003 0304 	and.w	r3, r3, #4
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	bf0c      	ite	eq
 80088d6:	2301      	moveq	r3, #1
 80088d8:	2300      	movne	r3, #0
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80088e4:	f023 0304 	bic.w	r3, r3, #4
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  LWIP_ASSERT("blocking connect state error",
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <lwip_netconn_do_connected+0xc4>
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d10c      	bne.n	8008916 <lwip_netconn_do_connected+0xde>
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d102      	bne.n	8008908 <lwip_netconn_do_connected+0xd0>
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d006      	beq.n	8008916 <lwip_netconn_do_connected+0xde>
 8008908:	4b10      	ldr	r3, [pc, #64]	; (800894c <lwip_netconn_do_connected+0x114>)
 800890a:	f240 5232 	movw	r2, #1330	; 0x532
 800890e:	4913      	ldr	r1, [pc, #76]	; (800895c <lwip_netconn_do_connected+0x124>)
 8008910:	4810      	ldr	r0, [pc, #64]	; (8008954 <lwip_netconn_do_connected+0x11c>)
 8008912:	f011 f985 	bl	8019c20 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	2200      	movs	r2, #0
 800891a:	629a      	str	r2, [r3, #40]	; 0x28
  conn->state = NETCONN_NONE;
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	2200      	movs	r2, #0
 8008920:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008926:	2b00      	cmp	r3, #0
 8008928:	d005      	beq.n	8008936 <lwip_netconn_do_connected+0xfe>
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892e:	2200      	movs	r2, #0
 8008930:	2102      	movs	r1, #2
 8008932:	69b8      	ldr	r0, [r7, #24]
 8008934:	4798      	blx	r3

  if (was_blocking) {
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d002      	beq.n	8008942 <lwip_netconn_do_connected+0x10a>
    sys_sem_signal(op_completed_sem);
 800893c:	69f8      	ldr	r0, [r7, #28]
 800893e:	f00f f9a7 	bl	8017c90 <sys_sem_signal>
  }
  return ERR_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3720      	adds	r7, #32
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	0801b14c 	.word	0x0801b14c
 8008950:	0801b514 	.word	0x0801b514
 8008954:	0801b190 	.word	0x0801b190
 8008958:	0801b534 	.word	0x0801b534
 800895c:	0801b574 	.word	0x0801b574

08008960 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b086      	sub	sp, #24
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d102      	bne.n	800897c <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8008976:	23f1      	movs	r3, #241	; 0xf1
 8008978:	75fb      	strb	r3, [r7, #23]
 800897a:	e0a0      	b.n	8008abe <lwip_netconn_do_connect+0x15e>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008986:	2b10      	cmp	r3, #16
 8008988:	d00f      	beq.n	80089aa <lwip_netconn_do_connect+0x4a>
 800898a:	2b20      	cmp	r3, #32
 800898c:	f040 808c 	bne.w	8008aa8 <lwip_netconn_do_connect+0x148>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6858      	ldr	r0, [r3, #4]
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	6899      	ldr	r1, [r3, #8]
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	899b      	ldrh	r3, [r3, #12]
 800899e:	461a      	mov	r2, r3
 80089a0:	f00a fc44 	bl	801322c <udp_connect>
 80089a4:	4603      	mov	r3, r0
 80089a6:	75fb      	strb	r3, [r7, #23]
        break;
 80089a8:	e089      	b.n	8008abe <lwip_netconn_do_connect+0x15e>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	785b      	ldrb	r3, [r3, #1]
 80089b0:	2b03      	cmp	r3, #3
 80089b2:	d102      	bne.n	80089ba <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 80089b4:	23f7      	movs	r3, #247	; 0xf7
 80089b6:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 80089b8:	e080      	b.n	8008abc <lwip_netconn_do_connect+0x15c>
        } else if (msg->conn->state != NETCONN_NONE) {
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	785b      	ldrb	r3, [r3, #1]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 80089c4:	23f6      	movs	r3, #246	; 0xf6
 80089c6:	75fb      	strb	r3, [r7, #23]
        break;
 80089c8:	e078      	b.n	8008abc <lwip_netconn_do_connect+0x15c>
          setup_tcp(msg->conn);
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7ff fafe 	bl	8007fd0 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	6858      	ldr	r0, [r3, #4]
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	6899      	ldr	r1, [r3, #8]
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	899a      	ldrh	r2, [r3, #12]
 80089e2:	4b3b      	ldr	r3, [pc, #236]	; (8008ad0 <lwip_netconn_do_connect+0x170>)
 80089e4:	f004 fa82 	bl	800ceec <tcp_connect>
 80089e8:	4603      	mov	r3, r0
 80089ea:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 80089ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d163      	bne.n	8008abc <lwip_netconn_do_connect+0x15c>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80089fc:	f003 0302 	and.w	r3, r3, #2
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	bf14      	ite	ne
 8008a04:	2301      	movne	r3, #1
 8008a06:	2300      	moveq	r3, #0
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2203      	movs	r2, #3
 8008a12:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00b      	beq.n	8008a32 <lwip_netconn_do_connect+0xd2>
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f042 0204 	orr.w	r2, r2, #4
 8008a2a:	b2d2      	uxtb	r2, r2
 8008a2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008a30:	e00a      	b.n	8008a48 <lwip_netconn_do_connect+0xe8>
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f022 0204 	bic.w	r2, r2, #4
 8008a42:	b2d2      	uxtb	r2, r2
 8008a44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            if (non_blocking) {
 8008a48:	7bfb      	ldrb	r3, [r7, #15]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d002      	beq.n	8008a54 <lwip_netconn_do_connect+0xf4>
              err = ERR_INPROGRESS;
 8008a4e:	23fb      	movs	r3, #251	; 0xfb
 8008a50:	75fb      	strb	r3, [r7, #23]
        break;
 8008a52:	e033      	b.n	8008abc <lwip_netconn_do_connect+0x15c>
              msg->conn->current_msg = msg;
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	629a      	str	r2, [r3, #40]	; 0x28
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	785b      	ldrb	r3, [r3, #1]
 8008a62:	2b03      	cmp	r3, #3
 8008a64:	d006      	beq.n	8008a74 <lwip_netconn_do_connect+0x114>
 8008a66:	4b1b      	ldr	r3, [pc, #108]	; (8008ad4 <lwip_netconn_do_connect+0x174>)
 8008a68:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8008a6c:	491a      	ldr	r1, [pc, #104]	; (8008ad8 <lwip_netconn_do_connect+0x178>)
 8008a6e:	481b      	ldr	r0, [pc, #108]	; (8008adc <lwip_netconn_do_connect+0x17c>)
 8008a70:	f011 f8d6 	bl	8019c20 <iprintf>
              UNLOCK_TCPIP_CORE();
 8008a74:	481a      	ldr	r0, [pc, #104]	; (8008ae0 <lwip_netconn_do_connect+0x180>)
 8008a76:	f00f f97c 	bl	8017d72 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	330c      	adds	r3, #12
 8008a80:	2100      	movs	r1, #0
 8008a82:	4618      	mov	r0, r3
 8008a84:	f00f f8d3 	bl	8017c2e <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8008a88:	4815      	ldr	r0, [pc, #84]	; (8008ae0 <lwip_netconn_do_connect+0x180>)
 8008a8a:	f00f f963 	bl	8017d54 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	785b      	ldrb	r3, [r3, #1]
 8008a94:	2b03      	cmp	r3, #3
 8008a96:	d116      	bne.n	8008ac6 <lwip_netconn_do_connect+0x166>
 8008a98:	4b0e      	ldr	r3, [pc, #56]	; (8008ad4 <lwip_netconn_do_connect+0x174>)
 8008a9a:	f240 5274 	movw	r2, #1396	; 0x574
 8008a9e:	490e      	ldr	r1, [pc, #56]	; (8008ad8 <lwip_netconn_do_connect+0x178>)
 8008aa0:	480e      	ldr	r0, [pc, #56]	; (8008adc <lwip_netconn_do_connect+0x17c>)
 8008aa2:	f011 f8bd 	bl	8019c20 <iprintf>
              return;
 8008aa6:	e00e      	b.n	8008ac6 <lwip_netconn_do_connect+0x166>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8008aa8:	4b0a      	ldr	r3, [pc, #40]	; (8008ad4 <lwip_netconn_do_connect+0x174>)
 8008aaa:	f240 527f 	movw	r2, #1407	; 0x57f
 8008aae:	490d      	ldr	r1, [pc, #52]	; (8008ae4 <lwip_netconn_do_connect+0x184>)
 8008ab0:	480a      	ldr	r0, [pc, #40]	; (8008adc <lwip_netconn_do_connect+0x17c>)
 8008ab2:	f011 f8b5 	bl	8019c20 <iprintf>
 8008ab6:	23fa      	movs	r3, #250	; 0xfa
 8008ab8:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8008aba:	e000      	b.n	8008abe <lwip_netconn_do_connect+0x15e>
        break;
 8008abc:	bf00      	nop
    }
  }
  msg->err = err;
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	7dfa      	ldrb	r2, [r7, #23]
 8008ac2:	711a      	strb	r2, [r3, #4]
 8008ac4:	e000      	b.n	8008ac8 <lwip_netconn_do_connect+0x168>
              return;
 8008ac6:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8008ac8:	3718      	adds	r7, #24
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	08008839 	.word	0x08008839
 8008ad4:	0801b14c 	.word	0x0801b14c
 8008ad8:	0801b50c 	.word	0x0801b50c
 8008adc:	0801b190 	.word	0x0801b190
 8008ae0:	2000c5e0 	.word	0x2000c5e0
 8008ae4:	0801b594 	.word	0x0801b594

08008ae8 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008afe:	2b20      	cmp	r3, #32
 8008b00:	d109      	bne.n	8008b16 <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f00a fbfd 	bl	8013308 <udp_disconnect>
    msg->err = ERR_OK;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 8008b14:	e002      	b.n	8008b1c <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	22fa      	movs	r2, #250	; 0xfa
 8008b1a:	711a      	strb	r2, [r3, #4]
}
 8008b1c:	bf00      	nop
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7fe fefd 	bl	8007934 <netconn_err>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d135      	bne.n	8008bb2 <lwip_netconn_do_send+0x8e>
    if (msg->conn->pcb.tcp != NULL) {
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d02e      	beq.n	8008bae <lwip_netconn_do_send+0x8a>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b5a:	2b20      	cmp	r3, #32
 8008b5c:	d123      	bne.n	8008ba6 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d10c      	bne.n	8008b82 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	685a      	ldr	r2, [r3, #4]
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4619      	mov	r1, r3
 8008b76:	4610      	mov	r0, r2
 8008b78:	f00a f8e6 	bl	8012d48 <udp_send>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8008b80:	e017      	b.n	8008bb2 <lwip_netconn_do_send+0x8e>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	6858      	ldr	r0, [r3, #4]
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	6819      	ldr	r1, [r3, #0]
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	f103 0208 	add.w	r2, r3, #8
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	899b      	ldrh	r3, [r3, #12]
 8008b9c:	f00a f908 	bl	8012db0 <udp_sendto>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	73fb      	strb	r3, [r7, #15]
          break;
 8008ba4:	e005      	b.n	8008bb2 <lwip_netconn_do_send+0x8e>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8008ba6:	23f5      	movs	r3, #245	; 0xf5
 8008ba8:	73fb      	strb	r3, [r7, #15]
          break;
 8008baa:	bf00      	nop
 8008bac:	e001      	b.n	8008bb2 <lwip_netconn_do_send+0x8e>
      }
    } else {
      err = ERR_CONN;
 8008bae:	23f5      	movs	r3, #245	; 0xf5
 8008bb0:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	7bfa      	ldrb	r2, [r7, #15]
 8008bb6:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8008bb8:	bf00      	nop
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d022      	beq.n	8008c22 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008be6:	2b10      	cmp	r3, #16
 8008be8:	d11b      	bne.n	8008c22 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bf6:	d202      	bcs.n	8008bfe <lwip_netconn_do_recv+0x3e>
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	e001      	b.n	8008c02 <lwip_netconn_do_recv+0x42>
 8008bfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008c02:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	89fa      	ldrh	r2, [r7, #14]
 8008c0c:	4611      	mov	r1, r2
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f004 f8d6 	bl	800cdc0 <tcp_recved>
        remaining -= recved;
 8008c14:	89fb      	ldrh	r3, [r7, #14]
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1e6      	bne.n	8008bf0 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8008c22:	bf00      	nop
 8008c24:	3718      	adds	r7, #24
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
	...

08008c2c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b088      	sub	sp, #32
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	460b      	mov	r3, r1
 8008c36:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d106      	bne.n	8008c50 <lwip_netconn_do_writemore+0x24>
 8008c42:	4b98      	ldr	r3, [pc, #608]	; (8008ea4 <lwip_netconn_do_writemore+0x278>)
 8008c44:	f240 6273 	movw	r2, #1651	; 0x673
 8008c48:	4997      	ldr	r1, [pc, #604]	; (8008ea8 <lwip_netconn_do_writemore+0x27c>)
 8008c4a:	4898      	ldr	r0, [pc, #608]	; (8008eac <lwip_netconn_do_writemore+0x280>)
 8008c4c:	f010 ffe8 	bl	8019c20 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	785b      	ldrb	r3, [r3, #1]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d006      	beq.n	8008c66 <lwip_netconn_do_writemore+0x3a>
 8008c58:	4b92      	ldr	r3, [pc, #584]	; (8008ea4 <lwip_netconn_do_writemore+0x278>)
 8008c5a:	f240 6274 	movw	r2, #1652	; 0x674
 8008c5e:	4994      	ldr	r1, [pc, #592]	; (8008eb0 <lwip_netconn_do_writemore+0x284>)
 8008c60:	4892      	ldr	r0, [pc, #584]	; (8008eac <lwip_netconn_do_writemore+0x280>)
 8008c62:	f010 ffdd 	bl	8019c20 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d106      	bne.n	8008c7c <lwip_netconn_do_writemore+0x50>
 8008c6e:	4b8d      	ldr	r3, [pc, #564]	; (8008ea4 <lwip_netconn_do_writemore+0x278>)
 8008c70:	f240 6275 	movw	r2, #1653	; 0x675
 8008c74:	498f      	ldr	r1, [pc, #572]	; (8008eb4 <lwip_netconn_do_writemore+0x288>)
 8008c76:	488d      	ldr	r0, [pc, #564]	; (8008eac <lwip_netconn_do_writemore+0x280>)
 8008c78:	f010 ffd2 	bl	8019c20 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d106      	bne.n	8008c92 <lwip_netconn_do_writemore+0x66>
 8008c84:	4b87      	ldr	r3, [pc, #540]	; (8008ea4 <lwip_netconn_do_writemore+0x278>)
 8008c86:	f240 6276 	movw	r2, #1654	; 0x676
 8008c8a:	498b      	ldr	r1, [pc, #556]	; (8008eb8 <lwip_netconn_do_writemore+0x28c>)
 8008c8c:	4887      	ldr	r0, [pc, #540]	; (8008eac <lwip_netconn_do_writemore+0x280>)
 8008c8e:	f010 ffc7 	bl	8019c20 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c96:	699a      	ldr	r2, [r3, #24]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c9c:	695b      	ldr	r3, [r3, #20]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d306      	bcc.n	8008cb0 <lwip_netconn_do_writemore+0x84>
 8008ca2:	4b80      	ldr	r3, [pc, #512]	; (8008ea4 <lwip_netconn_do_writemore+0x278>)
 8008ca4:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8008ca8:	4984      	ldr	r1, [pc, #528]	; (8008ebc <lwip_netconn_do_writemore+0x290>)
 8008caa:	4880      	ldr	r0, [pc, #512]	; (8008eac <lwip_netconn_do_writemore+0x280>)
 8008cac:	f010 ffb8 	bl	8019c20 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb4:	899b      	ldrh	r3, [r3, #12]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d106      	bne.n	8008cc8 <lwip_netconn_do_writemore+0x9c>
 8008cba:	4b7a      	ldr	r3, [pc, #488]	; (8008ea4 <lwip_netconn_do_writemore+0x278>)
 8008cbc:	f240 6279 	movw	r2, #1657	; 0x679
 8008cc0:	497f      	ldr	r1, [pc, #508]	; (8008ec0 <lwip_netconn_do_writemore+0x294>)
 8008cc2:	487a      	ldr	r0, [pc, #488]	; (8008eac <lwip_netconn_do_writemore+0x280>)
 8008cc4:	f010 ffac 	bl	8019c20 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ccc:	7f1b      	ldrb	r3, [r3, #28]
 8008cce:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008cd6:	f003 0302 	and.w	r3, r3, #2
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d104      	bne.n	8008ce8 <lwip_netconn_do_writemore+0xbc>
 8008cde:	7ebb      	ldrb	r3, [r7, #26]
 8008ce0:	f003 0304 	and.w	r3, r3, #4
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d001      	beq.n	8008cec <lwip_netconn_do_writemore+0xc0>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e000      	b.n	8008cee <lwip_netconn_do_writemore+0xc2>
 8008cec:	2300      	movs	r3, #0
 8008cee:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	4413      	add	r3, r2
 8008d00:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	685a      	ldr	r2, [r3, #4]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d1a:	d307      	bcc.n	8008d2c <lwip_netconn_do_writemore+0x100>
        len = 0xffff;
 8008d1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d20:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8008d22:	7ebb      	ldrb	r3, [r7, #26]
 8008d24:	f043 0302 	orr.w	r3, r3, #2
 8008d28:	76bb      	strb	r3, [r7, #26]
 8008d2a:	e001      	b.n	8008d30 <lwip_netconn_do_writemore+0x104>
      } else {
        len = (u16_t)diff;
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008d38:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8008d3a:	89fa      	ldrh	r2, [r7, #14]
 8008d3c:	8bbb      	ldrh	r3, [r7, #28]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d216      	bcs.n	8008d70 <lwip_netconn_do_writemore+0x144>
        /* don't try to write more than sendbuf */
        len = available;
 8008d42:	89fb      	ldrh	r3, [r7, #14]
 8008d44:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8008d46:	7e3b      	ldrb	r3, [r7, #24]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00d      	beq.n	8008d68 <lwip_netconn_do_writemore+0x13c>
          if (!len) {
 8008d4c:	8bbb      	ldrh	r3, [r7, #28]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10e      	bne.n	8008d70 <lwip_netconn_do_writemore+0x144>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d102      	bne.n	8008d62 <lwip_netconn_do_writemore+0x136>
 8008d5c:	f06f 0306 	mvn.w	r3, #6
 8008d60:	e000      	b.n	8008d64 <lwip_netconn_do_writemore+0x138>
 8008d62:	2300      	movs	r3, #0
 8008d64:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8008d66:	e07d      	b.n	8008e64 <lwip_netconn_do_writemore+0x238>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8008d68:	7ebb      	ldrb	r3, [r7, #26]
 8008d6a:	f043 0302 	orr.w	r3, r3, #2
 8008d6e:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d74:	691a      	ldr	r2, [r3, #16]
 8008d76:	8bbb      	ldrh	r3, [r7, #28]
 8008d78:	441a      	add	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d906      	bls.n	8008d94 <lwip_netconn_do_writemore+0x168>
 8008d86:	4b47      	ldr	r3, [pc, #284]	; (8008ea4 <lwip_netconn_do_writemore+0x278>)
 8008d88:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8008d8c:	494d      	ldr	r1, [pc, #308]	; (8008ec4 <lwip_netconn_do_writemore+0x298>)
 8008d8e:	4847      	ldr	r0, [pc, #284]	; (8008eac <lwip_netconn_do_writemore+0x280>)
 8008d90:	f010 ff46 	bl	8019c20 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8008d94:	8bbb      	ldrh	r3, [r7, #28]
 8008d96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d103      	bne.n	8008da6 <lwip_netconn_do_writemore+0x17a>
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008da4:	d209      	bcs.n	8008dba <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8008daa:	8bba      	ldrh	r2, [r7, #28]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d10b      	bne.n	8008dc8 <lwip_netconn_do_writemore+0x19c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db4:	899b      	ldrh	r3, [r3, #12]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d906      	bls.n	8008dc8 <lwip_netconn_do_writemore+0x19c>
        write_more = 1;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8008dbe:	7ebb      	ldrb	r3, [r7, #26]
 8008dc0:	f043 0302 	orr.w	r3, r3, #2
 8008dc4:	76bb      	strb	r3, [r7, #26]
 8008dc6:	e001      	b.n	8008dcc <lwip_netconn_do_writemore+0x1a0>
      } else {
        write_more = 0;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6858      	ldr	r0, [r3, #4]
 8008dd0:	7ebb      	ldrb	r3, [r7, #26]
 8008dd2:	8bba      	ldrh	r2, [r7, #28]
 8008dd4:	6979      	ldr	r1, [r7, #20]
 8008dd6:	f007 ff09 	bl	8010bec <tcp_write>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8008dde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d12c      	bne.n	8008e40 <lwip_netconn_do_writemore+0x214>
        conn->current_msg->msg.w.offset += len;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dea:	6999      	ldr	r1, [r3, #24]
 8008dec:	8bba      	ldrh	r2, [r7, #28]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df2:	440a      	add	r2, r1
 8008df4:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dfa:	6919      	ldr	r1, [r3, #16]
 8008dfc:	8bba      	ldrh	r2, [r7, #28]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e02:	440a      	add	r2, r1
 8008e04:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e0a:	691a      	ldr	r2, [r3, #16]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d113      	bne.n	8008e40 <lwip_netconn_do_writemore+0x214>
          conn->current_msg->msg.w.vector_cnt--;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1c:	899a      	ldrh	r2, [r3, #12]
 8008e1e:	3a01      	subs	r2, #1
 8008e20:	b292      	uxth	r2, r2
 8008e22:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e28:	899b      	ldrh	r3, [r3, #12]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d008      	beq.n	8008e40 <lwip_netconn_do_writemore+0x214>
            conn->current_msg->msg.w.vector++;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e32:	689a      	ldr	r2, [r3, #8]
 8008e34:	3208      	adds	r2, #8
 8008e36:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8008e40:	7e7b      	ldrb	r3, [r7, #25]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d004      	beq.n	8008e50 <lwip_netconn_do_writemore+0x224>
 8008e46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f43f af50 	beq.w	8008cf0 <lwip_netconn_do_writemore+0xc4>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8008e50:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d004      	beq.n	8008e62 <lwip_netconn_do_writemore+0x236>
 8008e58:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e60:	d149      	bne.n	8008ef6 <lwip_netconn_do_writemore+0x2ca>
err_mem:
 8008e62:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8008e64:	7e3b      	ldrb	r3, [r7, #24]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d02e      	beq.n	8008ec8 <lwip_netconn_do_writemore+0x29c>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6e:	699a      	ldr	r2, [r3, #24]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e74:	695b      	ldr	r3, [r3, #20]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d226      	bcs.n	8008ec8 <lwip_netconn_do_writemore+0x29c>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d005      	beq.n	8008e8e <lwip_netconn_do_writemore+0x262>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e86:	2200      	movs	r2, #0
 8008e88:	2103      	movs	r1, #3
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008e94:	f043 0310 	orr.w	r3, r3, #16
 8008e98:	b2da      	uxtb	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008ea0:	e029      	b.n	8008ef6 <lwip_netconn_do_writemore+0x2ca>
 8008ea2:	bf00      	nop
 8008ea4:	0801b14c 	.word	0x0801b14c
 8008ea8:	0801b2a4 	.word	0x0801b2a4
 8008eac:	0801b190 	.word	0x0801b190
 8008eb0:	0801b5ac 	.word	0x0801b5ac
 8008eb4:	0801b2b4 	.word	0x0801b2b4
 8008eb8:	0801b5cc 	.word	0x0801b5cc
 8008ebc:	0801b5e4 	.word	0x0801b5e4
 8008ec0:	0801b624 	.word	0x0801b624
 8008ec4:	0801b64c 	.word	0x0801b64c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008ed0:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008ed4:	d305      	bcc.n	8008ee2 <lwip_netconn_do_writemore+0x2b6>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8008ede:	2b04      	cmp	r3, #4
 8008ee0:	d909      	bls.n	8008ef6 <lwip_netconn_do_writemore+0x2ca>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d005      	beq.n	8008ef6 <lwip_netconn_do_writemore+0x2ca>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eee:	2200      	movs	r2, #0
 8008ef0:	2103      	movs	r1, #3
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8008ef6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d11d      	bne.n	8008f3a <lwip_netconn_do_writemore+0x30e>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f02:	699a      	ldr	r2, [r3, #24]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d002      	beq.n	8008f14 <lwip_netconn_do_writemore+0x2e8>
 8008f0e:	7e3b      	ldrb	r3, [r7, #24]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d001      	beq.n	8008f18 <lwip_netconn_do_writemore+0x2ec>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8008f14:	2301      	movs	r3, #1
 8008f16:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f008 fc51 	bl	80117c4 <tcp_output>
 8008f22:	4603      	mov	r3, r0
 8008f24:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8008f26:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8008f2a:	f113 0f04 	cmn.w	r3, #4
 8008f2e:	d12c      	bne.n	8008f8a <lwip_netconn_do_writemore+0x35e>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8008f30:	7b3b      	ldrb	r3, [r7, #12]
 8008f32:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8008f34:	2301      	movs	r3, #1
 8008f36:	76fb      	strb	r3, [r7, #27]
 8008f38:	e027      	b.n	8008f8a <lwip_netconn_do_writemore+0x35e>
      }
    } else if (err == ERR_MEM) {
 8008f3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f42:	d120      	bne.n	8008f86 <lwip_netconn_do_writemore+0x35a>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f008 fc3b 	bl	80117c4 <tcp_output>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8008f52:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8008f56:	f113 0f04 	cmn.w	r3, #4
 8008f5a:	d104      	bne.n	8008f66 <lwip_netconn_do_writemore+0x33a>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8008f5c:	7b7b      	ldrb	r3, [r7, #13]
 8008f5e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8008f60:	2301      	movs	r3, #1
 8008f62:	76fb      	strb	r3, [r7, #27]
 8008f64:	e011      	b.n	8008f8a <lwip_netconn_do_writemore+0x35e>
      } else if (dontblock) {
 8008f66:	7e3b      	ldrb	r3, [r7, #24]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00e      	beq.n	8008f8a <lwip_netconn_do_writemore+0x35e>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f70:	699b      	ldr	r3, [r3, #24]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d102      	bne.n	8008f7c <lwip_netconn_do_writemore+0x350>
 8008f76:	f06f 0306 	mvn.w	r3, #6
 8008f7a:	e000      	b.n	8008f7e <lwip_netconn_do_writemore+0x352>
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8008f80:	2301      	movs	r3, #1
 8008f82:	76fb      	strb	r3, [r7, #27]
 8008f84:	e001      	b.n	8008f8a <lwip_netconn_do_writemore+0x35e>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8008f86:	2301      	movs	r3, #1
 8008f88:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8008f8a:	7efb      	ldrb	r3, [r7, #27]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d015      	beq.n	8008fbc <lwip_netconn_do_writemore+0x390>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	330c      	adds	r3, #12
 8008f98:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f9e:	7ffa      	ldrb	r2, [r7, #31]
 8008fa0:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	629a      	str	r2, [r3, #40]	; 0x28
    conn->state = NETCONN_NONE;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8008fae:	78fb      	ldrb	r3, [r7, #3]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d006      	beq.n	8008fc2 <lwip_netconn_do_writemore+0x396>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8008fb4:	68b8      	ldr	r0, [r7, #8]
 8008fb6:	f00e fe6b 	bl	8017c90 <sys_sem_signal>
 8008fba:	e002      	b.n	8008fc2 <lwip_netconn_do_writemore+0x396>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8008fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8008fc0:	e000      	b.n	8008fc4 <lwip_netconn_do_writemore+0x398>
  }
#endif
  return ERR_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3720      	adds	r7, #32
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7fe fca9 	bl	8007934 <netconn_err>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d166      	bne.n	80090bc <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ff8:	2b10      	cmp	r3, #16
 8008ffa:	d15d      	bne.n	80090b8 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	785b      	ldrb	r3, [r3, #1]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d002      	beq.n	800900c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8009006:	23fb      	movs	r3, #251	; 0xfb
 8009008:	73fb      	strb	r3, [r7, #15]
 800900a:	e057      	b.n	80090bc <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d04d      	beq.n	80090b2 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2201      	movs	r2, #1
 800901c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009024:	2b00      	cmp	r3, #0
 8009026:	d006      	beq.n	8009036 <lwip_netconn_do_write+0x6a>
 8009028:	4b28      	ldr	r3, [pc, #160]	; (80090cc <lwip_netconn_do_write+0x100>)
 800902a:	f240 7223 	movw	r2, #1827	; 0x723
 800902e:	4928      	ldr	r1, [pc, #160]	; (80090d0 <lwip_netconn_do_write+0x104>)
 8009030:	4828      	ldr	r0, [pc, #160]	; (80090d4 <lwip_netconn_do_write+0x108>)
 8009032:	f010 fdf5 	bl	8019c20 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	695b      	ldr	r3, [r3, #20]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d106      	bne.n	800904c <lwip_netconn_do_write+0x80>
 800903e:	4b23      	ldr	r3, [pc, #140]	; (80090cc <lwip_netconn_do_write+0x100>)
 8009040:	f240 7224 	movw	r2, #1828	; 0x724
 8009044:	4924      	ldr	r1, [pc, #144]	; (80090d8 <lwip_netconn_do_write+0x10c>)
 8009046:	4823      	ldr	r0, [pc, #140]	; (80090d4 <lwip_netconn_do_write+0x108>)
 8009048:	f010 fdea 	bl	8019c20 <iprintf>
        msg->conn->current_msg = msg;
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68ba      	ldr	r2, [r7, #8]
 8009052:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2100      	movs	r1, #0
 800905a:	4618      	mov	r0, r3
 800905c:	f7ff fde6 	bl	8008c2c <lwip_netconn_do_writemore>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d02e      	beq.n	80090c4 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	785b      	ldrb	r3, [r3, #1]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d006      	beq.n	800907e <lwip_netconn_do_write+0xb2>
 8009070:	4b16      	ldr	r3, [pc, #88]	; (80090cc <lwip_netconn_do_write+0x100>)
 8009072:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8009076:	4919      	ldr	r1, [pc, #100]	; (80090dc <lwip_netconn_do_write+0x110>)
 8009078:	4816      	ldr	r0, [pc, #88]	; (80090d4 <lwip_netconn_do_write+0x108>)
 800907a:	f010 fdd1 	bl	8019c20 <iprintf>
          UNLOCK_TCPIP_CORE();
 800907e:	4818      	ldr	r0, [pc, #96]	; (80090e0 <lwip_netconn_do_write+0x114>)
 8009080:	f00e fe77 	bl	8017d72 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	330c      	adds	r3, #12
 800908a:	2100      	movs	r1, #0
 800908c:	4618      	mov	r0, r3
 800908e:	f00e fdce 	bl	8017c2e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8009092:	4813      	ldr	r0, [pc, #76]	; (80090e0 <lwip_netconn_do_write+0x114>)
 8009094:	f00e fe5e 	bl	8017d54 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	785b      	ldrb	r3, [r3, #1]
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d110      	bne.n	80090c4 <lwip_netconn_do_write+0xf8>
 80090a2:	4b0a      	ldr	r3, [pc, #40]	; (80090cc <lwip_netconn_do_write+0x100>)
 80090a4:	f240 722c 	movw	r2, #1836	; 0x72c
 80090a8:	490c      	ldr	r1, [pc, #48]	; (80090dc <lwip_netconn_do_write+0x110>)
 80090aa:	480a      	ldr	r0, [pc, #40]	; (80090d4 <lwip_netconn_do_write+0x108>)
 80090ac:	f010 fdb8 	bl	8019c20 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 80090b0:	e008      	b.n	80090c4 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 80090b2:	23f5      	movs	r3, #245	; 0xf5
 80090b4:	73fb      	strb	r3, [r7, #15]
 80090b6:	e001      	b.n	80090bc <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 80090b8:	23fa      	movs	r3, #250	; 0xfa
 80090ba:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	7bfa      	ldrb	r2, [r7, #15]
 80090c0:	711a      	strb	r2, [r3, #4]
 80090c2:	e000      	b.n	80090c6 <lwip_netconn_do_write+0xfa>
        return;
 80090c4:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	0801b14c 	.word	0x0801b14c
 80090d0:	0801b4f0 	.word	0x0801b4f0
 80090d4:	0801b190 	.word	0x0801b190
 80090d8:	0801b678 	.word	0x0801b678
 80090dc:	0801b50c 	.word	0x0801b50c
 80090e0:	2000c5e0 	.word	0x2000c5e0

080090e4 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d06c      	beq.n	80091d4 <lwip_netconn_do_getaddr+0xf0>
    if (msg->msg.ad.local) {
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	7c1b      	ldrb	r3, [r3, #16]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d007      	beq.n	8009112 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	6812      	ldr	r2, [r2, #0]
 800910e:	601a      	str	r2, [r3, #0]
 8009110:	e006      	b.n	8009120 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	685a      	ldr	r2, [r3, #4]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	6852      	ldr	r2, [r2, #4]
 800911e:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2200      	movs	r2, #0
 8009124:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009130:	2b10      	cmp	r3, #16
 8009132:	d021      	beq.n	8009178 <lwip_netconn_do_getaddr+0x94>
 8009134:	2b20      	cmp	r3, #32
 8009136:	d144      	bne.n	80091c2 <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	7c1b      	ldrb	r3, [r3, #16]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d007      	beq.n	8009150 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	685a      	ldr	r2, [r3, #4]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	8a52      	ldrh	r2, [r2, #18]
 800914c:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800914e:	e044      	b.n	80091da <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	7c1b      	ldrb	r3, [r3, #16]
 8009158:	f003 0304 	and.w	r3, r3, #4
 800915c:	2b00      	cmp	r3, #0
 800915e:	d103      	bne.n	8009168 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	22f5      	movs	r2, #245	; 0xf5
 8009164:	711a      	strb	r2, [r3, #4]
        break;
 8009166:	e038      	b.n	80091da <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	685a      	ldr	r2, [r3, #4]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	8a92      	ldrh	r2, [r2, #20]
 8009174:	801a      	strh	r2, [r3, #0]
        break;
 8009176:	e030      	b.n	80091da <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	7c1b      	ldrb	r3, [r3, #16]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10f      	bne.n	80091a0 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 8009188:	2b00      	cmp	r3, #0
 800918a:	d005      	beq.n	8009198 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	7d1b      	ldrb	r3, [r3, #20]
 8009194:	2b01      	cmp	r3, #1
 8009196:	d103      	bne.n	80091a0 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	22f5      	movs	r2, #245	; 0xf5
 800919c:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800919e:	e01c      	b.n	80091da <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	7c1b      	ldrb	r3, [r3, #16]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d004      	beq.n	80091b2 <lwip_netconn_do_getaddr+0xce>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	8adb      	ldrh	r3, [r3, #22]
 80091b0:	e003      	b.n	80091ba <lwip_netconn_do_getaddr+0xd6>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	8b1b      	ldrh	r3, [r3, #24]
 80091ba:	68fa      	ldr	r2, [r7, #12]
 80091bc:	68d2      	ldr	r2, [r2, #12]
 80091be:	8013      	strh	r3, [r2, #0]
        break;
 80091c0:	e00b      	b.n	80091da <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 80091c2:	4b08      	ldr	r3, [pc, #32]	; (80091e4 <lwip_netconn_do_getaddr+0x100>)
 80091c4:	f240 727d 	movw	r2, #1917	; 0x77d
 80091c8:	4907      	ldr	r1, [pc, #28]	; (80091e8 <lwip_netconn_do_getaddr+0x104>)
 80091ca:	4808      	ldr	r0, [pc, #32]	; (80091ec <lwip_netconn_do_getaddr+0x108>)
 80091cc:	f010 fd28 	bl	8019c20 <iprintf>
        break;
 80091d0:	bf00      	nop
 80091d2:	e002      	b.n	80091da <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	22f5      	movs	r2, #245	; 0xf5
 80091d8:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 80091da:	bf00      	nop
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	0801b14c 	.word	0x0801b14c
 80091e8:	0801b68c 	.word	0x0801b68c
 80091ec:	0801b190 	.word	0x0801b190

080091f0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	785b      	ldrb	r3, [r3, #1]
 8009202:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d069      	beq.n	80092e2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8009218:	2b10      	cmp	r3, #16
 800921a:	d162      	bne.n	80092e2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009220:	2b03      	cmp	r3, #3
 8009222:	d002      	beq.n	800922a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009224:	7afb      	ldrb	r3, [r7, #11]
 8009226:	2b02      	cmp	r3, #2
 8009228:	d05b      	beq.n	80092e2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800922a:	7afb      	ldrb	r3, [r7, #11]
 800922c:	2b03      	cmp	r3, #3
 800922e:	d103      	bne.n	8009238 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	22f5      	movs	r2, #245	; 0xf5
 8009234:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009236:	e059      	b.n	80092ec <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8009238:	7afb      	ldrb	r3, [r7, #11]
 800923a:	2b01      	cmp	r3, #1
 800923c:	d103      	bne.n	8009246 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	22fb      	movs	r2, #251	; 0xfb
 8009242:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009244:	e052      	b.n	80092ec <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	7a1b      	ldrb	r3, [r3, #8]
 800924a:	f003 0301 	and.w	r3, r3, #1
 800924e:	2b00      	cmp	r3, #0
 8009250:	d004      	beq.n	800925c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4618      	mov	r0, r3
 8009258:	f7ff f824 	bl	80082a4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009262:	2b00      	cmp	r3, #0
 8009264:	d006      	beq.n	8009274 <lwip_netconn_do_close+0x84>
 8009266:	4b23      	ldr	r3, [pc, #140]	; (80092f4 <lwip_netconn_do_close+0x104>)
 8009268:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800926c:	4922      	ldr	r1, [pc, #136]	; (80092f8 <lwip_netconn_do_close+0x108>)
 800926e:	4823      	ldr	r0, [pc, #140]	; (80092fc <lwip_netconn_do_close+0x10c>)
 8009270:	f010 fcd6 	bl	8019c20 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2204      	movs	r2, #4
 800927a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2100      	movs	r1, #0
 800928a:	4618      	mov	r0, r3
 800928c:	f7ff f888 	bl	80083a0 <lwip_netconn_do_close_internal>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d029      	beq.n	80092ea <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	785b      	ldrb	r3, [r3, #1]
 800929c:	2b04      	cmp	r3, #4
 800929e:	d006      	beq.n	80092ae <lwip_netconn_do_close+0xbe>
 80092a0:	4b14      	ldr	r3, [pc, #80]	; (80092f4 <lwip_netconn_do_close+0x104>)
 80092a2:	f240 72c2 	movw	r2, #1986	; 0x7c2
 80092a6:	4916      	ldr	r1, [pc, #88]	; (8009300 <lwip_netconn_do_close+0x110>)
 80092a8:	4814      	ldr	r0, [pc, #80]	; (80092fc <lwip_netconn_do_close+0x10c>)
 80092aa:	f010 fcb9 	bl	8019c20 <iprintf>
        UNLOCK_TCPIP_CORE();
 80092ae:	4815      	ldr	r0, [pc, #84]	; (8009304 <lwip_netconn_do_close+0x114>)
 80092b0:	f00e fd5f 	bl	8017d72 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	330c      	adds	r3, #12
 80092ba:	2100      	movs	r1, #0
 80092bc:	4618      	mov	r0, r3
 80092be:	f00e fcb6 	bl	8017c2e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 80092c2:	4810      	ldr	r0, [pc, #64]	; (8009304 <lwip_netconn_do_close+0x114>)
 80092c4:	f00e fd46 	bl	8017d54 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	785b      	ldrb	r3, [r3, #1]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00b      	beq.n	80092ea <lwip_netconn_do_close+0xfa>
 80092d2:	4b08      	ldr	r3, [pc, #32]	; (80092f4 <lwip_netconn_do_close+0x104>)
 80092d4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 80092d8:	4909      	ldr	r1, [pc, #36]	; (8009300 <lwip_netconn_do_close+0x110>)
 80092da:	4808      	ldr	r0, [pc, #32]	; (80092fc <lwip_netconn_do_close+0x10c>)
 80092dc:	f010 fca0 	bl	8019c20 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80092e0:	e003      	b.n	80092ea <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	22f5      	movs	r2, #245	; 0xf5
 80092e6:	711a      	strb	r2, [r3, #4]
 80092e8:	e000      	b.n	80092ec <lwip_netconn_do_close+0xfc>
      return;
 80092ea:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	0801b14c 	.word	0x0801b14c
 80092f8:	0801b4f0 	.word	0x0801b4f0
 80092fc:	0801b190 	.word	0x0801b190
 8009300:	0801b50c 	.word	0x0801b50c
 8009304:	2000c5e0 	.word	0x2000c5e0

08009308 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	4603      	mov	r3, r0
 8009310:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 8009312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009316:	2b00      	cmp	r3, #0
 8009318:	dc04      	bgt.n	8009324 <err_to_errno+0x1c>
 800931a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800931e:	425b      	negs	r3, r3
 8009320:	2b10      	cmp	r3, #16
 8009322:	dd01      	ble.n	8009328 <err_to_errno+0x20>
    return EIO;
 8009324:	2305      	movs	r3, #5
 8009326:	e005      	b.n	8009334 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 8009328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800932c:	425b      	negs	r3, r3
 800932e:	4a04      	ldr	r2, [pc, #16]	; (8009340 <err_to_errno+0x38>)
 8009330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8009334:	4618      	mov	r0, r3
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr
 8009340:	0801eb28 	.word	0x0801eb28

08009344 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d013      	beq.n	800937a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00b      	beq.n	8009372 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4618      	mov	r0, r3
 8009360:	f002 fed2 	bl	800c108 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	605a      	str	r2, [r3, #4]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009372:	6879      	ldr	r1, [r7, #4]
 8009374:	2006      	movs	r0, #6
 8009376:	f001 ffe9 	bl	800b34c <memp_free>
  }
}
 800937a:	bf00      	nop
 800937c:	3708      	adds	r7, #8
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
	...

08009384 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d106      	bne.n	80093a0 <netbuf_free+0x1c>
 8009392:	4b0d      	ldr	r3, [pc, #52]	; (80093c8 <netbuf_free+0x44>)
 8009394:	2281      	movs	r2, #129	; 0x81
 8009396:	490d      	ldr	r1, [pc, #52]	; (80093cc <netbuf_free+0x48>)
 8009398:	480d      	ldr	r0, [pc, #52]	; (80093d0 <netbuf_free+0x4c>)
 800939a:	f010 fc41 	bl	8019c20 <iprintf>
 800939e:	e00f      	b.n	80093c0 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d004      	beq.n	80093b2 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4618      	mov	r0, r3
 80093ae:	f002 feab 	bl	800c108 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	605a      	str	r2, [r3, #4]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	685a      	ldr	r2, [r3, #4]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 80093c0:	3708      	adds	r7, #8
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	0801b6a4 	.word	0x0801b6a4
 80093cc:	0801b740 	.word	0x0801b740
 80093d0:	0801b6f4 	.word	0x0801b6f4

080093d4 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	4613      	mov	r3, r2
 80093e0:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d108      	bne.n	80093fa <netbuf_ref+0x26>
 80093e8:	4b1c      	ldr	r3, [pc, #112]	; (800945c <netbuf_ref+0x88>)
 80093ea:	2299      	movs	r2, #153	; 0x99
 80093ec:	491c      	ldr	r1, [pc, #112]	; (8009460 <netbuf_ref+0x8c>)
 80093ee:	481d      	ldr	r0, [pc, #116]	; (8009464 <netbuf_ref+0x90>)
 80093f0:	f010 fc16 	bl	8019c20 <iprintf>
 80093f4:	f06f 030f 	mvn.w	r3, #15
 80093f8:	e02b      	b.n	8009452 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d004      	beq.n	800940c <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4618      	mov	r0, r3
 8009408:	f002 fe7e 	bl	800c108 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800940c:	2241      	movs	r2, #65	; 0x41
 800940e:	2100      	movs	r1, #0
 8009410:	2036      	movs	r0, #54	; 0x36
 8009412:	f002 fb67 	bl	800bae4 <pbuf_alloc>
 8009416:	4602      	mov	r2, r0
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d105      	bne.n	8009430 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2200      	movs	r2, #0
 8009428:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800942a:	f04f 33ff 	mov.w	r3, #4294967295
 800942e:	e010      	b.n	8009452 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	68ba      	ldr	r2, [r7, #8]
 8009436:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	88fa      	ldrh	r2, [r7, #6]
 800943e:	811a      	strh	r2, [r3, #8]
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	6812      	ldr	r2, [r2, #0]
 8009444:	891b      	ldrh	r3, [r3, #8]
 8009446:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	0801b6a4 	.word	0x0801b6a4
 8009460:	0801b75c 	.word	0x0801b75c
 8009464:	0801b6f4 	.word	0x0801b6f4

08009468 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2b00      	cmp	r3, #0
 8009478:	db02      	blt.n	8009480 <tryget_socket_unconn_nouse+0x18>
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2b03      	cmp	r3, #3
 800947e:	dd01      	ble.n	8009484 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 8009480:	2300      	movs	r3, #0
 8009482:	e003      	b.n	800948c <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	011b      	lsls	r3, r3, #4
 8009488:	4a03      	ldr	r2, [pc, #12]	; (8009498 <tryget_socket_unconn_nouse+0x30>)
 800948a:	4413      	add	r3, r2
}
 800948c:	4618      	mov	r0, r3
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	200085b8 	.word	0x200085b8

0800949c <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f7ff ffdf 	bl	8009468 <tryget_socket_unconn_nouse>
 80094aa:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 80094ac:	68fb      	ldr	r3, [r7, #12]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b084      	sub	sp, #16
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f7ff ffec 	bl	800949c <tryget_socket_unconn>
 80094c4:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d005      	beq.n	80094d8 <tryget_socket+0x22>
    if (sock->conn) {
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d001      	beq.n	80094d8 <tryget_socket+0x22>
      return sock;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	e000      	b.n	80094da <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
	...

080094e4 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f7ff ffe2 	bl	80094b6 <tryget_socket>
 80094f2:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d104      	bne.n	8009504 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 80094fa:	4b05      	ldr	r3, [pc, #20]	; (8009510 <get_socket+0x2c>)
 80094fc:	2209      	movs	r2, #9
 80094fe:	601a      	str	r2, [r3, #0]
    return NULL;
 8009500:	2300      	movs	r3, #0
 8009502:	e000      	b.n	8009506 <get_socket+0x22>
  }
  return sock;
 8009504:	68fb      	ldr	r3, [r7, #12]
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	2000fd7c 	.word	0x2000fd7c

08009514 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800951e:	2300      	movs	r3, #0
 8009520:	60fb      	str	r3, [r7, #12]
 8009522:	e052      	b.n	80095ca <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 8009524:	f00e fc58 	bl	8017dd8 <sys_arch_protect>
 8009528:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800952a:	4a2c      	ldr	r2, [pc, #176]	; (80095dc <alloc_socket+0xc8>)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	011b      	lsls	r3, r3, #4
 8009530:	4413      	add	r3, r2
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d142      	bne.n	80095be <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 8009538:	4a28      	ldr	r2, [pc, #160]	; (80095dc <alloc_socket+0xc8>)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	011b      	lsls	r3, r3, #4
 800953e:	4413      	add	r3, r2
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 8009544:	68b8      	ldr	r0, [r7, #8]
 8009546:	f00e fc55 	bl	8017df4 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800954a:	4a24      	ldr	r2, [pc, #144]	; (80095dc <alloc_socket+0xc8>)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	011b      	lsls	r3, r3, #4
 8009550:	4413      	add	r3, r2
 8009552:	3304      	adds	r3, #4
 8009554:	2200      	movs	r2, #0
 8009556:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8009558:	4a20      	ldr	r2, [pc, #128]	; (80095dc <alloc_socket+0xc8>)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	011b      	lsls	r3, r3, #4
 800955e:	4413      	add	r3, r2
 8009560:	330e      	adds	r3, #14
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d006      	beq.n	8009576 <alloc_socket+0x62>
 8009568:	4b1d      	ldr	r3, [pc, #116]	; (80095e0 <alloc_socket+0xcc>)
 800956a:	f240 220e 	movw	r2, #526	; 0x20e
 800956e:	491d      	ldr	r1, [pc, #116]	; (80095e4 <alloc_socket+0xd0>)
 8009570:	481d      	ldr	r0, [pc, #116]	; (80095e8 <alloc_socket+0xd4>)
 8009572:	f010 fb55 	bl	8019c20 <iprintf>
      sockets[i].rcvevent   = 0;
 8009576:	4a19      	ldr	r2, [pc, #100]	; (80095dc <alloc_socket+0xc8>)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	011b      	lsls	r3, r3, #4
 800957c:	4413      	add	r3, r2
 800957e:	3308      	adds	r3, #8
 8009580:	2200      	movs	r2, #0
 8009582:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800958c:	2b10      	cmp	r3, #16
 800958e:	d102      	bne.n	8009596 <alloc_socket+0x82>
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d001      	beq.n	800959a <alloc_socket+0x86>
 8009596:	2301      	movs	r3, #1
 8009598:	e000      	b.n	800959c <alloc_socket+0x88>
 800959a:	2300      	movs	r3, #0
 800959c:	b299      	uxth	r1, r3
 800959e:	4a0f      	ldr	r2, [pc, #60]	; (80095dc <alloc_socket+0xc8>)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	011b      	lsls	r3, r3, #4
 80095a4:	4413      	add	r3, r2
 80095a6:	330a      	adds	r3, #10
 80095a8:	460a      	mov	r2, r1
 80095aa:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 80095ac:	4a0b      	ldr	r2, [pc, #44]	; (80095dc <alloc_socket+0xc8>)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	011b      	lsls	r3, r3, #4
 80095b2:	4413      	add	r3, r2
 80095b4:	330c      	adds	r3, #12
 80095b6:	2200      	movs	r2, #0
 80095b8:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	e00a      	b.n	80095d4 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 80095be:	68b8      	ldr	r0, [r7, #8]
 80095c0:	f00e fc18 	bl	8017df4 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	3301      	adds	r3, #1
 80095c8:	60fb      	str	r3, [r7, #12]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2b03      	cmp	r3, #3
 80095ce:	dda9      	ble.n	8009524 <alloc_socket+0x10>
  }
  return -1;
 80095d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	200085b8 	.word	0x200085b8
 80095e0:	0801b83c 	.word	0x0801b83c
 80095e4:	0801b870 	.word	0x0801b870
 80095e8:	0801b890 	.word	0x0801b890

080095ec <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	607a      	str	r2, [r7, #4]
 80095f8:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	6852      	ldr	r2, [r2, #4]
 8009600:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2200      	movs	r2, #0
 8009606:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2200      	movs	r2, #0
 8009614:	601a      	str	r2, [r3, #0]
  return 1;
 8009616:	2301      	movs	r3, #1
}
 8009618:	4618      	mov	r0, r3
 800961a:	3714      	adds	r7, #20
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00d      	beq.n	8009654 <free_socket_free_elements+0x30>
    if (is_tcp) {
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d005      	beq.n	800964a <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4618      	mov	r0, r3
 8009644:	f002 fd60 	bl	800c108 <pbuf_free>
 8009648:	e004      	b.n	8009654 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4618      	mov	r0, r3
 8009650:	f7ff fe78 	bl	8009344 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d002      	beq.n	8009660 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800965a:	68b8      	ldr	r0, [r7, #8]
 800965c:	f7fd fd52 	bl	8007104 <netconn_delete>
  }
}
 8009660:	bf00      	nop
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 8009672:	f00e fbb1 	bl	8017dd8 <sys_arch_protect>
 8009676:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 8009678:	f107 0308 	add.w	r3, r7, #8
 800967c:	f107 020c 	add.w	r2, r7, #12
 8009680:	6839      	ldr	r1, [r7, #0]
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f7ff ffb2 	bl	80095ec <free_socket_locked>
 8009688:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800968a:	6978      	ldr	r0, [r7, #20]
 800968c:	f00e fbb2 	bl	8017df4 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d006      	beq.n	80096a4 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f107 0208 	add.w	r2, r7, #8
 800969c:	4619      	mov	r1, r3
 800969e:	6838      	ldr	r0, [r7, #0]
 80096a0:	f7ff ffc0 	bl	8009624 <free_socket_free_elements>
  }
}
 80096a4:	bf00      	nop
 80096a6:	3718      	adds	r7, #24
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <lwip_close>:
  return 0;
}

int
lwip_close(int s)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b086      	sub	sp, #24
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 80096b4:	2300      	movs	r3, #0
 80096b6:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f7ff ff13 	bl	80094e4 <get_socket>
 80096be:	6138      	str	r0, [r7, #16]
  if (!sock) {
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d102      	bne.n	80096cc <lwip_close+0x20>
    return -1;
 80096c6:	f04f 33ff 	mov.w	r3, #4294967295
 80096ca:	e039      	b.n	8009740 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d00b      	beq.n	80096ec <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096de:	2b10      	cmp	r3, #16
 80096e0:	bf0c      	ite	eq
 80096e2:	2301      	moveq	r3, #1
 80096e4:	2300      	movne	r3, #0
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	617b      	str	r3, [r7, #20]
 80096ea:	e00a      	b.n	8009702 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d006      	beq.n	8009702 <lwip_close+0x56>
 80096f4:	4b14      	ldr	r3, [pc, #80]	; (8009748 <lwip_close+0x9c>)
 80096f6:	f44f 7245 	mov.w	r2, #788	; 0x314
 80096fa:	4914      	ldr	r1, [pc, #80]	; (800974c <lwip_close+0xa0>)
 80096fc:	4814      	ldr	r0, [pc, #80]	; (8009750 <lwip_close+0xa4>)
 80096fe:	f010 fa8f 	bl	8019c20 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4618      	mov	r0, r3
 8009708:	f7fd fcd8 	bl	80070bc <netconn_prepare_delete>
 800970c:	4603      	mov	r3, r0
 800970e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8009710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00e      	beq.n	8009736 <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 8009718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800971c:	4618      	mov	r0, r3
 800971e:	f7ff fdf3 	bl	8009308 <err_to_errno>
 8009722:	60b8      	str	r0, [r7, #8]
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d002      	beq.n	8009730 <lwip_close+0x84>
 800972a:	4a0a      	ldr	r2, [pc, #40]	; (8009754 <lwip_close+0xa8>)
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8009730:	f04f 33ff 	mov.w	r3, #4294967295
 8009734:	e004      	b.n	8009740 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 8009736:	6979      	ldr	r1, [r7, #20]
 8009738:	6938      	ldr	r0, [r7, #16]
 800973a:	f7ff ff95 	bl	8009668 <free_socket>
  set_errno(0);
  return 0;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3718      	adds	r7, #24
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	0801b83c 	.word	0x0801b83c
 800974c:	0801b8fc 	.word	0x0801b8fc
 8009750:	0801b890 	.word	0x0801b890
 8009754:	2000fd7c 	.word	0x2000fd7c

08009758 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b08c      	sub	sp, #48	; 0x30
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f7ff febd 	bl	80094e4 <get_socket>
 800976a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (!sock) {
 800976c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976e:	2b00      	cmp	r3, #0
 8009770:	d102      	bne.n	8009778 <lwip_connect+0x20>
    return -1;
 8009772:	f04f 33ff 	mov.w	r3, #4294967295
 8009776:	e062      	b.n	800983e <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	785b      	ldrb	r3, [r3, #1]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d108      	bne.n	8009792 <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 8009780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4618      	mov	r0, r3
 8009786:	f7fd fd63 	bl	8007250 <netconn_disconnect>
 800978a:	4603      	mov	r3, r0
 800978c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009790:	e039      	b.n	8009806 <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2b10      	cmp	r3, #16
 8009796:	d10c      	bne.n	80097b2 <lwip_connect+0x5a>
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	785b      	ldrb	r3, [r3, #1]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d003      	beq.n	80097a8 <lwip_connect+0x50>
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	785b      	ldrb	r3, [r3, #1]
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	d104      	bne.n	80097b2 <lwip_connect+0x5a>
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	f003 0303 	and.w	r3, r3, #3
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d014      	beq.n	80097dc <lwip_connect+0x84>
 80097b2:	4b25      	ldr	r3, [pc, #148]	; (8009848 <lwip_connect+0xf0>)
 80097b4:	f240 3249 	movw	r2, #841	; 0x349
 80097b8:	4924      	ldr	r1, [pc, #144]	; (800984c <lwip_connect+0xf4>)
 80097ba:	4825      	ldr	r0, [pc, #148]	; (8009850 <lwip_connect+0xf8>)
 80097bc:	f010 fa30 	bl	8019c20 <iprintf>
 80097c0:	f06f 000f 	mvn.w	r0, #15
 80097c4:	f7ff fda0 	bl	8009308 <err_to_errno>
 80097c8:	6238      	str	r0, [r7, #32]
 80097ca:	6a3b      	ldr	r3, [r7, #32]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d002      	beq.n	80097d6 <lwip_connect+0x7e>
 80097d0:	4a20      	ldr	r2, [pc, #128]	; (8009854 <lwip_connect+0xfc>)
 80097d2:	6a3b      	ldr	r3, [r7, #32]
 80097d4:	6013      	str	r3, [r2, #0]
 80097d6:	f04f 33ff 	mov.w	r3, #4294967295
 80097da:	e030      	b.n	800983e <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	617b      	str	r3, [r7, #20]
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	885b      	ldrh	r3, [r3, #2]
 80097e6:	4618      	mov	r0, r3
 80097e8:	f001 f8a8 	bl	800a93c <lwip_htons>
 80097ec:	4603      	mov	r3, r0
 80097ee:	84fb      	strh	r3, [r7, #38]	; 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 80097f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80097f6:	f107 0114 	add.w	r1, r7, #20
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fd fcf0 	bl	80071e0 <netconn_connect>
 8009800:	4603      	mov	r3, r0
 8009802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (err != ERR_OK) {
 8009806:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00e      	beq.n	800982c <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800980e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009812:	4618      	mov	r0, r3
 8009814:	f7ff fd78 	bl	8009308 <err_to_errno>
 8009818:	61b8      	str	r0, [r7, #24]
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d002      	beq.n	8009826 <lwip_connect+0xce>
 8009820:	4a0c      	ldr	r2, [pc, #48]	; (8009854 <lwip_connect+0xfc>)
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8009826:	f04f 33ff 	mov.w	r3, #4294967295
 800982a:	e008      	b.n	800983e <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800982c:	2300      	movs	r3, #0
 800982e:	61fb      	str	r3, [r7, #28]
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d002      	beq.n	800983c <lwip_connect+0xe4>
 8009836:	4a07      	ldr	r2, [pc, #28]	; (8009854 <lwip_connect+0xfc>)
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3730      	adds	r7, #48	; 0x30
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	0801b83c 	.word	0x0801b83c
 800984c:	0801b914 	.word	0x0801b914
 8009850:	0801b890 	.word	0x0801b890
 8009854:	2000fd7c 	.word	0x2000fd7c

08009858 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b08c      	sub	sp, #48	; 0x30
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
 8009864:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 8009866:	2308      	movs	r3, #8
 8009868:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800986c:	2300      	movs	r3, #0
 800986e:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	db01      	blt.n	800987a <lwip_recv_tcp+0x22>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	e001      	b.n	800987e <lwip_recv_tcp+0x26>
 800987a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800987e:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d106      	bne.n	8009894 <lwip_recv_tcp+0x3c>
 8009886:	4b74      	ldr	r3, [pc, #464]	; (8009a58 <lwip_recv_tcp+0x200>)
 8009888:	f240 329e 	movw	r2, #926	; 0x39e
 800988c:	4973      	ldr	r1, [pc, #460]	; (8009a5c <lwip_recv_tcp+0x204>)
 800988e:	4874      	ldr	r0, [pc, #464]	; (8009a60 <lwip_recv_tcp+0x208>)
 8009890:	f010 f9c6 	bl	8019c20 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800989e:	2b10      	cmp	r3, #16
 80098a0:	d006      	beq.n	80098b0 <lwip_recv_tcp+0x58>
 80098a2:	4b6d      	ldr	r3, [pc, #436]	; (8009a58 <lwip_recv_tcp+0x200>)
 80098a4:	f240 329f 	movw	r2, #927	; 0x39f
 80098a8:	496e      	ldr	r1, [pc, #440]	; (8009a64 <lwip_recv_tcp+0x20c>)
 80098aa:	486d      	ldr	r0, [pc, #436]	; (8009a60 <lwip_recv_tcp+0x208>)
 80098ac:	f010 f9b8 	bl	8019c20 <iprintf>

  if (flags & MSG_DONTWAIT) {
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	f003 0308 	and.w	r3, r3, #8
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d005      	beq.n	80098c6 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 80098ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80098be:	f043 0304 	orr.w	r3, r3, #4
 80098c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d003      	beq.n	80098d6 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	617b      	str	r3, [r7, #20]
 80098d4:	e036      	b.n	8009944 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80098de:	f107 0114 	add.w	r1, r7, #20
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7fd fe9e 	bl	8007624 <netconn_recv_tcp_pbuf_flags>
 80098e8:	4603      	mov	r3, r0
 80098ea:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 80098ee:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d019      	beq.n	800992a <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 80098f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f300 808d 	bgt.w	8009a18 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 80098fe:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8009902:	4618      	mov	r0, r3
 8009904:	f7ff fd00 	bl	8009308 <err_to_errno>
 8009908:	61f8      	str	r0, [r7, #28]
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d002      	beq.n	8009916 <lwip_recv_tcp+0xbe>
 8009910:	4a55      	ldr	r2, [pc, #340]	; (8009a68 <lwip_recv_tcp+0x210>)
 8009912:	69fb      	ldr	r3, [r7, #28]
 8009914:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 8009916:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800991a:	f113 0f0f 	cmn.w	r3, #15
 800991e:	d101      	bne.n	8009924 <lwip_recv_tcp+0xcc>
          return 0;
 8009920:	2300      	movs	r3, #0
 8009922:	e094      	b.n	8009a4e <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 8009924:	f04f 33ff 	mov.w	r3, #4294967295
 8009928:	e091      	b.n	8009a4e <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d106      	bne.n	800993e <lwip_recv_tcp+0xe6>
 8009930:	4b49      	ldr	r3, [pc, #292]	; (8009a58 <lwip_recv_tcp+0x200>)
 8009932:	f240 32c5 	movw	r2, #965	; 0x3c5
 8009936:	494d      	ldr	r1, [pc, #308]	; (8009a6c <lwip_recv_tcp+0x214>)
 8009938:	4849      	ldr	r0, [pc, #292]	; (8009a60 <lwip_recv_tcp+0x208>)
 800993a:	f010 f971 	bl	8019c20 <iprintf>
      sock->lastdata.pbuf = p;
 800993e:	697a      	ldr	r2, [r7, #20]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	891b      	ldrh	r3, [r3, #8]
 8009948:	461a      	mov	r2, r3
 800994a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994c:	4293      	cmp	r3, r2
 800994e:	dd03      	ble.n	8009958 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	891b      	ldrh	r3, [r3, #8]
 8009954:	847b      	strh	r3, [r7, #34]	; 0x22
 8009956:	e001      	b.n	800995c <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 8009958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995a:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800995c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800995e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009960:	4413      	add	r3, r2
 8009962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009964:	429a      	cmp	r2, r3
 8009966:	dd03      	ble.n	8009970 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 8009968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996a:	b29b      	uxth	r3, r3
 800996c:	43db      	mvns	r3, r3
 800996e:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 8009970:	6978      	ldr	r0, [r7, #20]
 8009972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	18d1      	adds	r1, r2, r3
 8009978:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800997a:	2300      	movs	r3, #0
 800997c:	f002 fdca 	bl	800c514 <pbuf_copy_partial>

    recvd += copylen;
 8009980:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009982:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009984:	4413      	add	r3, r2
 8009986:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 8009988:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800998a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800998c:	429a      	cmp	r2, r3
 800998e:	da06      	bge.n	800999e <lwip_recv_tcp+0x146>
 8009990:	4b31      	ldr	r3, [pc, #196]	; (8009a58 <lwip_recv_tcp+0x200>)
 8009992:	f240 32dd 	movw	r2, #989	; 0x3dd
 8009996:	4936      	ldr	r1, [pc, #216]	; (8009a70 <lwip_recv_tcp+0x218>)
 8009998:	4831      	ldr	r0, [pc, #196]	; (8009a60 <lwip_recv_tcp+0x208>)
 800999a:	f010 f941 	bl	8019c20 <iprintf>
    recv_left -= copylen;
 800999e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80099a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099a2:	1ad3      	subs	r3, r2, r3
 80099a4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	f003 0301 	and.w	r3, r3, #1
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d123      	bne.n	80099f8 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	891b      	ldrh	r3, [r3, #8]
 80099b4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d906      	bls.n	80099c8 <lwip_recv_tcp+0x170>
 80099ba:	4b27      	ldr	r3, [pc, #156]	; (8009a58 <lwip_recv_tcp+0x200>)
 80099bc:	f240 32e3 	movw	r2, #995	; 0x3e3
 80099c0:	492c      	ldr	r1, [pc, #176]	; (8009a74 <lwip_recv_tcp+0x21c>)
 80099c2:	4827      	ldr	r0, [pc, #156]	; (8009a60 <lwip_recv_tcp+0x208>)
 80099c4:	f010 f92c 	bl	8019c20 <iprintf>
      if (p->tot_len - copylen > 0) {
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	891b      	ldrh	r3, [r3, #8]
 80099cc:	461a      	mov	r2, r3
 80099ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80099d0:	1ad3      	subs	r3, r2, r3
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	dd09      	ble.n	80099ea <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80099da:	4611      	mov	r1, r2
 80099dc:	4618      	mov	r0, r3
 80099de:	f002 fb60 	bl	800c0a2 <pbuf_free_header>
 80099e2:	4602      	mov	r2, r0
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	605a      	str	r2, [r3, #4]
 80099e8:	e006      	b.n	80099f8 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2200      	movs	r2, #0
 80099ee:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f002 fb88 	bl	800c108 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 80099f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099fc:	f043 0314 	orr.w	r3, r3, #20
 8009a00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 8009a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	dd08      	ble.n	8009a1c <lwip_recv_tcp+0x1c4>
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	f003 0301 	and.w	r3, r3, #1
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f43f af58 	beq.w	80098c6 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 8009a16:	e001      	b.n	8009a1c <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 8009a18:	bf00      	nop
 8009a1a:	e000      	b.n	8009a1e <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 8009a1c:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 8009a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	dd0b      	ble.n	8009a3c <lwip_recv_tcp+0x1e4>
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	f003 0301 	and.w	r3, r3, #1
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d106      	bne.n	8009a3c <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a34:	4611      	mov	r1, r2
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7fd fd3c 	bl	80074b4 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	61bb      	str	r3, [r7, #24]
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d002      	beq.n	8009a4c <lwip_recv_tcp+0x1f4>
 8009a46:	4a08      	ldr	r2, [pc, #32]	; (8009a68 <lwip_recv_tcp+0x210>)
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	6013      	str	r3, [r2, #0]
  return recvd;
 8009a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3730      	adds	r7, #48	; 0x30
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	0801b83c 	.word	0x0801b83c
 8009a5c:	0801b934 	.word	0x0801b934
 8009a60:	0801b890 	.word	0x0801b890
 8009a64:	0801b944 	.word	0x0801b944
 8009a68:	2000fd7c 	.word	0x2000fd7c
 8009a6c:	0801b968 	.word	0x0801b968
 8009a70:	0801b974 	.word	0x0801b974
 8009a74:	0801b99c 	.word	0x0801b99c

08009a78 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 8009a78:	b590      	push	{r4, r7, lr}
 8009a7a:	b08b      	sub	sp, #44	; 0x2c
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	603b      	str	r3, [r7, #0]
 8009a84:	4613      	mov	r3, r2
 8009a86:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d106      	bne.n	8009aa0 <lwip_sock_make_addr+0x28>
 8009a92:	4b2b      	ldr	r3, [pc, #172]	; (8009b40 <lwip_sock_make_addr+0xc8>)
 8009a94:	f240 4207 	movw	r2, #1031	; 0x407
 8009a98:	492a      	ldr	r1, [pc, #168]	; (8009b44 <lwip_sock_make_addr+0xcc>)
 8009a9a:	482b      	ldr	r0, [pc, #172]	; (8009b48 <lwip_sock_make_addr+0xd0>)
 8009a9c:	f010 f8c0 	bl	8019c20 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d106      	bne.n	8009ab4 <lwip_sock_make_addr+0x3c>
 8009aa6:	4b26      	ldr	r3, [pc, #152]	; (8009b40 <lwip_sock_make_addr+0xc8>)
 8009aa8:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8009aac:	4927      	ldr	r1, [pc, #156]	; (8009b4c <lwip_sock_make_addr+0xd4>)
 8009aae:	4826      	ldr	r0, [pc, #152]	; (8009b48 <lwip_sock_make_addr+0xd0>)
 8009ab0:	f010 f8b6 	bl	8019c20 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 8009ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d106      	bne.n	8009ac8 <lwip_sock_make_addr+0x50>
 8009aba:	4b21      	ldr	r3, [pc, #132]	; (8009b40 <lwip_sock_make_addr+0xc8>)
 8009abc:	f240 4209 	movw	r2, #1033	; 0x409
 8009ac0:	4923      	ldr	r1, [pc, #140]	; (8009b50 <lwip_sock_make_addr+0xd8>)
 8009ac2:	4821      	ldr	r0, [pc, #132]	; (8009b48 <lwip_sock_make_addr+0xd0>)
 8009ac4:	f010 f8ac 	bl	8019c20 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 8009ac8:	f107 0314 	add.w	r3, r7, #20
 8009acc:	2210      	movs	r2, #16
 8009ace:	701a      	strb	r2, [r3, #0]
 8009ad0:	f107 0314 	add.w	r3, r7, #20
 8009ad4:	2202      	movs	r2, #2
 8009ad6:	705a      	strb	r2, [r3, #1]
 8009ad8:	f107 0414 	add.w	r4, r7, #20
 8009adc:	88fb      	ldrh	r3, [r7, #6]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f000 ff2c 	bl	800a93c <lwip_htons>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	8063      	strh	r3, [r4, #2]
 8009ae8:	f107 0314 	add.w	r3, r7, #20
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	6812      	ldr	r2, [r2, #0]
 8009af0:	605a      	str	r2, [r3, #4]
 8009af2:	f107 0314 	add.w	r3, r7, #20
 8009af6:	3308      	adds	r3, #8
 8009af8:	2208      	movs	r2, #8
 8009afa:	2100      	movs	r1, #0
 8009afc:	4618      	mov	r0, r3
 8009afe:	f010 f887 	bl	8019c10 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 8009b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	7d3a      	ldrb	r2, [r7, #20]
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d202      	bcs.n	8009b12 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b10:	e008      	b.n	8009b24 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 8009b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	7d3a      	ldrb	r2, [r7, #20]
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d903      	bls.n	8009b24 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 8009b1c:	7d3b      	ldrb	r3, [r7, #20]
 8009b1e:	461a      	mov	r2, r3
 8009b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b22:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 8009b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	f107 0314 	add.w	r3, r7, #20
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	6838      	ldr	r0, [r7, #0]
 8009b30:	f010 f863 	bl	8019bfa <memcpy>
  return truncated;
 8009b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	372c      	adds	r7, #44	; 0x2c
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd90      	pop	{r4, r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	0801b83c 	.word	0x0801b83c
 8009b44:	0801b9ac 	.word	0x0801b9ac
 8009b48:	0801b890 	.word	0x0801b890
 8009b4c:	0801b9c0 	.word	0x0801b9c0
 8009b50:	0801b9d0 	.word	0x0801b9d0

08009b54 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b088      	sub	sp, #32
 8009b58:	af02      	add	r7, sp, #8
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	607a      	str	r2, [r7, #4]
 8009b60:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d101      	bne.n	8009b6c <lwip_recv_tcp_from+0x18>
    return 0;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	e021      	b.n	8009bb0 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d01d      	beq.n	8009bae <lwip_recv_tcp_from+0x5a>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d01a      	beq.n	8009bae <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6818      	ldr	r0, [r3, #0]
 8009b7c:	f107 0216 	add.w	r2, r7, #22
 8009b80:	f107 0110 	add.w	r1, r7, #16
 8009b84:	2300      	movs	r3, #0
 8009b86:	f7fd fad9 	bl	800713c <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00e      	beq.n	8009bae <lwip_recv_tcp_from+0x5a>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00b      	beq.n	8009bae <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6818      	ldr	r0, [r3, #0]
 8009b9a:	8afa      	ldrh	r2, [r7, #22]
 8009b9c:	f107 0110 	add.w	r1, r7, #16
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	f7ff ff67 	bl	8009a78 <lwip_sock_make_addr>
 8009baa:	4603      	mov	r3, r0
 8009bac:	e000      	b.n	8009bb0 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3718      	adds	r7, #24
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 8009bb8:	b590      	push	{r4, r7, lr}
 8009bba:	b08d      	sub	sp, #52	; 0x34
 8009bbc:	af02      	add	r7, sp, #8
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	607a      	str	r2, [r7, #4]
 8009bc4:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d10d      	bne.n	8009bea <lwip_recvfrom_udp_raw+0x32>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	dd09      	ble.n	8009bea <lwip_recvfrom_udp_raw+0x32>
 8009bd6:	4b5e      	ldr	r3, [pc, #376]	; (8009d50 <lwip_recvfrom_udp_raw+0x198>)
 8009bd8:	f240 4249 	movw	r2, #1097	; 0x449
 8009bdc:	495d      	ldr	r1, [pc, #372]	; (8009d54 <lwip_recvfrom_udp_raw+0x19c>)
 8009bde:	485e      	ldr	r0, [pc, #376]	; (8009d58 <lwip_recvfrom_udp_raw+0x1a0>)
 8009be0:	f010 f81e 	bl	8019c20 <iprintf>
 8009be4:	f06f 030f 	mvn.w	r3, #15
 8009be8:	e0ad      	b.n	8009d46 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	f003 0308 	and.w	r3, r3, #8
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d003      	beq.n	8009bfc <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 8009bf4:	2304      	movs	r3, #4
 8009bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009bfa:	e002      	b.n	8009c02 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d11e      	bne.n	8009c4c <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009c16:	f107 0110 	add.w	r1, r7, #16
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7fd fd2e 	bl	800767c <netconn_recv_udp_raw_netbuf_flags>
 8009c20:	4603      	mov	r3, r0
 8009c22:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 8009c24:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d002      	beq.n	8009c32 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 8009c2c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009c30:	e089      	b.n	8009d46 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d106      	bne.n	8009c46 <lwip_recvfrom_udp_raw+0x8e>
 8009c38:	4b45      	ldr	r3, [pc, #276]	; (8009d50 <lwip_recvfrom_udp_raw+0x198>)
 8009c3a:	f240 425e 	movw	r2, #1118	; 0x45e
 8009c3e:	4947      	ldr	r1, [pc, #284]	; (8009d5c <lwip_recvfrom_udp_raw+0x1a4>)
 8009c40:	4845      	ldr	r0, [pc, #276]	; (8009d58 <lwip_recvfrom_udp_raw+0x1a0>)
 8009c42:	f00f ffed 	bl	8019c20 <iprintf>
    sock->lastdata.netbuf = buf;
 8009c46:	693a      	ldr	r2, [r7, #16]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	891b      	ldrh	r3, [r3, #8]
 8009c52:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 8009c54:	2300      	movs	r3, #0
 8009c56:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8009c58:	2300      	movs	r3, #0
 8009c5a:	61fb      	str	r3, [r7, #28]
 8009c5c:	e029      	b.n	8009cb2 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 8009c5e:	8b3a      	ldrh	r2, [r7, #24]
 8009c60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009c62:	1ad3      	subs	r3, r2, r3
 8009c64:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	689a      	ldr	r2, [r3, #8]
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	00db      	lsls	r3, r3, #3
 8009c6e:	4413      	add	r3, r2
 8009c70:	685a      	ldr	r2, [r3, #4]
 8009c72:	8afb      	ldrh	r3, [r7, #22]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d902      	bls.n	8009c7e <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 8009c78:	8afb      	ldrh	r3, [r7, #22]
 8009c7a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009c7c:	e006      	b.n	8009c8c <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	689a      	ldr	r2, [r3, #8]
 8009c82:	69fb      	ldr	r3, [r7, #28]
 8009c84:	00db      	lsls	r3, r3, #3
 8009c86:	4413      	add	r3, r2
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	6818      	ldr	r0, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	689a      	ldr	r2, [r3, #8]
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	00db      	lsls	r3, r3, #3
 8009c98:	4413      	add	r3, r2
 8009c9a:	6819      	ldr	r1, [r3, #0]
 8009c9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009c9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009ca0:	f002 fc38 	bl	800c514 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 8009ca4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009ca6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ca8:	4413      	add	r3, r2
 8009caa:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	61fb      	str	r3, [r7, #28]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	69fa      	ldr	r2, [r7, #28]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	da03      	bge.n	8009cc4 <lwip_recvfrom_udp_raw+0x10c>
 8009cbc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009cbe:	8b3b      	ldrh	r3, [r7, #24]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d3cc      	bcc.n	8009c5e <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d01a      	beq.n	8009d02 <lwip_recvfrom_udp_raw+0x14a>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d016      	beq.n	8009d02 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d012      	beq.n	8009d02 <lwip_recvfrom_udp_raw+0x14a>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d00e      	beq.n	8009d02 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6818      	ldr	r0, [r3, #0]
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	f103 0108 	add.w	r1, r3, #8
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	3304      	adds	r3, #4
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	4623      	mov	r3, r4
 8009cfe:	f7ff febb 	bl	8009a78 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d007      	beq.n	8009d20 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 8009d10:	2300      	movs	r3, #0
 8009d12:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 8009d14:	7d7b      	ldrb	r3, [r7, #21]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d102      	bne.n	8009d20 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	f003 0301 	and.w	r3, r3, #1
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d106      	bne.n	8009d38 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7ff fb06 	bl	8009344 <netbuf_delete>
  }
  if (datagram_len) {
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d002      	beq.n	8009d44 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	8b3a      	ldrh	r2, [r7, #24]
 8009d42:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	372c      	adds	r7, #44	; 0x2c
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd90      	pop	{r4, r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	0801b83c 	.word	0x0801b83c
 8009d54:	0801b9e0 	.word	0x0801b9e0
 8009d58:	0801b890 	.word	0x0801b890
 8009d5c:	0801ba0c 	.word	0x0801ba0c

08009d60 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b096      	sub	sp, #88	; 0x58
 8009d64:	af02      	add	r7, sp, #8
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	607a      	str	r2, [r7, #4]
 8009d6c:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f7ff fbb8 	bl	80094e4 <get_socket>
 8009d74:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 8009d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d102      	bne.n	8009d82 <lwip_recvfrom+0x22>
    return -1;
 8009d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d80:	e077      	b.n	8009e72 <lwip_recvfrom+0x112>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8009d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d8c:	2b10      	cmp	r3, #16
 8009d8e:	d112      	bne.n	8009db6 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	68b9      	ldr	r1, [r7, #8]
 8009d96:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009d98:	f7ff fd5e 	bl	8009858 <lwip_recv_tcp>
 8009d9c:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 8009d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009da0:	9301      	str	r3, [sp, #4]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	4b35      	ldr	r3, [pc, #212]	; (8009e7c <lwip_recvfrom+0x11c>)
 8009da8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009daa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009dac:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009dae:	f7ff fed1 	bl	8009b54 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 8009db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009db4:	e05d      	b.n	8009e72 <lwip_recvfrom+0x112>
  } else
#endif
  {
    u16_t datagram_len = 0;
 8009db6:	2300      	movs	r3, #0
 8009db8:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 8009dce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009dd2:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 8009dd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009dda:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 8009ddc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d002      	beq.n	8009de8 <lwip_recvfrom+0x88>
 8009de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	e000      	b.n	8009dea <lwip_recvfrom+0x8a>
 8009de8:	2300      	movs	r3, #0
 8009dea:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 8009dec:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 8009df0:	f107 0214 	add.w	r2, r7, #20
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	9300      	str	r3, [sp, #0]
 8009df8:	460b      	mov	r3, r1
 8009dfa:	6839      	ldr	r1, [r7, #0]
 8009dfc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009dfe:	f7ff fedb 	bl	8009bb8 <lwip_recvfrom_udp_raw>
 8009e02:	4603      	mov	r3, r0
 8009e04:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 8009e08:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00e      	beq.n	8009e2e <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 8009e10:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8009e14:	4618      	mov	r0, r3
 8009e16:	f7ff fa77 	bl	8009308 <err_to_errno>
 8009e1a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d002      	beq.n	8009e28 <lwip_recvfrom+0xc8>
 8009e22:	4a17      	ldr	r2, [pc, #92]	; (8009e80 <lwip_recvfrom+0x120>)
 8009e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e26:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 8009e28:	f04f 33ff 	mov.w	r3, #4294967295
 8009e2c:	e021      	b.n	8009e72 <lwip_recvfrom+0x112>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 8009e2e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009e30:	461a      	mov	r2, r3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4293      	cmp	r3, r2
 8009e36:	bf28      	it	cs
 8009e38:	4613      	movcs	r3, r2
 8009e3a:	4a12      	ldr	r2, [pc, #72]	; (8009e84 <lwip_recvfrom+0x124>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d806      	bhi.n	8009e4e <lwip_recvfrom+0xee>
 8009e40:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009e42:	461a      	mov	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4293      	cmp	r3, r2
 8009e48:	bf28      	it	cs
 8009e4a:	4613      	movcs	r3, r2
 8009e4c:	e001      	b.n	8009e52 <lwip_recvfrom+0xf2>
 8009e4e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009e52:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 8009e54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d002      	beq.n	8009e60 <lwip_recvfrom+0x100>
      *fromlen = msg.msg_namelen;
 8009e5a:	69ba      	ldr	r2, [r7, #24]
 8009e5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e5e:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 8009e60:	2300      	movs	r3, #0
 8009e62:	643b      	str	r3, [r7, #64]	; 0x40
 8009e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d002      	beq.n	8009e70 <lwip_recvfrom+0x110>
 8009e6a:	4a05      	ldr	r2, [pc, #20]	; (8009e80 <lwip_recvfrom+0x120>)
 8009e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e6e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 8009e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3750      	adds	r7, #80	; 0x50
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	0801ba18 	.word	0x0801ba18
 8009e80:	2000fd7c 	.word	0x2000fd7c
 8009e84:	7ffffffe 	.word	0x7ffffffe

08009e88 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b086      	sub	sp, #24
 8009e8c:	af02      	add	r7, sp, #8
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	607a      	str	r2, [r7, #4]
 8009e94:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 8009e96:	2300      	movs	r3, #0
 8009e98:	9301      	str	r3, [sp, #4]
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	9300      	str	r3, [sp, #0]
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	68b9      	ldr	r1, [r7, #8]
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f7ff ff5b 	bl	8009d60 <lwip_recvfrom>
 8009eaa:	4603      	mov	r3, r0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3710      	adds	r7, #16
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b08a      	sub	sp, #40	; 0x28
 8009eb8:	af02      	add	r7, sp, #8
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	607a      	str	r2, [r7, #4]
 8009ec0:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f7ff fb0e 	bl	80094e4 <get_socket>
 8009ec8:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 8009eca:	69fb      	ldr	r3, [r7, #28]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d102      	bne.n	8009ed6 <lwip_send+0x22>
    return -1;
 8009ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed4:	e046      	b.n	8009f64 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8009ed6:	69fb      	ldr	r3, [r7, #28]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ee0:	2b10      	cmp	r3, #16
 8009ee2:	d00b      	beq.n	8009efc <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	9301      	str	r3, [sp, #4]
 8009ee8:	2300      	movs	r3, #0
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	68b9      	ldr	r1, [r7, #8]
 8009ef2:	68f8      	ldr	r0, [r7, #12]
 8009ef4:	f000 f83c 	bl	8009f70 <lwip_sendto>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	e033      	b.n	8009f64 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d001      	beq.n	8009f0a <lwip_send+0x56>
 8009f06:	2203      	movs	r2, #3
 8009f08:	e000      	b.n	8009f0c <lwip_send+0x58>
 8009f0a:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	105b      	asrs	r3, r3, #1
 8009f10:	b25b      	sxtb	r3, r3
 8009f12:	f003 0304 	and.w	r3, r3, #4
 8009f16:	b25b      	sxtb	r3, r3
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 8009f1c:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 8009f22:	69fb      	ldr	r3, [r7, #28]
 8009f24:	6818      	ldr	r0, [r3, #0]
 8009f26:	7efa      	ldrb	r2, [r7, #27]
 8009f28:	f107 0310 	add.w	r3, r7, #16
 8009f2c:	9300      	str	r3, [sp, #0]
 8009f2e:	4613      	mov	r3, r2
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	68b9      	ldr	r1, [r7, #8]
 8009f34:	f7fd fbfc 	bl	8007730 <netconn_write_partly>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 8009f3c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009f40:	4618      	mov	r0, r3
 8009f42:	f7ff f9e1 	bl	8009308 <err_to_errno>
 8009f46:	6178      	str	r0, [r7, #20]
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d002      	beq.n	8009f54 <lwip_send+0xa0>
 8009f4e:	4a07      	ldr	r2, [pc, #28]	; (8009f6c <lwip_send+0xb8>)
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 8009f54:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d101      	bne.n	8009f60 <lwip_send+0xac>
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	e001      	b.n	8009f64 <lwip_send+0xb0>
 8009f60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3720      	adds	r7, #32
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	2000fd7c 	.word	0x2000fd7c

08009f70 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b08e      	sub	sp, #56	; 0x38
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	607a      	str	r2, [r7, #4]
 8009f7c:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f7ff fab0 	bl	80094e4 <get_socket>
 8009f84:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 8009f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d102      	bne.n	8009f92 <lwip_sendto+0x22>
    return -1;
 8009f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f90:	e093      	b.n	800a0ba <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8009f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f9c:	2b10      	cmp	r3, #16
 8009f9e:	d107      	bne.n	8009fb0 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	68b9      	ldr	r1, [r7, #8]
 8009fa6:	68f8      	ldr	r0, [r7, #12]
 8009fa8:	f7ff ff84 	bl	8009eb4 <lwip_send>
 8009fac:	4603      	mov	r3, r0
 8009fae:	e084      	b.n	800a0ba <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fb6:	d30a      	bcc.n	8009fce <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 8009fb8:	235a      	movs	r3, #90	; 0x5a
 8009fba:	623b      	str	r3, [r7, #32]
 8009fbc:	6a3b      	ldr	r3, [r7, #32]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d002      	beq.n	8009fc8 <lwip_sendto+0x58>
 8009fc2:	4a40      	ldr	r2, [pc, #256]	; (800a0c4 <lwip_sendto+0x154>)
 8009fc4:	6a3b      	ldr	r3, [r7, #32]
 8009fc6:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8009fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8009fcc:	e075      	b.n	800a0ba <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8009fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d102      	bne.n	8009fde <lwip_sendto+0x6e>
 8009fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d023      	beq.n	800a026 <lwip_sendto+0xb6>
 8009fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fe0:	2b10      	cmp	r3, #16
 8009fe2:	d10b      	bne.n	8009ffc <lwip_sendto+0x8c>
 8009fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d008      	beq.n	8009ffc <lwip_sendto+0x8c>
 8009fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fec:	785b      	ldrb	r3, [r3, #1]
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d104      	bne.n	8009ffc <lwip_sendto+0x8c>
 8009ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ff4:	f003 0303 	and.w	r3, r3, #3
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d014      	beq.n	800a026 <lwip_sendto+0xb6>
 8009ffc:	4b32      	ldr	r3, [pc, #200]	; (800a0c8 <lwip_sendto+0x158>)
 8009ffe:	f240 6255 	movw	r2, #1621	; 0x655
 800a002:	4932      	ldr	r1, [pc, #200]	; (800a0cc <lwip_sendto+0x15c>)
 800a004:	4832      	ldr	r0, [pc, #200]	; (800a0d0 <lwip_sendto+0x160>)
 800a006:	f00f fe0b 	bl	8019c20 <iprintf>
 800a00a:	f06f 000f 	mvn.w	r0, #15
 800a00e:	f7ff f97b 	bl	8009308 <err_to_errno>
 800a012:	62b8      	str	r0, [r7, #40]	; 0x28
 800a014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a016:	2b00      	cmp	r3, #0
 800a018:	d002      	beq.n	800a020 <lwip_sendto+0xb0>
 800a01a:	4a2a      	ldr	r2, [pc, #168]	; (800a0c4 <lwip_sendto+0x154>)
 800a01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01e:	6013      	str	r3, [r2, #0]
 800a020:	f04f 33ff 	mov.w	r3, #4294967295
 800a024:	e049      	b.n	800a0ba <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800a026:	2300      	movs	r3, #0
 800a028:	617b      	str	r3, [r7, #20]
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800a02e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00a      	beq.n	800a04a <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800a034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	61bb      	str	r3, [r7, #24]
 800a03a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a03c:	885b      	ldrh	r3, [r3, #2]
 800a03e:	4618      	mov	r0, r3
 800a040:	f000 fc7c 	bl	800a93c <lwip_htons>
 800a044:	4603      	mov	r3, r0
 800a046:	86bb      	strh	r3, [r7, #52]	; 0x34
 800a048:	e003      	b.n	800a052 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800a04a:	2300      	movs	r3, #0
 800a04c:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800a04e:	2300      	movs	r3, #0
 800a050:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800a052:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a054:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800a056:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a058:	f107 0310 	add.w	r3, r7, #16
 800a05c:	68b9      	ldr	r1, [r7, #8]
 800a05e:	4618      	mov	r0, r3
 800a060:	f7ff f9b8 	bl	80093d4 <netbuf_ref>
 800a064:	4603      	mov	r3, r0
 800a066:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800a06a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d10a      	bne.n	800a088 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800a072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f107 0210 	add.w	r2, r7, #16
 800a07a:	4611      	mov	r1, r2
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7fd fb29 	bl	80076d4 <netconn_send>
 800a082:	4603      	mov	r3, r0
 800a084:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800a088:	f107 0310 	add.w	r3, r7, #16
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7ff f979 	bl	8009384 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800a092:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a096:	4618      	mov	r0, r3
 800a098:	f7ff f936 	bl	8009308 <err_to_errno>
 800a09c:	6278      	str	r0, [r7, #36]	; 0x24
 800a09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d002      	beq.n	800a0aa <lwip_sendto+0x13a>
 800a0a4:	4a07      	ldr	r2, [pc, #28]	; (800a0c4 <lwip_sendto+0x154>)
 800a0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a8:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800a0aa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d101      	bne.n	800a0b6 <lwip_sendto+0x146>
 800a0b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a0b4:	e001      	b.n	800a0ba <lwip_sendto+0x14a>
 800a0b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3738      	adds	r7, #56	; 0x38
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	2000fd7c 	.word	0x2000fd7c
 800a0c8:	0801b83c 	.word	0x0801b83c
 800a0cc:	0801bb1c 	.word	0x0801bb1c
 800a0d0:	0801b890 	.word	0x0801b890

0800a0d4 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b086      	sub	sp, #24
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d00d      	beq.n	800a102 <lwip_socket+0x2e>
 800a0e6:	2b03      	cmp	r3, #3
 800a0e8:	d002      	beq.n	800a0f0 <lwip_socket+0x1c>
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d016      	beq.n	800a11c <lwip_socket+0x48>
 800a0ee:	e01c      	b.n	800a12a <lwip_socket+0x56>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	4a21      	ldr	r2, [pc, #132]	; (800a17c <lwip_socket+0xa8>)
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	2040      	movs	r0, #64	; 0x40
 800a0fa:	f7fc ff65 	bl	8006fc8 <netconn_new_with_proto_and_callback>
 800a0fe:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800a100:	e019      	b.n	800a136 <lwip_socket+0x62>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2b88      	cmp	r3, #136	; 0x88
 800a106:	d101      	bne.n	800a10c <lwip_socket+0x38>
 800a108:	2321      	movs	r3, #33	; 0x21
 800a10a:	e000      	b.n	800a10e <lwip_socket+0x3a>
 800a10c:	2320      	movs	r3, #32
 800a10e:	4a1b      	ldr	r2, [pc, #108]	; (800a17c <lwip_socket+0xa8>)
 800a110:	2100      	movs	r1, #0
 800a112:	4618      	mov	r0, r3
 800a114:	f7fc ff58 	bl	8006fc8 <netconn_new_with_proto_and_callback>
 800a118:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a11a:	e00c      	b.n	800a136 <lwip_socket+0x62>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800a11c:	4a17      	ldr	r2, [pc, #92]	; (800a17c <lwip_socket+0xa8>)
 800a11e:	2100      	movs	r1, #0
 800a120:	2010      	movs	r0, #16
 800a122:	f7fc ff51 	bl	8006fc8 <netconn_new_with_proto_and_callback>
 800a126:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800a128:	e005      	b.n	800a136 <lwip_socket+0x62>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800a12a:	4b15      	ldr	r3, [pc, #84]	; (800a180 <lwip_socket+0xac>)
 800a12c:	2216      	movs	r2, #22
 800a12e:	601a      	str	r2, [r3, #0]
      return -1;
 800a130:	f04f 33ff 	mov.w	r3, #4294967295
 800a134:	e01e      	b.n	800a174 <lwip_socket+0xa0>
  }

  if (!conn) {
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d105      	bne.n	800a148 <lwip_socket+0x74>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800a13c:	4b10      	ldr	r3, [pc, #64]	; (800a180 <lwip_socket+0xac>)
 800a13e:	2269      	movs	r2, #105	; 0x69
 800a140:	601a      	str	r2, [r3, #0]
    return -1;
 800a142:	f04f 33ff 	mov.w	r3, #4294967295
 800a146:	e015      	b.n	800a174 <lwip_socket+0xa0>
  }

  i = alloc_socket(conn, 0);
 800a148:	2100      	movs	r1, #0
 800a14a:	6978      	ldr	r0, [r7, #20]
 800a14c:	f7ff f9e2 	bl	8009514 <alloc_socket>
 800a150:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a158:	d108      	bne.n	800a16c <lwip_socket+0x98>
    netconn_delete(conn);
 800a15a:	6978      	ldr	r0, [r7, #20]
 800a15c:	f7fc ffd2 	bl	8007104 <netconn_delete>
    set_errno(ENFILE);
 800a160:	4b07      	ldr	r3, [pc, #28]	; (800a180 <lwip_socket+0xac>)
 800a162:	2217      	movs	r2, #23
 800a164:	601a      	str	r2, [r3, #0]
    return -1;
 800a166:	f04f 33ff 	mov.w	r3, #4294967295
 800a16a:	e003      	b.n	800a174 <lwip_socket+0xa0>
  }
  conn->socket = i;
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	693a      	ldr	r2, [r7, #16]
 800a170:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800a172:	693b      	ldr	r3, [r7, #16]
}
 800a174:	4618      	mov	r0, r3
 800a176:	3718      	adds	r7, #24
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	0800a20d 	.word	0x0800a20d
 800a180:	2000fd7c 	.word	0x2000fd7c

0800a184 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800a184:	b480      	push	{r7}
 800a186:	b087      	sub	sp, #28
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	607a      	str	r2, [r7, #4]
 800a190:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800a192:	2300      	movs	r3, #0
 800a194:	617b      	str	r3, [r7, #20]
 800a196:	e02c      	b.n	800a1f2 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	695a      	ldr	r2, [r3, #20]
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	00db      	lsls	r3, r3, #3
 800a1a0:	4413      	add	r3, r2
 800a1a2:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d11e      	bne.n	800a1ec <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d009      	beq.n	800a1c8 <lwip_poll_should_wake+0x44>
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	f003 0301 	and.w	r3, r3, #1
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d001      	beq.n	800a1c8 <lwip_poll_should_wake+0x44>
        return 1;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	e01a      	b.n	800a1fe <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d009      	beq.n	800a1e2 <lwip_poll_should_wake+0x5e>
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	f003 0302 	and.w	r3, r3, #2
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d001      	beq.n	800a1e2 <lwip_poll_should_wake+0x5e>
        return 1;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e00d      	b.n	800a1fe <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800a1e2:	6a3b      	ldr	r3, [r7, #32]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d001      	beq.n	800a1ec <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e008      	b.n	800a1fe <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	617b      	str	r3, [r7, #20]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	699b      	ldr	r3, [r3, #24]
 800a1f6:	697a      	ldr	r2, [r7, #20]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d3cd      	bcc.n	800a198 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	371c      	adds	r7, #28
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr
	...

0800a20c <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b08a      	sub	sp, #40	; 0x28
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	460b      	mov	r3, r1
 800a216:	70fb      	strb	r3, [r7, #3]
 800a218:	4613      	mov	r3, r2
 800a21a:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	f000 80a4 	beq.w	800a36c <event_callback+0x160>
    s = conn->socket;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	699b      	ldr	r3, [r3, #24]
 800a228:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800a22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	da18      	bge.n	800a262 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800a230:	f00d fdd2 	bl	8017dd8 <sys_arch_protect>
 800a234:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	699b      	ldr	r3, [r3, #24]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	da0b      	bge.n	800a256 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800a23e:	78fb      	ldrb	r3, [r7, #3]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d104      	bne.n	800a24e <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	699b      	ldr	r3, [r3, #24]
 800a248:	1e5a      	subs	r2, r3, #1
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800a24e:	69f8      	ldr	r0, [r7, #28]
 800a250:	f00d fdd0 	bl	8017df4 <sys_arch_unprotect>
        return;
 800a254:	e08d      	b.n	800a372 <event_callback+0x166>
      }
      s = conn->socket;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	699b      	ldr	r3, [r3, #24]
 800a25a:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800a25c:	69f8      	ldr	r0, [r7, #28]
 800a25e:	f00d fdc9 	bl	8017df4 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800a262:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a264:	f7ff f93e 	bl	80094e4 <get_socket>
 800a268:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800a26a:	69bb      	ldr	r3, [r7, #24]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d07f      	beq.n	800a370 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800a270:	2301      	movs	r3, #1
 800a272:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800a274:	f00d fdb0 	bl	8017dd8 <sys_arch_protect>
 800a278:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800a27a:	78fb      	ldrb	r3, [r7, #3]
 800a27c:	2b04      	cmp	r3, #4
 800a27e:	d83e      	bhi.n	800a2fe <event_callback+0xf2>
 800a280:	a201      	add	r2, pc, #4	; (adr r2, 800a288 <event_callback+0x7c>)
 800a282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a286:	bf00      	nop
 800a288:	0800a29d 	.word	0x0800a29d
 800a28c:	0800a2bf 	.word	0x0800a2bf
 800a290:	0800a2d7 	.word	0x0800a2d7
 800a294:	0800a2eb 	.word	0x0800a2eb
 800a298:	0800a2f7 	.word	0x0800a2f7
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800a29c:	69bb      	ldr	r3, [r7, #24]
 800a29e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	b21a      	sxth	r2, r3
 800a2aa:	69bb      	ldr	r3, [r7, #24]
 800a2ac:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800a2ae:	69bb      	ldr	r3, [r7, #24]
 800a2b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	dd2a      	ble.n	800a30e <event_callback+0x102>
        check_waiters = 0;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	623b      	str	r3, [r7, #32]
      }
      break;
 800a2bc:	e027      	b.n	800a30e <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	b21a      	sxth	r2, r3
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	623b      	str	r3, [r7, #32]
      break;
 800a2d4:	e01c      	b.n	800a310 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	895b      	ldrh	r3, [r3, #10]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d001      	beq.n	800a2e2 <event_callback+0xd6>
        check_waiters = 0;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	815a      	strh	r2, [r3, #10]
      break;
 800a2e8:	e012      	b.n	800a310 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	623b      	str	r3, [r7, #32]
      break;
 800a2f4:	e00c      	b.n	800a310 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	819a      	strh	r2, [r3, #12]
      break;
 800a2fc:	e008      	b.n	800a310 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800a2fe:	4b1e      	ldr	r3, [pc, #120]	; (800a378 <event_callback+0x16c>)
 800a300:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800a304:	491d      	ldr	r1, [pc, #116]	; (800a37c <event_callback+0x170>)
 800a306:	481e      	ldr	r0, [pc, #120]	; (800a380 <event_callback+0x174>)
 800a308:	f00f fc8a 	bl	8019c20 <iprintf>
      break;
 800a30c:	e000      	b.n	800a310 <event_callback+0x104>
      break;
 800a30e:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	7b9b      	ldrb	r3, [r3, #14]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d025      	beq.n	800a364 <event_callback+0x158>
 800a318:	6a3b      	ldr	r3, [r7, #32]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d022      	beq.n	800a364 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a324:	2b00      	cmp	r3, #0
 800a326:	bfcc      	ite	gt
 800a328:	2301      	movgt	r3, #1
 800a32a:	2300      	movle	r3, #0
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	895b      	ldrh	r3, [r3, #10]
 800a334:	2b00      	cmp	r3, #0
 800a336:	bf14      	ite	ne
 800a338:	2301      	movne	r3, #1
 800a33a:	2300      	moveq	r3, #0
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	899b      	ldrh	r3, [r3, #12]
 800a344:	2b00      	cmp	r3, #0
 800a346:	bf14      	ite	ne
 800a348:	2301      	movne	r3, #1
 800a34a:	2300      	moveq	r3, #0
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800a350:	69f8      	ldr	r0, [r7, #28]
 800a352:	f00d fd4f 	bl	8017df4 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	693a      	ldr	r2, [r7, #16]
 800a35a:	6979      	ldr	r1, [r7, #20]
 800a35c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a35e:	f000 f811 	bl	800a384 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800a362:	e006      	b.n	800a372 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800a364:	69f8      	ldr	r0, [r7, #28]
 800a366:	f00d fd45 	bl	8017df4 <sys_arch_unprotect>
 800a36a:	e002      	b.n	800a372 <event_callback+0x166>
    return;
 800a36c:	bf00      	nop
 800a36e:	e000      	b.n	800a372 <event_callback+0x166>
      return;
 800a370:	bf00      	nop
  }
  done_socket(sock);
}
 800a372:	3728      	adds	r7, #40	; 0x28
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	0801b83c 	.word	0x0801b83c
 800a37c:	0801bbb8 	.word	0x0801bbb8
 800a380:	0801b890 	.word	0x0801b890

0800a384 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b088      	sub	sp, #32
 800a388:	af02      	add	r7, sp, #8
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	60b9      	str	r1, [r7, #8]
 800a38e:	607a      	str	r2, [r7, #4]
 800a390:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800a392:	4b3d      	ldr	r3, [pc, #244]	; (800a488 <select_check_waiters+0x104>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	617b      	str	r3, [r7, #20]
 800a398:	e06f      	b.n	800a47a <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	69db      	ldr	r3, [r3, #28]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d168      	bne.n	800a474 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	695b      	ldr	r3, [r3, #20]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d009      	beq.n	800a3c2 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	9300      	str	r3, [sp, #0]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	68ba      	ldr	r2, [r7, #8]
 800a3b6:	68f9      	ldr	r1, [r7, #12]
 800a3b8:	6978      	ldr	r0, [r7, #20]
 800a3ba:	f7ff fee3 	bl	800a184 <lwip_poll_should_wake>
 800a3be:	6138      	str	r0, [r7, #16]
 800a3c0:	e04d      	b.n	800a45e <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d014      	beq.n	800a3f2 <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d010      	beq.n	800a3f2 <select_check_waiters+0x6e>
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	0952      	lsrs	r2, r2, #5
 800a3d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	f002 021f 	and.w	r2, r2, #31
 800a3e2:	2101      	movs	r1, #1
 800a3e4:	fa01 f202 	lsl.w	r2, r1, r2
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d001      	beq.n	800a3f2 <select_check_waiters+0x6e>
            do_signal = 1;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d017      	beq.n	800a428 <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d114      	bne.n	800a428 <select_check_waiters+0xa4>
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d010      	beq.n	800a428 <select_check_waiters+0xa4>
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	68fa      	ldr	r2, [r7, #12]
 800a40c:	0952      	lsrs	r2, r2, #5
 800a40e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	f002 021f 	and.w	r2, r2, #31
 800a418:	2101      	movs	r1, #1
 800a41a:	fa01 f202 	lsl.w	r2, r1, r2
 800a41e:	4013      	ands	r3, r2
 800a420:	2b00      	cmp	r3, #0
 800a422:	d001      	beq.n	800a428 <select_check_waiters+0xa4>
            do_signal = 1;
 800a424:	2301      	movs	r3, #1
 800a426:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d017      	beq.n	800a45e <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d114      	bne.n	800a45e <select_check_waiters+0xda>
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d010      	beq.n	800a45e <select_check_waiters+0xda>
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	691b      	ldr	r3, [r3, #16]
 800a440:	68fa      	ldr	r2, [r7, #12]
 800a442:	0952      	lsrs	r2, r2, #5
 800a444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	f002 021f 	and.w	r2, r2, #31
 800a44e:	2101      	movs	r1, #1
 800a450:	fa01 f202 	lsl.w	r2, r1, r2
 800a454:	4013      	ands	r3, r2
 800a456:	2b00      	cmp	r3, #0
 800a458:	d001      	beq.n	800a45e <select_check_waiters+0xda>
            do_signal = 1;
 800a45a:	2301      	movs	r3, #1
 800a45c:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d007      	beq.n	800a474 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	2201      	movs	r2, #1
 800a468:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	3320      	adds	r3, #32
 800a46e:	4618      	mov	r0, r3
 800a470:	f00d fc0e 	bl	8017c90 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	617b      	str	r3, [r7, #20]
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d18c      	bne.n	800a39a <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800a480:	bf00      	nop
 800a482:	3718      	adds	r7, #24
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}
 800a488:	200085f8 	.word	0x200085f8

0800a48c <lwip_ioctl>:
  return err;
}

int
lwip_ioctl(int s, long cmd, void *argp)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b08c      	sub	sp, #48	; 0x30
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock = get_socket(s);
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f7ff f823 	bl	80094e4 <get_socket>
 800a49e:	6278      	str	r0, [r7, #36]	; 0x24
  u8_t val;
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  if (!sock) {
 800a4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d102      	bne.n	800a4ac <lwip_ioctl+0x20>
    return -1;
 800a4a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a4aa:	e089      	b.n	800a5c0 <lwip_ioctl+0x134>
  }

  switch (cmd) {
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	4a46      	ldr	r2, [pc, #280]	; (800a5c8 <lwip_ioctl+0x13c>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d04e      	beq.n	800a552 <lwip_ioctl+0xc6>
 800a4b4:	4a45      	ldr	r2, [pc, #276]	; (800a5cc <lwip_ioctl+0x140>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d006      	beq.n	800a4c8 <lwip_ioctl+0x3c>
      sock_set_errno(sock, 0);
      done_socket(sock);
      return 0;

    default:
      break;
 800a4ba:	bf00      	nop
  } /* switch (cmd) */
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, UNIMPL: 0x%lx, %p)\n", s, cmd, argp));
  sock_set_errno(sock, ENOSYS); /* not yet implemented */
 800a4bc:	2326      	movs	r3, #38	; 0x26
 800a4be:	613b      	str	r3, [r7, #16]
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d07a      	beq.n	800a5bc <lwip_ioctl+0x130>
 800a4c6:	e076      	b.n	800a5b6 <lwip_ioctl+0x12a>
      if (!argp) {
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d10a      	bne.n	800a4e4 <lwip_ioctl+0x58>
        sock_set_errno(sock, EINVAL);
 800a4ce:	2316      	movs	r3, #22
 800a4d0:	61bb      	str	r3, [r7, #24]
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d002      	beq.n	800a4de <lwip_ioctl+0x52>
 800a4d8:	4a3d      	ldr	r2, [pc, #244]	; (800a5d0 <lwip_ioctl+0x144>)
 800a4da:	69bb      	ldr	r3, [r7, #24]
 800a4dc:	6013      	str	r3, [r2, #0]
        return -1;
 800a4de:	f04f 33ff 	mov.w	r3, #4294967295
 800a4e2:	e06d      	b.n	800a5c0 <lwip_ioctl+0x134>
      SYS_ARCH_GET(sock->conn->recv_avail, recv_avail);
 800a4e4:	f00d fc78 	bl	8017dd8 <sys_arch_protect>
 800a4e8:	6238      	str	r0, [r7, #32]
 800a4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	6a1b      	ldr	r3, [r3, #32]
 800a4f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4f2:	6a38      	ldr	r0, [r7, #32]
 800a4f4:	f00d fc7e 	bl	8017df4 <sys_arch_unprotect>
      if (recv_avail < 0) {
 800a4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	da01      	bge.n	800a502 <lwip_ioctl+0x76>
        recv_avail = 0;
 800a4fe:	2300      	movs	r3, #0
 800a500:	62bb      	str	r3, [r7, #40]	; 0x28
      if (sock->lastdata.netbuf) {
 800a502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d016      	beq.n	800a538 <lwip_ioctl+0xac>
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800a50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a514:	2b10      	cmp	r3, #16
 800a516:	d107      	bne.n	800a528 <lwip_ioctl+0x9c>
          recv_avail += sock->lastdata.pbuf->tot_len;
 800a518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	891b      	ldrh	r3, [r3, #8]
 800a51e:	461a      	mov	r2, r3
 800a520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a522:	4413      	add	r3, r2
 800a524:	62bb      	str	r3, [r7, #40]	; 0x28
 800a526:	e007      	b.n	800a538 <lwip_ioctl+0xac>
          recv_avail += sock->lastdata.netbuf->p->tot_len;
 800a528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	891b      	ldrh	r3, [r3, #8]
 800a530:	461a      	mov	r2, r3
 800a532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a534:	4413      	add	r3, r2
 800a536:	62bb      	str	r3, [r7, #40]	; 0x28
      *((int *)argp) = recv_avail;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a53c:	601a      	str	r2, [r3, #0]
      sock_set_errno(sock, 0);
 800a53e:	2300      	movs	r3, #0
 800a540:	61fb      	str	r3, [r7, #28]
 800a542:	69fb      	ldr	r3, [r7, #28]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d002      	beq.n	800a54e <lwip_ioctl+0xc2>
 800a548:	4a21      	ldr	r2, [pc, #132]	; (800a5d0 <lwip_ioctl+0x144>)
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	6013      	str	r3, [r2, #0]
      return 0;
 800a54e:	2300      	movs	r3, #0
 800a550:	e036      	b.n	800a5c0 <lwip_ioctl+0x134>
      val = 0;
 800a552:	2300      	movs	r3, #0
 800a554:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (argp && *(int *)argp) {
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d006      	beq.n	800a56c <lwip_ioctl+0xe0>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d002      	beq.n	800a56c <lwip_ioctl+0xe0>
        val = 1;
 800a566:	2301      	movs	r3, #1
 800a568:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      netconn_set_nonblocking(sock->conn, val);
 800a56c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a570:	2b00      	cmp	r3, #0
 800a572:	d00b      	beq.n	800a58c <lwip_ioctl+0x100>
 800a574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800a57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f042 0202 	orr.w	r2, r2, #2
 800a584:	b2d2      	uxtb	r2, r2
 800a586:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a58a:	e00a      	b.n	800a5a2 <lwip_ioctl+0x116>
 800a58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800a594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f022 0202 	bic.w	r2, r2, #2
 800a59c:	b2d2      	uxtb	r2, r2
 800a59e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      sock_set_errno(sock, 0);
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	617b      	str	r3, [r7, #20]
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d002      	beq.n	800a5b2 <lwip_ioctl+0x126>
 800a5ac:	4a08      	ldr	r2, [pc, #32]	; (800a5d0 <lwip_ioctl+0x144>)
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	6013      	str	r3, [r2, #0]
      return 0;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	e004      	b.n	800a5c0 <lwip_ioctl+0x134>
  sock_set_errno(sock, ENOSYS); /* not yet implemented */
 800a5b6:	4a06      	ldr	r2, [pc, #24]	; (800a5d0 <lwip_ioctl+0x144>)
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return -1;
 800a5bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3730      	adds	r7, #48	; 0x30
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	8004667e 	.word	0x8004667e
 800a5cc:	4004667f 	.word	0x4004667f
 800a5d0:	2000fd7c 	.word	0x2000fd7c

0800a5d4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a5de:	f008 f9b9 	bl	8012954 <sys_timeouts_sleeptime>
 800a5e2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ea:	d10b      	bne.n	800a604 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a5ec:	4813      	ldr	r0, [pc, #76]	; (800a63c <tcpip_timeouts_mbox_fetch+0x68>)
 800a5ee:	f00d fbc0 	bl	8017d72 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	6839      	ldr	r1, [r7, #0]
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f00d fa78 	bl	8017aec <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a5fc:	480f      	ldr	r0, [pc, #60]	; (800a63c <tcpip_timeouts_mbox_fetch+0x68>)
 800a5fe:	f00d fba9 	bl	8017d54 <sys_mutex_lock>
    return;
 800a602:	e018      	b.n	800a636 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d102      	bne.n	800a610 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a60a:	f008 f969 	bl	80128e0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a60e:	e7e6      	b.n	800a5de <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a610:	480a      	ldr	r0, [pc, #40]	; (800a63c <tcpip_timeouts_mbox_fetch+0x68>)
 800a612:	f00d fbae 	bl	8017d72 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a616:	68fa      	ldr	r2, [r7, #12]
 800a618:	6839      	ldr	r1, [r7, #0]
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f00d fa66 	bl	8017aec <sys_arch_mbox_fetch>
 800a620:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a622:	4806      	ldr	r0, [pc, #24]	; (800a63c <tcpip_timeouts_mbox_fetch+0x68>)
 800a624:	f00d fb96 	bl	8017d54 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a62e:	d102      	bne.n	800a636 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a630:	f008 f956 	bl	80128e0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a634:	e7d3      	b.n	800a5de <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a636:	3710      	adds	r7, #16
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	2000c5e0 	.word	0x2000c5e0

0800a640 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a648:	4810      	ldr	r0, [pc, #64]	; (800a68c <tcpip_thread+0x4c>)
 800a64a:	f00d fb83 	bl	8017d54 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a64e:	4b10      	ldr	r3, [pc, #64]	; (800a690 <tcpip_thread+0x50>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d005      	beq.n	800a662 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a656:	4b0e      	ldr	r3, [pc, #56]	; (800a690 <tcpip_thread+0x50>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a0e      	ldr	r2, [pc, #56]	; (800a694 <tcpip_thread+0x54>)
 800a65c:	6812      	ldr	r2, [r2, #0]
 800a65e:	4610      	mov	r0, r2
 800a660:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a662:	f107 030c 	add.w	r3, r7, #12
 800a666:	4619      	mov	r1, r3
 800a668:	480b      	ldr	r0, [pc, #44]	; (800a698 <tcpip_thread+0x58>)
 800a66a:	f7ff ffb3 	bl	800a5d4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d106      	bne.n	800a682 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a674:	4b09      	ldr	r3, [pc, #36]	; (800a69c <tcpip_thread+0x5c>)
 800a676:	2291      	movs	r2, #145	; 0x91
 800a678:	4909      	ldr	r1, [pc, #36]	; (800a6a0 <tcpip_thread+0x60>)
 800a67a:	480a      	ldr	r0, [pc, #40]	; (800a6a4 <tcpip_thread+0x64>)
 800a67c:	f00f fad0 	bl	8019c20 <iprintf>
      continue;
 800a680:	e003      	b.n	800a68a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	4618      	mov	r0, r3
 800a686:	f000 f80f 	bl	800a6a8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a68a:	e7ea      	b.n	800a662 <tcpip_thread+0x22>
 800a68c:	2000c5e0 	.word	0x2000c5e0
 800a690:	200085fc 	.word	0x200085fc
 800a694:	20008600 	.word	0x20008600
 800a698:	20008604 	.word	0x20008604
 800a69c:	0801bc0c 	.word	0x0801bc0c
 800a6a0:	0801bc3c 	.word	0x0801bc3c
 800a6a4:	0801bc5c 	.word	0x0801bc5c

0800a6a8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d018      	beq.n	800a6ea <tcpip_thread_handle_msg+0x42>
 800a6b8:	2b02      	cmp	r3, #2
 800a6ba:	d021      	beq.n	800a700 <tcpip_thread_handle_msg+0x58>
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d126      	bne.n	800a70e <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	6850      	ldr	r0, [r2, #4]
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	6892      	ldr	r2, [r2, #8]
 800a6cc:	4611      	mov	r1, r2
 800a6ce:	4798      	blx	r3
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d004      	beq.n	800a6e0 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f001 fd14 	bl	800c108 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a6e0:	6879      	ldr	r1, [r7, #4]
 800a6e2:	2009      	movs	r0, #9
 800a6e4:	f000 fe32 	bl	800b34c <memp_free>
      break;
 800a6e8:	e018      	b.n	800a71c <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	6892      	ldr	r2, [r2, #8]
 800a6f2:	4610      	mov	r0, r2
 800a6f4:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a6f6:	6879      	ldr	r1, [r7, #4]
 800a6f8:	2008      	movs	r0, #8
 800a6fa:	f000 fe27 	bl	800b34c <memp_free>
      break;
 800a6fe:	e00d      	b.n	800a71c <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	6892      	ldr	r2, [r2, #8]
 800a708:	4610      	mov	r0, r2
 800a70a:	4798      	blx	r3
      break;
 800a70c:	e006      	b.n	800a71c <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a70e:	4b05      	ldr	r3, [pc, #20]	; (800a724 <tcpip_thread_handle_msg+0x7c>)
 800a710:	22cf      	movs	r2, #207	; 0xcf
 800a712:	4905      	ldr	r1, [pc, #20]	; (800a728 <tcpip_thread_handle_msg+0x80>)
 800a714:	4805      	ldr	r0, [pc, #20]	; (800a72c <tcpip_thread_handle_msg+0x84>)
 800a716:	f00f fa83 	bl	8019c20 <iprintf>
      break;
 800a71a:	bf00      	nop
  }
}
 800a71c:	bf00      	nop
 800a71e:	3708      	adds	r7, #8
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}
 800a724:	0801bc0c 	.word	0x0801bc0c
 800a728:	0801bc3c 	.word	0x0801bc3c
 800a72c:	0801bc5c 	.word	0x0801bc5c

0800a730 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b086      	sub	sp, #24
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a73c:	481a      	ldr	r0, [pc, #104]	; (800a7a8 <tcpip_inpkt+0x78>)
 800a73e:	f00d fa30 	bl	8017ba2 <sys_mbox_valid>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d105      	bne.n	800a754 <tcpip_inpkt+0x24>
 800a748:	4b18      	ldr	r3, [pc, #96]	; (800a7ac <tcpip_inpkt+0x7c>)
 800a74a:	22fc      	movs	r2, #252	; 0xfc
 800a74c:	4918      	ldr	r1, [pc, #96]	; (800a7b0 <tcpip_inpkt+0x80>)
 800a74e:	4819      	ldr	r0, [pc, #100]	; (800a7b4 <tcpip_inpkt+0x84>)
 800a750:	f00f fa66 	bl	8019c20 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a754:	2009      	movs	r0, #9
 800a756:	f000 fda7 	bl	800b2a8 <memp_malloc>
 800a75a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d102      	bne.n	800a768 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a762:	f04f 33ff 	mov.w	r3, #4294967295
 800a766:	e01a      	b.n	800a79e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	2200      	movs	r2, #0
 800a76c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	68fa      	ldr	r2, [r7, #12]
 800a772:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	68ba      	ldr	r2, [r7, #8]
 800a778:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a780:	6979      	ldr	r1, [r7, #20]
 800a782:	4809      	ldr	r0, [pc, #36]	; (800a7a8 <tcpip_inpkt+0x78>)
 800a784:	f00d f998 	bl	8017ab8 <sys_mbox_trypost>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d006      	beq.n	800a79c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a78e:	6979      	ldr	r1, [r7, #20]
 800a790:	2009      	movs	r0, #9
 800a792:	f000 fddb 	bl	800b34c <memp_free>
    return ERR_MEM;
 800a796:	f04f 33ff 	mov.w	r3, #4294967295
 800a79a:	e000      	b.n	800a79e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a79c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3718      	adds	r7, #24
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	20008604 	.word	0x20008604
 800a7ac:	0801bc0c 	.word	0x0801bc0c
 800a7b0:	0801bc84 	.word	0x0801bc84
 800a7b4:	0801bc5c 	.word	0x0801bc5c

0800a7b8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a7c8:	f003 0318 	and.w	r3, r3, #24
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d006      	beq.n	800a7de <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a7d0:	4a08      	ldr	r2, [pc, #32]	; (800a7f4 <tcpip_input+0x3c>)
 800a7d2:	6839      	ldr	r1, [r7, #0]
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f7ff ffab 	bl	800a730 <tcpip_inpkt>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	e005      	b.n	800a7ea <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a7de:	4a06      	ldr	r2, [pc, #24]	; (800a7f8 <tcpip_input+0x40>)
 800a7e0:	6839      	ldr	r1, [r7, #0]
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f7ff ffa4 	bl	800a730 <tcpip_inpkt>
 800a7e8:	4603      	mov	r3, r0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3708      	adds	r7, #8
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	080178a5 	.word	0x080178a5
 800a7f8:	080164fd 	.word	0x080164fd

0800a7fc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a806:	4819      	ldr	r0, [pc, #100]	; (800a86c <tcpip_try_callback+0x70>)
 800a808:	f00d f9cb 	bl	8017ba2 <sys_mbox_valid>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d106      	bne.n	800a820 <tcpip_try_callback+0x24>
 800a812:	4b17      	ldr	r3, [pc, #92]	; (800a870 <tcpip_try_callback+0x74>)
 800a814:	f240 125d 	movw	r2, #349	; 0x15d
 800a818:	4916      	ldr	r1, [pc, #88]	; (800a874 <tcpip_try_callback+0x78>)
 800a81a:	4817      	ldr	r0, [pc, #92]	; (800a878 <tcpip_try_callback+0x7c>)
 800a81c:	f00f fa00 	bl	8019c20 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a820:	2008      	movs	r0, #8
 800a822:	f000 fd41 	bl	800b2a8 <memp_malloc>
 800a826:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d102      	bne.n	800a834 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a82e:	f04f 33ff 	mov.w	r3, #4294967295
 800a832:	e017      	b.n	800a864 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2201      	movs	r2, #1
 800a838:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	683a      	ldr	r2, [r7, #0]
 800a844:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a846:	68f9      	ldr	r1, [r7, #12]
 800a848:	4808      	ldr	r0, [pc, #32]	; (800a86c <tcpip_try_callback+0x70>)
 800a84a:	f00d f935 	bl	8017ab8 <sys_mbox_trypost>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d006      	beq.n	800a862 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a854:	68f9      	ldr	r1, [r7, #12]
 800a856:	2008      	movs	r0, #8
 800a858:	f000 fd78 	bl	800b34c <memp_free>
    return ERR_MEM;
 800a85c:	f04f 33ff 	mov.w	r3, #4294967295
 800a860:	e000      	b.n	800a864 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	20008604 	.word	0x20008604
 800a870:	0801bc0c 	.word	0x0801bc0c
 800a874:	0801bc84 	.word	0x0801bc84
 800a878:	0801bc5c 	.word	0x0801bc5c

0800a87c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a888:	4806      	ldr	r0, [pc, #24]	; (800a8a4 <tcpip_send_msg_wait_sem+0x28>)
 800a88a:	f00d fa63 	bl	8017d54 <sys_mutex_lock>
  fn(apimsg);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	68b8      	ldr	r0, [r7, #8]
 800a892:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a894:	4803      	ldr	r0, [pc, #12]	; (800a8a4 <tcpip_send_msg_wait_sem+0x28>)
 800a896:	f00d fa6c 	bl	8017d72 <sys_mutex_unlock>
  return ERR_OK;
 800a89a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3710      	adds	r7, #16
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}
 800a8a4:	2000c5e0 	.word	0x2000c5e0

0800a8a8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af02      	add	r7, sp, #8
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a8b2:	f000 f871 	bl	800a998 <lwip_init>

  tcpip_init_done = initfunc;
 800a8b6:	4a17      	ldr	r2, [pc, #92]	; (800a914 <tcpip_init+0x6c>)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a8bc:	4a16      	ldr	r2, [pc, #88]	; (800a918 <tcpip_init+0x70>)
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a8c2:	2106      	movs	r1, #6
 800a8c4:	4815      	ldr	r0, [pc, #84]	; (800a91c <tcpip_init+0x74>)
 800a8c6:	f00d f8c3 	bl	8017a50 <sys_mbox_new>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d006      	beq.n	800a8de <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a8d0:	4b13      	ldr	r3, [pc, #76]	; (800a920 <tcpip_init+0x78>)
 800a8d2:	f240 2261 	movw	r2, #609	; 0x261
 800a8d6:	4913      	ldr	r1, [pc, #76]	; (800a924 <tcpip_init+0x7c>)
 800a8d8:	4813      	ldr	r0, [pc, #76]	; (800a928 <tcpip_init+0x80>)
 800a8da:	f00f f9a1 	bl	8019c20 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a8de:	4813      	ldr	r0, [pc, #76]	; (800a92c <tcpip_init+0x84>)
 800a8e0:	f00d fa1c 	bl	8017d1c <sys_mutex_new>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d006      	beq.n	800a8f8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a8ea:	4b0d      	ldr	r3, [pc, #52]	; (800a920 <tcpip_init+0x78>)
 800a8ec:	f240 2265 	movw	r2, #613	; 0x265
 800a8f0:	490f      	ldr	r1, [pc, #60]	; (800a930 <tcpip_init+0x88>)
 800a8f2:	480d      	ldr	r0, [pc, #52]	; (800a928 <tcpip_init+0x80>)
 800a8f4:	f00f f994 	bl	8019c20 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	9300      	str	r3, [sp, #0]
 800a8fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a900:	2200      	movs	r2, #0
 800a902:	490c      	ldr	r1, [pc, #48]	; (800a934 <tcpip_init+0x8c>)
 800a904:	480c      	ldr	r0, [pc, #48]	; (800a938 <tcpip_init+0x90>)
 800a906:	f00d fa41 	bl	8017d8c <sys_thread_new>
}
 800a90a:	bf00      	nop
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	200085fc 	.word	0x200085fc
 800a918:	20008600 	.word	0x20008600
 800a91c:	20008604 	.word	0x20008604
 800a920:	0801bc0c 	.word	0x0801bc0c
 800a924:	0801bc94 	.word	0x0801bc94
 800a928:	0801bc5c 	.word	0x0801bc5c
 800a92c:	2000c5e0 	.word	0x2000c5e0
 800a930:	0801bcb8 	.word	0x0801bcb8
 800a934:	0800a641 	.word	0x0800a641
 800a938:	0801bcdc 	.word	0x0801bcdc

0800a93c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	4603      	mov	r3, r0
 800a944:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a946:	88fb      	ldrh	r3, [r7, #6]
 800a948:	021b      	lsls	r3, r3, #8
 800a94a:	b21a      	sxth	r2, r3
 800a94c:	88fb      	ldrh	r3, [r7, #6]
 800a94e:	0a1b      	lsrs	r3, r3, #8
 800a950:	b29b      	uxth	r3, r3
 800a952:	b21b      	sxth	r3, r3
 800a954:	4313      	orrs	r3, r2
 800a956:	b21b      	sxth	r3, r3
 800a958:	b29b      	uxth	r3, r3
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	370c      	adds	r7, #12
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr

0800a966 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a966:	b480      	push	{r7}
 800a968:	b083      	sub	sp, #12
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	061a      	lsls	r2, r3, #24
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	021b      	lsls	r3, r3, #8
 800a976:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a97a:	431a      	orrs	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	0a1b      	lsrs	r3, r3, #8
 800a980:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a984:	431a      	orrs	r2, r3
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	0e1b      	lsrs	r3, r3, #24
 800a98a:	4313      	orrs	r3, r2
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a9a2:	f00d f9ad 	bl	8017d00 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a9a6:	f000 f8d5 	bl	800ab54 <mem_init>
  memp_init();
 800a9aa:	f000 fc31 	bl	800b210 <memp_init>
  pbuf_init();
  netif_init();
 800a9ae:	f000 fcf7 	bl	800b3a0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a9b2:	f008 f807 	bl	80129c4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a9b6:	f001 fe51 	bl	800c65c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a9ba:	f007 ff4b 	bl	8012854 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a9be:	bf00      	nop
 800a9c0:	3708      	adds	r7, #8
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
	...

0800a9c8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a9d2:	4b05      	ldr	r3, [pc, #20]	; (800a9e8 <ptr_to_mem+0x20>)
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	88fb      	ldrh	r3, [r7, #6]
 800a9d8:	4413      	add	r3, r2
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	370c      	adds	r7, #12
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr
 800a9e6:	bf00      	nop
 800a9e8:	20008608 	.word	0x20008608

0800a9ec <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4a05      	ldr	r2, [pc, #20]	; (800aa0c <mem_to_ptr+0x20>)
 800a9f8:	6812      	ldr	r2, [r2, #0]
 800a9fa:	1a9b      	subs	r3, r3, r2
 800a9fc:	b29b      	uxth	r3, r3
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	370c      	adds	r7, #12
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	20008608 	.word	0x20008608

0800aa10 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800aa10:	b590      	push	{r4, r7, lr}
 800aa12:	b085      	sub	sp, #20
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800aa18:	4b45      	ldr	r3, [pc, #276]	; (800ab30 <plug_holes+0x120>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d206      	bcs.n	800aa30 <plug_holes+0x20>
 800aa22:	4b44      	ldr	r3, [pc, #272]	; (800ab34 <plug_holes+0x124>)
 800aa24:	f240 12df 	movw	r2, #479	; 0x1df
 800aa28:	4943      	ldr	r1, [pc, #268]	; (800ab38 <plug_holes+0x128>)
 800aa2a:	4844      	ldr	r0, [pc, #272]	; (800ab3c <plug_holes+0x12c>)
 800aa2c:	f00f f8f8 	bl	8019c20 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800aa30:	4b43      	ldr	r3, [pc, #268]	; (800ab40 <plug_holes+0x130>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d306      	bcc.n	800aa48 <plug_holes+0x38>
 800aa3a:	4b3e      	ldr	r3, [pc, #248]	; (800ab34 <plug_holes+0x124>)
 800aa3c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800aa40:	4940      	ldr	r1, [pc, #256]	; (800ab44 <plug_holes+0x134>)
 800aa42:	483e      	ldr	r0, [pc, #248]	; (800ab3c <plug_holes+0x12c>)
 800aa44:	f00f f8ec 	bl	8019c20 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	791b      	ldrb	r3, [r3, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d006      	beq.n	800aa5e <plug_holes+0x4e>
 800aa50:	4b38      	ldr	r3, [pc, #224]	; (800ab34 <plug_holes+0x124>)
 800aa52:	f240 12e1 	movw	r2, #481	; 0x1e1
 800aa56:	493c      	ldr	r1, [pc, #240]	; (800ab48 <plug_holes+0x138>)
 800aa58:	4838      	ldr	r0, [pc, #224]	; (800ab3c <plug_holes+0x12c>)
 800aa5a:	f00f f8e1 	bl	8019c20 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	881b      	ldrh	r3, [r3, #0]
 800aa62:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aa66:	d906      	bls.n	800aa76 <plug_holes+0x66>
 800aa68:	4b32      	ldr	r3, [pc, #200]	; (800ab34 <plug_holes+0x124>)
 800aa6a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800aa6e:	4937      	ldr	r1, [pc, #220]	; (800ab4c <plug_holes+0x13c>)
 800aa70:	4832      	ldr	r0, [pc, #200]	; (800ab3c <plug_holes+0x12c>)
 800aa72:	f00f f8d5 	bl	8019c20 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	881b      	ldrh	r3, [r3, #0]
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7ff ffa4 	bl	800a9c8 <ptr_to_mem>
 800aa80:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d024      	beq.n	800aad4 <plug_holes+0xc4>
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	791b      	ldrb	r3, [r3, #4]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d120      	bne.n	800aad4 <plug_holes+0xc4>
 800aa92:	4b2b      	ldr	r3, [pc, #172]	; (800ab40 <plug_holes+0x130>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	68fa      	ldr	r2, [r7, #12]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d01b      	beq.n	800aad4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800aa9c:	4b2c      	ldr	r3, [pc, #176]	; (800ab50 <plug_holes+0x140>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d102      	bne.n	800aaac <plug_holes+0x9c>
      lfree = mem;
 800aaa6:	4a2a      	ldr	r2, [pc, #168]	; (800ab50 <plug_holes+0x140>)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	881a      	ldrh	r2, [r3, #0]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	881b      	ldrh	r3, [r3, #0]
 800aab8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aabc:	d00a      	beq.n	800aad4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	881b      	ldrh	r3, [r3, #0]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7ff ff80 	bl	800a9c8 <ptr_to_mem>
 800aac8:	4604      	mov	r4, r0
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f7ff ff8e 	bl	800a9ec <mem_to_ptr>
 800aad0:	4603      	mov	r3, r0
 800aad2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	885b      	ldrh	r3, [r3, #2]
 800aad8:	4618      	mov	r0, r3
 800aada:	f7ff ff75 	bl	800a9c8 <ptr_to_mem>
 800aade:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d01f      	beq.n	800ab28 <plug_holes+0x118>
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	791b      	ldrb	r3, [r3, #4]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d11b      	bne.n	800ab28 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800aaf0:	4b17      	ldr	r3, [pc, #92]	; (800ab50 <plug_holes+0x140>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d102      	bne.n	800ab00 <plug_holes+0xf0>
      lfree = pmem;
 800aafa:	4a15      	ldr	r2, [pc, #84]	; (800ab50 <plug_holes+0x140>)
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	881a      	ldrh	r2, [r3, #0]
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	881b      	ldrh	r3, [r3, #0]
 800ab0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ab10:	d00a      	beq.n	800ab28 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	881b      	ldrh	r3, [r3, #0]
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7ff ff56 	bl	800a9c8 <ptr_to_mem>
 800ab1c:	4604      	mov	r4, r0
 800ab1e:	68b8      	ldr	r0, [r7, #8]
 800ab20:	f7ff ff64 	bl	800a9ec <mem_to_ptr>
 800ab24:	4603      	mov	r3, r0
 800ab26:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ab28:	bf00      	nop
 800ab2a:	3714      	adds	r7, #20
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd90      	pop	{r4, r7, pc}
 800ab30:	20008608 	.word	0x20008608
 800ab34:	0801bcec 	.word	0x0801bcec
 800ab38:	0801bd1c 	.word	0x0801bd1c
 800ab3c:	0801bd34 	.word	0x0801bd34
 800ab40:	2000860c 	.word	0x2000860c
 800ab44:	0801bd5c 	.word	0x0801bd5c
 800ab48:	0801bd78 	.word	0x0801bd78
 800ab4c:	0801bd94 	.word	0x0801bd94
 800ab50:	20008614 	.word	0x20008614

0800ab54 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ab5a:	4b1f      	ldr	r3, [pc, #124]	; (800abd8 <mem_init+0x84>)
 800ab5c:	3303      	adds	r3, #3
 800ab5e:	f023 0303 	bic.w	r3, r3, #3
 800ab62:	461a      	mov	r2, r3
 800ab64:	4b1d      	ldr	r3, [pc, #116]	; (800abdc <mem_init+0x88>)
 800ab66:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ab68:	4b1c      	ldr	r3, [pc, #112]	; (800abdc <mem_init+0x88>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ab74:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ab82:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800ab86:	f7ff ff1f 	bl	800a9c8 <ptr_to_mem>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	4b14      	ldr	r3, [pc, #80]	; (800abe0 <mem_init+0x8c>)
 800ab8e:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800ab90:	4b13      	ldr	r3, [pc, #76]	; (800abe0 <mem_init+0x8c>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2201      	movs	r2, #1
 800ab96:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ab98:	4b11      	ldr	r3, [pc, #68]	; (800abe0 <mem_init+0x8c>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800aba0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800aba2:	4b0f      	ldr	r3, [pc, #60]	; (800abe0 <mem_init+0x8c>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800abaa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800abac:	4b0b      	ldr	r3, [pc, #44]	; (800abdc <mem_init+0x88>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a0c      	ldr	r2, [pc, #48]	; (800abe4 <mem_init+0x90>)
 800abb2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800abb4:	480c      	ldr	r0, [pc, #48]	; (800abe8 <mem_init+0x94>)
 800abb6:	f00d f8b1 	bl	8017d1c <sys_mutex_new>
 800abba:	4603      	mov	r3, r0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d006      	beq.n	800abce <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800abc0:	4b0a      	ldr	r3, [pc, #40]	; (800abec <mem_init+0x98>)
 800abc2:	f240 221f 	movw	r2, #543	; 0x21f
 800abc6:	490a      	ldr	r1, [pc, #40]	; (800abf0 <mem_init+0x9c>)
 800abc8:	480a      	ldr	r0, [pc, #40]	; (800abf4 <mem_init+0xa0>)
 800abca:	f00f f829 	bl	8019c20 <iprintf>
  }
}
 800abce:	bf00      	nop
 800abd0:	3708      	adds	r7, #8
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	2000c5fc 	.word	0x2000c5fc
 800abdc:	20008608 	.word	0x20008608
 800abe0:	2000860c 	.word	0x2000860c
 800abe4:	20008614 	.word	0x20008614
 800abe8:	20008610 	.word	0x20008610
 800abec:	0801bcec 	.word	0x0801bcec
 800abf0:	0801bdc0 	.word	0x0801bdc0
 800abf4:	0801bd34 	.word	0x0801bd34

0800abf8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b086      	sub	sp, #24
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f7ff fef3 	bl	800a9ec <mem_to_ptr>
 800ac06:	4603      	mov	r3, r0
 800ac08:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	881b      	ldrh	r3, [r3, #0]
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7ff feda 	bl	800a9c8 <ptr_to_mem>
 800ac14:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	885b      	ldrh	r3, [r3, #2]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7ff fed4 	bl	800a9c8 <ptr_to_mem>
 800ac20:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	881b      	ldrh	r3, [r3, #0]
 800ac26:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ac2a:	d818      	bhi.n	800ac5e <mem_link_valid+0x66>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	885b      	ldrh	r3, [r3, #2]
 800ac30:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ac34:	d813      	bhi.n	800ac5e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ac3a:	8afa      	ldrh	r2, [r7, #22]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d004      	beq.n	800ac4a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	881b      	ldrh	r3, [r3, #0]
 800ac44:	8afa      	ldrh	r2, [r7, #22]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d109      	bne.n	800ac5e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ac4a:	4b08      	ldr	r3, [pc, #32]	; (800ac6c <mem_link_valid+0x74>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ac4e:	693a      	ldr	r2, [r7, #16]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d006      	beq.n	800ac62 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	885b      	ldrh	r3, [r3, #2]
 800ac58:	8afa      	ldrh	r2, [r7, #22]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d001      	beq.n	800ac62 <mem_link_valid+0x6a>
    return 0;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	e000      	b.n	800ac64 <mem_link_valid+0x6c>
  }
  return 1;
 800ac62:	2301      	movs	r3, #1
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3718      	adds	r7, #24
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	2000860c 	.word	0x2000860c

0800ac70 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b088      	sub	sp, #32
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d070      	beq.n	800ad60 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f003 0303 	and.w	r3, r3, #3
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d00d      	beq.n	800aca4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ac88:	4b37      	ldr	r3, [pc, #220]	; (800ad68 <mem_free+0xf8>)
 800ac8a:	f240 2273 	movw	r2, #627	; 0x273
 800ac8e:	4937      	ldr	r1, [pc, #220]	; (800ad6c <mem_free+0xfc>)
 800ac90:	4837      	ldr	r0, [pc, #220]	; (800ad70 <mem_free+0x100>)
 800ac92:	f00e ffc5 	bl	8019c20 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ac96:	f00d f89f 	bl	8017dd8 <sys_arch_protect>
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	68f8      	ldr	r0, [r7, #12]
 800ac9e:	f00d f8a9 	bl	8017df4 <sys_arch_unprotect>
    return;
 800aca2:	e05e      	b.n	800ad62 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	3b08      	subs	r3, #8
 800aca8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800acaa:	4b32      	ldr	r3, [pc, #200]	; (800ad74 <mem_free+0x104>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	69fa      	ldr	r2, [r7, #28]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d306      	bcc.n	800acc2 <mem_free+0x52>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f103 020c 	add.w	r2, r3, #12
 800acba:	4b2f      	ldr	r3, [pc, #188]	; (800ad78 <mem_free+0x108>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d90d      	bls.n	800acde <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800acc2:	4b29      	ldr	r3, [pc, #164]	; (800ad68 <mem_free+0xf8>)
 800acc4:	f240 227f 	movw	r2, #639	; 0x27f
 800acc8:	492c      	ldr	r1, [pc, #176]	; (800ad7c <mem_free+0x10c>)
 800acca:	4829      	ldr	r0, [pc, #164]	; (800ad70 <mem_free+0x100>)
 800accc:	f00e ffa8 	bl	8019c20 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800acd0:	f00d f882 	bl	8017dd8 <sys_arch_protect>
 800acd4:	6138      	str	r0, [r7, #16]
 800acd6:	6938      	ldr	r0, [r7, #16]
 800acd8:	f00d f88c 	bl	8017df4 <sys_arch_unprotect>
    return;
 800acdc:	e041      	b.n	800ad62 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800acde:	4828      	ldr	r0, [pc, #160]	; (800ad80 <mem_free+0x110>)
 800ace0:	f00d f838 	bl	8017d54 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	791b      	ldrb	r3, [r3, #4]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d110      	bne.n	800ad0e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800acec:	4b1e      	ldr	r3, [pc, #120]	; (800ad68 <mem_free+0xf8>)
 800acee:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800acf2:	4924      	ldr	r1, [pc, #144]	; (800ad84 <mem_free+0x114>)
 800acf4:	481e      	ldr	r0, [pc, #120]	; (800ad70 <mem_free+0x100>)
 800acf6:	f00e ff93 	bl	8019c20 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800acfa:	4821      	ldr	r0, [pc, #132]	; (800ad80 <mem_free+0x110>)
 800acfc:	f00d f839 	bl	8017d72 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ad00:	f00d f86a 	bl	8017dd8 <sys_arch_protect>
 800ad04:	6178      	str	r0, [r7, #20]
 800ad06:	6978      	ldr	r0, [r7, #20]
 800ad08:	f00d f874 	bl	8017df4 <sys_arch_unprotect>
    return;
 800ad0c:	e029      	b.n	800ad62 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ad0e:	69f8      	ldr	r0, [r7, #28]
 800ad10:	f7ff ff72 	bl	800abf8 <mem_link_valid>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d110      	bne.n	800ad3c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ad1a:	4b13      	ldr	r3, [pc, #76]	; (800ad68 <mem_free+0xf8>)
 800ad1c:	f240 2295 	movw	r2, #661	; 0x295
 800ad20:	4919      	ldr	r1, [pc, #100]	; (800ad88 <mem_free+0x118>)
 800ad22:	4813      	ldr	r0, [pc, #76]	; (800ad70 <mem_free+0x100>)
 800ad24:	f00e ff7c 	bl	8019c20 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ad28:	4815      	ldr	r0, [pc, #84]	; (800ad80 <mem_free+0x110>)
 800ad2a:	f00d f822 	bl	8017d72 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ad2e:	f00d f853 	bl	8017dd8 <sys_arch_protect>
 800ad32:	61b8      	str	r0, [r7, #24]
 800ad34:	69b8      	ldr	r0, [r7, #24]
 800ad36:	f00d f85d 	bl	8017df4 <sys_arch_unprotect>
    return;
 800ad3a:	e012      	b.n	800ad62 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ad42:	4b12      	ldr	r3, [pc, #72]	; (800ad8c <mem_free+0x11c>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	69fa      	ldr	r2, [r7, #28]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d202      	bcs.n	800ad52 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ad4c:	4a0f      	ldr	r2, [pc, #60]	; (800ad8c <mem_free+0x11c>)
 800ad4e:	69fb      	ldr	r3, [r7, #28]
 800ad50:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ad52:	69f8      	ldr	r0, [r7, #28]
 800ad54:	f7ff fe5c 	bl	800aa10 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ad58:	4809      	ldr	r0, [pc, #36]	; (800ad80 <mem_free+0x110>)
 800ad5a:	f00d f80a 	bl	8017d72 <sys_mutex_unlock>
 800ad5e:	e000      	b.n	800ad62 <mem_free+0xf2>
    return;
 800ad60:	bf00      	nop
}
 800ad62:	3720      	adds	r7, #32
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	0801bcec 	.word	0x0801bcec
 800ad6c:	0801bddc 	.word	0x0801bddc
 800ad70:	0801bd34 	.word	0x0801bd34
 800ad74:	20008608 	.word	0x20008608
 800ad78:	2000860c 	.word	0x2000860c
 800ad7c:	0801be00 	.word	0x0801be00
 800ad80:	20008610 	.word	0x20008610
 800ad84:	0801be1c 	.word	0x0801be1c
 800ad88:	0801be44 	.word	0x0801be44
 800ad8c:	20008614 	.word	0x20008614

0800ad90 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b088      	sub	sp, #32
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	460b      	mov	r3, r1
 800ad9a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ad9c:	887b      	ldrh	r3, [r7, #2]
 800ad9e:	3303      	adds	r3, #3
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	f023 0303 	bic.w	r3, r3, #3
 800ada6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ada8:	8bfb      	ldrh	r3, [r7, #30]
 800adaa:	2b0b      	cmp	r3, #11
 800adac:	d801      	bhi.n	800adb2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800adae:	230c      	movs	r3, #12
 800adb0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800adb2:	8bfb      	ldrh	r3, [r7, #30]
 800adb4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800adb8:	d803      	bhi.n	800adc2 <mem_trim+0x32>
 800adba:	8bfa      	ldrh	r2, [r7, #30]
 800adbc:	887b      	ldrh	r3, [r7, #2]
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d201      	bcs.n	800adc6 <mem_trim+0x36>
    return NULL;
 800adc2:	2300      	movs	r3, #0
 800adc4:	e0d8      	b.n	800af78 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800adc6:	4b6e      	ldr	r3, [pc, #440]	; (800af80 <mem_trim+0x1f0>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d304      	bcc.n	800adda <mem_trim+0x4a>
 800add0:	4b6c      	ldr	r3, [pc, #432]	; (800af84 <mem_trim+0x1f4>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	429a      	cmp	r2, r3
 800add8:	d306      	bcc.n	800ade8 <mem_trim+0x58>
 800adda:	4b6b      	ldr	r3, [pc, #428]	; (800af88 <mem_trim+0x1f8>)
 800addc:	f240 22d2 	movw	r2, #722	; 0x2d2
 800ade0:	496a      	ldr	r1, [pc, #424]	; (800af8c <mem_trim+0x1fc>)
 800ade2:	486b      	ldr	r0, [pc, #428]	; (800af90 <mem_trim+0x200>)
 800ade4:	f00e ff1c 	bl	8019c20 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ade8:	4b65      	ldr	r3, [pc, #404]	; (800af80 <mem_trim+0x1f0>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	429a      	cmp	r2, r3
 800adf0:	d304      	bcc.n	800adfc <mem_trim+0x6c>
 800adf2:	4b64      	ldr	r3, [pc, #400]	; (800af84 <mem_trim+0x1f4>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d307      	bcc.n	800ae0c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800adfc:	f00c ffec 	bl	8017dd8 <sys_arch_protect>
 800ae00:	60b8      	str	r0, [r7, #8]
 800ae02:	68b8      	ldr	r0, [r7, #8]
 800ae04:	f00c fff6 	bl	8017df4 <sys_arch_unprotect>
    return rmem;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	e0b5      	b.n	800af78 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	3b08      	subs	r3, #8
 800ae10:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ae12:	69b8      	ldr	r0, [r7, #24]
 800ae14:	f7ff fdea 	bl	800a9ec <mem_to_ptr>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	881a      	ldrh	r2, [r3, #0]
 800ae20:	8afb      	ldrh	r3, [r7, #22]
 800ae22:	1ad3      	subs	r3, r2, r3
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	3b08      	subs	r3, #8
 800ae28:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ae2a:	8bfa      	ldrh	r2, [r7, #30]
 800ae2c:	8abb      	ldrh	r3, [r7, #20]
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d906      	bls.n	800ae40 <mem_trim+0xb0>
 800ae32:	4b55      	ldr	r3, [pc, #340]	; (800af88 <mem_trim+0x1f8>)
 800ae34:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800ae38:	4956      	ldr	r1, [pc, #344]	; (800af94 <mem_trim+0x204>)
 800ae3a:	4855      	ldr	r0, [pc, #340]	; (800af90 <mem_trim+0x200>)
 800ae3c:	f00e fef0 	bl	8019c20 <iprintf>
  if (newsize > size) {
 800ae40:	8bfa      	ldrh	r2, [r7, #30]
 800ae42:	8abb      	ldrh	r3, [r7, #20]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d901      	bls.n	800ae4c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	e095      	b.n	800af78 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800ae4c:	8bfa      	ldrh	r2, [r7, #30]
 800ae4e:	8abb      	ldrh	r3, [r7, #20]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d101      	bne.n	800ae58 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	e08f      	b.n	800af78 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ae58:	484f      	ldr	r0, [pc, #316]	; (800af98 <mem_trim+0x208>)
 800ae5a:	f00c ff7b 	bl	8017d54 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ae5e:	69bb      	ldr	r3, [r7, #24]
 800ae60:	881b      	ldrh	r3, [r3, #0]
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7ff fdb0 	bl	800a9c8 <ptr_to_mem>
 800ae68:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	791b      	ldrb	r3, [r3, #4]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d13f      	bne.n	800aef2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ae72:	69bb      	ldr	r3, [r7, #24]
 800ae74:	881b      	ldrh	r3, [r3, #0]
 800ae76:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae7a:	d106      	bne.n	800ae8a <mem_trim+0xfa>
 800ae7c:	4b42      	ldr	r3, [pc, #264]	; (800af88 <mem_trim+0x1f8>)
 800ae7e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ae82:	4946      	ldr	r1, [pc, #280]	; (800af9c <mem_trim+0x20c>)
 800ae84:	4842      	ldr	r0, [pc, #264]	; (800af90 <mem_trim+0x200>)
 800ae86:	f00e fecb 	bl	8019c20 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	881b      	ldrh	r3, [r3, #0]
 800ae8e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ae90:	8afa      	ldrh	r2, [r7, #22]
 800ae92:	8bfb      	ldrh	r3, [r7, #30]
 800ae94:	4413      	add	r3, r2
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	3308      	adds	r3, #8
 800ae9a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ae9c:	4b40      	ldr	r3, [pc, #256]	; (800afa0 <mem_trim+0x210>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	693a      	ldr	r2, [r7, #16]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d106      	bne.n	800aeb4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800aea6:	89fb      	ldrh	r3, [r7, #14]
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7ff fd8d 	bl	800a9c8 <ptr_to_mem>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	4b3b      	ldr	r3, [pc, #236]	; (800afa0 <mem_trim+0x210>)
 800aeb2:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800aeb4:	89fb      	ldrh	r3, [r7, #14]
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7ff fd86 	bl	800a9c8 <ptr_to_mem>
 800aebc:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	2200      	movs	r2, #0
 800aec2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	89ba      	ldrh	r2, [r7, #12]
 800aec8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	8afa      	ldrh	r2, [r7, #22]
 800aece:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800aed0:	69bb      	ldr	r3, [r7, #24]
 800aed2:	89fa      	ldrh	r2, [r7, #14]
 800aed4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	881b      	ldrh	r3, [r3, #0]
 800aeda:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aede:	d047      	beq.n	800af70 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	881b      	ldrh	r3, [r3, #0]
 800aee4:	4618      	mov	r0, r3
 800aee6:	f7ff fd6f 	bl	800a9c8 <ptr_to_mem>
 800aeea:	4602      	mov	r2, r0
 800aeec:	89fb      	ldrh	r3, [r7, #14]
 800aeee:	8053      	strh	r3, [r2, #2]
 800aef0:	e03e      	b.n	800af70 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800aef2:	8bfb      	ldrh	r3, [r7, #30]
 800aef4:	f103 0214 	add.w	r2, r3, #20
 800aef8:	8abb      	ldrh	r3, [r7, #20]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d838      	bhi.n	800af70 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800aefe:	8afa      	ldrh	r2, [r7, #22]
 800af00:	8bfb      	ldrh	r3, [r7, #30]
 800af02:	4413      	add	r3, r2
 800af04:	b29b      	uxth	r3, r3
 800af06:	3308      	adds	r3, #8
 800af08:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800af0a:	69bb      	ldr	r3, [r7, #24]
 800af0c:	881b      	ldrh	r3, [r3, #0]
 800af0e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af12:	d106      	bne.n	800af22 <mem_trim+0x192>
 800af14:	4b1c      	ldr	r3, [pc, #112]	; (800af88 <mem_trim+0x1f8>)
 800af16:	f240 3216 	movw	r2, #790	; 0x316
 800af1a:	4920      	ldr	r1, [pc, #128]	; (800af9c <mem_trim+0x20c>)
 800af1c:	481c      	ldr	r0, [pc, #112]	; (800af90 <mem_trim+0x200>)
 800af1e:	f00e fe7f 	bl	8019c20 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800af22:	89fb      	ldrh	r3, [r7, #14]
 800af24:	4618      	mov	r0, r3
 800af26:	f7ff fd4f 	bl	800a9c8 <ptr_to_mem>
 800af2a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800af2c:	4b1c      	ldr	r3, [pc, #112]	; (800afa0 <mem_trim+0x210>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	693a      	ldr	r2, [r7, #16]
 800af32:	429a      	cmp	r2, r3
 800af34:	d202      	bcs.n	800af3c <mem_trim+0x1ac>
      lfree = mem2;
 800af36:	4a1a      	ldr	r2, [pc, #104]	; (800afa0 <mem_trim+0x210>)
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	2200      	movs	r2, #0
 800af40:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800af42:	69bb      	ldr	r3, [r7, #24]
 800af44:	881a      	ldrh	r2, [r3, #0]
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	8afa      	ldrh	r2, [r7, #22]
 800af4e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	89fa      	ldrh	r2, [r7, #14]
 800af54:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	881b      	ldrh	r3, [r3, #0]
 800af5a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af5e:	d007      	beq.n	800af70 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	881b      	ldrh	r3, [r3, #0]
 800af64:	4618      	mov	r0, r3
 800af66:	f7ff fd2f 	bl	800a9c8 <ptr_to_mem>
 800af6a:	4602      	mov	r2, r0
 800af6c:	89fb      	ldrh	r3, [r7, #14]
 800af6e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800af70:	4809      	ldr	r0, [pc, #36]	; (800af98 <mem_trim+0x208>)
 800af72:	f00c fefe 	bl	8017d72 <sys_mutex_unlock>
  return rmem;
 800af76:	687b      	ldr	r3, [r7, #4]
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3720      	adds	r7, #32
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	20008608 	.word	0x20008608
 800af84:	2000860c 	.word	0x2000860c
 800af88:	0801bcec 	.word	0x0801bcec
 800af8c:	0801be78 	.word	0x0801be78
 800af90:	0801bd34 	.word	0x0801bd34
 800af94:	0801be90 	.word	0x0801be90
 800af98:	20008610 	.word	0x20008610
 800af9c:	0801beb0 	.word	0x0801beb0
 800afa0:	20008614 	.word	0x20008614

0800afa4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b088      	sub	sp, #32
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	4603      	mov	r3, r0
 800afac:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800afae:	88fb      	ldrh	r3, [r7, #6]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d101      	bne.n	800afb8 <mem_malloc+0x14>
    return NULL;
 800afb4:	2300      	movs	r3, #0
 800afb6:	e0e2      	b.n	800b17e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800afb8:	88fb      	ldrh	r3, [r7, #6]
 800afba:	3303      	adds	r3, #3
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	f023 0303 	bic.w	r3, r3, #3
 800afc2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800afc4:	8bbb      	ldrh	r3, [r7, #28]
 800afc6:	2b0b      	cmp	r3, #11
 800afc8:	d801      	bhi.n	800afce <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800afca:	230c      	movs	r3, #12
 800afcc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800afce:	8bbb      	ldrh	r3, [r7, #28]
 800afd0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800afd4:	d803      	bhi.n	800afde <mem_malloc+0x3a>
 800afd6:	8bba      	ldrh	r2, [r7, #28]
 800afd8:	88fb      	ldrh	r3, [r7, #6]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d201      	bcs.n	800afe2 <mem_malloc+0x3e>
    return NULL;
 800afde:	2300      	movs	r3, #0
 800afe0:	e0cd      	b.n	800b17e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800afe2:	4869      	ldr	r0, [pc, #420]	; (800b188 <mem_malloc+0x1e4>)
 800afe4:	f00c feb6 	bl	8017d54 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800afe8:	4b68      	ldr	r3, [pc, #416]	; (800b18c <mem_malloc+0x1e8>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4618      	mov	r0, r3
 800afee:	f7ff fcfd 	bl	800a9ec <mem_to_ptr>
 800aff2:	4603      	mov	r3, r0
 800aff4:	83fb      	strh	r3, [r7, #30]
 800aff6:	e0b7      	b.n	800b168 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800aff8:	8bfb      	ldrh	r3, [r7, #30]
 800affa:	4618      	mov	r0, r3
 800affc:	f7ff fce4 	bl	800a9c8 <ptr_to_mem>
 800b000:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	791b      	ldrb	r3, [r3, #4]
 800b006:	2b00      	cmp	r3, #0
 800b008:	f040 80a7 	bne.w	800b15a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	881b      	ldrh	r3, [r3, #0]
 800b010:	461a      	mov	r2, r3
 800b012:	8bfb      	ldrh	r3, [r7, #30]
 800b014:	1ad3      	subs	r3, r2, r3
 800b016:	f1a3 0208 	sub.w	r2, r3, #8
 800b01a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b01c:	429a      	cmp	r2, r3
 800b01e:	f0c0 809c 	bcc.w	800b15a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	881b      	ldrh	r3, [r3, #0]
 800b026:	461a      	mov	r2, r3
 800b028:	8bfb      	ldrh	r3, [r7, #30]
 800b02a:	1ad3      	subs	r3, r2, r3
 800b02c:	f1a3 0208 	sub.w	r2, r3, #8
 800b030:	8bbb      	ldrh	r3, [r7, #28]
 800b032:	3314      	adds	r3, #20
 800b034:	429a      	cmp	r2, r3
 800b036:	d333      	bcc.n	800b0a0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b038:	8bfa      	ldrh	r2, [r7, #30]
 800b03a:	8bbb      	ldrh	r3, [r7, #28]
 800b03c:	4413      	add	r3, r2
 800b03e:	b29b      	uxth	r3, r3
 800b040:	3308      	adds	r3, #8
 800b042:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b044:	8a7b      	ldrh	r3, [r7, #18]
 800b046:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b04a:	d106      	bne.n	800b05a <mem_malloc+0xb6>
 800b04c:	4b50      	ldr	r3, [pc, #320]	; (800b190 <mem_malloc+0x1ec>)
 800b04e:	f240 3287 	movw	r2, #903	; 0x387
 800b052:	4950      	ldr	r1, [pc, #320]	; (800b194 <mem_malloc+0x1f0>)
 800b054:	4850      	ldr	r0, [pc, #320]	; (800b198 <mem_malloc+0x1f4>)
 800b056:	f00e fde3 	bl	8019c20 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b05a:	8a7b      	ldrh	r3, [r7, #18]
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7ff fcb3 	bl	800a9c8 <ptr_to_mem>
 800b062:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2200      	movs	r2, #0
 800b068:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	881a      	ldrh	r2, [r3, #0]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	8bfa      	ldrh	r2, [r7, #30]
 800b076:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	8a7a      	ldrh	r2, [r7, #18]
 800b07c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	2201      	movs	r2, #1
 800b082:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	881b      	ldrh	r3, [r3, #0]
 800b088:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b08c:	d00b      	beq.n	800b0a6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	881b      	ldrh	r3, [r3, #0]
 800b092:	4618      	mov	r0, r3
 800b094:	f7ff fc98 	bl	800a9c8 <ptr_to_mem>
 800b098:	4602      	mov	r2, r0
 800b09a:	8a7b      	ldrh	r3, [r7, #18]
 800b09c:	8053      	strh	r3, [r2, #2]
 800b09e:	e002      	b.n	800b0a6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b0a6:	4b39      	ldr	r3, [pc, #228]	; (800b18c <mem_malloc+0x1e8>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	697a      	ldr	r2, [r7, #20]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d127      	bne.n	800b100 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800b0b0:	4b36      	ldr	r3, [pc, #216]	; (800b18c <mem_malloc+0x1e8>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b0b6:	e005      	b.n	800b0c4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	881b      	ldrh	r3, [r3, #0]
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7ff fc83 	bl	800a9c8 <ptr_to_mem>
 800b0c2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b0c4:	69bb      	ldr	r3, [r7, #24]
 800b0c6:	791b      	ldrb	r3, [r3, #4]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d004      	beq.n	800b0d6 <mem_malloc+0x132>
 800b0cc:	4b33      	ldr	r3, [pc, #204]	; (800b19c <mem_malloc+0x1f8>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	69ba      	ldr	r2, [r7, #24]
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d1f0      	bne.n	800b0b8 <mem_malloc+0x114>
          }
          lfree = cur;
 800b0d6:	4a2d      	ldr	r2, [pc, #180]	; (800b18c <mem_malloc+0x1e8>)
 800b0d8:	69bb      	ldr	r3, [r7, #24]
 800b0da:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b0dc:	4b2b      	ldr	r3, [pc, #172]	; (800b18c <mem_malloc+0x1e8>)
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	4b2e      	ldr	r3, [pc, #184]	; (800b19c <mem_malloc+0x1f8>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d00b      	beq.n	800b100 <mem_malloc+0x15c>
 800b0e8:	4b28      	ldr	r3, [pc, #160]	; (800b18c <mem_malloc+0x1e8>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	791b      	ldrb	r3, [r3, #4]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d006      	beq.n	800b100 <mem_malloc+0x15c>
 800b0f2:	4b27      	ldr	r3, [pc, #156]	; (800b190 <mem_malloc+0x1ec>)
 800b0f4:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b0f8:	4929      	ldr	r1, [pc, #164]	; (800b1a0 <mem_malloc+0x1fc>)
 800b0fa:	4827      	ldr	r0, [pc, #156]	; (800b198 <mem_malloc+0x1f4>)
 800b0fc:	f00e fd90 	bl	8019c20 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b100:	4821      	ldr	r0, [pc, #132]	; (800b188 <mem_malloc+0x1e4>)
 800b102:	f00c fe36 	bl	8017d72 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b106:	8bba      	ldrh	r2, [r7, #28]
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	4413      	add	r3, r2
 800b10c:	3308      	adds	r3, #8
 800b10e:	4a23      	ldr	r2, [pc, #140]	; (800b19c <mem_malloc+0x1f8>)
 800b110:	6812      	ldr	r2, [r2, #0]
 800b112:	4293      	cmp	r3, r2
 800b114:	d906      	bls.n	800b124 <mem_malloc+0x180>
 800b116:	4b1e      	ldr	r3, [pc, #120]	; (800b190 <mem_malloc+0x1ec>)
 800b118:	f240 32ba 	movw	r2, #954	; 0x3ba
 800b11c:	4921      	ldr	r1, [pc, #132]	; (800b1a4 <mem_malloc+0x200>)
 800b11e:	481e      	ldr	r0, [pc, #120]	; (800b198 <mem_malloc+0x1f4>)
 800b120:	f00e fd7e 	bl	8019c20 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	f003 0303 	and.w	r3, r3, #3
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d006      	beq.n	800b13c <mem_malloc+0x198>
 800b12e:	4b18      	ldr	r3, [pc, #96]	; (800b190 <mem_malloc+0x1ec>)
 800b130:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800b134:	491c      	ldr	r1, [pc, #112]	; (800b1a8 <mem_malloc+0x204>)
 800b136:	4818      	ldr	r0, [pc, #96]	; (800b198 <mem_malloc+0x1f4>)
 800b138:	f00e fd72 	bl	8019c20 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	f003 0303 	and.w	r3, r3, #3
 800b142:	2b00      	cmp	r3, #0
 800b144:	d006      	beq.n	800b154 <mem_malloc+0x1b0>
 800b146:	4b12      	ldr	r3, [pc, #72]	; (800b190 <mem_malloc+0x1ec>)
 800b148:	f240 32be 	movw	r2, #958	; 0x3be
 800b14c:	4917      	ldr	r1, [pc, #92]	; (800b1ac <mem_malloc+0x208>)
 800b14e:	4812      	ldr	r0, [pc, #72]	; (800b198 <mem_malloc+0x1f4>)
 800b150:	f00e fd66 	bl	8019c20 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	3308      	adds	r3, #8
 800b158:	e011      	b.n	800b17e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800b15a:	8bfb      	ldrh	r3, [r7, #30]
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7ff fc33 	bl	800a9c8 <ptr_to_mem>
 800b162:	4603      	mov	r3, r0
 800b164:	881b      	ldrh	r3, [r3, #0]
 800b166:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b168:	8bfa      	ldrh	r2, [r7, #30]
 800b16a:	8bbb      	ldrh	r3, [r7, #28]
 800b16c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b170:	429a      	cmp	r2, r3
 800b172:	f4ff af41 	bcc.w	800aff8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b176:	4804      	ldr	r0, [pc, #16]	; (800b188 <mem_malloc+0x1e4>)
 800b178:	f00c fdfb 	bl	8017d72 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b17c:	2300      	movs	r3, #0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3720      	adds	r7, #32
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	20008610 	.word	0x20008610
 800b18c:	20008614 	.word	0x20008614
 800b190:	0801bcec 	.word	0x0801bcec
 800b194:	0801beb0 	.word	0x0801beb0
 800b198:	0801bd34 	.word	0x0801bd34
 800b19c:	2000860c 	.word	0x2000860c
 800b1a0:	0801bec4 	.word	0x0801bec4
 800b1a4:	0801bee0 	.word	0x0801bee0
 800b1a8:	0801bf10 	.word	0x0801bf10
 800b1ac:	0801bf40 	.word	0x0801bf40

0800b1b0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b085      	sub	sp, #20
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	3303      	adds	r3, #3
 800b1c6:	f023 0303 	bic.w	r3, r3, #3
 800b1ca:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	60fb      	str	r3, [r7, #12]
 800b1d0:	e011      	b.n	800b1f6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	681a      	ldr	r2, [r3, #0]
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	68ba      	ldr	r2, [r7, #8]
 800b1e2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	881b      	ldrh	r3, [r3, #0]
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	60fb      	str	r3, [r7, #12]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	885b      	ldrh	r3, [r3, #2]
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	4293      	cmp	r3, r2
 800b200:	dbe7      	blt.n	800b1d2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b202:	bf00      	nop
 800b204:	3714      	adds	r7, #20
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr
	...

0800b210 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b216:	2300      	movs	r3, #0
 800b218:	80fb      	strh	r3, [r7, #6]
 800b21a:	e009      	b.n	800b230 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b21c:	88fb      	ldrh	r3, [r7, #6]
 800b21e:	4a08      	ldr	r2, [pc, #32]	; (800b240 <memp_init+0x30>)
 800b220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b224:	4618      	mov	r0, r3
 800b226:	f7ff ffc3 	bl	800b1b0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b22a:	88fb      	ldrh	r3, [r7, #6]
 800b22c:	3301      	adds	r3, #1
 800b22e:	80fb      	strh	r3, [r7, #6]
 800b230:	88fb      	ldrh	r3, [r7, #6]
 800b232:	2b0c      	cmp	r3, #12
 800b234:	d9f2      	bls.n	800b21c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b236:	bf00      	nop
 800b238:	3708      	adds	r7, #8
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	0801ec08 	.word	0x0801ec08

0800b244 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b24c:	f00c fdc4 	bl	8017dd8 <sys_arch_protect>
 800b250:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d015      	beq.n	800b28c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	68ba      	ldr	r2, [r7, #8]
 800b266:	6812      	ldr	r2, [r2, #0]
 800b268:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	f003 0303 	and.w	r3, r3, #3
 800b270:	2b00      	cmp	r3, #0
 800b272:	d006      	beq.n	800b282 <do_memp_malloc_pool+0x3e>
 800b274:	4b09      	ldr	r3, [pc, #36]	; (800b29c <do_memp_malloc_pool+0x58>)
 800b276:	f240 1219 	movw	r2, #281	; 0x119
 800b27a:	4909      	ldr	r1, [pc, #36]	; (800b2a0 <do_memp_malloc_pool+0x5c>)
 800b27c:	4809      	ldr	r0, [pc, #36]	; (800b2a4 <do_memp_malloc_pool+0x60>)
 800b27e:	f00e fccf 	bl	8019c20 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f00c fdb6 	bl	8017df4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	e003      	b.n	800b294 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b28c:	68f8      	ldr	r0, [r7, #12]
 800b28e:	f00c fdb1 	bl	8017df4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b292:	2300      	movs	r3, #0
}
 800b294:	4618      	mov	r0, r3
 800b296:	3710      	adds	r7, #16
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}
 800b29c:	0801bf64 	.word	0x0801bf64
 800b2a0:	0801bf94 	.word	0x0801bf94
 800b2a4:	0801bfb8 	.word	0x0801bfb8

0800b2a8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b084      	sub	sp, #16
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b2b2:	79fb      	ldrb	r3, [r7, #7]
 800b2b4:	2b0c      	cmp	r3, #12
 800b2b6:	d908      	bls.n	800b2ca <memp_malloc+0x22>
 800b2b8:	4b0a      	ldr	r3, [pc, #40]	; (800b2e4 <memp_malloc+0x3c>)
 800b2ba:	f240 1257 	movw	r2, #343	; 0x157
 800b2be:	490a      	ldr	r1, [pc, #40]	; (800b2e8 <memp_malloc+0x40>)
 800b2c0:	480a      	ldr	r0, [pc, #40]	; (800b2ec <memp_malloc+0x44>)
 800b2c2:	f00e fcad 	bl	8019c20 <iprintf>
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	e008      	b.n	800b2dc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b2ca:	79fb      	ldrb	r3, [r7, #7]
 800b2cc:	4a08      	ldr	r2, [pc, #32]	; (800b2f0 <memp_malloc+0x48>)
 800b2ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f7ff ffb6 	bl	800b244 <do_memp_malloc_pool>
 800b2d8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b2da:	68fb      	ldr	r3, [r7, #12]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3710      	adds	r7, #16
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	0801bf64 	.word	0x0801bf64
 800b2e8:	0801bff4 	.word	0x0801bff4
 800b2ec:	0801bfb8 	.word	0x0801bfb8
 800b2f0:	0801ec08 	.word	0x0801ec08

0800b2f4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	f003 0303 	and.w	r3, r3, #3
 800b304:	2b00      	cmp	r3, #0
 800b306:	d006      	beq.n	800b316 <do_memp_free_pool+0x22>
 800b308:	4b0d      	ldr	r3, [pc, #52]	; (800b340 <do_memp_free_pool+0x4c>)
 800b30a:	f240 126d 	movw	r2, #365	; 0x16d
 800b30e:	490d      	ldr	r1, [pc, #52]	; (800b344 <do_memp_free_pool+0x50>)
 800b310:	480d      	ldr	r0, [pc, #52]	; (800b348 <do_memp_free_pool+0x54>)
 800b312:	f00e fc85 	bl	8019c20 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b31a:	f00c fd5d 	bl	8017dd8 <sys_arch_protect>
 800b31e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	68fa      	ldr	r2, [r7, #12]
 800b330:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b332:	68b8      	ldr	r0, [r7, #8]
 800b334:	f00c fd5e 	bl	8017df4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b338:	bf00      	nop
 800b33a:	3710      	adds	r7, #16
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	0801bf64 	.word	0x0801bf64
 800b344:	0801c014 	.word	0x0801c014
 800b348:	0801bfb8 	.word	0x0801bfb8

0800b34c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b082      	sub	sp, #8
 800b350:	af00      	add	r7, sp, #0
 800b352:	4603      	mov	r3, r0
 800b354:	6039      	str	r1, [r7, #0]
 800b356:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b358:	79fb      	ldrb	r3, [r7, #7]
 800b35a:	2b0c      	cmp	r3, #12
 800b35c:	d907      	bls.n	800b36e <memp_free+0x22>
 800b35e:	4b0c      	ldr	r3, [pc, #48]	; (800b390 <memp_free+0x44>)
 800b360:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b364:	490b      	ldr	r1, [pc, #44]	; (800b394 <memp_free+0x48>)
 800b366:	480c      	ldr	r0, [pc, #48]	; (800b398 <memp_free+0x4c>)
 800b368:	f00e fc5a 	bl	8019c20 <iprintf>
 800b36c:	e00c      	b.n	800b388 <memp_free+0x3c>

  if (mem == NULL) {
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d008      	beq.n	800b386 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b374:	79fb      	ldrb	r3, [r7, #7]
 800b376:	4a09      	ldr	r2, [pc, #36]	; (800b39c <memp_free+0x50>)
 800b378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b37c:	6839      	ldr	r1, [r7, #0]
 800b37e:	4618      	mov	r0, r3
 800b380:	f7ff ffb8 	bl	800b2f4 <do_memp_free_pool>
 800b384:	e000      	b.n	800b388 <memp_free+0x3c>
    return;
 800b386:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b388:	3708      	adds	r7, #8
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	0801bf64 	.word	0x0801bf64
 800b394:	0801c034 	.word	0x0801c034
 800b398:	0801bfb8 	.word	0x0801bfb8
 800b39c:	0801ec08 	.word	0x0801ec08

0800b3a0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b3a4:	bf00      	nop
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr
	...

0800b3b0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b086      	sub	sp, #24
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	60f8      	str	r0, [r7, #12]
 800b3b8:	60b9      	str	r1, [r7, #8]
 800b3ba:	607a      	str	r2, [r7, #4]
 800b3bc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d108      	bne.n	800b3d6 <netif_add+0x26>
 800b3c4:	4b5b      	ldr	r3, [pc, #364]	; (800b534 <netif_add+0x184>)
 800b3c6:	f240 1227 	movw	r2, #295	; 0x127
 800b3ca:	495b      	ldr	r1, [pc, #364]	; (800b538 <netif_add+0x188>)
 800b3cc:	485b      	ldr	r0, [pc, #364]	; (800b53c <netif_add+0x18c>)
 800b3ce:	f00e fc27 	bl	8019c20 <iprintf>
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	e0a9      	b.n	800b52a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d108      	bne.n	800b3ee <netif_add+0x3e>
 800b3dc:	4b55      	ldr	r3, [pc, #340]	; (800b534 <netif_add+0x184>)
 800b3de:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b3e2:	4957      	ldr	r1, [pc, #348]	; (800b540 <netif_add+0x190>)
 800b3e4:	4855      	ldr	r0, [pc, #340]	; (800b53c <netif_add+0x18c>)
 800b3e6:	f00e fc1b 	bl	8019c20 <iprintf>
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	e09d      	b.n	800b52a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d101      	bne.n	800b3f8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b3f4:	4b53      	ldr	r3, [pc, #332]	; (800b544 <netif_add+0x194>)
 800b3f6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d101      	bne.n	800b402 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b3fe:	4b51      	ldr	r3, [pc, #324]	; (800b544 <netif_add+0x194>)
 800b400:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d101      	bne.n	800b40c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b408:	4b4e      	ldr	r3, [pc, #312]	; (800b544 <netif_add+0x194>)
 800b40a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2200      	movs	r2, #0
 800b410:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2200      	movs	r2, #0
 800b416:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2200      	movs	r2, #0
 800b41c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	4a49      	ldr	r2, [pc, #292]	; (800b548 <netif_add+0x198>)
 800b422:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2200      	movs	r2, #0
 800b428:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2200      	movs	r2, #0
 800b42e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	3324      	adds	r3, #36	; 0x24
 800b436:	2204      	movs	r2, #4
 800b438:	2100      	movs	r1, #0
 800b43a:	4618      	mov	r0, r3
 800b43c:	f00e fbe8 	bl	8019c10 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2200      	movs	r2, #0
 800b444:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	6a3a      	ldr	r2, [r7, #32]
 800b44a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b44c:	4b3f      	ldr	r3, [pc, #252]	; (800b54c <netif_add+0x19c>)
 800b44e:	781a      	ldrb	r2, [r3, #0]
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b45a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	68b9      	ldr	r1, [r7, #8]
 800b462:	68f8      	ldr	r0, [r7, #12]
 800b464:	f000 f914 	bl	800b690 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46a:	68f8      	ldr	r0, [r7, #12]
 800b46c:	4798      	blx	r3
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d001      	beq.n	800b478 <netif_add+0xc8>
    return NULL;
 800b474:	2300      	movs	r3, #0
 800b476:	e058      	b.n	800b52a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b47e:	2bff      	cmp	r3, #255	; 0xff
 800b480:	d103      	bne.n	800b48a <netif_add+0xda>
        netif->num = 0;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2200      	movs	r2, #0
 800b486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800b48a:	2300      	movs	r3, #0
 800b48c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b48e:	4b30      	ldr	r3, [pc, #192]	; (800b550 <netif_add+0x1a0>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	617b      	str	r3, [r7, #20]
 800b494:	e02b      	b.n	800b4ee <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b496:	697a      	ldr	r2, [r7, #20]
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d106      	bne.n	800b4ac <netif_add+0xfc>
 800b49e:	4b25      	ldr	r3, [pc, #148]	; (800b534 <netif_add+0x184>)
 800b4a0:	f240 128b 	movw	r2, #395	; 0x18b
 800b4a4:	492b      	ldr	r1, [pc, #172]	; (800b554 <netif_add+0x1a4>)
 800b4a6:	4825      	ldr	r0, [pc, #148]	; (800b53c <netif_add+0x18c>)
 800b4a8:	f00e fbba 	bl	8019c20 <iprintf>
        num_netifs++;
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	2bff      	cmp	r3, #255	; 0xff
 800b4b6:	dd06      	ble.n	800b4c6 <netif_add+0x116>
 800b4b8:	4b1e      	ldr	r3, [pc, #120]	; (800b534 <netif_add+0x184>)
 800b4ba:	f240 128d 	movw	r2, #397	; 0x18d
 800b4be:	4926      	ldr	r1, [pc, #152]	; (800b558 <netif_add+0x1a8>)
 800b4c0:	481e      	ldr	r0, [pc, #120]	; (800b53c <netif_add+0x18c>)
 800b4c2:	f00e fbad 	bl	8019c20 <iprintf>
        if (netif2->num == netif->num) {
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d108      	bne.n	800b4e8 <netif_add+0x138>
          netif->num++;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b4dc:	3301      	adds	r3, #1
 800b4de:	b2da      	uxtb	r2, r3
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800b4e6:	e005      	b.n	800b4f4 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	617b      	str	r3, [r7, #20]
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d1d0      	bne.n	800b496 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1be      	bne.n	800b478 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b500:	2bfe      	cmp	r3, #254	; 0xfe
 800b502:	d103      	bne.n	800b50c <netif_add+0x15c>
    netif_num = 0;
 800b504:	4b11      	ldr	r3, [pc, #68]	; (800b54c <netif_add+0x19c>)
 800b506:	2200      	movs	r2, #0
 800b508:	701a      	strb	r2, [r3, #0]
 800b50a:	e006      	b.n	800b51a <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b512:	3301      	adds	r3, #1
 800b514:	b2da      	uxtb	r2, r3
 800b516:	4b0d      	ldr	r3, [pc, #52]	; (800b54c <netif_add+0x19c>)
 800b518:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b51a:	4b0d      	ldr	r3, [pc, #52]	; (800b550 <netif_add+0x1a0>)
 800b51c:	681a      	ldr	r2, [r3, #0]
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b522:	4a0b      	ldr	r2, [pc, #44]	; (800b550 <netif_add+0x1a0>)
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b528:	68fb      	ldr	r3, [r7, #12]
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3718      	adds	r7, #24
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	0801c050 	.word	0x0801c050
 800b538:	0801c0e4 	.word	0x0801c0e4
 800b53c:	0801c0a0 	.word	0x0801c0a0
 800b540:	0801c100 	.word	0x0801c100
 800b544:	0801ec8c 	.word	0x0801ec8c
 800b548:	0800b973 	.word	0x0800b973
 800b54c:	2000864c 	.word	0x2000864c
 800b550:	2000fd28 	.word	0x2000fd28
 800b554:	0801c124 	.word	0x0801c124
 800b558:	0801c138 	.word	0x0801c138

0800b55c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b566:	6839      	ldr	r1, [r7, #0]
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f002 fe39 	bl	800e1e0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b56e:	6839      	ldr	r1, [r7, #0]
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f007 ff77 	bl	8013464 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b576:	bf00      	nop
 800b578:	3708      	adds	r7, #8
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
	...

0800b580 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b086      	sub	sp, #24
 800b584:	af00      	add	r7, sp, #0
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	60b9      	str	r1, [r7, #8]
 800b58a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d106      	bne.n	800b5a0 <netif_do_set_ipaddr+0x20>
 800b592:	4b1d      	ldr	r3, [pc, #116]	; (800b608 <netif_do_set_ipaddr+0x88>)
 800b594:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b598:	491c      	ldr	r1, [pc, #112]	; (800b60c <netif_do_set_ipaddr+0x8c>)
 800b59a:	481d      	ldr	r0, [pc, #116]	; (800b610 <netif_do_set_ipaddr+0x90>)
 800b59c:	f00e fb40 	bl	8019c20 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d106      	bne.n	800b5b4 <netif_do_set_ipaddr+0x34>
 800b5a6:	4b18      	ldr	r3, [pc, #96]	; (800b608 <netif_do_set_ipaddr+0x88>)
 800b5a8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b5ac:	4917      	ldr	r1, [pc, #92]	; (800b60c <netif_do_set_ipaddr+0x8c>)
 800b5ae:	4818      	ldr	r0, [pc, #96]	; (800b610 <netif_do_set_ipaddr+0x90>)
 800b5b0:	f00e fb36 	bl	8019c20 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	681a      	ldr	r2, [r3, #0]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	3304      	adds	r3, #4
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d01c      	beq.n	800b5fc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	3304      	adds	r3, #4
 800b5cc:	681a      	ldr	r2, [r3, #0]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b5d2:	f107 0314 	add.w	r3, r7, #20
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f7ff ffbf 	bl	800b55c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d002      	beq.n	800b5ea <netif_do_set_ipaddr+0x6a>
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	e000      	b.n	800b5ec <netif_do_set_ipaddr+0x6c>
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	68fa      	ldr	r2, [r7, #12]
 800b5ee:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b5f0:	2101      	movs	r1, #1
 800b5f2:	68f8      	ldr	r0, [r7, #12]
 800b5f4:	f000 f8d2 	bl	800b79c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	e000      	b.n	800b5fe <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b5fc:	2300      	movs	r3, #0
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3718      	adds	r7, #24
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	0801c050 	.word	0x0801c050
 800b60c:	0801c168 	.word	0x0801c168
 800b610:	0801c0a0 	.word	0x0801c0a0

0800b614 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b614:	b480      	push	{r7}
 800b616:	b085      	sub	sp, #20
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	60b9      	str	r1, [r7, #8]
 800b61e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	3308      	adds	r3, #8
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d00a      	beq.n	800b644 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d002      	beq.n	800b63a <netif_do_set_netmask+0x26>
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	e000      	b.n	800b63c <netif_do_set_netmask+0x28>
 800b63a:	2300      	movs	r3, #0
 800b63c:	68fa      	ldr	r2, [r7, #12]
 800b63e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b640:	2301      	movs	r3, #1
 800b642:	e000      	b.n	800b646 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b644:	2300      	movs	r3, #0
}
 800b646:	4618      	mov	r0, r3
 800b648:	3714      	adds	r7, #20
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr

0800b652 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b652:	b480      	push	{r7}
 800b654:	b085      	sub	sp, #20
 800b656:	af00      	add	r7, sp, #0
 800b658:	60f8      	str	r0, [r7, #12]
 800b65a:	60b9      	str	r1, [r7, #8]
 800b65c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	330c      	adds	r3, #12
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d00a      	beq.n	800b682 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d002      	beq.n	800b678 <netif_do_set_gw+0x26>
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	e000      	b.n	800b67a <netif_do_set_gw+0x28>
 800b678:	2300      	movs	r3, #0
 800b67a:	68fa      	ldr	r2, [r7, #12]
 800b67c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b67e:	2301      	movs	r3, #1
 800b680:	e000      	b.n	800b684 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b682:	2300      	movs	r3, #0
}
 800b684:	4618      	mov	r0, r3
 800b686:	3714      	adds	r7, #20
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr

0800b690 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b088      	sub	sp, #32
 800b694:	af00      	add	r7, sp, #0
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	60b9      	str	r1, [r7, #8]
 800b69a:	607a      	str	r2, [r7, #4]
 800b69c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d101      	bne.n	800b6b0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b6ac:	4b1c      	ldr	r3, [pc, #112]	; (800b720 <netif_set_addr+0x90>)
 800b6ae:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d101      	bne.n	800b6ba <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b6b6:	4b1a      	ldr	r3, [pc, #104]	; (800b720 <netif_set_addr+0x90>)
 800b6b8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d101      	bne.n	800b6c4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b6c0:	4b17      	ldr	r3, [pc, #92]	; (800b720 <netif_set_addr+0x90>)
 800b6c2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d003      	beq.n	800b6d2 <netif_set_addr+0x42>
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d101      	bne.n	800b6d6 <netif_set_addr+0x46>
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e000      	b.n	800b6d8 <netif_set_addr+0x48>
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d006      	beq.n	800b6ee <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b6e0:	f107 0310 	add.w	r3, r7, #16
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	68b9      	ldr	r1, [r7, #8]
 800b6e8:	68f8      	ldr	r0, [r7, #12]
 800b6ea:	f7ff ff49 	bl	800b580 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b6ee:	69fa      	ldr	r2, [r7, #28]
 800b6f0:	6879      	ldr	r1, [r7, #4]
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f7ff ff8e 	bl	800b614 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b6f8:	69ba      	ldr	r2, [r7, #24]
 800b6fa:	6839      	ldr	r1, [r7, #0]
 800b6fc:	68f8      	ldr	r0, [r7, #12]
 800b6fe:	f7ff ffa8 	bl	800b652 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d106      	bne.n	800b716 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b708:	f107 0310 	add.w	r3, r7, #16
 800b70c:	461a      	mov	r2, r3
 800b70e:	68b9      	ldr	r1, [r7, #8]
 800b710:	68f8      	ldr	r0, [r7, #12]
 800b712:	f7ff ff35 	bl	800b580 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b716:	bf00      	nop
 800b718:	3720      	adds	r7, #32
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	0801ec8c 	.word	0x0801ec8c

0800b724 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b72c:	4a04      	ldr	r2, [pc, #16]	; (800b740 <netif_set_default+0x1c>)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b732:	bf00      	nop
 800b734:	370c      	adds	r7, #12
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop
 800b740:	2000fd2c 	.word	0x2000fd2c

0800b744 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b082      	sub	sp, #8
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d107      	bne.n	800b762 <netif_set_up+0x1e>
 800b752:	4b0f      	ldr	r3, [pc, #60]	; (800b790 <netif_set_up+0x4c>)
 800b754:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b758:	490e      	ldr	r1, [pc, #56]	; (800b794 <netif_set_up+0x50>)
 800b75a:	480f      	ldr	r0, [pc, #60]	; (800b798 <netif_set_up+0x54>)
 800b75c:	f00e fa60 	bl	8019c20 <iprintf>
 800b760:	e013      	b.n	800b78a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b768:	f003 0301 	and.w	r3, r3, #1
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d10c      	bne.n	800b78a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b776:	f043 0301 	orr.w	r3, r3, #1
 800b77a:	b2da      	uxtb	r2, r3
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b782:	2103      	movs	r1, #3
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 f809 	bl	800b79c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b78a:	3708      	adds	r7, #8
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	0801c050 	.word	0x0801c050
 800b794:	0801c1d8 	.word	0x0801c1d8
 800b798:	0801c0a0 	.word	0x0801c0a0

0800b79c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d106      	bne.n	800b7bc <netif_issue_reports+0x20>
 800b7ae:	4b18      	ldr	r3, [pc, #96]	; (800b810 <netif_issue_reports+0x74>)
 800b7b0:	f240 326d 	movw	r2, #877	; 0x36d
 800b7b4:	4917      	ldr	r1, [pc, #92]	; (800b814 <netif_issue_reports+0x78>)
 800b7b6:	4818      	ldr	r0, [pc, #96]	; (800b818 <netif_issue_reports+0x7c>)
 800b7b8:	f00e fa32 	bl	8019c20 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b7c2:	f003 0304 	and.w	r3, r3, #4
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d01e      	beq.n	800b808 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b7d0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d017      	beq.n	800b808 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b7d8:	78fb      	ldrb	r3, [r7, #3]
 800b7da:	f003 0301 	and.w	r3, r3, #1
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d013      	beq.n	800b80a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	3304      	adds	r3, #4
 800b7e6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d00e      	beq.n	800b80a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b7f2:	f003 0308 	and.w	r3, r3, #8
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d007      	beq.n	800b80a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	3304      	adds	r3, #4
 800b7fe:	4619      	mov	r1, r3
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f00a fc41 	bl	8016088 <etharp_request>
 800b806:	e000      	b.n	800b80a <netif_issue_reports+0x6e>
    return;
 800b808:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b80a:	3708      	adds	r7, #8
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}
 800b810:	0801c050 	.word	0x0801c050
 800b814:	0801c1f4 	.word	0x0801c1f4
 800b818:	0801c0a0 	.word	0x0801c0a0

0800b81c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d107      	bne.n	800b83a <netif_set_down+0x1e>
 800b82a:	4b12      	ldr	r3, [pc, #72]	; (800b874 <netif_set_down+0x58>)
 800b82c:	f240 329b 	movw	r2, #923	; 0x39b
 800b830:	4911      	ldr	r1, [pc, #68]	; (800b878 <netif_set_down+0x5c>)
 800b832:	4812      	ldr	r0, [pc, #72]	; (800b87c <netif_set_down+0x60>)
 800b834:	f00e f9f4 	bl	8019c20 <iprintf>
 800b838:	e019      	b.n	800b86e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b840:	f003 0301 	and.w	r3, r3, #1
 800b844:	2b00      	cmp	r3, #0
 800b846:	d012      	beq.n	800b86e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b84e:	f023 0301 	bic.w	r3, r3, #1
 800b852:	b2da      	uxtb	r2, r3
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b860:	f003 0308 	and.w	r3, r3, #8
 800b864:	2b00      	cmp	r3, #0
 800b866:	d002      	beq.n	800b86e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f009 ffc7 	bl	80157fc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b86e:	3708      	adds	r7, #8
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}
 800b874:	0801c050 	.word	0x0801c050
 800b878:	0801c218 	.word	0x0801c218
 800b87c:	0801c0a0 	.word	0x0801c0a0

0800b880 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b082      	sub	sp, #8
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d107      	bne.n	800b89e <netif_set_link_up+0x1e>
 800b88e:	4b15      	ldr	r3, [pc, #84]	; (800b8e4 <netif_set_link_up+0x64>)
 800b890:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b894:	4914      	ldr	r1, [pc, #80]	; (800b8e8 <netif_set_link_up+0x68>)
 800b896:	4815      	ldr	r0, [pc, #84]	; (800b8ec <netif_set_link_up+0x6c>)
 800b898:	f00e f9c2 	bl	8019c20 <iprintf>
 800b89c:	e01e      	b.n	800b8dc <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b8a4:	f003 0304 	and.w	r3, r3, #4
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d117      	bne.n	800b8dc <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b8b2:	f043 0304 	orr.w	r3, r3, #4
 800b8b6:	b2da      	uxtb	r2, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f008 f9fc 	bl	8013cbc <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b8c4:	2103      	movs	r1, #3
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f7ff ff68 	bl	800b79c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	69db      	ldr	r3, [r3, #28]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d003      	beq.n	800b8dc <netif_set_link_up+0x5c>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	69db      	ldr	r3, [r3, #28]
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b8dc:	3708      	adds	r7, #8
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	0801c050 	.word	0x0801c050
 800b8e8:	0801c238 	.word	0x0801c238
 800b8ec:	0801c0a0 	.word	0x0801c0a0

0800b8f0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d107      	bne.n	800b90e <netif_set_link_down+0x1e>
 800b8fe:	4b11      	ldr	r3, [pc, #68]	; (800b944 <netif_set_link_down+0x54>)
 800b900:	f240 4206 	movw	r2, #1030	; 0x406
 800b904:	4910      	ldr	r1, [pc, #64]	; (800b948 <netif_set_link_down+0x58>)
 800b906:	4811      	ldr	r0, [pc, #68]	; (800b94c <netif_set_link_down+0x5c>)
 800b908:	f00e f98a 	bl	8019c20 <iprintf>
 800b90c:	e017      	b.n	800b93e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b914:	f003 0304 	and.w	r3, r3, #4
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d010      	beq.n	800b93e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b922:	f023 0304 	bic.w	r3, r3, #4
 800b926:	b2da      	uxtb	r2, r3
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	69db      	ldr	r3, [r3, #28]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d003      	beq.n	800b93e <netif_set_link_down+0x4e>
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	69db      	ldr	r3, [r3, #28]
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b93e:	3708      	adds	r7, #8
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}
 800b944:	0801c050 	.word	0x0801c050
 800b948:	0801c25c 	.word	0x0801c25c
 800b94c:	0801c0a0 	.word	0x0801c0a0

0800b950 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b950:	b480      	push	{r7}
 800b952:	b083      	sub	sp, #12
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d002      	beq.n	800b966 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	683a      	ldr	r2, [r7, #0]
 800b964:	61da      	str	r2, [r3, #28]
  }
}
 800b966:	bf00      	nop
 800b968:	370c      	adds	r7, #12
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr

0800b972 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b972:	b480      	push	{r7}
 800b974:	b085      	sub	sp, #20
 800b976:	af00      	add	r7, sp, #0
 800b978:	60f8      	str	r0, [r7, #12]
 800b97a:	60b9      	str	r1, [r7, #8]
 800b97c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b97e:	f06f 030b 	mvn.w	r3, #11
}
 800b982:	4618      	mov	r0, r3
 800b984:	3714      	adds	r7, #20
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr
	...

0800b990 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b990:	b480      	push	{r7}
 800b992:	b085      	sub	sp, #20
 800b994:	af00      	add	r7, sp, #0
 800b996:	4603      	mov	r3, r0
 800b998:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b99a:	79fb      	ldrb	r3, [r7, #7]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d013      	beq.n	800b9c8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b9a0:	4b0d      	ldr	r3, [pc, #52]	; (800b9d8 <netif_get_by_index+0x48>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	60fb      	str	r3, [r7, #12]
 800b9a6:	e00c      	b.n	800b9c2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	79fa      	ldrb	r2, [r7, #7]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d101      	bne.n	800b9bc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	e006      	b.n	800b9ca <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	60fb      	str	r3, [r7, #12]
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d1ef      	bne.n	800b9a8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b9c8:	2300      	movs	r3, #0
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3714      	adds	r7, #20
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr
 800b9d6:	bf00      	nop
 800b9d8:	2000fd28 	.word	0x2000fd28

0800b9dc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b082      	sub	sp, #8
 800b9e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b9e2:	f00c f9f9 	bl	8017dd8 <sys_arch_protect>
 800b9e6:	6038      	str	r0, [r7, #0]
 800b9e8:	4b0d      	ldr	r3, [pc, #52]	; (800ba20 <pbuf_free_ooseq+0x44>)
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	701a      	strb	r2, [r3, #0]
 800b9ee:	6838      	ldr	r0, [r7, #0]
 800b9f0:	f00c fa00 	bl	8017df4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b9f4:	4b0b      	ldr	r3, [pc, #44]	; (800ba24 <pbuf_free_ooseq+0x48>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	607b      	str	r3, [r7, #4]
 800b9fa:	e00a      	b.n	800ba12 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d003      	beq.n	800ba0c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f002 fc29 	bl	800e25c <tcp_free_ooseq>
      return;
 800ba0a:	e005      	b.n	800ba18 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	607b      	str	r3, [r7, #4]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d1f1      	bne.n	800b9fc <pbuf_free_ooseq+0x20>
    }
  }
}
 800ba18:	3708      	adds	r7, #8
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	2000fd30 	.word	0x2000fd30
 800ba24:	2000fd38 	.word	0x2000fd38

0800ba28 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ba30:	f7ff ffd4 	bl	800b9dc <pbuf_free_ooseq>
}
 800ba34:	bf00      	nop
 800ba36:	3708      	adds	r7, #8
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800ba42:	f00c f9c9 	bl	8017dd8 <sys_arch_protect>
 800ba46:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800ba48:	4b0f      	ldr	r3, [pc, #60]	; (800ba88 <pbuf_pool_is_empty+0x4c>)
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ba4e:	4b0e      	ldr	r3, [pc, #56]	; (800ba88 <pbuf_pool_is_empty+0x4c>)
 800ba50:	2201      	movs	r2, #1
 800ba52:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f00c f9cd 	bl	8017df4 <sys_arch_unprotect>

  if (!queued) {
 800ba5a:	78fb      	ldrb	r3, [r7, #3]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d10f      	bne.n	800ba80 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ba60:	2100      	movs	r1, #0
 800ba62:	480a      	ldr	r0, [pc, #40]	; (800ba8c <pbuf_pool_is_empty+0x50>)
 800ba64:	f7fe feca 	bl	800a7fc <tcpip_try_callback>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d008      	beq.n	800ba80 <pbuf_pool_is_empty+0x44>
 800ba6e:	f00c f9b3 	bl	8017dd8 <sys_arch_protect>
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	4b04      	ldr	r3, [pc, #16]	; (800ba88 <pbuf_pool_is_empty+0x4c>)
 800ba76:	2200      	movs	r2, #0
 800ba78:	701a      	strb	r2, [r3, #0]
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f00c f9ba 	bl	8017df4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ba80:	bf00      	nop
 800ba82:	3708      	adds	r7, #8
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	2000fd30 	.word	0x2000fd30
 800ba8c:	0800ba29 	.word	0x0800ba29

0800ba90 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b085      	sub	sp, #20
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	60b9      	str	r1, [r7, #8]
 800ba9a:	4611      	mov	r1, r2
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	460b      	mov	r3, r1
 800baa0:	80fb      	strh	r3, [r7, #6]
 800baa2:	4613      	mov	r3, r2
 800baa4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2200      	movs	r2, #0
 800baaa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	68ba      	ldr	r2, [r7, #8]
 800bab0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	88fa      	ldrh	r2, [r7, #6]
 800bab6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	88ba      	ldrh	r2, [r7, #4]
 800babc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800babe:	8b3b      	ldrh	r3, [r7, #24]
 800bac0:	b2da      	uxtb	r2, r3
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	7f3a      	ldrb	r2, [r7, #28]
 800baca:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2201      	movs	r2, #1
 800bad0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2200      	movs	r2, #0
 800bad6:	73da      	strb	r2, [r3, #15]
}
 800bad8:	bf00      	nop
 800bada:	3714      	adds	r7, #20
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b08c      	sub	sp, #48	; 0x30
 800bae8:	af02      	add	r7, sp, #8
 800baea:	4603      	mov	r3, r0
 800baec:	71fb      	strb	r3, [r7, #7]
 800baee:	460b      	mov	r3, r1
 800baf0:	80bb      	strh	r3, [r7, #4]
 800baf2:	4613      	mov	r3, r2
 800baf4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800baf6:	79fb      	ldrb	r3, [r7, #7]
 800baf8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bafa:	887b      	ldrh	r3, [r7, #2]
 800bafc:	2b41      	cmp	r3, #65	; 0x41
 800bafe:	d00b      	beq.n	800bb18 <pbuf_alloc+0x34>
 800bb00:	2b41      	cmp	r3, #65	; 0x41
 800bb02:	dc02      	bgt.n	800bb0a <pbuf_alloc+0x26>
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d007      	beq.n	800bb18 <pbuf_alloc+0x34>
 800bb08:	e0c2      	b.n	800bc90 <pbuf_alloc+0x1ac>
 800bb0a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bb0e:	d00b      	beq.n	800bb28 <pbuf_alloc+0x44>
 800bb10:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bb14:	d070      	beq.n	800bbf8 <pbuf_alloc+0x114>
 800bb16:	e0bb      	b.n	800bc90 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bb18:	887a      	ldrh	r2, [r7, #2]
 800bb1a:	88bb      	ldrh	r3, [r7, #4]
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	2000      	movs	r0, #0
 800bb20:	f000 f8d2 	bl	800bcc8 <pbuf_alloc_reference>
 800bb24:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800bb26:	e0bd      	b.n	800bca4 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bb30:	88bb      	ldrh	r3, [r7, #4]
 800bb32:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bb34:	200c      	movs	r0, #12
 800bb36:	f7ff fbb7 	bl	800b2a8 <memp_malloc>
 800bb3a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d109      	bne.n	800bb56 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800bb42:	f7ff ff7b 	bl	800ba3c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800bb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d002      	beq.n	800bb52 <pbuf_alloc+0x6e>
            pbuf_free(p);
 800bb4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb4e:	f000 fadb 	bl	800c108 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800bb52:	2300      	movs	r3, #0
 800bb54:	e0a7      	b.n	800bca6 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800bb56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb58:	3303      	adds	r3, #3
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	f023 0303 	bic.w	r3, r3, #3
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	8b7a      	ldrh	r2, [r7, #26]
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	bf28      	it	cs
 800bb6e:	4613      	movcs	r3, r2
 800bb70:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800bb72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb74:	3310      	adds	r3, #16
 800bb76:	693a      	ldr	r2, [r7, #16]
 800bb78:	4413      	add	r3, r2
 800bb7a:	3303      	adds	r3, #3
 800bb7c:	f023 0303 	bic.w	r3, r3, #3
 800bb80:	4618      	mov	r0, r3
 800bb82:	89f9      	ldrh	r1, [r7, #14]
 800bb84:	8b7a      	ldrh	r2, [r7, #26]
 800bb86:	2300      	movs	r3, #0
 800bb88:	9301      	str	r3, [sp, #4]
 800bb8a:	887b      	ldrh	r3, [r7, #2]
 800bb8c:	9300      	str	r3, [sp, #0]
 800bb8e:	460b      	mov	r3, r1
 800bb90:	4601      	mov	r1, r0
 800bb92:	6938      	ldr	r0, [r7, #16]
 800bb94:	f7ff ff7c 	bl	800ba90 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	f003 0303 	and.w	r3, r3, #3
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d006      	beq.n	800bbb2 <pbuf_alloc+0xce>
 800bba4:	4b42      	ldr	r3, [pc, #264]	; (800bcb0 <pbuf_alloc+0x1cc>)
 800bba6:	f240 1201 	movw	r2, #257	; 0x101
 800bbaa:	4942      	ldr	r1, [pc, #264]	; (800bcb4 <pbuf_alloc+0x1d0>)
 800bbac:	4842      	ldr	r0, [pc, #264]	; (800bcb8 <pbuf_alloc+0x1d4>)
 800bbae:	f00e f837 	bl	8019c20 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bbb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bbb4:	3303      	adds	r3, #3
 800bbb6:	f023 0303 	bic.w	r3, r3, #3
 800bbba:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bbbe:	d106      	bne.n	800bbce <pbuf_alloc+0xea>
 800bbc0:	4b3b      	ldr	r3, [pc, #236]	; (800bcb0 <pbuf_alloc+0x1cc>)
 800bbc2:	f240 1203 	movw	r2, #259	; 0x103
 800bbc6:	493d      	ldr	r1, [pc, #244]	; (800bcbc <pbuf_alloc+0x1d8>)
 800bbc8:	483b      	ldr	r0, [pc, #236]	; (800bcb8 <pbuf_alloc+0x1d4>)
 800bbca:	f00e f829 	bl	8019c20 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d102      	bne.n	800bbda <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	627b      	str	r3, [r7, #36]	; 0x24
 800bbd8:	e002      	b.n	800bbe0 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bbda:	69fb      	ldr	r3, [r7, #28]
 800bbdc:	693a      	ldr	r2, [r7, #16]
 800bbde:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800bbe4:	8b7a      	ldrh	r2, [r7, #26]
 800bbe6:	89fb      	ldrh	r3, [r7, #14]
 800bbe8:	1ad3      	subs	r3, r2, r3
 800bbea:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bbec:	2300      	movs	r3, #0
 800bbee:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800bbf0:	8b7b      	ldrh	r3, [r7, #26]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d19e      	bne.n	800bb34 <pbuf_alloc+0x50>
      break;
 800bbf6:	e055      	b.n	800bca4 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bbf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bbfa:	3303      	adds	r3, #3
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	f023 0303 	bic.w	r3, r3, #3
 800bc02:	b29a      	uxth	r2, r3
 800bc04:	88bb      	ldrh	r3, [r7, #4]
 800bc06:	3303      	adds	r3, #3
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	f023 0303 	bic.w	r3, r3, #3
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	4413      	add	r3, r2
 800bc12:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800bc14:	8b3b      	ldrh	r3, [r7, #24]
 800bc16:	3310      	adds	r3, #16
 800bc18:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bc1a:	8b3a      	ldrh	r2, [r7, #24]
 800bc1c:	88bb      	ldrh	r3, [r7, #4]
 800bc1e:	3303      	adds	r3, #3
 800bc20:	f023 0303 	bic.w	r3, r3, #3
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d306      	bcc.n	800bc36 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bc28:	8afa      	ldrh	r2, [r7, #22]
 800bc2a:	88bb      	ldrh	r3, [r7, #4]
 800bc2c:	3303      	adds	r3, #3
 800bc2e:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d201      	bcs.n	800bc3a <pbuf_alloc+0x156>
        return NULL;
 800bc36:	2300      	movs	r3, #0
 800bc38:	e035      	b.n	800bca6 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800bc3a:	8afb      	ldrh	r3, [r7, #22]
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f7ff f9b1 	bl	800afa4 <mem_malloc>
 800bc42:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800bc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d101      	bne.n	800bc4e <pbuf_alloc+0x16a>
        return NULL;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	e02b      	b.n	800bca6 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bc4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc50:	3310      	adds	r3, #16
 800bc52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc54:	4413      	add	r3, r2
 800bc56:	3303      	adds	r3, #3
 800bc58:	f023 0303 	bic.w	r3, r3, #3
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	88b9      	ldrh	r1, [r7, #4]
 800bc60:	88ba      	ldrh	r2, [r7, #4]
 800bc62:	2300      	movs	r3, #0
 800bc64:	9301      	str	r3, [sp, #4]
 800bc66:	887b      	ldrh	r3, [r7, #2]
 800bc68:	9300      	str	r3, [sp, #0]
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	4601      	mov	r1, r0
 800bc6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc70:	f7ff ff0e 	bl	800ba90 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	f003 0303 	and.w	r3, r3, #3
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d010      	beq.n	800bca2 <pbuf_alloc+0x1be>
 800bc80:	4b0b      	ldr	r3, [pc, #44]	; (800bcb0 <pbuf_alloc+0x1cc>)
 800bc82:	f240 1223 	movw	r2, #291	; 0x123
 800bc86:	490e      	ldr	r1, [pc, #56]	; (800bcc0 <pbuf_alloc+0x1dc>)
 800bc88:	480b      	ldr	r0, [pc, #44]	; (800bcb8 <pbuf_alloc+0x1d4>)
 800bc8a:	f00d ffc9 	bl	8019c20 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800bc8e:	e008      	b.n	800bca2 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bc90:	4b07      	ldr	r3, [pc, #28]	; (800bcb0 <pbuf_alloc+0x1cc>)
 800bc92:	f240 1227 	movw	r2, #295	; 0x127
 800bc96:	490b      	ldr	r1, [pc, #44]	; (800bcc4 <pbuf_alloc+0x1e0>)
 800bc98:	4807      	ldr	r0, [pc, #28]	; (800bcb8 <pbuf_alloc+0x1d4>)
 800bc9a:	f00d ffc1 	bl	8019c20 <iprintf>
      return NULL;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	e001      	b.n	800bca6 <pbuf_alloc+0x1c2>
      break;
 800bca2:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3728      	adds	r7, #40	; 0x28
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}
 800bcae:	bf00      	nop
 800bcb0:	0801c280 	.word	0x0801c280
 800bcb4:	0801c2b0 	.word	0x0801c2b0
 800bcb8:	0801c2e0 	.word	0x0801c2e0
 800bcbc:	0801c308 	.word	0x0801c308
 800bcc0:	0801c33c 	.word	0x0801c33c
 800bcc4:	0801c368 	.word	0x0801c368

0800bcc8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b086      	sub	sp, #24
 800bccc:	af02      	add	r7, sp, #8
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	807b      	strh	r3, [r7, #2]
 800bcd4:	4613      	mov	r3, r2
 800bcd6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bcd8:	883b      	ldrh	r3, [r7, #0]
 800bcda:	2b41      	cmp	r3, #65	; 0x41
 800bcdc:	d009      	beq.n	800bcf2 <pbuf_alloc_reference+0x2a>
 800bcde:	883b      	ldrh	r3, [r7, #0]
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d006      	beq.n	800bcf2 <pbuf_alloc_reference+0x2a>
 800bce4:	4b0f      	ldr	r3, [pc, #60]	; (800bd24 <pbuf_alloc_reference+0x5c>)
 800bce6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800bcea:	490f      	ldr	r1, [pc, #60]	; (800bd28 <pbuf_alloc_reference+0x60>)
 800bcec:	480f      	ldr	r0, [pc, #60]	; (800bd2c <pbuf_alloc_reference+0x64>)
 800bcee:	f00d ff97 	bl	8019c20 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bcf2:	200b      	movs	r0, #11
 800bcf4:	f7ff fad8 	bl	800b2a8 <memp_malloc>
 800bcf8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d101      	bne.n	800bd04 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800bd00:	2300      	movs	r3, #0
 800bd02:	e00b      	b.n	800bd1c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800bd04:	8879      	ldrh	r1, [r7, #2]
 800bd06:	887a      	ldrh	r2, [r7, #2]
 800bd08:	2300      	movs	r3, #0
 800bd0a:	9301      	str	r3, [sp, #4]
 800bd0c:	883b      	ldrh	r3, [r7, #0]
 800bd0e:	9300      	str	r3, [sp, #0]
 800bd10:	460b      	mov	r3, r1
 800bd12:	6879      	ldr	r1, [r7, #4]
 800bd14:	68f8      	ldr	r0, [r7, #12]
 800bd16:	f7ff febb 	bl	800ba90 <pbuf_init_alloced_pbuf>
  return p;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3710      	adds	r7, #16
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	0801c280 	.word	0x0801c280
 800bd28:	0801c384 	.word	0x0801c384
 800bd2c:	0801c2e0 	.word	0x0801c2e0

0800bd30 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b088      	sub	sp, #32
 800bd34:	af02      	add	r7, sp, #8
 800bd36:	607b      	str	r3, [r7, #4]
 800bd38:	4603      	mov	r3, r0
 800bd3a:	73fb      	strb	r3, [r7, #15]
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	81bb      	strh	r3, [r7, #12]
 800bd40:	4613      	mov	r3, r2
 800bd42:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800bd44:	7bfb      	ldrb	r3, [r7, #15]
 800bd46:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bd48:	8a7b      	ldrh	r3, [r7, #18]
 800bd4a:	3303      	adds	r3, #3
 800bd4c:	f023 0203 	bic.w	r2, r3, #3
 800bd50:	89bb      	ldrh	r3, [r7, #12]
 800bd52:	441a      	add	r2, r3
 800bd54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d901      	bls.n	800bd5e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	e018      	b.n	800bd90 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800bd5e:	6a3b      	ldr	r3, [r7, #32]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d007      	beq.n	800bd74 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bd64:	8a7b      	ldrh	r3, [r7, #18]
 800bd66:	3303      	adds	r3, #3
 800bd68:	f023 0303 	bic.w	r3, r3, #3
 800bd6c:	6a3a      	ldr	r2, [r7, #32]
 800bd6e:	4413      	add	r3, r2
 800bd70:	617b      	str	r3, [r7, #20]
 800bd72:	e001      	b.n	800bd78 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bd74:	2300      	movs	r3, #0
 800bd76:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	89b9      	ldrh	r1, [r7, #12]
 800bd7c:	89ba      	ldrh	r2, [r7, #12]
 800bd7e:	2302      	movs	r3, #2
 800bd80:	9301      	str	r3, [sp, #4]
 800bd82:	897b      	ldrh	r3, [r7, #10]
 800bd84:	9300      	str	r3, [sp, #0]
 800bd86:	460b      	mov	r3, r1
 800bd88:	6979      	ldr	r1, [r7, #20]
 800bd8a:	f7ff fe81 	bl	800ba90 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800bd8e:	687b      	ldr	r3, [r7, #4]
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3718      	adds	r7, #24
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b084      	sub	sp, #16
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	460b      	mov	r3, r1
 800bda2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d106      	bne.n	800bdb8 <pbuf_realloc+0x20>
 800bdaa:	4b3a      	ldr	r3, [pc, #232]	; (800be94 <pbuf_realloc+0xfc>)
 800bdac:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800bdb0:	4939      	ldr	r1, [pc, #228]	; (800be98 <pbuf_realloc+0x100>)
 800bdb2:	483a      	ldr	r0, [pc, #232]	; (800be9c <pbuf_realloc+0x104>)
 800bdb4:	f00d ff34 	bl	8019c20 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	891b      	ldrh	r3, [r3, #8]
 800bdbc:	887a      	ldrh	r2, [r7, #2]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d264      	bcs.n	800be8c <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	891a      	ldrh	r2, [r3, #8]
 800bdc6:	887b      	ldrh	r3, [r7, #2]
 800bdc8:	1ad3      	subs	r3, r2, r3
 800bdca:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bdcc:	887b      	ldrh	r3, [r7, #2]
 800bdce:	817b      	strh	r3, [r7, #10]
  q = p;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800bdd4:	e018      	b.n	800be08 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	895b      	ldrh	r3, [r3, #10]
 800bdda:	897a      	ldrh	r2, [r7, #10]
 800bddc:	1ad3      	subs	r3, r2, r3
 800bdde:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	891a      	ldrh	r2, [r3, #8]
 800bde4:	893b      	ldrh	r3, [r7, #8]
 800bde6:	1ad3      	subs	r3, r2, r3
 800bde8:	b29a      	uxth	r2, r3
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d106      	bne.n	800be08 <pbuf_realloc+0x70>
 800bdfa:	4b26      	ldr	r3, [pc, #152]	; (800be94 <pbuf_realloc+0xfc>)
 800bdfc:	f240 12af 	movw	r2, #431	; 0x1af
 800be00:	4927      	ldr	r1, [pc, #156]	; (800bea0 <pbuf_realloc+0x108>)
 800be02:	4826      	ldr	r0, [pc, #152]	; (800be9c <pbuf_realloc+0x104>)
 800be04:	f00d ff0c 	bl	8019c20 <iprintf>
  while (rem_len > q->len) {
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	895b      	ldrh	r3, [r3, #10]
 800be0c:	897a      	ldrh	r2, [r7, #10]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d8e1      	bhi.n	800bdd6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	7b1b      	ldrb	r3, [r3, #12]
 800be16:	f003 030f 	and.w	r3, r3, #15
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d122      	bne.n	800be64 <pbuf_realloc+0xcc>
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	895b      	ldrh	r3, [r3, #10]
 800be22:	897a      	ldrh	r2, [r7, #10]
 800be24:	429a      	cmp	r2, r3
 800be26:	d01d      	beq.n	800be64 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	7b5b      	ldrb	r3, [r3, #13]
 800be2c:	f003 0302 	and.w	r3, r3, #2
 800be30:	2b00      	cmp	r3, #0
 800be32:	d117      	bne.n	800be64 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	461a      	mov	r2, r3
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	1ad3      	subs	r3, r2, r3
 800be3e:	b29a      	uxth	r2, r3
 800be40:	897b      	ldrh	r3, [r7, #10]
 800be42:	4413      	add	r3, r2
 800be44:	b29b      	uxth	r3, r3
 800be46:	4619      	mov	r1, r3
 800be48:	68f8      	ldr	r0, [r7, #12]
 800be4a:	f7fe ffa1 	bl	800ad90 <mem_trim>
 800be4e:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d106      	bne.n	800be64 <pbuf_realloc+0xcc>
 800be56:	4b0f      	ldr	r3, [pc, #60]	; (800be94 <pbuf_realloc+0xfc>)
 800be58:	f240 12bd 	movw	r2, #445	; 0x1bd
 800be5c:	4911      	ldr	r1, [pc, #68]	; (800bea4 <pbuf_realloc+0x10c>)
 800be5e:	480f      	ldr	r0, [pc, #60]	; (800be9c <pbuf_realloc+0x104>)
 800be60:	f00d fede 	bl	8019c20 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	897a      	ldrh	r2, [r7, #10]
 800be68:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	895a      	ldrh	r2, [r3, #10]
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d004      	beq.n	800be84 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	4618      	mov	r0, r3
 800be80:	f000 f942 	bl	800c108 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2200      	movs	r2, #0
 800be88:	601a      	str	r2, [r3, #0]
 800be8a:	e000      	b.n	800be8e <pbuf_realloc+0xf6>
    return;
 800be8c:	bf00      	nop

}
 800be8e:	3710      	adds	r7, #16
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}
 800be94:	0801c280 	.word	0x0801c280
 800be98:	0801c398 	.word	0x0801c398
 800be9c:	0801c2e0 	.word	0x0801c2e0
 800bea0:	0801c3b0 	.word	0x0801c3b0
 800bea4:	0801c3c8 	.word	0x0801c3c8

0800bea8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b086      	sub	sp, #24
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	4613      	mov	r3, r2
 800beb4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d106      	bne.n	800beca <pbuf_add_header_impl+0x22>
 800bebc:	4b2b      	ldr	r3, [pc, #172]	; (800bf6c <pbuf_add_header_impl+0xc4>)
 800bebe:	f240 12df 	movw	r2, #479	; 0x1df
 800bec2:	492b      	ldr	r1, [pc, #172]	; (800bf70 <pbuf_add_header_impl+0xc8>)
 800bec4:	482b      	ldr	r0, [pc, #172]	; (800bf74 <pbuf_add_header_impl+0xcc>)
 800bec6:	f00d feab 	bl	8019c20 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d003      	beq.n	800bed8 <pbuf_add_header_impl+0x30>
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bed6:	d301      	bcc.n	800bedc <pbuf_add_header_impl+0x34>
    return 1;
 800bed8:	2301      	movs	r3, #1
 800beda:	e043      	b.n	800bf64 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d101      	bne.n	800bee6 <pbuf_add_header_impl+0x3e>
    return 0;
 800bee2:	2300      	movs	r3, #0
 800bee4:	e03e      	b.n	800bf64 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	891a      	ldrh	r2, [r3, #8]
 800beee:	8a7b      	ldrh	r3, [r7, #18]
 800bef0:	4413      	add	r3, r2
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	8a7a      	ldrh	r2, [r7, #18]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d901      	bls.n	800befe <pbuf_add_header_impl+0x56>
    return 1;
 800befa:	2301      	movs	r3, #1
 800befc:	e032      	b.n	800bf64 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	7b1b      	ldrb	r3, [r3, #12]
 800bf02:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800bf04:	8a3b      	ldrh	r3, [r7, #16]
 800bf06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00c      	beq.n	800bf28 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	685a      	ldr	r2, [r3, #4]
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	425b      	negs	r3, r3
 800bf16:	4413      	add	r3, r2
 800bf18:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	3310      	adds	r3, #16
 800bf1e:	697a      	ldr	r2, [r7, #20]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d20d      	bcs.n	800bf40 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800bf24:	2301      	movs	r3, #1
 800bf26:	e01d      	b.n	800bf64 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800bf28:	79fb      	ldrb	r3, [r7, #7]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d006      	beq.n	800bf3c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	685a      	ldr	r2, [r3, #4]
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	425b      	negs	r3, r3
 800bf36:	4413      	add	r3, r2
 800bf38:	617b      	str	r3, [r7, #20]
 800bf3a:	e001      	b.n	800bf40 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	e011      	b.n	800bf64 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	697a      	ldr	r2, [r7, #20]
 800bf44:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	895a      	ldrh	r2, [r3, #10]
 800bf4a:	8a7b      	ldrh	r3, [r7, #18]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	b29a      	uxth	r2, r3
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	891a      	ldrh	r2, [r3, #8]
 800bf58:	8a7b      	ldrh	r3, [r7, #18]
 800bf5a:	4413      	add	r3, r2
 800bf5c:	b29a      	uxth	r2, r3
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	811a      	strh	r2, [r3, #8]


  return 0;
 800bf62:	2300      	movs	r3, #0
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3718      	adds	r7, #24
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	0801c280 	.word	0x0801c280
 800bf70:	0801c3e4 	.word	0x0801c3e4
 800bf74:	0801c2e0 	.word	0x0801c2e0

0800bf78 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800bf82:	2200      	movs	r2, #0
 800bf84:	6839      	ldr	r1, [r7, #0]
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f7ff ff8e 	bl	800bea8 <pbuf_add_header_impl>
 800bf8c:	4603      	mov	r3, r0
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3708      	adds	r7, #8
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
	...

0800bf98 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d106      	bne.n	800bfb6 <pbuf_remove_header+0x1e>
 800bfa8:	4b20      	ldr	r3, [pc, #128]	; (800c02c <pbuf_remove_header+0x94>)
 800bfaa:	f240 224b 	movw	r2, #587	; 0x24b
 800bfae:	4920      	ldr	r1, [pc, #128]	; (800c030 <pbuf_remove_header+0x98>)
 800bfb0:	4820      	ldr	r0, [pc, #128]	; (800c034 <pbuf_remove_header+0x9c>)
 800bfb2:	f00d fe35 	bl	8019c20 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d003      	beq.n	800bfc4 <pbuf_remove_header+0x2c>
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfc2:	d301      	bcc.n	800bfc8 <pbuf_remove_header+0x30>
    return 1;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	e02c      	b.n	800c022 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d101      	bne.n	800bfd2 <pbuf_remove_header+0x3a>
    return 0;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	e027      	b.n	800c022 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	895b      	ldrh	r3, [r3, #10]
 800bfda:	89fa      	ldrh	r2, [r7, #14]
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d908      	bls.n	800bff2 <pbuf_remove_header+0x5a>
 800bfe0:	4b12      	ldr	r3, [pc, #72]	; (800c02c <pbuf_remove_header+0x94>)
 800bfe2:	f240 2255 	movw	r2, #597	; 0x255
 800bfe6:	4914      	ldr	r1, [pc, #80]	; (800c038 <pbuf_remove_header+0xa0>)
 800bfe8:	4812      	ldr	r0, [pc, #72]	; (800c034 <pbuf_remove_header+0x9c>)
 800bfea:	f00d fe19 	bl	8019c20 <iprintf>
 800bfee:	2301      	movs	r3, #1
 800bff0:	e017      	b.n	800c022 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	685a      	ldr	r2, [r3, #4]
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	441a      	add	r2, r3
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	895a      	ldrh	r2, [r3, #10]
 800c008:	89fb      	ldrh	r3, [r7, #14]
 800c00a:	1ad3      	subs	r3, r2, r3
 800c00c:	b29a      	uxth	r2, r3
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	891a      	ldrh	r2, [r3, #8]
 800c016:	89fb      	ldrh	r3, [r7, #14]
 800c018:	1ad3      	subs	r3, r2, r3
 800c01a:	b29a      	uxth	r2, r3
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c020:	2300      	movs	r3, #0
}
 800c022:	4618      	mov	r0, r3
 800c024:	3710      	adds	r7, #16
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}
 800c02a:	bf00      	nop
 800c02c:	0801c280 	.word	0x0801c280
 800c030:	0801c3e4 	.word	0x0801c3e4
 800c034:	0801c2e0 	.word	0x0801c2e0
 800c038:	0801c3f0 	.word	0x0801c3f0

0800c03c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	460b      	mov	r3, r1
 800c046:	807b      	strh	r3, [r7, #2]
 800c048:	4613      	mov	r3, r2
 800c04a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c04c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c050:	2b00      	cmp	r3, #0
 800c052:	da08      	bge.n	800c066 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c054:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c058:	425b      	negs	r3, r3
 800c05a:	4619      	mov	r1, r3
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f7ff ff9b 	bl	800bf98 <pbuf_remove_header>
 800c062:	4603      	mov	r3, r0
 800c064:	e007      	b.n	800c076 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c066:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c06a:	787a      	ldrb	r2, [r7, #1]
 800c06c:	4619      	mov	r1, r3
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f7ff ff1a 	bl	800bea8 <pbuf_add_header_impl>
 800c074:	4603      	mov	r3, r0
  }
}
 800c076:	4618      	mov	r0, r3
 800c078:	3708      	adds	r7, #8
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}

0800c07e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c07e:	b580      	push	{r7, lr}
 800c080:	b082      	sub	sp, #8
 800c082:	af00      	add	r7, sp, #0
 800c084:	6078      	str	r0, [r7, #4]
 800c086:	460b      	mov	r3, r1
 800c088:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c08a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c08e:	2201      	movs	r2, #1
 800c090:	4619      	mov	r1, r3
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f7ff ffd2 	bl	800c03c <pbuf_header_impl>
 800c098:	4603      	mov	r3, r0
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3708      	adds	r7, #8
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}

0800c0a2 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 800c0a2:	b580      	push	{r7, lr}
 800c0a4:	b086      	sub	sp, #24
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 800c0b2:	887b      	ldrh	r3, [r7, #2]
 800c0b4:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800c0b6:	e01c      	b.n	800c0f2 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	895b      	ldrh	r3, [r3, #10]
 800c0bc:	8a7a      	ldrh	r2, [r7, #18]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d310      	bcc.n	800c0e4 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	895b      	ldrh	r3, [r3, #10]
 800c0ca:	8a7a      	ldrh	r2, [r7, #18]
 800c0cc:	1ad3      	subs	r3, r2, r3
 800c0ce:	827b      	strh	r3, [r7, #18]
      p = p->next;
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	617b      	str	r3, [r7, #20]
      f->next = 0;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 800c0dc:	68f8      	ldr	r0, [r7, #12]
 800c0de:	f000 f813 	bl	800c108 <pbuf_free>
 800c0e2:	e006      	b.n	800c0f2 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 800c0e4:	8a7b      	ldrh	r3, [r7, #18]
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	6978      	ldr	r0, [r7, #20]
 800c0ea:	f7ff ff55 	bl	800bf98 <pbuf_remove_header>
      free_left = 0;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800c0f2:	8a7b      	ldrh	r3, [r7, #18]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d002      	beq.n	800c0fe <pbuf_free_header+0x5c>
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d1dc      	bne.n	800c0b8 <pbuf_free_header+0x16>
    }
  }
  return p;
 800c0fe:	697b      	ldr	r3, [r7, #20]
}
 800c100:	4618      	mov	r0, r3
 800c102:	3718      	adds	r7, #24
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b088      	sub	sp, #32
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d10b      	bne.n	800c12e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d106      	bne.n	800c12a <pbuf_free+0x22>
 800c11c:	4b3b      	ldr	r3, [pc, #236]	; (800c20c <pbuf_free+0x104>)
 800c11e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c122:	493b      	ldr	r1, [pc, #236]	; (800c210 <pbuf_free+0x108>)
 800c124:	483b      	ldr	r0, [pc, #236]	; (800c214 <pbuf_free+0x10c>)
 800c126:	f00d fd7b 	bl	8019c20 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c12a:	2300      	movs	r3, #0
 800c12c:	e069      	b.n	800c202 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c12e:	2300      	movs	r3, #0
 800c130:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c132:	e062      	b.n	800c1fa <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c134:	f00b fe50 	bl	8017dd8 <sys_arch_protect>
 800c138:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	7b9b      	ldrb	r3, [r3, #14]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d106      	bne.n	800c150 <pbuf_free+0x48>
 800c142:	4b32      	ldr	r3, [pc, #200]	; (800c20c <pbuf_free+0x104>)
 800c144:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c148:	4933      	ldr	r1, [pc, #204]	; (800c218 <pbuf_free+0x110>)
 800c14a:	4832      	ldr	r0, [pc, #200]	; (800c214 <pbuf_free+0x10c>)
 800c14c:	f00d fd68 	bl	8019c20 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	7b9b      	ldrb	r3, [r3, #14]
 800c154:	3b01      	subs	r3, #1
 800c156:	b2da      	uxtb	r2, r3
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	739a      	strb	r2, [r3, #14]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	7b9b      	ldrb	r3, [r3, #14]
 800c160:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c162:	69b8      	ldr	r0, [r7, #24]
 800c164:	f00b fe46 	bl	8017df4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c168:	7dfb      	ldrb	r3, [r7, #23]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d143      	bne.n	800c1f6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	7b1b      	ldrb	r3, [r3, #12]
 800c178:	f003 030f 	and.w	r3, r3, #15
 800c17c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	7b5b      	ldrb	r3, [r3, #13]
 800c182:	f003 0302 	and.w	r3, r3, #2
 800c186:	2b00      	cmp	r3, #0
 800c188:	d011      	beq.n	800c1ae <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	691b      	ldr	r3, [r3, #16]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d106      	bne.n	800c1a4 <pbuf_free+0x9c>
 800c196:	4b1d      	ldr	r3, [pc, #116]	; (800c20c <pbuf_free+0x104>)
 800c198:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c19c:	491f      	ldr	r1, [pc, #124]	; (800c21c <pbuf_free+0x114>)
 800c19e:	481d      	ldr	r0, [pc, #116]	; (800c214 <pbuf_free+0x10c>)
 800c1a0:	f00d fd3e 	bl	8019c20 <iprintf>
        pc->custom_free_function(p);
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	691b      	ldr	r3, [r3, #16]
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	4798      	blx	r3
 800c1ac:	e01d      	b.n	800c1ea <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c1ae:	7bfb      	ldrb	r3, [r7, #15]
 800c1b0:	2b02      	cmp	r3, #2
 800c1b2:	d104      	bne.n	800c1be <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c1b4:	6879      	ldr	r1, [r7, #4]
 800c1b6:	200c      	movs	r0, #12
 800c1b8:	f7ff f8c8 	bl	800b34c <memp_free>
 800c1bc:	e015      	b.n	800c1ea <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c1be:	7bfb      	ldrb	r3, [r7, #15]
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d104      	bne.n	800c1ce <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c1c4:	6879      	ldr	r1, [r7, #4]
 800c1c6:	200b      	movs	r0, #11
 800c1c8:	f7ff f8c0 	bl	800b34c <memp_free>
 800c1cc:	e00d      	b.n	800c1ea <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c1ce:	7bfb      	ldrb	r3, [r7, #15]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d103      	bne.n	800c1dc <pbuf_free+0xd4>
          mem_free(p);
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f7fe fd4b 	bl	800ac70 <mem_free>
 800c1da:	e006      	b.n	800c1ea <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c1dc:	4b0b      	ldr	r3, [pc, #44]	; (800c20c <pbuf_free+0x104>)
 800c1de:	f240 320f 	movw	r2, #783	; 0x30f
 800c1e2:	490f      	ldr	r1, [pc, #60]	; (800c220 <pbuf_free+0x118>)
 800c1e4:	480b      	ldr	r0, [pc, #44]	; (800c214 <pbuf_free+0x10c>)
 800c1e6:	f00d fd1b 	bl	8019c20 <iprintf>
        }
      }
      count++;
 800c1ea:	7ffb      	ldrb	r3, [r7, #31]
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	607b      	str	r3, [r7, #4]
 800c1f4:	e001      	b.n	800c1fa <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d199      	bne.n	800c134 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c200:	7ffb      	ldrb	r3, [r7, #31]
}
 800c202:	4618      	mov	r0, r3
 800c204:	3720      	adds	r7, #32
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	0801c280 	.word	0x0801c280
 800c210:	0801c3e4 	.word	0x0801c3e4
 800c214:	0801c2e0 	.word	0x0801c2e0
 800c218:	0801c410 	.word	0x0801c410
 800c21c:	0801c428 	.word	0x0801c428
 800c220:	0801c44c 	.word	0x0801c44c

0800c224 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c224:	b480      	push	{r7}
 800c226:	b085      	sub	sp, #20
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c22c:	2300      	movs	r3, #0
 800c22e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c230:	e005      	b.n	800c23e <pbuf_clen+0x1a>
    ++len;
 800c232:	89fb      	ldrh	r3, [r7, #14]
 800c234:	3301      	adds	r3, #1
 800c236:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d1f6      	bne.n	800c232 <pbuf_clen+0xe>
  }
  return len;
 800c244:	89fb      	ldrh	r3, [r7, #14]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3714      	adds	r7, #20
 800c24a:	46bd      	mov	sp, r7
 800c24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c250:	4770      	bx	lr
	...

0800c254 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d016      	beq.n	800c290 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c262:	f00b fdb9 	bl	8017dd8 <sys_arch_protect>
 800c266:	60f8      	str	r0, [r7, #12]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	7b9b      	ldrb	r3, [r3, #14]
 800c26c:	3301      	adds	r3, #1
 800c26e:	b2da      	uxtb	r2, r3
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	739a      	strb	r2, [r3, #14]
 800c274:	68f8      	ldr	r0, [r7, #12]
 800c276:	f00b fdbd 	bl	8017df4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	7b9b      	ldrb	r3, [r3, #14]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d106      	bne.n	800c290 <pbuf_ref+0x3c>
 800c282:	4b05      	ldr	r3, [pc, #20]	; (800c298 <pbuf_ref+0x44>)
 800c284:	f240 3242 	movw	r2, #834	; 0x342
 800c288:	4904      	ldr	r1, [pc, #16]	; (800c29c <pbuf_ref+0x48>)
 800c28a:	4805      	ldr	r0, [pc, #20]	; (800c2a0 <pbuf_ref+0x4c>)
 800c28c:	f00d fcc8 	bl	8019c20 <iprintf>
  }
}
 800c290:	bf00      	nop
 800c292:	3710      	adds	r7, #16
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}
 800c298:	0801c280 	.word	0x0801c280
 800c29c:	0801c460 	.word	0x0801c460
 800c2a0:	0801c2e0 	.word	0x0801c2e0

0800c2a4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b084      	sub	sp, #16
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d002      	beq.n	800c2ba <pbuf_cat+0x16>
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d107      	bne.n	800c2ca <pbuf_cat+0x26>
 800c2ba:	4b20      	ldr	r3, [pc, #128]	; (800c33c <pbuf_cat+0x98>)
 800c2bc:	f240 325a 	movw	r2, #858	; 0x35a
 800c2c0:	491f      	ldr	r1, [pc, #124]	; (800c340 <pbuf_cat+0x9c>)
 800c2c2:	4820      	ldr	r0, [pc, #128]	; (800c344 <pbuf_cat+0xa0>)
 800c2c4:	f00d fcac 	bl	8019c20 <iprintf>
 800c2c8:	e034      	b.n	800c334 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	60fb      	str	r3, [r7, #12]
 800c2ce:	e00a      	b.n	800c2e6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	891a      	ldrh	r2, [r3, #8]
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	891b      	ldrh	r3, [r3, #8]
 800c2d8:	4413      	add	r3, r2
 800c2da:	b29a      	uxth	r2, r3
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	60fb      	str	r3, [r7, #12]
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d1f0      	bne.n	800c2d0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	891a      	ldrh	r2, [r3, #8]
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	895b      	ldrh	r3, [r3, #10]
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d006      	beq.n	800c308 <pbuf_cat+0x64>
 800c2fa:	4b10      	ldr	r3, [pc, #64]	; (800c33c <pbuf_cat+0x98>)
 800c2fc:	f240 3262 	movw	r2, #866	; 0x362
 800c300:	4911      	ldr	r1, [pc, #68]	; (800c348 <pbuf_cat+0xa4>)
 800c302:	4810      	ldr	r0, [pc, #64]	; (800c344 <pbuf_cat+0xa0>)
 800c304:	f00d fc8c 	bl	8019c20 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d006      	beq.n	800c31e <pbuf_cat+0x7a>
 800c310:	4b0a      	ldr	r3, [pc, #40]	; (800c33c <pbuf_cat+0x98>)
 800c312:	f240 3263 	movw	r2, #867	; 0x363
 800c316:	490d      	ldr	r1, [pc, #52]	; (800c34c <pbuf_cat+0xa8>)
 800c318:	480a      	ldr	r0, [pc, #40]	; (800c344 <pbuf_cat+0xa0>)
 800c31a:	f00d fc81 	bl	8019c20 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	891a      	ldrh	r2, [r3, #8]
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	891b      	ldrh	r3, [r3, #8]
 800c326:	4413      	add	r3, r2
 800c328:	b29a      	uxth	r2, r3
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	683a      	ldr	r2, [r7, #0]
 800c332:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c334:	3710      	adds	r7, #16
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
 800c33a:	bf00      	nop
 800c33c:	0801c280 	.word	0x0801c280
 800c340:	0801c474 	.word	0x0801c474
 800c344:	0801c2e0 	.word	0x0801c2e0
 800c348:	0801c4ac 	.word	0x0801c4ac
 800c34c:	0801c4dc 	.word	0x0801c4dc

0800c350 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c35a:	6839      	ldr	r1, [r7, #0]
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f7ff ffa1 	bl	800c2a4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c362:	6838      	ldr	r0, [r7, #0]
 800c364:	f7ff ff76 	bl	800c254 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c368:	bf00      	nop
 800c36a:	3708      	adds	r7, #8
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b086      	sub	sp, #24
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c37a:	2300      	movs	r3, #0
 800c37c:	617b      	str	r3, [r7, #20]
 800c37e:	2300      	movs	r3, #0
 800c380:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d008      	beq.n	800c39a <pbuf_copy+0x2a>
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d005      	beq.n	800c39a <pbuf_copy+0x2a>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	891a      	ldrh	r2, [r3, #8]
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	891b      	ldrh	r3, [r3, #8]
 800c396:	429a      	cmp	r2, r3
 800c398:	d209      	bcs.n	800c3ae <pbuf_copy+0x3e>
 800c39a:	4b57      	ldr	r3, [pc, #348]	; (800c4f8 <pbuf_copy+0x188>)
 800c39c:	f240 32ca 	movw	r2, #970	; 0x3ca
 800c3a0:	4956      	ldr	r1, [pc, #344]	; (800c4fc <pbuf_copy+0x18c>)
 800c3a2:	4857      	ldr	r0, [pc, #348]	; (800c500 <pbuf_copy+0x190>)
 800c3a4:	f00d fc3c 	bl	8019c20 <iprintf>
 800c3a8:	f06f 030f 	mvn.w	r3, #15
 800c3ac:	e09f      	b.n	800c4ee <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	895b      	ldrh	r3, [r3, #10]
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	1ad2      	subs	r2, r2, r3
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	895b      	ldrh	r3, [r3, #10]
 800c3bc:	4619      	mov	r1, r3
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	1acb      	subs	r3, r1, r3
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d306      	bcc.n	800c3d4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	895b      	ldrh	r3, [r3, #10]
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	1ad3      	subs	r3, r2, r3
 800c3d0:	60fb      	str	r3, [r7, #12]
 800c3d2:	e005      	b.n	800c3e0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	895b      	ldrh	r3, [r3, #10]
 800c3d8:	461a      	mov	r2, r3
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	1ad3      	subs	r3, r2, r3
 800c3de:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	685a      	ldr	r2, [r3, #4]
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	18d0      	adds	r0, r2, r3
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	685a      	ldr	r2, [r3, #4]
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	4413      	add	r3, r2
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	f00d fc01 	bl	8019bfa <memcpy>
    offset_to += len;
 800c3f8:	697a      	ldr	r2, [r7, #20]
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	4413      	add	r3, r2
 800c3fe:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c400:	693a      	ldr	r2, [r7, #16]
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	4413      	add	r3, r2
 800c406:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	895b      	ldrh	r3, [r3, #10]
 800c40c:	461a      	mov	r2, r3
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	4293      	cmp	r3, r2
 800c412:	d906      	bls.n	800c422 <pbuf_copy+0xb2>
 800c414:	4b38      	ldr	r3, [pc, #224]	; (800c4f8 <pbuf_copy+0x188>)
 800c416:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c41a:	493a      	ldr	r1, [pc, #232]	; (800c504 <pbuf_copy+0x194>)
 800c41c:	4838      	ldr	r0, [pc, #224]	; (800c500 <pbuf_copy+0x190>)
 800c41e:	f00d fbff 	bl	8019c20 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	895b      	ldrh	r3, [r3, #10]
 800c426:	461a      	mov	r2, r3
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d906      	bls.n	800c43c <pbuf_copy+0xcc>
 800c42e:	4b32      	ldr	r3, [pc, #200]	; (800c4f8 <pbuf_copy+0x188>)
 800c430:	f240 32da 	movw	r2, #986	; 0x3da
 800c434:	4934      	ldr	r1, [pc, #208]	; (800c508 <pbuf_copy+0x198>)
 800c436:	4832      	ldr	r0, [pc, #200]	; (800c500 <pbuf_copy+0x190>)
 800c438:	f00d fbf2 	bl	8019c20 <iprintf>
    if (offset_from >= p_from->len) {
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	895b      	ldrh	r3, [r3, #10]
 800c440:	461a      	mov	r2, r3
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	4293      	cmp	r3, r2
 800c446:	d304      	bcc.n	800c452 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c448:	2300      	movs	r3, #0
 800c44a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	895b      	ldrh	r3, [r3, #10]
 800c456:	461a      	mov	r2, r3
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d114      	bne.n	800c488 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c45e:	2300      	movs	r3, #0
 800c460:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d10c      	bne.n	800c488 <pbuf_copy+0x118>
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d009      	beq.n	800c488 <pbuf_copy+0x118>
 800c474:	4b20      	ldr	r3, [pc, #128]	; (800c4f8 <pbuf_copy+0x188>)
 800c476:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c47a:	4924      	ldr	r1, [pc, #144]	; (800c50c <pbuf_copy+0x19c>)
 800c47c:	4820      	ldr	r0, [pc, #128]	; (800c500 <pbuf_copy+0x190>)
 800c47e:	f00d fbcf 	bl	8019c20 <iprintf>
 800c482:	f06f 030f 	mvn.w	r3, #15
 800c486:	e032      	b.n	800c4ee <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d013      	beq.n	800c4b6 <pbuf_copy+0x146>
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	895a      	ldrh	r2, [r3, #10]
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	891b      	ldrh	r3, [r3, #8]
 800c496:	429a      	cmp	r2, r3
 800c498:	d10d      	bne.n	800c4b6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d009      	beq.n	800c4b6 <pbuf_copy+0x146>
 800c4a2:	4b15      	ldr	r3, [pc, #84]	; (800c4f8 <pbuf_copy+0x188>)
 800c4a4:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800c4a8:	4919      	ldr	r1, [pc, #100]	; (800c510 <pbuf_copy+0x1a0>)
 800c4aa:	4815      	ldr	r0, [pc, #84]	; (800c500 <pbuf_copy+0x190>)
 800c4ac:	f00d fbb8 	bl	8019c20 <iprintf>
 800c4b0:	f06f 0305 	mvn.w	r3, #5
 800c4b4:	e01b      	b.n	800c4ee <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d013      	beq.n	800c4e4 <pbuf_copy+0x174>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	895a      	ldrh	r2, [r3, #10]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	891b      	ldrh	r3, [r3, #8]
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d10d      	bne.n	800c4e4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d009      	beq.n	800c4e4 <pbuf_copy+0x174>
 800c4d0:	4b09      	ldr	r3, [pc, #36]	; (800c4f8 <pbuf_copy+0x188>)
 800c4d2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800c4d6:	490e      	ldr	r1, [pc, #56]	; (800c510 <pbuf_copy+0x1a0>)
 800c4d8:	4809      	ldr	r0, [pc, #36]	; (800c500 <pbuf_copy+0x190>)
 800c4da:	f00d fba1 	bl	8019c20 <iprintf>
 800c4de:	f06f 0305 	mvn.w	r3, #5
 800c4e2:	e004      	b.n	800c4ee <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	f47f af61 	bne.w	800c3ae <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c4ec:	2300      	movs	r3, #0
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3718      	adds	r7, #24
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	0801c280 	.word	0x0801c280
 800c4fc:	0801c528 	.word	0x0801c528
 800c500:	0801c2e0 	.word	0x0801c2e0
 800c504:	0801c558 	.word	0x0801c558
 800c508:	0801c570 	.word	0x0801c570
 800c50c:	0801c58c 	.word	0x0801c58c
 800c510:	0801c59c 	.word	0x0801c59c

0800c514 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b088      	sub	sp, #32
 800c518:	af00      	add	r7, sp, #0
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	60b9      	str	r1, [r7, #8]
 800c51e:	4611      	mov	r1, r2
 800c520:	461a      	mov	r2, r3
 800c522:	460b      	mov	r3, r1
 800c524:	80fb      	strh	r3, [r7, #6]
 800c526:	4613      	mov	r3, r2
 800c528:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c52a:	2300      	movs	r3, #0
 800c52c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c52e:	2300      	movs	r3, #0
 800c530:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d108      	bne.n	800c54a <pbuf_copy_partial+0x36>
 800c538:	4b2b      	ldr	r3, [pc, #172]	; (800c5e8 <pbuf_copy_partial+0xd4>)
 800c53a:	f240 420a 	movw	r2, #1034	; 0x40a
 800c53e:	492b      	ldr	r1, [pc, #172]	; (800c5ec <pbuf_copy_partial+0xd8>)
 800c540:	482b      	ldr	r0, [pc, #172]	; (800c5f0 <pbuf_copy_partial+0xdc>)
 800c542:	f00d fb6d 	bl	8019c20 <iprintf>
 800c546:	2300      	movs	r3, #0
 800c548:	e04a      	b.n	800c5e0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d108      	bne.n	800c562 <pbuf_copy_partial+0x4e>
 800c550:	4b25      	ldr	r3, [pc, #148]	; (800c5e8 <pbuf_copy_partial+0xd4>)
 800c552:	f240 420b 	movw	r2, #1035	; 0x40b
 800c556:	4927      	ldr	r1, [pc, #156]	; (800c5f4 <pbuf_copy_partial+0xe0>)
 800c558:	4825      	ldr	r0, [pc, #148]	; (800c5f0 <pbuf_copy_partial+0xdc>)
 800c55a:	f00d fb61 	bl	8019c20 <iprintf>
 800c55e:	2300      	movs	r3, #0
 800c560:	e03e      	b.n	800c5e0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	61fb      	str	r3, [r7, #28]
 800c566:	e034      	b.n	800c5d2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c568:	88bb      	ldrh	r3, [r7, #4]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d00a      	beq.n	800c584 <pbuf_copy_partial+0x70>
 800c56e:	69fb      	ldr	r3, [r7, #28]
 800c570:	895b      	ldrh	r3, [r3, #10]
 800c572:	88ba      	ldrh	r2, [r7, #4]
 800c574:	429a      	cmp	r2, r3
 800c576:	d305      	bcc.n	800c584 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c578:	69fb      	ldr	r3, [r7, #28]
 800c57a:	895b      	ldrh	r3, [r3, #10]
 800c57c:	88ba      	ldrh	r2, [r7, #4]
 800c57e:	1ad3      	subs	r3, r2, r3
 800c580:	80bb      	strh	r3, [r7, #4]
 800c582:	e023      	b.n	800c5cc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c584:	69fb      	ldr	r3, [r7, #28]
 800c586:	895a      	ldrh	r2, [r3, #10]
 800c588:	88bb      	ldrh	r3, [r7, #4]
 800c58a:	1ad3      	subs	r3, r2, r3
 800c58c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c58e:	8b3a      	ldrh	r2, [r7, #24]
 800c590:	88fb      	ldrh	r3, [r7, #6]
 800c592:	429a      	cmp	r2, r3
 800c594:	d901      	bls.n	800c59a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c596:	88fb      	ldrh	r3, [r7, #6]
 800c598:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c59a:	8b7b      	ldrh	r3, [r7, #26]
 800c59c:	68ba      	ldr	r2, [r7, #8]
 800c59e:	18d0      	adds	r0, r2, r3
 800c5a0:	69fb      	ldr	r3, [r7, #28]
 800c5a2:	685a      	ldr	r2, [r3, #4]
 800c5a4:	88bb      	ldrh	r3, [r7, #4]
 800c5a6:	4413      	add	r3, r2
 800c5a8:	8b3a      	ldrh	r2, [r7, #24]
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	f00d fb25 	bl	8019bfa <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c5b0:	8afa      	ldrh	r2, [r7, #22]
 800c5b2:	8b3b      	ldrh	r3, [r7, #24]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c5b8:	8b7a      	ldrh	r2, [r7, #26]
 800c5ba:	8b3b      	ldrh	r3, [r7, #24]
 800c5bc:	4413      	add	r3, r2
 800c5be:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c5c0:	88fa      	ldrh	r2, [r7, #6]
 800c5c2:	8b3b      	ldrh	r3, [r7, #24]
 800c5c4:	1ad3      	subs	r3, r2, r3
 800c5c6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	61fb      	str	r3, [r7, #28]
 800c5d2:	88fb      	ldrh	r3, [r7, #6]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d002      	beq.n	800c5de <pbuf_copy_partial+0xca>
 800c5d8:	69fb      	ldr	r3, [r7, #28]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d1c4      	bne.n	800c568 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c5de:	8afb      	ldrh	r3, [r7, #22]
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3720      	adds	r7, #32
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	0801c280 	.word	0x0801c280
 800c5ec:	0801c5c8 	.word	0x0801c5c8
 800c5f0:	0801c2e0 	.word	0x0801c2e0
 800c5f4:	0801c5e8 	.word	0x0801c5e8

0800c5f8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	4603      	mov	r3, r0
 800c600:	603a      	str	r2, [r7, #0]
 800c602:	71fb      	strb	r3, [r7, #7]
 800c604:	460b      	mov	r3, r1
 800c606:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	8919      	ldrh	r1, [r3, #8]
 800c60c:	88ba      	ldrh	r2, [r7, #4]
 800c60e:	79fb      	ldrb	r3, [r7, #7]
 800c610:	4618      	mov	r0, r3
 800c612:	f7ff fa67 	bl	800bae4 <pbuf_alloc>
 800c616:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d101      	bne.n	800c622 <pbuf_clone+0x2a>
    return NULL;
 800c61e:	2300      	movs	r3, #0
 800c620:	e011      	b.n	800c646 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c622:	6839      	ldr	r1, [r7, #0]
 800c624:	68f8      	ldr	r0, [r7, #12]
 800c626:	f7ff fea3 	bl	800c370 <pbuf_copy>
 800c62a:	4603      	mov	r3, r0
 800c62c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c62e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d006      	beq.n	800c644 <pbuf_clone+0x4c>
 800c636:	4b06      	ldr	r3, [pc, #24]	; (800c650 <pbuf_clone+0x58>)
 800c638:	f240 5224 	movw	r2, #1316	; 0x524
 800c63c:	4905      	ldr	r1, [pc, #20]	; (800c654 <pbuf_clone+0x5c>)
 800c63e:	4806      	ldr	r0, [pc, #24]	; (800c658 <pbuf_clone+0x60>)
 800c640:	f00d faee 	bl	8019c20 <iprintf>
  return q;
 800c644:	68fb      	ldr	r3, [r7, #12]
}
 800c646:	4618      	mov	r0, r3
 800c648:	3710      	adds	r7, #16
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	0801c280 	.word	0x0801c280
 800c654:	0801c6f4 	.word	0x0801c6f4
 800c658:	0801c2e0 	.word	0x0801c2e0

0800c65c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c660:	f00d fb5a 	bl	8019d18 <rand>
 800c664:	4603      	mov	r3, r0
 800c666:	b29b      	uxth	r3, r3
 800c668:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c672:	b29a      	uxth	r2, r3
 800c674:	4b01      	ldr	r3, [pc, #4]	; (800c67c <tcp_init+0x20>)
 800c676:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c678:	bf00      	nop
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	20000010 	.word	0x20000010

0800c680 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	7d1b      	ldrb	r3, [r3, #20]
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	d105      	bne.n	800c69c <tcp_free+0x1c>
 800c690:	4b06      	ldr	r3, [pc, #24]	; (800c6ac <tcp_free+0x2c>)
 800c692:	22d4      	movs	r2, #212	; 0xd4
 800c694:	4906      	ldr	r1, [pc, #24]	; (800c6b0 <tcp_free+0x30>)
 800c696:	4807      	ldr	r0, [pc, #28]	; (800c6b4 <tcp_free+0x34>)
 800c698:	f00d fac2 	bl	8019c20 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c69c:	6879      	ldr	r1, [r7, #4]
 800c69e:	2001      	movs	r0, #1
 800c6a0:	f7fe fe54 	bl	800b34c <memp_free>
}
 800c6a4:	bf00      	nop
 800c6a6:	3708      	adds	r7, #8
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}
 800c6ac:	0801c780 	.word	0x0801c780
 800c6b0:	0801c7b0 	.word	0x0801c7b0
 800c6b4:	0801c7c4 	.word	0x0801c7c4

0800c6b8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	7d1b      	ldrb	r3, [r3, #20]
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d105      	bne.n	800c6d4 <tcp_free_listen+0x1c>
 800c6c8:	4b06      	ldr	r3, [pc, #24]	; (800c6e4 <tcp_free_listen+0x2c>)
 800c6ca:	22df      	movs	r2, #223	; 0xdf
 800c6cc:	4906      	ldr	r1, [pc, #24]	; (800c6e8 <tcp_free_listen+0x30>)
 800c6ce:	4807      	ldr	r0, [pc, #28]	; (800c6ec <tcp_free_listen+0x34>)
 800c6d0:	f00d faa6 	bl	8019c20 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c6d4:	6879      	ldr	r1, [r7, #4]
 800c6d6:	2002      	movs	r0, #2
 800c6d8:	f7fe fe38 	bl	800b34c <memp_free>
}
 800c6dc:	bf00      	nop
 800c6de:	3708      	adds	r7, #8
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}
 800c6e4:	0801c780 	.word	0x0801c780
 800c6e8:	0801c7ec 	.word	0x0801c7ec
 800c6ec:	0801c7c4 	.word	0x0801c7c4

0800c6f0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c6f4:	f001 f850 	bl	800d798 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c6f8:	4b07      	ldr	r3, [pc, #28]	; (800c718 <tcp_tmr+0x28>)
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	3301      	adds	r3, #1
 800c6fe:	b2da      	uxtb	r2, r3
 800c700:	4b05      	ldr	r3, [pc, #20]	; (800c718 <tcp_tmr+0x28>)
 800c702:	701a      	strb	r2, [r3, #0]
 800c704:	4b04      	ldr	r3, [pc, #16]	; (800c718 <tcp_tmr+0x28>)
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	f003 0301 	and.w	r3, r3, #1
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d001      	beq.n	800c714 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c710:	f000 fd04 	bl	800d11c <tcp_slowtmr>
  }
}
 800c714:	bf00      	nop
 800c716:	bd80      	pop	{r7, pc}
 800c718:	2000864d 	.word	0x2000864d

0800c71c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d105      	bne.n	800c738 <tcp_remove_listener+0x1c>
 800c72c:	4b0d      	ldr	r3, [pc, #52]	; (800c764 <tcp_remove_listener+0x48>)
 800c72e:	22ff      	movs	r2, #255	; 0xff
 800c730:	490d      	ldr	r1, [pc, #52]	; (800c768 <tcp_remove_listener+0x4c>)
 800c732:	480e      	ldr	r0, [pc, #56]	; (800c76c <tcp_remove_listener+0x50>)
 800c734:	f00d fa74 	bl	8019c20 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	60fb      	str	r3, [r7, #12]
 800c73c:	e00a      	b.n	800c754 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c742:	683a      	ldr	r2, [r7, #0]
 800c744:	429a      	cmp	r2, r3
 800c746:	d102      	bne.n	800c74e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2200      	movs	r2, #0
 800c74c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	60fb      	str	r3, [r7, #12]
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d1f1      	bne.n	800c73e <tcp_remove_listener+0x22>
    }
  }
}
 800c75a:	bf00      	nop
 800c75c:	3710      	adds	r7, #16
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
 800c762:	bf00      	nop
 800c764:	0801c780 	.word	0x0801c780
 800c768:	0801c808 	.word	0x0801c808
 800c76c:	0801c7c4 	.word	0x0801c7c4

0800c770 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b084      	sub	sp, #16
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d106      	bne.n	800c78c <tcp_listen_closed+0x1c>
 800c77e:	4b14      	ldr	r3, [pc, #80]	; (800c7d0 <tcp_listen_closed+0x60>)
 800c780:	f240 1211 	movw	r2, #273	; 0x111
 800c784:	4913      	ldr	r1, [pc, #76]	; (800c7d4 <tcp_listen_closed+0x64>)
 800c786:	4814      	ldr	r0, [pc, #80]	; (800c7d8 <tcp_listen_closed+0x68>)
 800c788:	f00d fa4a 	bl	8019c20 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	7d1b      	ldrb	r3, [r3, #20]
 800c790:	2b01      	cmp	r3, #1
 800c792:	d006      	beq.n	800c7a2 <tcp_listen_closed+0x32>
 800c794:	4b0e      	ldr	r3, [pc, #56]	; (800c7d0 <tcp_listen_closed+0x60>)
 800c796:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c79a:	4910      	ldr	r1, [pc, #64]	; (800c7dc <tcp_listen_closed+0x6c>)
 800c79c:	480e      	ldr	r0, [pc, #56]	; (800c7d8 <tcp_listen_closed+0x68>)
 800c79e:	f00d fa3f 	bl	8019c20 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	60fb      	str	r3, [r7, #12]
 800c7a6:	e00b      	b.n	800c7c0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c7a8:	4a0d      	ldr	r2, [pc, #52]	; (800c7e0 <tcp_listen_closed+0x70>)
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	6879      	ldr	r1, [r7, #4]
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7ff ffb1 	bl	800c71c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	3301      	adds	r3, #1
 800c7be:	60fb      	str	r3, [r7, #12]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2b03      	cmp	r3, #3
 800c7c4:	d9f0      	bls.n	800c7a8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c7c6:	bf00      	nop
 800c7c8:	3710      	adds	r7, #16
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	0801c780 	.word	0x0801c780
 800c7d4:	0801c830 	.word	0x0801c830
 800c7d8:	0801c7c4 	.word	0x0801c7c4
 800c7dc:	0801c83c 	.word	0x0801c83c
 800c7e0:	0801ec54 	.word	0x0801ec54

0800c7e4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c7e4:	b5b0      	push	{r4, r5, r7, lr}
 800c7e6:	b088      	sub	sp, #32
 800c7e8:	af04      	add	r7, sp, #16
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	460b      	mov	r3, r1
 800c7ee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d106      	bne.n	800c804 <tcp_close_shutdown+0x20>
 800c7f6:	4b61      	ldr	r3, [pc, #388]	; (800c97c <tcp_close_shutdown+0x198>)
 800c7f8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c7fc:	4960      	ldr	r1, [pc, #384]	; (800c980 <tcp_close_shutdown+0x19c>)
 800c7fe:	4861      	ldr	r0, [pc, #388]	; (800c984 <tcp_close_shutdown+0x1a0>)
 800c800:	f00d fa0e 	bl	8019c20 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c804:	78fb      	ldrb	r3, [r7, #3]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d066      	beq.n	800c8d8 <tcp_close_shutdown+0xf4>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	7d1b      	ldrb	r3, [r3, #20]
 800c80e:	2b04      	cmp	r3, #4
 800c810:	d003      	beq.n	800c81a <tcp_close_shutdown+0x36>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	7d1b      	ldrb	r3, [r3, #20]
 800c816:	2b07      	cmp	r3, #7
 800c818:	d15e      	bne.n	800c8d8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d104      	bne.n	800c82c <tcp_close_shutdown+0x48>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c826:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c82a:	d055      	beq.n	800c8d8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	8b5b      	ldrh	r3, [r3, #26]
 800c830:	f003 0310 	and.w	r3, r3, #16
 800c834:	2b00      	cmp	r3, #0
 800c836:	d106      	bne.n	800c846 <tcp_close_shutdown+0x62>
 800c838:	4b50      	ldr	r3, [pc, #320]	; (800c97c <tcp_close_shutdown+0x198>)
 800c83a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c83e:	4952      	ldr	r1, [pc, #328]	; (800c988 <tcp_close_shutdown+0x1a4>)
 800c840:	4850      	ldr	r0, [pc, #320]	; (800c984 <tcp_close_shutdown+0x1a0>)
 800c842:	f00d f9ed 	bl	8019c20 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c84e:	687d      	ldr	r5, [r7, #4]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	3304      	adds	r3, #4
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	8ad2      	ldrh	r2, [r2, #22]
 800c858:	6879      	ldr	r1, [r7, #4]
 800c85a:	8b09      	ldrh	r1, [r1, #24]
 800c85c:	9102      	str	r1, [sp, #8]
 800c85e:	9201      	str	r2, [sp, #4]
 800c860:	9300      	str	r3, [sp, #0]
 800c862:	462b      	mov	r3, r5
 800c864:	4622      	mov	r2, r4
 800c866:	4601      	mov	r1, r0
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f005 fd71 	bl	8012350 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f001 fb40 	bl	800def4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c874:	4b45      	ldr	r3, [pc, #276]	; (800c98c <tcp_close_shutdown+0x1a8>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	687a      	ldr	r2, [r7, #4]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d105      	bne.n	800c88a <tcp_close_shutdown+0xa6>
 800c87e:	4b43      	ldr	r3, [pc, #268]	; (800c98c <tcp_close_shutdown+0x1a8>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	68db      	ldr	r3, [r3, #12]
 800c884:	4a41      	ldr	r2, [pc, #260]	; (800c98c <tcp_close_shutdown+0x1a8>)
 800c886:	6013      	str	r3, [r2, #0]
 800c888:	e013      	b.n	800c8b2 <tcp_close_shutdown+0xce>
 800c88a:	4b40      	ldr	r3, [pc, #256]	; (800c98c <tcp_close_shutdown+0x1a8>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	60fb      	str	r3, [r7, #12]
 800c890:	e00c      	b.n	800c8ac <tcp_close_shutdown+0xc8>
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	68db      	ldr	r3, [r3, #12]
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	429a      	cmp	r2, r3
 800c89a:	d104      	bne.n	800c8a6 <tcp_close_shutdown+0xc2>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	68da      	ldr	r2, [r3, #12]
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	60da      	str	r2, [r3, #12]
 800c8a4:	e005      	b.n	800c8b2 <tcp_close_shutdown+0xce>
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	68db      	ldr	r3, [r3, #12]
 800c8aa:	60fb      	str	r3, [r7, #12]
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d1ef      	bne.n	800c892 <tcp_close_shutdown+0xae>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	60da      	str	r2, [r3, #12]
 800c8b8:	4b35      	ldr	r3, [pc, #212]	; (800c990 <tcp_close_shutdown+0x1ac>)
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c8be:	4b35      	ldr	r3, [pc, #212]	; (800c994 <tcp_close_shutdown+0x1b0>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d102      	bne.n	800c8ce <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c8c8:	f003 ffd2 	bl	8010870 <tcp_trigger_input_pcb_close>
 800c8cc:	e002      	b.n	800c8d4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f7ff fed6 	bl	800c680 <tcp_free>
      }
      return ERR_OK;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	e04d      	b.n	800c974 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	7d1b      	ldrb	r3, [r3, #20]
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d02d      	beq.n	800c93c <tcp_close_shutdown+0x158>
 800c8e0:	2b02      	cmp	r3, #2
 800c8e2:	d036      	beq.n	800c952 <tcp_close_shutdown+0x16e>
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d13f      	bne.n	800c968 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	8adb      	ldrh	r3, [r3, #22]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d021      	beq.n	800c934 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c8f0:	4b29      	ldr	r3, [pc, #164]	; (800c998 <tcp_close_shutdown+0x1b4>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d105      	bne.n	800c906 <tcp_close_shutdown+0x122>
 800c8fa:	4b27      	ldr	r3, [pc, #156]	; (800c998 <tcp_close_shutdown+0x1b4>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	68db      	ldr	r3, [r3, #12]
 800c900:	4a25      	ldr	r2, [pc, #148]	; (800c998 <tcp_close_shutdown+0x1b4>)
 800c902:	6013      	str	r3, [r2, #0]
 800c904:	e013      	b.n	800c92e <tcp_close_shutdown+0x14a>
 800c906:	4b24      	ldr	r3, [pc, #144]	; (800c998 <tcp_close_shutdown+0x1b4>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	60bb      	str	r3, [r7, #8]
 800c90c:	e00c      	b.n	800c928 <tcp_close_shutdown+0x144>
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	68db      	ldr	r3, [r3, #12]
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	429a      	cmp	r2, r3
 800c916:	d104      	bne.n	800c922 <tcp_close_shutdown+0x13e>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	68da      	ldr	r2, [r3, #12]
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	60da      	str	r2, [r3, #12]
 800c920:	e005      	b.n	800c92e <tcp_close_shutdown+0x14a>
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	68db      	ldr	r3, [r3, #12]
 800c926:	60bb      	str	r3, [r7, #8]
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d1ef      	bne.n	800c90e <tcp_close_shutdown+0x12a>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2200      	movs	r2, #0
 800c932:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f7ff fea3 	bl	800c680 <tcp_free>
      break;
 800c93a:	e01a      	b.n	800c972 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f7ff ff17 	bl	800c770 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c942:	6879      	ldr	r1, [r7, #4]
 800c944:	4815      	ldr	r0, [pc, #84]	; (800c99c <tcp_close_shutdown+0x1b8>)
 800c946:	f001 fb25 	bl	800df94 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f7ff feb4 	bl	800c6b8 <tcp_free_listen>
      break;
 800c950:	e00f      	b.n	800c972 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c952:	6879      	ldr	r1, [r7, #4]
 800c954:	480d      	ldr	r0, [pc, #52]	; (800c98c <tcp_close_shutdown+0x1a8>)
 800c956:	f001 fb1d 	bl	800df94 <tcp_pcb_remove>
 800c95a:	4b0d      	ldr	r3, [pc, #52]	; (800c990 <tcp_close_shutdown+0x1ac>)
 800c95c:	2201      	movs	r2, #1
 800c95e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f7ff fe8d 	bl	800c680 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c966:	e004      	b.n	800c972 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 f819 	bl	800c9a0 <tcp_close_shutdown_fin>
 800c96e:	4603      	mov	r3, r0
 800c970:	e000      	b.n	800c974 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800c972:	2300      	movs	r3, #0
}
 800c974:	4618      	mov	r0, r3
 800c976:	3710      	adds	r7, #16
 800c978:	46bd      	mov	sp, r7
 800c97a:	bdb0      	pop	{r4, r5, r7, pc}
 800c97c:	0801c780 	.word	0x0801c780
 800c980:	0801c854 	.word	0x0801c854
 800c984:	0801c7c4 	.word	0x0801c7c4
 800c988:	0801c874 	.word	0x0801c874
 800c98c:	2000fd38 	.word	0x2000fd38
 800c990:	2000fd34 	.word	0x2000fd34
 800c994:	2000fd4c 	.word	0x2000fd4c
 800c998:	2000fd44 	.word	0x2000fd44
 800c99c:	2000fd40 	.word	0x2000fd40

0800c9a0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b084      	sub	sp, #16
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d106      	bne.n	800c9bc <tcp_close_shutdown_fin+0x1c>
 800c9ae:	4b2c      	ldr	r3, [pc, #176]	; (800ca60 <tcp_close_shutdown_fin+0xc0>)
 800c9b0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c9b4:	492b      	ldr	r1, [pc, #172]	; (800ca64 <tcp_close_shutdown_fin+0xc4>)
 800c9b6:	482c      	ldr	r0, [pc, #176]	; (800ca68 <tcp_close_shutdown_fin+0xc8>)
 800c9b8:	f00d f932 	bl	8019c20 <iprintf>

  switch (pcb->state) {
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	7d1b      	ldrb	r3, [r3, #20]
 800c9c0:	2b04      	cmp	r3, #4
 800c9c2:	d010      	beq.n	800c9e6 <tcp_close_shutdown_fin+0x46>
 800c9c4:	2b07      	cmp	r3, #7
 800c9c6:	d01b      	beq.n	800ca00 <tcp_close_shutdown_fin+0x60>
 800c9c8:	2b03      	cmp	r3, #3
 800c9ca:	d126      	bne.n	800ca1a <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f004 fdbb 	bl	8011548 <tcp_send_fin>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c9d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d11f      	bne.n	800ca1e <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2205      	movs	r2, #5
 800c9e2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c9e4:	e01b      	b.n	800ca1e <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f004 fdae 	bl	8011548 <tcp_send_fin>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c9f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d114      	bne.n	800ca22 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2205      	movs	r2, #5
 800c9fc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c9fe:	e010      	b.n	800ca22 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f004 fda1 	bl	8011548 <tcp_send_fin>
 800ca06:	4603      	mov	r3, r0
 800ca08:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ca0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d109      	bne.n	800ca26 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2209      	movs	r2, #9
 800ca16:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ca18:	e005      	b.n	800ca26 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	e01c      	b.n	800ca58 <tcp_close_shutdown_fin+0xb8>
      break;
 800ca1e:	bf00      	nop
 800ca20:	e002      	b.n	800ca28 <tcp_close_shutdown_fin+0x88>
      break;
 800ca22:	bf00      	nop
 800ca24:	e000      	b.n	800ca28 <tcp_close_shutdown_fin+0x88>
      break;
 800ca26:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ca28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d103      	bne.n	800ca38 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f004 fec7 	bl	80117c4 <tcp_output>
 800ca36:	e00d      	b.n	800ca54 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800ca38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca40:	d108      	bne.n	800ca54 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	8b5b      	ldrh	r3, [r3, #26]
 800ca46:	f043 0308 	orr.w	r3, r3, #8
 800ca4a:	b29a      	uxth	r2, r3
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ca50:	2300      	movs	r3, #0
 800ca52:	e001      	b.n	800ca58 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800ca54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3710      	adds	r7, #16
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	0801c780 	.word	0x0801c780
 800ca64:	0801c830 	.word	0x0801c830
 800ca68:	0801c7c4 	.word	0x0801c7c4

0800ca6c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d109      	bne.n	800ca8e <tcp_close+0x22>
 800ca7a:	4b0f      	ldr	r3, [pc, #60]	; (800cab8 <tcp_close+0x4c>)
 800ca7c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800ca80:	490e      	ldr	r1, [pc, #56]	; (800cabc <tcp_close+0x50>)
 800ca82:	480f      	ldr	r0, [pc, #60]	; (800cac0 <tcp_close+0x54>)
 800ca84:	f00d f8cc 	bl	8019c20 <iprintf>
 800ca88:	f06f 030f 	mvn.w	r3, #15
 800ca8c:	e00f      	b.n	800caae <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	7d1b      	ldrb	r3, [r3, #20]
 800ca92:	2b01      	cmp	r3, #1
 800ca94:	d006      	beq.n	800caa4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	8b5b      	ldrh	r3, [r3, #26]
 800ca9a:	f043 0310 	orr.w	r3, r3, #16
 800ca9e:	b29a      	uxth	r2, r3
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800caa4:	2101      	movs	r1, #1
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f7ff fe9c 	bl	800c7e4 <tcp_close_shutdown>
 800caac:	4603      	mov	r3, r0
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3708      	adds	r7, #8
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop
 800cab8:	0801c780 	.word	0x0801c780
 800cabc:	0801c890 	.word	0x0801c890
 800cac0:	0801c7c4 	.word	0x0801c7c4

0800cac4 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
 800caca:	60f8      	str	r0, [r7, #12]
 800cacc:	60b9      	str	r1, [r7, #8]
 800cace:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d109      	bne.n	800caea <tcp_shutdown+0x26>
 800cad6:	4b25      	ldr	r3, [pc, #148]	; (800cb6c <tcp_shutdown+0xa8>)
 800cad8:	f240 2207 	movw	r2, #519	; 0x207
 800cadc:	4924      	ldr	r1, [pc, #144]	; (800cb70 <tcp_shutdown+0xac>)
 800cade:	4825      	ldr	r0, [pc, #148]	; (800cb74 <tcp_shutdown+0xb0>)
 800cae0:	f00d f89e 	bl	8019c20 <iprintf>
 800cae4:	f06f 030f 	mvn.w	r3, #15
 800cae8:	e03c      	b.n	800cb64 <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	7d1b      	ldrb	r3, [r3, #20]
 800caee:	2b01      	cmp	r3, #1
 800caf0:	d102      	bne.n	800caf8 <tcp_shutdown+0x34>
    return ERR_CONN;
 800caf2:	f06f 030a 	mvn.w	r3, #10
 800caf6:	e035      	b.n	800cb64 <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d01b      	beq.n	800cb36 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	8b5b      	ldrh	r3, [r3, #26]
 800cb02:	f043 0310 	orr.w	r3, r3, #16
 800cb06:	b29a      	uxth	r2, r3
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d005      	beq.n	800cb1e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800cb12:	2101      	movs	r1, #1
 800cb14:	68f8      	ldr	r0, [r7, #12]
 800cb16:	f7ff fe65 	bl	800c7e4 <tcp_close_shutdown>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	e022      	b.n	800cb64 <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d007      	beq.n	800cb36 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7ff faec 	bl	800c108 <pbuf_free>
      pcb->refused_data = NULL;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2200      	movs	r2, #0
 800cb34:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d012      	beq.n	800cb62 <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	7d1b      	ldrb	r3, [r3, #20]
 800cb40:	2b03      	cmp	r3, #3
 800cb42:	db0b      	blt.n	800cb5c <tcp_shutdown+0x98>
 800cb44:	2b04      	cmp	r3, #4
 800cb46:	dd01      	ble.n	800cb4c <tcp_shutdown+0x88>
 800cb48:	2b07      	cmp	r3, #7
 800cb4a:	d107      	bne.n	800cb5c <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	4619      	mov	r1, r3
 800cb52:	68f8      	ldr	r0, [r7, #12]
 800cb54:	f7ff fe46 	bl	800c7e4 <tcp_close_shutdown>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	e003      	b.n	800cb64 <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800cb5c:	f06f 030a 	mvn.w	r3, #10
 800cb60:	e000      	b.n	800cb64 <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 800cb62:	2300      	movs	r3, #0
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3710      	adds	r7, #16
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	0801c780 	.word	0x0801c780
 800cb70:	0801c8a8 	.word	0x0801c8a8
 800cb74:	0801c7c4 	.word	0x0801c7c4

0800cb78 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b08e      	sub	sp, #56	; 0x38
 800cb7c:	af04      	add	r7, sp, #16
 800cb7e:	6078      	str	r0, [r7, #4]
 800cb80:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d107      	bne.n	800cb98 <tcp_abandon+0x20>
 800cb88:	4b52      	ldr	r3, [pc, #328]	; (800ccd4 <tcp_abandon+0x15c>)
 800cb8a:	f240 223d 	movw	r2, #573	; 0x23d
 800cb8e:	4952      	ldr	r1, [pc, #328]	; (800ccd8 <tcp_abandon+0x160>)
 800cb90:	4852      	ldr	r0, [pc, #328]	; (800ccdc <tcp_abandon+0x164>)
 800cb92:	f00d f845 	bl	8019c20 <iprintf>
 800cb96:	e099      	b.n	800cccc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	7d1b      	ldrb	r3, [r3, #20]
 800cb9c:	2b01      	cmp	r3, #1
 800cb9e:	d106      	bne.n	800cbae <tcp_abandon+0x36>
 800cba0:	4b4c      	ldr	r3, [pc, #304]	; (800ccd4 <tcp_abandon+0x15c>)
 800cba2:	f240 2241 	movw	r2, #577	; 0x241
 800cba6:	494e      	ldr	r1, [pc, #312]	; (800cce0 <tcp_abandon+0x168>)
 800cba8:	484c      	ldr	r0, [pc, #304]	; (800ccdc <tcp_abandon+0x164>)
 800cbaa:	f00d f839 	bl	8019c20 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	7d1b      	ldrb	r3, [r3, #20]
 800cbb2:	2b0a      	cmp	r3, #10
 800cbb4:	d107      	bne.n	800cbc6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cbb6:	6879      	ldr	r1, [r7, #4]
 800cbb8:	484a      	ldr	r0, [pc, #296]	; (800cce4 <tcp_abandon+0x16c>)
 800cbba:	f001 f9eb 	bl	800df94 <tcp_pcb_remove>
    tcp_free(pcb);
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f7ff fd5e 	bl	800c680 <tcp_free>
 800cbc4:	e082      	b.n	800cccc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbd2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbe0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	691b      	ldr	r3, [r3, #16]
 800cbe6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	7d1b      	ldrb	r3, [r3, #20]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d126      	bne.n	800cc3e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	8adb      	ldrh	r3, [r3, #22]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d02e      	beq.n	800cc56 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cbf8:	4b3b      	ldr	r3, [pc, #236]	; (800cce8 <tcp_abandon+0x170>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d105      	bne.n	800cc0e <tcp_abandon+0x96>
 800cc02:	4b39      	ldr	r3, [pc, #228]	; (800cce8 <tcp_abandon+0x170>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	68db      	ldr	r3, [r3, #12]
 800cc08:	4a37      	ldr	r2, [pc, #220]	; (800cce8 <tcp_abandon+0x170>)
 800cc0a:	6013      	str	r3, [r2, #0]
 800cc0c:	e013      	b.n	800cc36 <tcp_abandon+0xbe>
 800cc0e:	4b36      	ldr	r3, [pc, #216]	; (800cce8 <tcp_abandon+0x170>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	61fb      	str	r3, [r7, #28]
 800cc14:	e00c      	b.n	800cc30 <tcp_abandon+0xb8>
 800cc16:	69fb      	ldr	r3, [r7, #28]
 800cc18:	68db      	ldr	r3, [r3, #12]
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d104      	bne.n	800cc2a <tcp_abandon+0xb2>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	68da      	ldr	r2, [r3, #12]
 800cc24:	69fb      	ldr	r3, [r7, #28]
 800cc26:	60da      	str	r2, [r3, #12]
 800cc28:	e005      	b.n	800cc36 <tcp_abandon+0xbe>
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	68db      	ldr	r3, [r3, #12]
 800cc2e:	61fb      	str	r3, [r7, #28]
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d1ef      	bne.n	800cc16 <tcp_abandon+0x9e>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	60da      	str	r2, [r3, #12]
 800cc3c:	e00b      	b.n	800cc56 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	8adb      	ldrh	r3, [r3, #22]
 800cc46:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cc48:	6879      	ldr	r1, [r7, #4]
 800cc4a:	4828      	ldr	r0, [pc, #160]	; (800ccec <tcp_abandon+0x174>)
 800cc4c:	f001 f9a2 	bl	800df94 <tcp_pcb_remove>
 800cc50:	4b27      	ldr	r3, [pc, #156]	; (800ccf0 <tcp_abandon+0x178>)
 800cc52:	2201      	movs	r2, #1
 800cc54:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d004      	beq.n	800cc68 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc62:	4618      	mov	r0, r3
 800cc64:	f000 fe78 	bl	800d958 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d004      	beq.n	800cc7a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc74:	4618      	mov	r0, r3
 800cc76:	f000 fe6f 	bl	800d958 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d004      	beq.n	800cc8c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc86:	4618      	mov	r0, r3
 800cc88:	f000 fe66 	bl	800d958 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800cc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d00e      	beq.n	800ccb0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cc92:	6879      	ldr	r1, [r7, #4]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	3304      	adds	r3, #4
 800cc98:	687a      	ldr	r2, [r7, #4]
 800cc9a:	8b12      	ldrh	r2, [r2, #24]
 800cc9c:	9202      	str	r2, [sp, #8]
 800cc9e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cca0:	9201      	str	r2, [sp, #4]
 800cca2:	9300      	str	r3, [sp, #0]
 800cca4:	460b      	mov	r3, r1
 800cca6:	697a      	ldr	r2, [r7, #20]
 800cca8:	69b9      	ldr	r1, [r7, #24]
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f005 fb50 	bl	8012350 <tcp_rst>
    }
    last_state = pcb->state;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	7d1b      	ldrb	r3, [r3, #20]
 800ccb4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f7ff fce2 	bl	800c680 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d004      	beq.n	800cccc <tcp_abandon+0x154>
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	f06f 010c 	mvn.w	r1, #12
 800ccc8:	68f8      	ldr	r0, [r7, #12]
 800ccca:	4798      	blx	r3
  }
}
 800cccc:	3728      	adds	r7, #40	; 0x28
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop
 800ccd4:	0801c780 	.word	0x0801c780
 800ccd8:	0801c8c4 	.word	0x0801c8c4
 800ccdc:	0801c7c4 	.word	0x0801c7c4
 800cce0:	0801c8e0 	.word	0x0801c8e0
 800cce4:	2000fd48 	.word	0x2000fd48
 800cce8:	2000fd44 	.word	0x2000fd44
 800ccec:	2000fd38 	.word	0x2000fd38
 800ccf0:	2000fd34 	.word	0x2000fd34

0800ccf4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b082      	sub	sp, #8
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ccfc:	2101      	movs	r1, #1
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f7ff ff3a 	bl	800cb78 <tcp_abandon>
}
 800cd04:	bf00      	nop
 800cd06:	3708      	adds	r7, #8
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}

0800cd0c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b084      	sub	sp, #16
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d106      	bne.n	800cd28 <tcp_update_rcv_ann_wnd+0x1c>
 800cd1a:	4b25      	ldr	r3, [pc, #148]	; (800cdb0 <tcp_update_rcv_ann_wnd+0xa4>)
 800cd1c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800cd20:	4924      	ldr	r1, [pc, #144]	; (800cdb4 <tcp_update_rcv_ann_wnd+0xa8>)
 800cd22:	4825      	ldr	r0, [pc, #148]	; (800cdb8 <tcp_update_rcv_ann_wnd+0xac>)
 800cd24:	f00c ff7c 	bl	8019c20 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd2c:	687a      	ldr	r2, [r7, #4]
 800cd2e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800cd30:	4413      	add	r3, r2
 800cd32:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800cd3c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800cd40:	bf28      	it	cs
 800cd42:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800cd46:	b292      	uxth	r2, r2
 800cd48:	4413      	add	r3, r2
 800cd4a:	68fa      	ldr	r2, [r7, #12]
 800cd4c:	1ad3      	subs	r3, r2, r3
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	db08      	blt.n	800cd64 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd5e:	68fa      	ldr	r2, [r7, #12]
 800cd60:	1ad3      	subs	r3, r2, r3
 800cd62:	e020      	b.n	800cda6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd6c:	1ad3      	subs	r3, r2, r3
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	dd03      	ble.n	800cd7a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2200      	movs	r2, #0
 800cd76:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cd78:	e014      	b.n	800cda4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd82:	1ad3      	subs	r3, r2, r3
 800cd84:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd8c:	d306      	bcc.n	800cd9c <tcp_update_rcv_ann_wnd+0x90>
 800cd8e:	4b08      	ldr	r3, [pc, #32]	; (800cdb0 <tcp_update_rcv_ann_wnd+0xa4>)
 800cd90:	f240 32b6 	movw	r2, #950	; 0x3b6
 800cd94:	4909      	ldr	r1, [pc, #36]	; (800cdbc <tcp_update_rcv_ann_wnd+0xb0>)
 800cd96:	4808      	ldr	r0, [pc, #32]	; (800cdb8 <tcp_update_rcv_ann_wnd+0xac>)
 800cd98:	f00c ff42 	bl	8019c20 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	b29a      	uxth	r2, r3
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800cda4:	2300      	movs	r3, #0
  }
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3710      	adds	r7, #16
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}
 800cdae:	bf00      	nop
 800cdb0:	0801c780 	.word	0x0801c780
 800cdb4:	0801c9dc 	.word	0x0801c9dc
 800cdb8:	0801c7c4 	.word	0x0801c7c4
 800cdbc:	0801ca00 	.word	0x0801ca00

0800cdc0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	460b      	mov	r3, r1
 800cdca:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d107      	bne.n	800cde2 <tcp_recved+0x22>
 800cdd2:	4b1f      	ldr	r3, [pc, #124]	; (800ce50 <tcp_recved+0x90>)
 800cdd4:	f240 32cf 	movw	r2, #975	; 0x3cf
 800cdd8:	491e      	ldr	r1, [pc, #120]	; (800ce54 <tcp_recved+0x94>)
 800cdda:	481f      	ldr	r0, [pc, #124]	; (800ce58 <tcp_recved+0x98>)
 800cddc:	f00c ff20 	bl	8019c20 <iprintf>
 800cde0:	e032      	b.n	800ce48 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	7d1b      	ldrb	r3, [r3, #20]
 800cde6:	2b01      	cmp	r3, #1
 800cde8:	d106      	bne.n	800cdf8 <tcp_recved+0x38>
 800cdea:	4b19      	ldr	r3, [pc, #100]	; (800ce50 <tcp_recved+0x90>)
 800cdec:	f240 32d3 	movw	r2, #979	; 0x3d3
 800cdf0:	491a      	ldr	r1, [pc, #104]	; (800ce5c <tcp_recved+0x9c>)
 800cdf2:	4819      	ldr	r0, [pc, #100]	; (800ce58 <tcp_recved+0x98>)
 800cdf4:	f00c ff14 	bl	8019c20 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cdfc:	887b      	ldrh	r3, [r7, #2]
 800cdfe:	4413      	add	r3, r2
 800ce00:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ce02:	89fb      	ldrh	r3, [r7, #14]
 800ce04:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ce08:	d804      	bhi.n	800ce14 <tcp_recved+0x54>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce0e:	89fa      	ldrh	r2, [r7, #14]
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d204      	bcs.n	800ce1e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ce1a:	851a      	strh	r2, [r3, #40]	; 0x28
 800ce1c:	e002      	b.n	800ce24 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	89fa      	ldrh	r2, [r7, #14]
 800ce22:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f7ff ff71 	bl	800cd0c <tcp_update_rcv_ann_wnd>
 800ce2a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ce32:	d309      	bcc.n	800ce48 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	8b5b      	ldrh	r3, [r3, #26]
 800ce38:	f043 0302 	orr.w	r3, r3, #2
 800ce3c:	b29a      	uxth	r2, r3
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f004 fcbe 	bl	80117c4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ce48:	3710      	adds	r7, #16
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
 800ce4e:	bf00      	nop
 800ce50:	0801c780 	.word	0x0801c780
 800ce54:	0801ca1c 	.word	0x0801ca1c
 800ce58:	0801c7c4 	.word	0x0801c7c4
 800ce5c:	0801ca34 	.word	0x0801ca34

0800ce60 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b083      	sub	sp, #12
 800ce64:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800ce66:	2300      	movs	r3, #0
 800ce68:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800ce6a:	4b1e      	ldr	r3, [pc, #120]	; (800cee4 <tcp_new_port+0x84>)
 800ce6c:	881b      	ldrh	r3, [r3, #0]
 800ce6e:	3301      	adds	r3, #1
 800ce70:	b29a      	uxth	r2, r3
 800ce72:	4b1c      	ldr	r3, [pc, #112]	; (800cee4 <tcp_new_port+0x84>)
 800ce74:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800ce76:	4b1b      	ldr	r3, [pc, #108]	; (800cee4 <tcp_new_port+0x84>)
 800ce78:	881b      	ldrh	r3, [r3, #0]
 800ce7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d103      	bne.n	800ce8a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ce82:	4b18      	ldr	r3, [pc, #96]	; (800cee4 <tcp_new_port+0x84>)
 800ce84:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ce88:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	71fb      	strb	r3, [r7, #7]
 800ce8e:	e01e      	b.n	800cece <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ce90:	79fb      	ldrb	r3, [r7, #7]
 800ce92:	4a15      	ldr	r2, [pc, #84]	; (800cee8 <tcp_new_port+0x88>)
 800ce94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	603b      	str	r3, [r7, #0]
 800ce9c:	e011      	b.n	800cec2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	8ada      	ldrh	r2, [r3, #22]
 800cea2:	4b10      	ldr	r3, [pc, #64]	; (800cee4 <tcp_new_port+0x84>)
 800cea4:	881b      	ldrh	r3, [r3, #0]
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d108      	bne.n	800cebc <tcp_new_port+0x5c>
        n++;
 800ceaa:	88bb      	ldrh	r3, [r7, #4]
 800ceac:	3301      	adds	r3, #1
 800ceae:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ceb0:	88bb      	ldrh	r3, [r7, #4]
 800ceb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ceb6:	d3d8      	bcc.n	800ce6a <tcp_new_port+0xa>
          return 0;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	e00d      	b.n	800ced8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	68db      	ldr	r3, [r3, #12]
 800cec0:	603b      	str	r3, [r7, #0]
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d1ea      	bne.n	800ce9e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cec8:	79fb      	ldrb	r3, [r7, #7]
 800ceca:	3301      	adds	r3, #1
 800cecc:	71fb      	strb	r3, [r7, #7]
 800cece:	79fb      	ldrb	r3, [r7, #7]
 800ced0:	2b03      	cmp	r3, #3
 800ced2:	d9dd      	bls.n	800ce90 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ced4:	4b03      	ldr	r3, [pc, #12]	; (800cee4 <tcp_new_port+0x84>)
 800ced6:	881b      	ldrh	r3, [r3, #0]
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	370c      	adds	r7, #12
 800cedc:	46bd      	mov	sp, r7
 800cede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee2:	4770      	bx	lr
 800cee4:	20000010 	.word	0x20000010
 800cee8:	0801ec54 	.word	0x0801ec54

0800ceec <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b08a      	sub	sp, #40	; 0x28
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	60b9      	str	r1, [r7, #8]
 800cef6:	603b      	str	r3, [r7, #0]
 800cef8:	4613      	mov	r3, r2
 800cefa:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800cefc:	2300      	movs	r3, #0
 800cefe:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d109      	bne.n	800cf1a <tcp_connect+0x2e>
 800cf06:	4b7d      	ldr	r3, [pc, #500]	; (800d0fc <tcp_connect+0x210>)
 800cf08:	f240 4235 	movw	r2, #1077	; 0x435
 800cf0c:	497c      	ldr	r1, [pc, #496]	; (800d100 <tcp_connect+0x214>)
 800cf0e:	487d      	ldr	r0, [pc, #500]	; (800d104 <tcp_connect+0x218>)
 800cf10:	f00c fe86 	bl	8019c20 <iprintf>
 800cf14:	f06f 030f 	mvn.w	r3, #15
 800cf18:	e0ec      	b.n	800d0f4 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d109      	bne.n	800cf34 <tcp_connect+0x48>
 800cf20:	4b76      	ldr	r3, [pc, #472]	; (800d0fc <tcp_connect+0x210>)
 800cf22:	f240 4236 	movw	r2, #1078	; 0x436
 800cf26:	4978      	ldr	r1, [pc, #480]	; (800d108 <tcp_connect+0x21c>)
 800cf28:	4876      	ldr	r0, [pc, #472]	; (800d104 <tcp_connect+0x218>)
 800cf2a:	f00c fe79 	bl	8019c20 <iprintf>
 800cf2e:	f06f 030f 	mvn.w	r3, #15
 800cf32:	e0df      	b.n	800d0f4 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	7d1b      	ldrb	r3, [r3, #20]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d009      	beq.n	800cf50 <tcp_connect+0x64>
 800cf3c:	4b6f      	ldr	r3, [pc, #444]	; (800d0fc <tcp_connect+0x210>)
 800cf3e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800cf42:	4972      	ldr	r1, [pc, #456]	; (800d10c <tcp_connect+0x220>)
 800cf44:	486f      	ldr	r0, [pc, #444]	; (800d104 <tcp_connect+0x218>)
 800cf46:	f00c fe6b 	bl	8019c20 <iprintf>
 800cf4a:	f06f 0309 	mvn.w	r3, #9
 800cf4e:	e0d1      	b.n	800d0f4 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d002      	beq.n	800cf5c <tcp_connect+0x70>
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	e000      	b.n	800cf5e <tcp_connect+0x72>
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	68fa      	ldr	r2, [r7, #12]
 800cf60:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	88fa      	ldrh	r2, [r7, #6]
 800cf66:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	7a1b      	ldrb	r3, [r3, #8]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d006      	beq.n	800cf7e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	7a1b      	ldrb	r3, [r3, #8]
 800cf74:	4618      	mov	r0, r3
 800cf76:	f7fe fd0b 	bl	800b990 <netif_get_by_index>
 800cf7a:	6278      	str	r0, [r7, #36]	; 0x24
 800cf7c:	e005      	b.n	800cf8a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	3304      	adds	r3, #4
 800cf82:	4618      	mov	r0, r3
 800cf84:	f009 fa20 	bl	80163c8 <ip4_route>
 800cf88:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800cf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d102      	bne.n	800cf96 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800cf90:	f06f 0303 	mvn.w	r3, #3
 800cf94:	e0ae      	b.n	800d0f4 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d003      	beq.n	800cfa4 <tcp_connect+0xb8>
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d111      	bne.n	800cfc8 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800cfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d002      	beq.n	800cfb0 <tcp_connect+0xc4>
 800cfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfac:	3304      	adds	r3, #4
 800cfae:	e000      	b.n	800cfb2 <tcp_connect+0xc6>
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800cfb4:	69fb      	ldr	r3, [r7, #28]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d102      	bne.n	800cfc0 <tcp_connect+0xd4>
      return ERR_RTE;
 800cfba:	f06f 0303 	mvn.w	r3, #3
 800cfbe:	e099      	b.n	800d0f4 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800cfc0:	69fb      	ldr	r3, [r7, #28]
 800cfc2:	681a      	ldr	r2, [r3, #0]
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	8adb      	ldrh	r3, [r3, #22]
 800cfcc:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	8adb      	ldrh	r3, [r3, #22]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d10c      	bne.n	800cff0 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800cfd6:	f7ff ff43 	bl	800ce60 <tcp_new_port>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	461a      	mov	r2, r3
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	8adb      	ldrh	r3, [r3, #22]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d102      	bne.n	800cff0 <tcp_connect+0x104>
      return ERR_BUF;
 800cfea:	f06f 0301 	mvn.w	r3, #1
 800cfee:	e081      	b.n	800d0f4 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800cff0:	68f8      	ldr	r0, [r7, #12]
 800cff2:	f001 f863 	bl	800e0bc <tcp_next_iss>
 800cff6:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2200      	movs	r2, #0
 800cffc:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	697a      	ldr	r2, [r7, #20]
 800d002:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	1e5a      	subs	r2, r3, #1
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	1e5a      	subs	r2, r3, #1
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	1e5a      	subs	r2, r3, #1
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d022:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d03a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d044:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	3304      	adds	r3, #4
 800d04e:	461a      	mov	r2, r3
 800d050:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d052:	f001 f859 	bl	800e108 <tcp_eff_send_mss_netif>
 800d056:	4603      	mov	r3, r0
 800d058:	461a      	mov	r2, r3
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2201      	movs	r2, #1
 800d062:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	683a      	ldr	r2, [r7, #0]
 800d06a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800d06e:	2102      	movs	r1, #2
 800d070:	68f8      	ldr	r0, [r7, #12]
 800d072:	f004 fab9 	bl	80115e8 <tcp_enqueue_flags>
 800d076:	4603      	mov	r3, r0
 800d078:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800d07a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d136      	bne.n	800d0f0 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2202      	movs	r2, #2
 800d086:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800d088:	8b7b      	ldrh	r3, [r7, #26]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d021      	beq.n	800d0d2 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800d08e:	4b20      	ldr	r3, [pc, #128]	; (800d110 <tcp_connect+0x224>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	68fa      	ldr	r2, [r7, #12]
 800d094:	429a      	cmp	r2, r3
 800d096:	d105      	bne.n	800d0a4 <tcp_connect+0x1b8>
 800d098:	4b1d      	ldr	r3, [pc, #116]	; (800d110 <tcp_connect+0x224>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	68db      	ldr	r3, [r3, #12]
 800d09e:	4a1c      	ldr	r2, [pc, #112]	; (800d110 <tcp_connect+0x224>)
 800d0a0:	6013      	str	r3, [r2, #0]
 800d0a2:	e013      	b.n	800d0cc <tcp_connect+0x1e0>
 800d0a4:	4b1a      	ldr	r3, [pc, #104]	; (800d110 <tcp_connect+0x224>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	623b      	str	r3, [r7, #32]
 800d0aa:	e00c      	b.n	800d0c6 <tcp_connect+0x1da>
 800d0ac:	6a3b      	ldr	r3, [r7, #32]
 800d0ae:	68db      	ldr	r3, [r3, #12]
 800d0b0:	68fa      	ldr	r2, [r7, #12]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d104      	bne.n	800d0c0 <tcp_connect+0x1d4>
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	68da      	ldr	r2, [r3, #12]
 800d0ba:	6a3b      	ldr	r3, [r7, #32]
 800d0bc:	60da      	str	r2, [r3, #12]
 800d0be:	e005      	b.n	800d0cc <tcp_connect+0x1e0>
 800d0c0:	6a3b      	ldr	r3, [r7, #32]
 800d0c2:	68db      	ldr	r3, [r3, #12]
 800d0c4:	623b      	str	r3, [r7, #32]
 800d0c6:	6a3b      	ldr	r3, [r7, #32]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d1ef      	bne.n	800d0ac <tcp_connect+0x1c0>
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800d0d2:	4b10      	ldr	r3, [pc, #64]	; (800d114 <tcp_connect+0x228>)
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	60da      	str	r2, [r3, #12]
 800d0da:	4a0e      	ldr	r2, [pc, #56]	; (800d114 <tcp_connect+0x228>)
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	6013      	str	r3, [r2, #0]
 800d0e0:	f005 faf8 	bl	80126d4 <tcp_timer_needed>
 800d0e4:	4b0c      	ldr	r3, [pc, #48]	; (800d118 <tcp_connect+0x22c>)
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800d0ea:	68f8      	ldr	r0, [r7, #12]
 800d0ec:	f004 fb6a 	bl	80117c4 <tcp_output>
  }
  return ret;
 800d0f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3728      	adds	r7, #40	; 0x28
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}
 800d0fc:	0801c780 	.word	0x0801c780
 800d100:	0801ca5c 	.word	0x0801ca5c
 800d104:	0801c7c4 	.word	0x0801c7c4
 800d108:	0801ca78 	.word	0x0801ca78
 800d10c:	0801ca94 	.word	0x0801ca94
 800d110:	2000fd44 	.word	0x2000fd44
 800d114:	2000fd38 	.word	0x2000fd38
 800d118:	2000fd34 	.word	0x2000fd34

0800d11c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d11c:	b5b0      	push	{r4, r5, r7, lr}
 800d11e:	b090      	sub	sp, #64	; 0x40
 800d120:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d122:	2300      	movs	r3, #0
 800d124:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d128:	4b94      	ldr	r3, [pc, #592]	; (800d37c <tcp_slowtmr+0x260>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	3301      	adds	r3, #1
 800d12e:	4a93      	ldr	r2, [pc, #588]	; (800d37c <tcp_slowtmr+0x260>)
 800d130:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d132:	4b93      	ldr	r3, [pc, #588]	; (800d380 <tcp_slowtmr+0x264>)
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	3301      	adds	r3, #1
 800d138:	b2da      	uxtb	r2, r3
 800d13a:	4b91      	ldr	r3, [pc, #580]	; (800d380 <tcp_slowtmr+0x264>)
 800d13c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d13e:	2300      	movs	r3, #0
 800d140:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d142:	4b90      	ldr	r3, [pc, #576]	; (800d384 <tcp_slowtmr+0x268>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d148:	e29d      	b.n	800d686 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d14c:	7d1b      	ldrb	r3, [r3, #20]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d106      	bne.n	800d160 <tcp_slowtmr+0x44>
 800d152:	4b8d      	ldr	r3, [pc, #564]	; (800d388 <tcp_slowtmr+0x26c>)
 800d154:	f240 42be 	movw	r2, #1214	; 0x4be
 800d158:	498c      	ldr	r1, [pc, #560]	; (800d38c <tcp_slowtmr+0x270>)
 800d15a:	488d      	ldr	r0, [pc, #564]	; (800d390 <tcp_slowtmr+0x274>)
 800d15c:	f00c fd60 	bl	8019c20 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d162:	7d1b      	ldrb	r3, [r3, #20]
 800d164:	2b01      	cmp	r3, #1
 800d166:	d106      	bne.n	800d176 <tcp_slowtmr+0x5a>
 800d168:	4b87      	ldr	r3, [pc, #540]	; (800d388 <tcp_slowtmr+0x26c>)
 800d16a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d16e:	4989      	ldr	r1, [pc, #548]	; (800d394 <tcp_slowtmr+0x278>)
 800d170:	4887      	ldr	r0, [pc, #540]	; (800d390 <tcp_slowtmr+0x274>)
 800d172:	f00c fd55 	bl	8019c20 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d178:	7d1b      	ldrb	r3, [r3, #20]
 800d17a:	2b0a      	cmp	r3, #10
 800d17c:	d106      	bne.n	800d18c <tcp_slowtmr+0x70>
 800d17e:	4b82      	ldr	r3, [pc, #520]	; (800d388 <tcp_slowtmr+0x26c>)
 800d180:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d184:	4984      	ldr	r1, [pc, #528]	; (800d398 <tcp_slowtmr+0x27c>)
 800d186:	4882      	ldr	r0, [pc, #520]	; (800d390 <tcp_slowtmr+0x274>)
 800d188:	f00c fd4a 	bl	8019c20 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d18e:	7f9a      	ldrb	r2, [r3, #30]
 800d190:	4b7b      	ldr	r3, [pc, #492]	; (800d380 <tcp_slowtmr+0x264>)
 800d192:	781b      	ldrb	r3, [r3, #0]
 800d194:	429a      	cmp	r2, r3
 800d196:	d105      	bne.n	800d1a4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d19a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d19e:	68db      	ldr	r3, [r3, #12]
 800d1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d1a2:	e270      	b.n	800d686 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d1a4:	4b76      	ldr	r3, [pc, #472]	; (800d380 <tcp_slowtmr+0x264>)
 800d1a6:	781a      	ldrb	r2, [r3, #0]
 800d1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1aa:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ba:	7d1b      	ldrb	r3, [r3, #20]
 800d1bc:	2b02      	cmp	r3, #2
 800d1be:	d10a      	bne.n	800d1d6 <tcp_slowtmr+0xba>
 800d1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d1c6:	2b05      	cmp	r3, #5
 800d1c8:	d905      	bls.n	800d1d6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d1ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d1d4:	e11e      	b.n	800d414 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d1dc:	2b0b      	cmp	r3, #11
 800d1de:	d905      	bls.n	800d1ec <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d1e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d1ea:	e113      	b.n	800d414 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d075      	beq.n	800d2e2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d006      	beq.n	800d20c <tcp_slowtmr+0xf0>
 800d1fe:	4b62      	ldr	r3, [pc, #392]	; (800d388 <tcp_slowtmr+0x26c>)
 800d200:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d204:	4965      	ldr	r1, [pc, #404]	; (800d39c <tcp_slowtmr+0x280>)
 800d206:	4862      	ldr	r0, [pc, #392]	; (800d390 <tcp_slowtmr+0x274>)
 800d208:	f00c fd0a 	bl	8019c20 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d20e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d210:	2b00      	cmp	r3, #0
 800d212:	d106      	bne.n	800d222 <tcp_slowtmr+0x106>
 800d214:	4b5c      	ldr	r3, [pc, #368]	; (800d388 <tcp_slowtmr+0x26c>)
 800d216:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d21a:	4961      	ldr	r1, [pc, #388]	; (800d3a0 <tcp_slowtmr+0x284>)
 800d21c:	485c      	ldr	r0, [pc, #368]	; (800d390 <tcp_slowtmr+0x274>)
 800d21e:	f00c fcff 	bl	8019c20 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d224:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d228:	2b0b      	cmp	r3, #11
 800d22a:	d905      	bls.n	800d238 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d22c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d230:	3301      	adds	r3, #1
 800d232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d236:	e0ed      	b.n	800d414 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d23a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d23e:	3b01      	subs	r3, #1
 800d240:	4a58      	ldr	r2, [pc, #352]	; (800d3a4 <tcp_slowtmr+0x288>)
 800d242:	5cd3      	ldrb	r3, [r2, r3]
 800d244:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d248:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d24c:	7c7a      	ldrb	r2, [r7, #17]
 800d24e:	429a      	cmp	r2, r3
 800d250:	d907      	bls.n	800d262 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d254:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d258:	3301      	adds	r3, #1
 800d25a:	b2da      	uxtb	r2, r3
 800d25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d25e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d264:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d268:	7c7a      	ldrb	r2, [r7, #17]
 800d26a:	429a      	cmp	r2, r3
 800d26c:	f200 80d2 	bhi.w	800d414 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d270:	2301      	movs	r3, #1
 800d272:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d276:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d108      	bne.n	800d290 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d27e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d280:	f005 f95a 	bl	8012538 <tcp_zero_window_probe>
 800d284:	4603      	mov	r3, r0
 800d286:	2b00      	cmp	r3, #0
 800d288:	d014      	beq.n	800d2b4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d28a:	2300      	movs	r3, #0
 800d28c:	623b      	str	r3, [r7, #32]
 800d28e:	e011      	b.n	800d2b4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d292:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d296:	4619      	mov	r1, r3
 800d298:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d29a:	f004 f80d 	bl	80112b8 <tcp_split_unsent_seg>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d107      	bne.n	800d2b4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d2a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2a6:	f004 fa8d 	bl	80117c4 <tcp_output>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d101      	bne.n	800d2b4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d2b4:	6a3b      	ldr	r3, [r7, #32]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	f000 80ac 	beq.w	800d414 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d2ca:	2b06      	cmp	r3, #6
 800d2cc:	f200 80a2 	bhi.w	800d414 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d2d6:	3301      	adds	r3, #1
 800d2d8:	b2da      	uxtb	r2, r3
 800d2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2dc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d2e0:	e098      	b.n	800d414 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	db0f      	blt.n	800d30c <tcp_slowtmr+0x1f0>
 800d2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d2f2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	d008      	beq.n	800d30c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d300:	b29b      	uxth	r3, r3
 800d302:	3301      	adds	r3, #1
 800d304:	b29b      	uxth	r3, r3
 800d306:	b21a      	sxth	r2, r3
 800d308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d314:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d318:	429a      	cmp	r2, r3
 800d31a:	db7b      	blt.n	800d414 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d31c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d31e:	f004 fd49 	bl	8011db4 <tcp_rexmit_rto_prepare>
 800d322:	4603      	mov	r3, r0
 800d324:	2b00      	cmp	r3, #0
 800d326:	d007      	beq.n	800d338 <tcp_slowtmr+0x21c>
 800d328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d171      	bne.n	800d414 <tcp_slowtmr+0x2f8>
 800d330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d334:	2b00      	cmp	r3, #0
 800d336:	d06d      	beq.n	800d414 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33a:	7d1b      	ldrb	r3, [r3, #20]
 800d33c:	2b02      	cmp	r3, #2
 800d33e:	d03a      	beq.n	800d3b6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d342:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d346:	2b0c      	cmp	r3, #12
 800d348:	bf28      	it	cs
 800d34a:	230c      	movcs	r3, #12
 800d34c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d350:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d354:	10db      	asrs	r3, r3, #3
 800d356:	b21b      	sxth	r3, r3
 800d358:	461a      	mov	r2, r3
 800d35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d360:	4413      	add	r3, r2
 800d362:	7efa      	ldrb	r2, [r7, #27]
 800d364:	4910      	ldr	r1, [pc, #64]	; (800d3a8 <tcp_slowtmr+0x28c>)
 800d366:	5c8a      	ldrb	r2, [r1, r2]
 800d368:	4093      	lsls	r3, r2
 800d36a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d372:	4293      	cmp	r3, r2
 800d374:	dc1a      	bgt.n	800d3ac <tcp_slowtmr+0x290>
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	b21a      	sxth	r2, r3
 800d37a:	e019      	b.n	800d3b0 <tcp_slowtmr+0x294>
 800d37c:	2000fd3c 	.word	0x2000fd3c
 800d380:	2000864e 	.word	0x2000864e
 800d384:	2000fd38 	.word	0x2000fd38
 800d388:	0801c780 	.word	0x0801c780
 800d38c:	0801cac4 	.word	0x0801cac4
 800d390:	0801c7c4 	.word	0x0801c7c4
 800d394:	0801caf0 	.word	0x0801caf0
 800d398:	0801cb1c 	.word	0x0801cb1c
 800d39c:	0801cb4c 	.word	0x0801cb4c
 800d3a0:	0801cb80 	.word	0x0801cb80
 800d3a4:	0801ec4c 	.word	0x0801ec4c
 800d3a8:	0801ec3c 	.word	0x0801ec3c
 800d3ac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	bf28      	it	cs
 800d3cc:	4613      	movcs	r3, r2
 800d3ce:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d3d0:	8a7b      	ldrh	r3, [r7, #18]
 800d3d2:	085b      	lsrs	r3, r3, #1
 800d3d4:	b29a      	uxth	r2, r3
 800d3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3de:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3e6:	005b      	lsls	r3, r3, #1
 800d3e8:	b29b      	uxth	r3, r3
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	d206      	bcs.n	800d3fc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3f2:	005b      	lsls	r3, r3, #1
 800d3f4:	b29a      	uxth	r2, r3
 800d3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fe:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d402:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d408:	2200      	movs	r2, #0
 800d40a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d40e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d410:	f004 fd40 	bl	8011e94 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d416:	7d1b      	ldrb	r3, [r3, #20]
 800d418:	2b06      	cmp	r3, #6
 800d41a:	d111      	bne.n	800d440 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41e:	8b5b      	ldrh	r3, [r3, #26]
 800d420:	f003 0310 	and.w	r3, r3, #16
 800d424:	2b00      	cmp	r3, #0
 800d426:	d00b      	beq.n	800d440 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d428:	4b9c      	ldr	r3, [pc, #624]	; (800d69c <tcp_slowtmr+0x580>)
 800d42a:	681a      	ldr	r2, [r3, #0]
 800d42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42e:	6a1b      	ldr	r3, [r3, #32]
 800d430:	1ad3      	subs	r3, r2, r3
 800d432:	2b28      	cmp	r3, #40	; 0x28
 800d434:	d904      	bls.n	800d440 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d436:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d43a:	3301      	adds	r3, #1
 800d43c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d442:	7a5b      	ldrb	r3, [r3, #9]
 800d444:	f003 0308 	and.w	r3, r3, #8
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d04a      	beq.n	800d4e2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800d44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d450:	2b04      	cmp	r3, #4
 800d452:	d003      	beq.n	800d45c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d456:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d458:	2b07      	cmp	r3, #7
 800d45a:	d142      	bne.n	800d4e2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d45c:	4b8f      	ldr	r3, [pc, #572]	; (800d69c <tcp_slowtmr+0x580>)
 800d45e:	681a      	ldr	r2, [r3, #0]
 800d460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d462:	6a1b      	ldr	r3, [r3, #32]
 800d464:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d468:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d46c:	4b8c      	ldr	r3, [pc, #560]	; (800d6a0 <tcp_slowtmr+0x584>)
 800d46e:	440b      	add	r3, r1
 800d470:	498c      	ldr	r1, [pc, #560]	; (800d6a4 <tcp_slowtmr+0x588>)
 800d472:	fba1 1303 	umull	r1, r3, r1, r3
 800d476:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d478:	429a      	cmp	r2, r3
 800d47a:	d90a      	bls.n	800d492 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d47c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d480:	3301      	adds	r3, #1
 800d482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d486:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d48a:	3301      	adds	r3, #1
 800d48c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d490:	e027      	b.n	800d4e2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d492:	4b82      	ldr	r3, [pc, #520]	; (800d69c <tcp_slowtmr+0x580>)
 800d494:	681a      	ldr	r2, [r3, #0]
 800d496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d498:	6a1b      	ldr	r3, [r3, #32]
 800d49a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d49e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	4b7f      	ldr	r3, [pc, #508]	; (800d6a8 <tcp_slowtmr+0x58c>)
 800d4ac:	fb03 f300 	mul.w	r3, r3, r0
 800d4b0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d4b2:	497c      	ldr	r1, [pc, #496]	; (800d6a4 <tcp_slowtmr+0x588>)
 800d4b4:	fba1 1303 	umull	r1, r3, r1, r3
 800d4b8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d911      	bls.n	800d4e2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800d4be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4c0:	f004 fffa 	bl	80124b8 <tcp_keepalive>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d4ca:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d107      	bne.n	800d4e2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800d4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d4d8:	3301      	adds	r3, #1
 800d4da:	b2da      	uxtb	r2, r3
 800d4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4de:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d011      	beq.n	800d50e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d4ea:	4b6c      	ldr	r3, [pc, #432]	; (800d69c <tcp_slowtmr+0x580>)
 800d4ec:	681a      	ldr	r2, [r3, #0]
 800d4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f0:	6a1b      	ldr	r3, [r3, #32]
 800d4f2:	1ad2      	subs	r2, r2, r3
 800d4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d4fa:	4619      	mov	r1, r3
 800d4fc:	460b      	mov	r3, r1
 800d4fe:	005b      	lsls	r3, r3, #1
 800d500:	440b      	add	r3, r1
 800d502:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d504:	429a      	cmp	r2, r3
 800d506:	d302      	bcc.n	800d50e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d508:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d50a:	f000 fea7 	bl	800e25c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d510:	7d1b      	ldrb	r3, [r3, #20]
 800d512:	2b03      	cmp	r3, #3
 800d514:	d10b      	bne.n	800d52e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d516:	4b61      	ldr	r3, [pc, #388]	; (800d69c <tcp_slowtmr+0x580>)
 800d518:	681a      	ldr	r2, [r3, #0]
 800d51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d51c:	6a1b      	ldr	r3, [r3, #32]
 800d51e:	1ad3      	subs	r3, r2, r3
 800d520:	2b28      	cmp	r3, #40	; 0x28
 800d522:	d904      	bls.n	800d52e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d528:	3301      	adds	r3, #1
 800d52a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d530:	7d1b      	ldrb	r3, [r3, #20]
 800d532:	2b09      	cmp	r3, #9
 800d534:	d10b      	bne.n	800d54e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d536:	4b59      	ldr	r3, [pc, #356]	; (800d69c <tcp_slowtmr+0x580>)
 800d538:	681a      	ldr	r2, [r3, #0]
 800d53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d53c:	6a1b      	ldr	r3, [r3, #32]
 800d53e:	1ad3      	subs	r3, r2, r3
 800d540:	2bf0      	cmp	r3, #240	; 0xf0
 800d542:	d904      	bls.n	800d54e <tcp_slowtmr+0x432>
        ++pcb_remove;
 800d544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d548:	3301      	adds	r3, #1
 800d54a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d54e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d552:	2b00      	cmp	r3, #0
 800d554:	d060      	beq.n	800d618 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d55c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d55e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d560:	f000 fcc8 	bl	800def4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d566:	2b00      	cmp	r3, #0
 800d568:	d010      	beq.n	800d58c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d56a:	4b50      	ldr	r3, [pc, #320]	; (800d6ac <tcp_slowtmr+0x590>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d570:	429a      	cmp	r2, r3
 800d572:	d106      	bne.n	800d582 <tcp_slowtmr+0x466>
 800d574:	4b4e      	ldr	r3, [pc, #312]	; (800d6b0 <tcp_slowtmr+0x594>)
 800d576:	f240 526d 	movw	r2, #1389	; 0x56d
 800d57a:	494e      	ldr	r1, [pc, #312]	; (800d6b4 <tcp_slowtmr+0x598>)
 800d57c:	484e      	ldr	r0, [pc, #312]	; (800d6b8 <tcp_slowtmr+0x59c>)
 800d57e:	f00c fb4f 	bl	8019c20 <iprintf>
        prev->next = pcb->next;
 800d582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d584:	68da      	ldr	r2, [r3, #12]
 800d586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d588:	60da      	str	r2, [r3, #12]
 800d58a:	e00f      	b.n	800d5ac <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d58c:	4b47      	ldr	r3, [pc, #284]	; (800d6ac <tcp_slowtmr+0x590>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d592:	429a      	cmp	r2, r3
 800d594:	d006      	beq.n	800d5a4 <tcp_slowtmr+0x488>
 800d596:	4b46      	ldr	r3, [pc, #280]	; (800d6b0 <tcp_slowtmr+0x594>)
 800d598:	f240 5271 	movw	r2, #1393	; 0x571
 800d59c:	4947      	ldr	r1, [pc, #284]	; (800d6bc <tcp_slowtmr+0x5a0>)
 800d59e:	4846      	ldr	r0, [pc, #280]	; (800d6b8 <tcp_slowtmr+0x59c>)
 800d5a0:	f00c fb3e 	bl	8019c20 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a6:	68db      	ldr	r3, [r3, #12]
 800d5a8:	4a40      	ldr	r2, [pc, #256]	; (800d6ac <tcp_slowtmr+0x590>)
 800d5aa:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d5ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d013      	beq.n	800d5dc <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ba:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d5bc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c0:	3304      	adds	r3, #4
 800d5c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5c4:	8ad2      	ldrh	r2, [r2, #22]
 800d5c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d5c8:	8b09      	ldrh	r1, [r1, #24]
 800d5ca:	9102      	str	r1, [sp, #8]
 800d5cc:	9201      	str	r2, [sp, #4]
 800d5ce:	9300      	str	r3, [sp, #0]
 800d5d0:	462b      	mov	r3, r5
 800d5d2:	4622      	mov	r2, r4
 800d5d4:	4601      	mov	r1, r0
 800d5d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d5d8:	f004 feba 	bl	8012350 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5de:	691b      	ldr	r3, [r3, #16]
 800d5e0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e4:	7d1b      	ldrb	r3, [r3, #20]
 800d5e6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ea:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ee:	68db      	ldr	r3, [r3, #12]
 800d5f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d5f2:	6838      	ldr	r0, [r7, #0]
 800d5f4:	f7ff f844 	bl	800c680 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d5f8:	4b31      	ldr	r3, [pc, #196]	; (800d6c0 <tcp_slowtmr+0x5a4>)
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d004      	beq.n	800d60e <tcp_slowtmr+0x4f2>
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	f06f 010c 	mvn.w	r1, #12
 800d60a:	68b8      	ldr	r0, [r7, #8]
 800d60c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d60e:	4b2c      	ldr	r3, [pc, #176]	; (800d6c0 <tcp_slowtmr+0x5a4>)
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d037      	beq.n	800d686 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800d616:	e592      	b.n	800d13e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d61a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d61e:	68db      	ldr	r3, [r3, #12]
 800d620:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d624:	7f1b      	ldrb	r3, [r3, #28]
 800d626:	3301      	adds	r3, #1
 800d628:	b2da      	uxtb	r2, r3
 800d62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d62c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d630:	7f1a      	ldrb	r2, [r3, #28]
 800d632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d634:	7f5b      	ldrb	r3, [r3, #29]
 800d636:	429a      	cmp	r2, r3
 800d638:	d325      	bcc.n	800d686 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800d63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63c:	2200      	movs	r2, #0
 800d63e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d640:	4b1f      	ldr	r3, [pc, #124]	; (800d6c0 <tcp_slowtmr+0x5a4>)
 800d642:	2200      	movs	r2, #0
 800d644:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d00b      	beq.n	800d668 <tcp_slowtmr+0x54c>
 800d650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d658:	6912      	ldr	r2, [r2, #16]
 800d65a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d65c:	4610      	mov	r0, r2
 800d65e:	4798      	blx	r3
 800d660:	4603      	mov	r3, r0
 800d662:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d666:	e002      	b.n	800d66e <tcp_slowtmr+0x552>
 800d668:	2300      	movs	r3, #0
 800d66a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d66e:	4b14      	ldr	r3, [pc, #80]	; (800d6c0 <tcp_slowtmr+0x5a4>)
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d000      	beq.n	800d678 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800d676:	e562      	b.n	800d13e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d678:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d102      	bne.n	800d686 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800d680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d682:	f004 f89f 	bl	80117c4 <tcp_output>
  while (pcb != NULL) {
 800d686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d688:	2b00      	cmp	r3, #0
 800d68a:	f47f ad5e 	bne.w	800d14a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d68e:	2300      	movs	r3, #0
 800d690:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d692:	4b0c      	ldr	r3, [pc, #48]	; (800d6c4 <tcp_slowtmr+0x5a8>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d698:	e069      	b.n	800d76e <tcp_slowtmr+0x652>
 800d69a:	bf00      	nop
 800d69c:	2000fd3c 	.word	0x2000fd3c
 800d6a0:	000a4cb8 	.word	0x000a4cb8
 800d6a4:	10624dd3 	.word	0x10624dd3
 800d6a8:	000124f8 	.word	0x000124f8
 800d6ac:	2000fd38 	.word	0x2000fd38
 800d6b0:	0801c780 	.word	0x0801c780
 800d6b4:	0801cbb8 	.word	0x0801cbb8
 800d6b8:	0801c7c4 	.word	0x0801c7c4
 800d6bc:	0801cbe4 	.word	0x0801cbe4
 800d6c0:	2000fd34 	.word	0x2000fd34
 800d6c4:	2000fd48 	.word	0x2000fd48
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ca:	7d1b      	ldrb	r3, [r3, #20]
 800d6cc:	2b0a      	cmp	r3, #10
 800d6ce:	d006      	beq.n	800d6de <tcp_slowtmr+0x5c2>
 800d6d0:	4b2a      	ldr	r3, [pc, #168]	; (800d77c <tcp_slowtmr+0x660>)
 800d6d2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d6d6:	492a      	ldr	r1, [pc, #168]	; (800d780 <tcp_slowtmr+0x664>)
 800d6d8:	482a      	ldr	r0, [pc, #168]	; (800d784 <tcp_slowtmr+0x668>)
 800d6da:	f00c faa1 	bl	8019c20 <iprintf>
    pcb_remove = 0;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d6e4:	4b28      	ldr	r3, [pc, #160]	; (800d788 <tcp_slowtmr+0x66c>)
 800d6e6:	681a      	ldr	r2, [r3, #0]
 800d6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ea:	6a1b      	ldr	r3, [r3, #32]
 800d6ec:	1ad3      	subs	r3, r2, r3
 800d6ee:	2bf0      	cmp	r3, #240	; 0xf0
 800d6f0:	d904      	bls.n	800d6fc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d6f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d6fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d700:	2b00      	cmp	r3, #0
 800d702:	d02f      	beq.n	800d764 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d704:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d706:	f000 fbf5 	bl	800def4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d010      	beq.n	800d732 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d710:	4b1e      	ldr	r3, [pc, #120]	; (800d78c <tcp_slowtmr+0x670>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d716:	429a      	cmp	r2, r3
 800d718:	d106      	bne.n	800d728 <tcp_slowtmr+0x60c>
 800d71a:	4b18      	ldr	r3, [pc, #96]	; (800d77c <tcp_slowtmr+0x660>)
 800d71c:	f240 52af 	movw	r2, #1455	; 0x5af
 800d720:	491b      	ldr	r1, [pc, #108]	; (800d790 <tcp_slowtmr+0x674>)
 800d722:	4818      	ldr	r0, [pc, #96]	; (800d784 <tcp_slowtmr+0x668>)
 800d724:	f00c fa7c 	bl	8019c20 <iprintf>
        prev->next = pcb->next;
 800d728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d72a:	68da      	ldr	r2, [r3, #12]
 800d72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d72e:	60da      	str	r2, [r3, #12]
 800d730:	e00f      	b.n	800d752 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d732:	4b16      	ldr	r3, [pc, #88]	; (800d78c <tcp_slowtmr+0x670>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d738:	429a      	cmp	r2, r3
 800d73a:	d006      	beq.n	800d74a <tcp_slowtmr+0x62e>
 800d73c:	4b0f      	ldr	r3, [pc, #60]	; (800d77c <tcp_slowtmr+0x660>)
 800d73e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d742:	4914      	ldr	r1, [pc, #80]	; (800d794 <tcp_slowtmr+0x678>)
 800d744:	480f      	ldr	r0, [pc, #60]	; (800d784 <tcp_slowtmr+0x668>)
 800d746:	f00c fa6b 	bl	8019c20 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d74c:	68db      	ldr	r3, [r3, #12]
 800d74e:	4a0f      	ldr	r2, [pc, #60]	; (800d78c <tcp_slowtmr+0x670>)
 800d750:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d754:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d758:	68db      	ldr	r3, [r3, #12]
 800d75a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d75c:	69f8      	ldr	r0, [r7, #28]
 800d75e:	f7fe ff8f 	bl	800c680 <tcp_free>
 800d762:	e004      	b.n	800d76e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d766:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d76a:	68db      	ldr	r3, [r3, #12]
 800d76c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d770:	2b00      	cmp	r3, #0
 800d772:	d1a9      	bne.n	800d6c8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d774:	bf00      	nop
 800d776:	3730      	adds	r7, #48	; 0x30
 800d778:	46bd      	mov	sp, r7
 800d77a:	bdb0      	pop	{r4, r5, r7, pc}
 800d77c:	0801c780 	.word	0x0801c780
 800d780:	0801cc10 	.word	0x0801cc10
 800d784:	0801c7c4 	.word	0x0801c7c4
 800d788:	2000fd3c 	.word	0x2000fd3c
 800d78c:	2000fd48 	.word	0x2000fd48
 800d790:	0801cc40 	.word	0x0801cc40
 800d794:	0801cc68 	.word	0x0801cc68

0800d798 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d79e:	4b2d      	ldr	r3, [pc, #180]	; (800d854 <tcp_fasttmr+0xbc>)
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	b2da      	uxtb	r2, r3
 800d7a6:	4b2b      	ldr	r3, [pc, #172]	; (800d854 <tcp_fasttmr+0xbc>)
 800d7a8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d7aa:	4b2b      	ldr	r3, [pc, #172]	; (800d858 <tcp_fasttmr+0xc0>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d7b0:	e048      	b.n	800d844 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	7f9a      	ldrb	r2, [r3, #30]
 800d7b6:	4b27      	ldr	r3, [pc, #156]	; (800d854 <tcp_fasttmr+0xbc>)
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d03f      	beq.n	800d83e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d7be:	4b25      	ldr	r3, [pc, #148]	; (800d854 <tcp_fasttmr+0xbc>)
 800d7c0:	781a      	ldrb	r2, [r3, #0]
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	8b5b      	ldrh	r3, [r3, #26]
 800d7ca:	f003 0301 	and.w	r3, r3, #1
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d010      	beq.n	800d7f4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	8b5b      	ldrh	r3, [r3, #26]
 800d7d6:	f043 0302 	orr.w	r3, r3, #2
 800d7da:	b29a      	uxth	r2, r3
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f003 ffef 	bl	80117c4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	8b5b      	ldrh	r3, [r3, #26]
 800d7ea:	f023 0303 	bic.w	r3, r3, #3
 800d7ee:	b29a      	uxth	r2, r3
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	8b5b      	ldrh	r3, [r3, #26]
 800d7f8:	f003 0308 	and.w	r3, r3, #8
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d009      	beq.n	800d814 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	8b5b      	ldrh	r3, [r3, #26]
 800d804:	f023 0308 	bic.w	r3, r3, #8
 800d808:	b29a      	uxth	r2, r3
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f7ff f8c6 	bl	800c9a0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	68db      	ldr	r3, [r3, #12]
 800d818:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d00a      	beq.n	800d838 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d822:	4b0e      	ldr	r3, [pc, #56]	; (800d85c <tcp_fasttmr+0xc4>)
 800d824:	2200      	movs	r2, #0
 800d826:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f000 f819 	bl	800d860 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d82e:	4b0b      	ldr	r3, [pc, #44]	; (800d85c <tcp_fasttmr+0xc4>)
 800d830:	781b      	ldrb	r3, [r3, #0]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d000      	beq.n	800d838 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d836:	e7b8      	b.n	800d7aa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	607b      	str	r3, [r7, #4]
 800d83c:	e002      	b.n	800d844 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	68db      	ldr	r3, [r3, #12]
 800d842:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d1b3      	bne.n	800d7b2 <tcp_fasttmr+0x1a>
    }
  }
}
 800d84a:	bf00      	nop
 800d84c:	3708      	adds	r7, #8
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	2000864e 	.word	0x2000864e
 800d858:	2000fd38 	.word	0x2000fd38
 800d85c:	2000fd34 	.word	0x2000fd34

0800d860 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d860:	b590      	push	{r4, r7, lr}
 800d862:	b085      	sub	sp, #20
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d109      	bne.n	800d882 <tcp_process_refused_data+0x22>
 800d86e:	4b37      	ldr	r3, [pc, #220]	; (800d94c <tcp_process_refused_data+0xec>)
 800d870:	f240 6209 	movw	r2, #1545	; 0x609
 800d874:	4936      	ldr	r1, [pc, #216]	; (800d950 <tcp_process_refused_data+0xf0>)
 800d876:	4837      	ldr	r0, [pc, #220]	; (800d954 <tcp_process_refused_data+0xf4>)
 800d878:	f00c f9d2 	bl	8019c20 <iprintf>
 800d87c:	f06f 030f 	mvn.w	r3, #15
 800d880:	e060      	b.n	800d944 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d886:	7b5b      	ldrb	r3, [r3, #13]
 800d888:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d88e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2200      	movs	r2, #0
 800d894:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d00b      	beq.n	800d8b8 <tcp_process_refused_data+0x58>
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6918      	ldr	r0, [r3, #16]
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	68ba      	ldr	r2, [r7, #8]
 800d8ae:	6879      	ldr	r1, [r7, #4]
 800d8b0:	47a0      	blx	r4
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	73fb      	strb	r3, [r7, #15]
 800d8b6:	e007      	b.n	800d8c8 <tcp_process_refused_data+0x68>
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	68ba      	ldr	r2, [r7, #8]
 800d8bc:	6879      	ldr	r1, [r7, #4]
 800d8be:	2000      	movs	r0, #0
 800d8c0:	f000 f8a2 	bl	800da08 <tcp_recv_null>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d8c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d12a      	bne.n	800d926 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d8d0:	7bbb      	ldrb	r3, [r7, #14]
 800d8d2:	f003 0320 	and.w	r3, r3, #32
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d033      	beq.n	800d942 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8de:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d8e2:	d005      	beq.n	800d8f0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8e8:	3301      	adds	r3, #1
 800d8ea:	b29a      	uxth	r2, r3
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d00b      	beq.n	800d912 <tcp_process_refused_data+0xb2>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6918      	ldr	r0, [r3, #16]
 800d904:	2300      	movs	r3, #0
 800d906:	2200      	movs	r2, #0
 800d908:	6879      	ldr	r1, [r7, #4]
 800d90a:	47a0      	blx	r4
 800d90c:	4603      	mov	r3, r0
 800d90e:	73fb      	strb	r3, [r7, #15]
 800d910:	e001      	b.n	800d916 <tcp_process_refused_data+0xb6>
 800d912:	2300      	movs	r3, #0
 800d914:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d91a:	f113 0f0d 	cmn.w	r3, #13
 800d91e:	d110      	bne.n	800d942 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d920:	f06f 030c 	mvn.w	r3, #12
 800d924:	e00e      	b.n	800d944 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d92a:	f113 0f0d 	cmn.w	r3, #13
 800d92e:	d102      	bne.n	800d936 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d930:	f06f 030c 	mvn.w	r3, #12
 800d934:	e006      	b.n	800d944 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	68ba      	ldr	r2, [r7, #8]
 800d93a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d93c:	f06f 0304 	mvn.w	r3, #4
 800d940:	e000      	b.n	800d944 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d942:	2300      	movs	r3, #0
}
 800d944:	4618      	mov	r0, r3
 800d946:	3714      	adds	r7, #20
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd90      	pop	{r4, r7, pc}
 800d94c:	0801c780 	.word	0x0801c780
 800d950:	0801cc90 	.word	0x0801cc90
 800d954:	0801c7c4 	.word	0x0801c7c4

0800d958 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d960:	e007      	b.n	800d972 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f000 f809 	bl	800d980 <tcp_seg_free>
    seg = next;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d1f4      	bne.n	800d962 <tcp_segs_free+0xa>
  }
}
 800d978:	bf00      	nop
 800d97a:	3710      	adds	r7, #16
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}

0800d980 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b082      	sub	sp, #8
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d00c      	beq.n	800d9a8 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d004      	beq.n	800d9a0 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	685b      	ldr	r3, [r3, #4]
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7fe fbb4 	bl	800c108 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d9a0:	6879      	ldr	r1, [r7, #4]
 800d9a2:	2003      	movs	r0, #3
 800d9a4:	f7fd fcd2 	bl	800b34c <memp_free>
  }
}
 800d9a8:	bf00      	nop
 800d9aa:	3708      	adds	r7, #8
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b084      	sub	sp, #16
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d106      	bne.n	800d9cc <tcp_seg_copy+0x1c>
 800d9be:	4b0f      	ldr	r3, [pc, #60]	; (800d9fc <tcp_seg_copy+0x4c>)
 800d9c0:	f240 6282 	movw	r2, #1666	; 0x682
 800d9c4:	490e      	ldr	r1, [pc, #56]	; (800da00 <tcp_seg_copy+0x50>)
 800d9c6:	480f      	ldr	r0, [pc, #60]	; (800da04 <tcp_seg_copy+0x54>)
 800d9c8:	f00c f92a 	bl	8019c20 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d9cc:	2003      	movs	r0, #3
 800d9ce:	f7fd fc6b 	bl	800b2a8 <memp_malloc>
 800d9d2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d101      	bne.n	800d9de <tcp_seg_copy+0x2e>
    return NULL;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	e00a      	b.n	800d9f4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d9de:	2210      	movs	r2, #16
 800d9e0:	6879      	ldr	r1, [r7, #4]
 800d9e2:	68f8      	ldr	r0, [r7, #12]
 800d9e4:	f00c f909 	bl	8019bfa <memcpy>
  pbuf_ref(cseg->p);
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	685b      	ldr	r3, [r3, #4]
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f7fe fc31 	bl	800c254 <pbuf_ref>
  return cseg;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3710      	adds	r7, #16
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}
 800d9fc:	0801c780 	.word	0x0801c780
 800da00:	0801ccd4 	.word	0x0801ccd4
 800da04:	0801c7c4 	.word	0x0801c7c4

0800da08 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	60f8      	str	r0, [r7, #12]
 800da10:	60b9      	str	r1, [r7, #8]
 800da12:	607a      	str	r2, [r7, #4]
 800da14:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d109      	bne.n	800da30 <tcp_recv_null+0x28>
 800da1c:	4b12      	ldr	r3, [pc, #72]	; (800da68 <tcp_recv_null+0x60>)
 800da1e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800da22:	4912      	ldr	r1, [pc, #72]	; (800da6c <tcp_recv_null+0x64>)
 800da24:	4812      	ldr	r0, [pc, #72]	; (800da70 <tcp_recv_null+0x68>)
 800da26:	f00c f8fb 	bl	8019c20 <iprintf>
 800da2a:	f06f 030f 	mvn.w	r3, #15
 800da2e:	e016      	b.n	800da5e <tcp_recv_null+0x56>

  if (p != NULL) {
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d009      	beq.n	800da4a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	891b      	ldrh	r3, [r3, #8]
 800da3a:	4619      	mov	r1, r3
 800da3c:	68b8      	ldr	r0, [r7, #8]
 800da3e:	f7ff f9bf 	bl	800cdc0 <tcp_recved>
    pbuf_free(p);
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f7fe fb60 	bl	800c108 <pbuf_free>
 800da48:	e008      	b.n	800da5c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800da4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d104      	bne.n	800da5c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800da52:	68b8      	ldr	r0, [r7, #8]
 800da54:	f7ff f80a 	bl	800ca6c <tcp_close>
 800da58:	4603      	mov	r3, r0
 800da5a:	e000      	b.n	800da5e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800da5c:	2300      	movs	r3, #0
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3710      	adds	r7, #16
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	0801c780 	.word	0x0801c780
 800da6c:	0801ccf0 	.word	0x0801ccf0
 800da70:	0801c7c4 	.word	0x0801c7c4

0800da74 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b086      	sub	sp, #24
 800da78:	af00      	add	r7, sp, #0
 800da7a:	4603      	mov	r3, r0
 800da7c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800da7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da82:	2b00      	cmp	r3, #0
 800da84:	db01      	blt.n	800da8a <tcp_kill_prio+0x16>
 800da86:	79fb      	ldrb	r3, [r7, #7]
 800da88:	e000      	b.n	800da8c <tcp_kill_prio+0x18>
 800da8a:	237f      	movs	r3, #127	; 0x7f
 800da8c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800da8e:	7afb      	ldrb	r3, [r7, #11]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d034      	beq.n	800dafe <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800da94:	7afb      	ldrb	r3, [r7, #11]
 800da96:	3b01      	subs	r3, #1
 800da98:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800da9a:	2300      	movs	r3, #0
 800da9c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800da9e:	2300      	movs	r3, #0
 800daa0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800daa2:	4b19      	ldr	r3, [pc, #100]	; (800db08 <tcp_kill_prio+0x94>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	617b      	str	r3, [r7, #20]
 800daa8:	e01f      	b.n	800daea <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	7d5b      	ldrb	r3, [r3, #21]
 800daae:	7afa      	ldrb	r2, [r7, #11]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d80c      	bhi.n	800dace <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800dab8:	7afa      	ldrb	r2, [r7, #11]
 800daba:	429a      	cmp	r2, r3
 800dabc:	d112      	bne.n	800dae4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dabe:	4b13      	ldr	r3, [pc, #76]	; (800db0c <tcp_kill_prio+0x98>)
 800dac0:	681a      	ldr	r2, [r3, #0]
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	6a1b      	ldr	r3, [r3, #32]
 800dac6:	1ad3      	subs	r3, r2, r3
 800dac8:	68fa      	ldr	r2, [r7, #12]
 800daca:	429a      	cmp	r2, r3
 800dacc:	d80a      	bhi.n	800dae4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800dace:	4b0f      	ldr	r3, [pc, #60]	; (800db0c <tcp_kill_prio+0x98>)
 800dad0:	681a      	ldr	r2, [r3, #0]
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	6a1b      	ldr	r3, [r3, #32]
 800dad6:	1ad3      	subs	r3, r2, r3
 800dad8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	7d5b      	ldrb	r3, [r3, #21]
 800dae2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	68db      	ldr	r3, [r3, #12]
 800dae8:	617b      	str	r3, [r7, #20]
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d1dc      	bne.n	800daaa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d004      	beq.n	800db00 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800daf6:	6938      	ldr	r0, [r7, #16]
 800daf8:	f7ff f8fc 	bl	800ccf4 <tcp_abort>
 800dafc:	e000      	b.n	800db00 <tcp_kill_prio+0x8c>
    return;
 800dafe:	bf00      	nop
  }
}
 800db00:	3718      	adds	r7, #24
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	2000fd38 	.word	0x2000fd38
 800db0c:	2000fd3c 	.word	0x2000fd3c

0800db10 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b086      	sub	sp, #24
 800db14:	af00      	add	r7, sp, #0
 800db16:	4603      	mov	r3, r0
 800db18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800db1a:	79fb      	ldrb	r3, [r7, #7]
 800db1c:	2b08      	cmp	r3, #8
 800db1e:	d009      	beq.n	800db34 <tcp_kill_state+0x24>
 800db20:	79fb      	ldrb	r3, [r7, #7]
 800db22:	2b09      	cmp	r3, #9
 800db24:	d006      	beq.n	800db34 <tcp_kill_state+0x24>
 800db26:	4b1a      	ldr	r3, [pc, #104]	; (800db90 <tcp_kill_state+0x80>)
 800db28:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800db2c:	4919      	ldr	r1, [pc, #100]	; (800db94 <tcp_kill_state+0x84>)
 800db2e:	481a      	ldr	r0, [pc, #104]	; (800db98 <tcp_kill_state+0x88>)
 800db30:	f00c f876 	bl	8019c20 <iprintf>

  inactivity = 0;
 800db34:	2300      	movs	r3, #0
 800db36:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800db38:	2300      	movs	r3, #0
 800db3a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800db3c:	4b17      	ldr	r3, [pc, #92]	; (800db9c <tcp_kill_state+0x8c>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	617b      	str	r3, [r7, #20]
 800db42:	e017      	b.n	800db74 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	7d1b      	ldrb	r3, [r3, #20]
 800db48:	79fa      	ldrb	r2, [r7, #7]
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d10f      	bne.n	800db6e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800db4e:	4b14      	ldr	r3, [pc, #80]	; (800dba0 <tcp_kill_state+0x90>)
 800db50:	681a      	ldr	r2, [r3, #0]
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	6a1b      	ldr	r3, [r3, #32]
 800db56:	1ad3      	subs	r3, r2, r3
 800db58:	68fa      	ldr	r2, [r7, #12]
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d807      	bhi.n	800db6e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800db5e:	4b10      	ldr	r3, [pc, #64]	; (800dba0 <tcp_kill_state+0x90>)
 800db60:	681a      	ldr	r2, [r3, #0]
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	6a1b      	ldr	r3, [r3, #32]
 800db66:	1ad3      	subs	r3, r2, r3
 800db68:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	68db      	ldr	r3, [r3, #12]
 800db72:	617b      	str	r3, [r7, #20]
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d1e4      	bne.n	800db44 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d003      	beq.n	800db88 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800db80:	2100      	movs	r1, #0
 800db82:	6938      	ldr	r0, [r7, #16]
 800db84:	f7fe fff8 	bl	800cb78 <tcp_abandon>
  }
}
 800db88:	bf00      	nop
 800db8a:	3718      	adds	r7, #24
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}
 800db90:	0801c780 	.word	0x0801c780
 800db94:	0801cd0c 	.word	0x0801cd0c
 800db98:	0801c7c4 	.word	0x0801c7c4
 800db9c:	2000fd38 	.word	0x2000fd38
 800dba0:	2000fd3c 	.word	0x2000fd3c

0800dba4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbb2:	4b12      	ldr	r3, [pc, #72]	; (800dbfc <tcp_kill_timewait+0x58>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	60fb      	str	r3, [r7, #12]
 800dbb8:	e012      	b.n	800dbe0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dbba:	4b11      	ldr	r3, [pc, #68]	; (800dc00 <tcp_kill_timewait+0x5c>)
 800dbbc:	681a      	ldr	r2, [r3, #0]
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	6a1b      	ldr	r3, [r3, #32]
 800dbc2:	1ad3      	subs	r3, r2, r3
 800dbc4:	687a      	ldr	r2, [r7, #4]
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	d807      	bhi.n	800dbda <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800dbca:	4b0d      	ldr	r3, [pc, #52]	; (800dc00 <tcp_kill_timewait+0x5c>)
 800dbcc:	681a      	ldr	r2, [r3, #0]
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	6a1b      	ldr	r3, [r3, #32]
 800dbd2:	1ad3      	subs	r3, r2, r3
 800dbd4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	68db      	ldr	r3, [r3, #12]
 800dbde:	60fb      	str	r3, [r7, #12]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d1e9      	bne.n	800dbba <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d002      	beq.n	800dbf2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dbec:	68b8      	ldr	r0, [r7, #8]
 800dbee:	f7ff f881 	bl	800ccf4 <tcp_abort>
  }
}
 800dbf2:	bf00      	nop
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	2000fd48 	.word	0x2000fd48
 800dc00:	2000fd3c 	.word	0x2000fd3c

0800dc04 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b082      	sub	sp, #8
 800dc08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800dc0a:	4b10      	ldr	r3, [pc, #64]	; (800dc4c <tcp_handle_closepend+0x48>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dc10:	e014      	b.n	800dc3c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	68db      	ldr	r3, [r3, #12]
 800dc16:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	8b5b      	ldrh	r3, [r3, #26]
 800dc1c:	f003 0308 	and.w	r3, r3, #8
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d009      	beq.n	800dc38 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	8b5b      	ldrh	r3, [r3, #26]
 800dc28:	f023 0308 	bic.w	r3, r3, #8
 800dc2c:	b29a      	uxth	r2, r3
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f7fe feb4 	bl	800c9a0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d1e7      	bne.n	800dc12 <tcp_handle_closepend+0xe>
  }
}
 800dc42:	bf00      	nop
 800dc44:	3708      	adds	r7, #8
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
 800dc4a:	bf00      	nop
 800dc4c:	2000fd38 	.word	0x2000fd38

0800dc50 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	4603      	mov	r3, r0
 800dc58:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc5a:	2001      	movs	r0, #1
 800dc5c:	f7fd fb24 	bl	800b2a8 <memp_malloc>
 800dc60:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d126      	bne.n	800dcb6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800dc68:	f7ff ffcc 	bl	800dc04 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800dc6c:	f7ff ff9a 	bl	800dba4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc70:	2001      	movs	r0, #1
 800dc72:	f7fd fb19 	bl	800b2a8 <memp_malloc>
 800dc76:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d11b      	bne.n	800dcb6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800dc7e:	2009      	movs	r0, #9
 800dc80:	f7ff ff46 	bl	800db10 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc84:	2001      	movs	r0, #1
 800dc86:	f7fd fb0f 	bl	800b2a8 <memp_malloc>
 800dc8a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d111      	bne.n	800dcb6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800dc92:	2008      	movs	r0, #8
 800dc94:	f7ff ff3c 	bl	800db10 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc98:	2001      	movs	r0, #1
 800dc9a:	f7fd fb05 	bl	800b2a8 <memp_malloc>
 800dc9e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d107      	bne.n	800dcb6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800dca6:	79fb      	ldrb	r3, [r7, #7]
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f7ff fee3 	bl	800da74 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dcae:	2001      	movs	r0, #1
 800dcb0:	f7fd fafa 	bl	800b2a8 <memp_malloc>
 800dcb4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d03f      	beq.n	800dd3c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800dcbc:	229c      	movs	r2, #156	; 0x9c
 800dcbe:	2100      	movs	r1, #0
 800dcc0:	68f8      	ldr	r0, [r7, #12]
 800dcc2:	f00b ffa5 	bl	8019c10 <memset>
    pcb->prio = prio;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	79fa      	ldrb	r2, [r7, #7]
 800dcca:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800dcd2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800dcdc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	22ff      	movs	r2, #255	; 0xff
 800dcea:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f44f 7206 	mov.w	r2, #536	; 0x218
 800dcf2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	2206      	movs	r2, #6
 800dcf8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2206      	movs	r2, #6
 800dd00:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd08:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	2201      	movs	r2, #1
 800dd0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800dd12:	4b0d      	ldr	r3, [pc, #52]	; (800dd48 <tcp_alloc+0xf8>)
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800dd1a:	4b0c      	ldr	r3, [pc, #48]	; (800dd4c <tcp_alloc+0xfc>)
 800dd1c:	781a      	ldrb	r2, [r3, #0]
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800dd28:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	4a08      	ldr	r2, [pc, #32]	; (800dd50 <tcp_alloc+0x100>)
 800dd30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	4a07      	ldr	r2, [pc, #28]	; (800dd54 <tcp_alloc+0x104>)
 800dd38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3710      	adds	r7, #16
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop
 800dd48:	2000fd3c 	.word	0x2000fd3c
 800dd4c:	2000864e 	.word	0x2000864e
 800dd50:	0800da09 	.word	0x0800da09
 800dd54:	006ddd00 	.word	0x006ddd00

0800dd58 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b084      	sub	sp, #16
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	4603      	mov	r3, r0
 800dd60:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800dd62:	2040      	movs	r0, #64	; 0x40
 800dd64:	f7ff ff74 	bl	800dc50 <tcp_alloc>
 800dd68:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3710      	adds	r7, #16
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800dd74:	b480      	push	{r7}
 800dd76:	b083      	sub	sp, #12
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d002      	beq.n	800dd8a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	683a      	ldr	r2, [r7, #0]
 800dd88:	611a      	str	r2, [r3, #16]
  }
}
 800dd8a:	bf00      	nop
 800dd8c:	370c      	adds	r7, #12
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd94:	4770      	bx	lr
	...

0800dd98 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d00e      	beq.n	800ddc6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	7d1b      	ldrb	r3, [r3, #20]
 800ddac:	2b01      	cmp	r3, #1
 800ddae:	d106      	bne.n	800ddbe <tcp_recv+0x26>
 800ddb0:	4b07      	ldr	r3, [pc, #28]	; (800ddd0 <tcp_recv+0x38>)
 800ddb2:	f240 72df 	movw	r2, #2015	; 0x7df
 800ddb6:	4907      	ldr	r1, [pc, #28]	; (800ddd4 <tcp_recv+0x3c>)
 800ddb8:	4807      	ldr	r0, [pc, #28]	; (800ddd8 <tcp_recv+0x40>)
 800ddba:	f00b ff31 	bl	8019c20 <iprintf>
    pcb->recv = recv;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	683a      	ldr	r2, [r7, #0]
 800ddc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800ddc6:	bf00      	nop
 800ddc8:	3708      	adds	r7, #8
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}
 800ddce:	bf00      	nop
 800ddd0:	0801c780 	.word	0x0801c780
 800ddd4:	0801cd1c 	.word	0x0801cd1c
 800ddd8:	0801c7c4 	.word	0x0801c7c4

0800dddc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b082      	sub	sp, #8
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d00e      	beq.n	800de0a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	7d1b      	ldrb	r3, [r3, #20]
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	d106      	bne.n	800de02 <tcp_sent+0x26>
 800ddf4:	4b07      	ldr	r3, [pc, #28]	; (800de14 <tcp_sent+0x38>)
 800ddf6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ddfa:	4907      	ldr	r1, [pc, #28]	; (800de18 <tcp_sent+0x3c>)
 800ddfc:	4807      	ldr	r0, [pc, #28]	; (800de1c <tcp_sent+0x40>)
 800ddfe:	f00b ff0f 	bl	8019c20 <iprintf>
    pcb->sent = sent;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	683a      	ldr	r2, [r7, #0]
 800de06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800de0a:	bf00      	nop
 800de0c:	3708      	adds	r7, #8
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
 800de12:	bf00      	nop
 800de14:	0801c780 	.word	0x0801c780
 800de18:	0801cd44 	.word	0x0801cd44
 800de1c:	0801c7c4 	.word	0x0801c7c4

0800de20 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b082      	sub	sp, #8
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d00e      	beq.n	800de4e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	7d1b      	ldrb	r3, [r3, #20]
 800de34:	2b01      	cmp	r3, #1
 800de36:	d106      	bne.n	800de46 <tcp_err+0x26>
 800de38:	4b07      	ldr	r3, [pc, #28]	; (800de58 <tcp_err+0x38>)
 800de3a:	f640 020d 	movw	r2, #2061	; 0x80d
 800de3e:	4907      	ldr	r1, [pc, #28]	; (800de5c <tcp_err+0x3c>)
 800de40:	4807      	ldr	r0, [pc, #28]	; (800de60 <tcp_err+0x40>)
 800de42:	f00b feed 	bl	8019c20 <iprintf>
    pcb->errf = err;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	683a      	ldr	r2, [r7, #0]
 800de4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800de4e:	bf00      	nop
 800de50:	3708      	adds	r7, #8
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}
 800de56:	bf00      	nop
 800de58:	0801c780 	.word	0x0801c780
 800de5c:	0801cd6c 	.word	0x0801cd6c
 800de60:	0801c7c4 	.word	0x0801c7c4

0800de64 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800de64:	b480      	push	{r7}
 800de66:	b085      	sub	sp, #20
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d008      	beq.n	800de86 <tcp_accept+0x22>
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	7d1b      	ldrb	r3, [r3, #20]
 800de78:	2b01      	cmp	r3, #1
 800de7a:	d104      	bne.n	800de86 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	683a      	ldr	r2, [r7, #0]
 800de84:	619a      	str	r2, [r3, #24]
  }
}
 800de86:	bf00      	nop
 800de88:	3714      	adds	r7, #20
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr
	...

0800de94 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b084      	sub	sp, #16
 800de98:	af00      	add	r7, sp, #0
 800de9a:	60f8      	str	r0, [r7, #12]
 800de9c:	60b9      	str	r1, [r7, #8]
 800de9e:	4613      	mov	r3, r2
 800dea0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d107      	bne.n	800deb8 <tcp_poll+0x24>
 800dea8:	4b0e      	ldr	r3, [pc, #56]	; (800dee4 <tcp_poll+0x50>)
 800deaa:	f640 023d 	movw	r2, #2109	; 0x83d
 800deae:	490e      	ldr	r1, [pc, #56]	; (800dee8 <tcp_poll+0x54>)
 800deb0:	480e      	ldr	r0, [pc, #56]	; (800deec <tcp_poll+0x58>)
 800deb2:	f00b feb5 	bl	8019c20 <iprintf>
 800deb6:	e011      	b.n	800dedc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	7d1b      	ldrb	r3, [r3, #20]
 800debc:	2b01      	cmp	r3, #1
 800debe:	d106      	bne.n	800dece <tcp_poll+0x3a>
 800dec0:	4b08      	ldr	r3, [pc, #32]	; (800dee4 <tcp_poll+0x50>)
 800dec2:	f640 023e 	movw	r2, #2110	; 0x83e
 800dec6:	490a      	ldr	r1, [pc, #40]	; (800def0 <tcp_poll+0x5c>)
 800dec8:	4808      	ldr	r0, [pc, #32]	; (800deec <tcp_poll+0x58>)
 800deca:	f00b fea9 	bl	8019c20 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	68ba      	ldr	r2, [r7, #8]
 800ded2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	79fa      	ldrb	r2, [r7, #7]
 800deda:	775a      	strb	r2, [r3, #29]
}
 800dedc:	3710      	adds	r7, #16
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	0801c780 	.word	0x0801c780
 800dee8:	0801cd94 	.word	0x0801cd94
 800deec:	0801c7c4 	.word	0x0801c7c4
 800def0:	0801cdac 	.word	0x0801cdac

0800def4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b082      	sub	sp, #8
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d107      	bne.n	800df12 <tcp_pcb_purge+0x1e>
 800df02:	4b21      	ldr	r3, [pc, #132]	; (800df88 <tcp_pcb_purge+0x94>)
 800df04:	f640 0251 	movw	r2, #2129	; 0x851
 800df08:	4920      	ldr	r1, [pc, #128]	; (800df8c <tcp_pcb_purge+0x98>)
 800df0a:	4821      	ldr	r0, [pc, #132]	; (800df90 <tcp_pcb_purge+0x9c>)
 800df0c:	f00b fe88 	bl	8019c20 <iprintf>
 800df10:	e037      	b.n	800df82 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	7d1b      	ldrb	r3, [r3, #20]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d033      	beq.n	800df82 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800df1e:	2b0a      	cmp	r3, #10
 800df20:	d02f      	beq.n	800df82 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800df26:	2b01      	cmp	r3, #1
 800df28:	d02b      	beq.n	800df82 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d007      	beq.n	800df42 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df36:	4618      	mov	r0, r3
 800df38:	f7fe f8e6 	bl	800c108 <pbuf_free>
      pcb->refused_data = NULL;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2200      	movs	r2, #0
 800df40:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df46:	2b00      	cmp	r3, #0
 800df48:	d002      	beq.n	800df50 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f000 f986 	bl	800e25c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df56:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df5c:	4618      	mov	r0, r3
 800df5e:	f7ff fcfb 	bl	800d958 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df66:	4618      	mov	r0, r3
 800df68:	f7ff fcf6 	bl	800d958 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2200      	movs	r2, #0
 800df70:	66da      	str	r2, [r3, #108]	; 0x6c
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2200      	movs	r2, #0
 800df7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800df82:	3708      	adds	r7, #8
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}
 800df88:	0801c780 	.word	0x0801c780
 800df8c:	0801cdcc 	.word	0x0801cdcc
 800df90:	0801c7c4 	.word	0x0801c7c4

0800df94 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b084      	sub	sp, #16
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d106      	bne.n	800dfb2 <tcp_pcb_remove+0x1e>
 800dfa4:	4b3e      	ldr	r3, [pc, #248]	; (800e0a0 <tcp_pcb_remove+0x10c>)
 800dfa6:	f640 0283 	movw	r2, #2179	; 0x883
 800dfaa:	493e      	ldr	r1, [pc, #248]	; (800e0a4 <tcp_pcb_remove+0x110>)
 800dfac:	483e      	ldr	r0, [pc, #248]	; (800e0a8 <tcp_pcb_remove+0x114>)
 800dfae:	f00b fe37 	bl	8019c20 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d106      	bne.n	800dfc6 <tcp_pcb_remove+0x32>
 800dfb8:	4b39      	ldr	r3, [pc, #228]	; (800e0a0 <tcp_pcb_remove+0x10c>)
 800dfba:	f640 0284 	movw	r2, #2180	; 0x884
 800dfbe:	493b      	ldr	r1, [pc, #236]	; (800e0ac <tcp_pcb_remove+0x118>)
 800dfc0:	4839      	ldr	r0, [pc, #228]	; (800e0a8 <tcp_pcb_remove+0x114>)
 800dfc2:	f00b fe2d 	bl	8019c20 <iprintf>

  TCP_RMV(pcblist, pcb);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	683a      	ldr	r2, [r7, #0]
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d105      	bne.n	800dfdc <tcp_pcb_remove+0x48>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	68da      	ldr	r2, [r3, #12]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	601a      	str	r2, [r3, #0]
 800dfda:	e013      	b.n	800e004 <tcp_pcb_remove+0x70>
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	60fb      	str	r3, [r7, #12]
 800dfe2:	e00c      	b.n	800dffe <tcp_pcb_remove+0x6a>
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	68db      	ldr	r3, [r3, #12]
 800dfe8:	683a      	ldr	r2, [r7, #0]
 800dfea:	429a      	cmp	r2, r3
 800dfec:	d104      	bne.n	800dff8 <tcp_pcb_remove+0x64>
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	68da      	ldr	r2, [r3, #12]
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	60da      	str	r2, [r3, #12]
 800dff6:	e005      	b.n	800e004 <tcp_pcb_remove+0x70>
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	68db      	ldr	r3, [r3, #12]
 800dffc:	60fb      	str	r3, [r7, #12]
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d1ef      	bne.n	800dfe4 <tcp_pcb_remove+0x50>
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	2200      	movs	r2, #0
 800e008:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e00a:	6838      	ldr	r0, [r7, #0]
 800e00c:	f7ff ff72 	bl	800def4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	7d1b      	ldrb	r3, [r3, #20]
 800e014:	2b0a      	cmp	r3, #10
 800e016:	d013      	beq.n	800e040 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e01c:	2b01      	cmp	r3, #1
 800e01e:	d00f      	beq.n	800e040 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	8b5b      	ldrh	r3, [r3, #26]
 800e024:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d009      	beq.n	800e040 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	8b5b      	ldrh	r3, [r3, #26]
 800e030:	f043 0302 	orr.w	r3, r3, #2
 800e034:	b29a      	uxth	r2, r3
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e03a:	6838      	ldr	r0, [r7, #0]
 800e03c:	f003 fbc2 	bl	80117c4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	7d1b      	ldrb	r3, [r3, #20]
 800e044:	2b01      	cmp	r3, #1
 800e046:	d020      	beq.n	800e08a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d006      	beq.n	800e05e <tcp_pcb_remove+0xca>
 800e050:	4b13      	ldr	r3, [pc, #76]	; (800e0a0 <tcp_pcb_remove+0x10c>)
 800e052:	f640 0293 	movw	r2, #2195	; 0x893
 800e056:	4916      	ldr	r1, [pc, #88]	; (800e0b0 <tcp_pcb_remove+0x11c>)
 800e058:	4813      	ldr	r0, [pc, #76]	; (800e0a8 <tcp_pcb_remove+0x114>)
 800e05a:	f00b fde1 	bl	8019c20 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e062:	2b00      	cmp	r3, #0
 800e064:	d006      	beq.n	800e074 <tcp_pcb_remove+0xe0>
 800e066:	4b0e      	ldr	r3, [pc, #56]	; (800e0a0 <tcp_pcb_remove+0x10c>)
 800e068:	f640 0294 	movw	r2, #2196	; 0x894
 800e06c:	4911      	ldr	r1, [pc, #68]	; (800e0b4 <tcp_pcb_remove+0x120>)
 800e06e:	480e      	ldr	r0, [pc, #56]	; (800e0a8 <tcp_pcb_remove+0x114>)
 800e070:	f00b fdd6 	bl	8019c20 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d006      	beq.n	800e08a <tcp_pcb_remove+0xf6>
 800e07c:	4b08      	ldr	r3, [pc, #32]	; (800e0a0 <tcp_pcb_remove+0x10c>)
 800e07e:	f640 0296 	movw	r2, #2198	; 0x896
 800e082:	490d      	ldr	r1, [pc, #52]	; (800e0b8 <tcp_pcb_remove+0x124>)
 800e084:	4808      	ldr	r0, [pc, #32]	; (800e0a8 <tcp_pcb_remove+0x114>)
 800e086:	f00b fdcb 	bl	8019c20 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	2200      	movs	r2, #0
 800e08e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	2200      	movs	r2, #0
 800e094:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e096:	bf00      	nop
 800e098:	3710      	adds	r7, #16
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
 800e09e:	bf00      	nop
 800e0a0:	0801c780 	.word	0x0801c780
 800e0a4:	0801cde8 	.word	0x0801cde8
 800e0a8:	0801c7c4 	.word	0x0801c7c4
 800e0ac:	0801ce04 	.word	0x0801ce04
 800e0b0:	0801ce24 	.word	0x0801ce24
 800e0b4:	0801ce3c 	.word	0x0801ce3c
 800e0b8:	0801ce58 	.word	0x0801ce58

0800e0bc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b082      	sub	sp, #8
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d106      	bne.n	800e0d8 <tcp_next_iss+0x1c>
 800e0ca:	4b0a      	ldr	r3, [pc, #40]	; (800e0f4 <tcp_next_iss+0x38>)
 800e0cc:	f640 02af 	movw	r2, #2223	; 0x8af
 800e0d0:	4909      	ldr	r1, [pc, #36]	; (800e0f8 <tcp_next_iss+0x3c>)
 800e0d2:	480a      	ldr	r0, [pc, #40]	; (800e0fc <tcp_next_iss+0x40>)
 800e0d4:	f00b fda4 	bl	8019c20 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e0d8:	4b09      	ldr	r3, [pc, #36]	; (800e100 <tcp_next_iss+0x44>)
 800e0da:	681a      	ldr	r2, [r3, #0]
 800e0dc:	4b09      	ldr	r3, [pc, #36]	; (800e104 <tcp_next_iss+0x48>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	4413      	add	r3, r2
 800e0e2:	4a07      	ldr	r2, [pc, #28]	; (800e100 <tcp_next_iss+0x44>)
 800e0e4:	6013      	str	r3, [r2, #0]
  return iss;
 800e0e6:	4b06      	ldr	r3, [pc, #24]	; (800e100 <tcp_next_iss+0x44>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3708      	adds	r7, #8
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
 800e0f2:	bf00      	nop
 800e0f4:	0801c780 	.word	0x0801c780
 800e0f8:	0801ce70 	.word	0x0801ce70
 800e0fc:	0801c7c4 	.word	0x0801c7c4
 800e100:	20000014 	.word	0x20000014
 800e104:	2000fd3c 	.word	0x2000fd3c

0800e108 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b086      	sub	sp, #24
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	4603      	mov	r3, r0
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	607a      	str	r2, [r7, #4]
 800e114:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d106      	bne.n	800e12a <tcp_eff_send_mss_netif+0x22>
 800e11c:	4b14      	ldr	r3, [pc, #80]	; (800e170 <tcp_eff_send_mss_netif+0x68>)
 800e11e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e122:	4914      	ldr	r1, [pc, #80]	; (800e174 <tcp_eff_send_mss_netif+0x6c>)
 800e124:	4814      	ldr	r0, [pc, #80]	; (800e178 <tcp_eff_send_mss_netif+0x70>)
 800e126:	f00b fd7b 	bl	8019c20 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d101      	bne.n	800e134 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e130:	89fb      	ldrh	r3, [r7, #14]
 800e132:	e019      	b.n	800e168 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e138:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e13a:	8afb      	ldrh	r3, [r7, #22]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d012      	beq.n	800e166 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e140:	2328      	movs	r3, #40	; 0x28
 800e142:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e144:	8afa      	ldrh	r2, [r7, #22]
 800e146:	8abb      	ldrh	r3, [r7, #20]
 800e148:	429a      	cmp	r2, r3
 800e14a:	d904      	bls.n	800e156 <tcp_eff_send_mss_netif+0x4e>
 800e14c:	8afa      	ldrh	r2, [r7, #22]
 800e14e:	8abb      	ldrh	r3, [r7, #20]
 800e150:	1ad3      	subs	r3, r2, r3
 800e152:	b29b      	uxth	r3, r3
 800e154:	e000      	b.n	800e158 <tcp_eff_send_mss_netif+0x50>
 800e156:	2300      	movs	r3, #0
 800e158:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e15a:	8a7a      	ldrh	r2, [r7, #18]
 800e15c:	89fb      	ldrh	r3, [r7, #14]
 800e15e:	4293      	cmp	r3, r2
 800e160:	bf28      	it	cs
 800e162:	4613      	movcs	r3, r2
 800e164:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e166:	89fb      	ldrh	r3, [r7, #14]
}
 800e168:	4618      	mov	r0, r3
 800e16a:	3718      	adds	r7, #24
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}
 800e170:	0801c780 	.word	0x0801c780
 800e174:	0801ce8c 	.word	0x0801ce8c
 800e178:	0801c7c4 	.word	0x0801c7c4

0800e17c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b084      	sub	sp, #16
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
 800e184:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d119      	bne.n	800e1c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e190:	4b10      	ldr	r3, [pc, #64]	; (800e1d4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e192:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e196:	4910      	ldr	r1, [pc, #64]	; (800e1d8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e198:	4810      	ldr	r0, [pc, #64]	; (800e1dc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e19a:	f00b fd41 	bl	8019c20 <iprintf>

  while (pcb != NULL) {
 800e19e:	e011      	b.n	800e1c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	681a      	ldr	r2, [r3, #0]
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d108      	bne.n	800e1be <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	68db      	ldr	r3, [r3, #12]
 800e1b0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e1b2:	68f8      	ldr	r0, [r7, #12]
 800e1b4:	f7fe fd9e 	bl	800ccf4 <tcp_abort>
      pcb = next;
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	60fb      	str	r3, [r7, #12]
 800e1bc:	e002      	b.n	800e1c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	68db      	ldr	r3, [r3, #12]
 800e1c2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d1ea      	bne.n	800e1a0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e1ca:	bf00      	nop
 800e1cc:	3710      	adds	r7, #16
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}
 800e1d2:	bf00      	nop
 800e1d4:	0801c780 	.word	0x0801c780
 800e1d8:	0801ceb4 	.word	0x0801ceb4
 800e1dc:	0801c7c4 	.word	0x0801c7c4

0800e1e0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b084      	sub	sp, #16
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d02a      	beq.n	800e246 <tcp_netif_ip_addr_changed+0x66>
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d026      	beq.n	800e246 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e1f8:	4b15      	ldr	r3, [pc, #84]	; (800e250 <tcp_netif_ip_addr_changed+0x70>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	4619      	mov	r1, r3
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f7ff ffbc 	bl	800e17c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e204:	4b13      	ldr	r3, [pc, #76]	; (800e254 <tcp_netif_ip_addr_changed+0x74>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	4619      	mov	r1, r3
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f7ff ffb6 	bl	800e17c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d017      	beq.n	800e246 <tcp_netif_ip_addr_changed+0x66>
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d013      	beq.n	800e246 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e21e:	4b0e      	ldr	r3, [pc, #56]	; (800e258 <tcp_netif_ip_addr_changed+0x78>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	60fb      	str	r3, [r7, #12]
 800e224:	e00c      	b.n	800e240 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	681a      	ldr	r2, [r3, #0]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	429a      	cmp	r2, r3
 800e230:	d103      	bne.n	800e23a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	681a      	ldr	r2, [r3, #0]
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	68db      	ldr	r3, [r3, #12]
 800e23e:	60fb      	str	r3, [r7, #12]
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d1ef      	bne.n	800e226 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e246:	bf00      	nop
 800e248:	3710      	adds	r7, #16
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	2000fd38 	.word	0x2000fd38
 800e254:	2000fd44 	.word	0x2000fd44
 800e258:	2000fd40 	.word	0x2000fd40

0800e25c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b082      	sub	sp, #8
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d007      	beq.n	800e27c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e270:	4618      	mov	r0, r3
 800e272:	f7ff fb71 	bl	800d958 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2200      	movs	r2, #0
 800e27a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e27c:	bf00      	nop
 800e27e:	3708      	adds	r7, #8
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}

0800e284 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e284:	b590      	push	{r4, r7, lr}
 800e286:	b08d      	sub	sp, #52	; 0x34
 800e288:	af04      	add	r7, sp, #16
 800e28a:	6078      	str	r0, [r7, #4]
 800e28c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d105      	bne.n	800e2a0 <tcp_input+0x1c>
 800e294:	4b9b      	ldr	r3, [pc, #620]	; (800e504 <tcp_input+0x280>)
 800e296:	2283      	movs	r2, #131	; 0x83
 800e298:	499b      	ldr	r1, [pc, #620]	; (800e508 <tcp_input+0x284>)
 800e29a:	489c      	ldr	r0, [pc, #624]	; (800e50c <tcp_input+0x288>)
 800e29c:	f00b fcc0 	bl	8019c20 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	4a9a      	ldr	r2, [pc, #616]	; (800e510 <tcp_input+0x28c>)
 800e2a6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	895b      	ldrh	r3, [r3, #10]
 800e2ac:	2b13      	cmp	r3, #19
 800e2ae:	f240 83c4 	bls.w	800ea3a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e2b2:	4b98      	ldr	r3, [pc, #608]	; (800e514 <tcp_input+0x290>)
 800e2b4:	695a      	ldr	r2, [r3, #20]
 800e2b6:	4b97      	ldr	r3, [pc, #604]	; (800e514 <tcp_input+0x290>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	4619      	mov	r1, r3
 800e2bc:	4610      	mov	r0, r2
 800e2be:	f008 fb35 	bl	801692c <ip4_addr_isbroadcast_u32>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	f040 83ba 	bne.w	800ea3e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e2ca:	4b92      	ldr	r3, [pc, #584]	; (800e514 <tcp_input+0x290>)
 800e2cc:	695b      	ldr	r3, [r3, #20]
 800e2ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e2d2:	2be0      	cmp	r3, #224	; 0xe0
 800e2d4:	f000 83b3 	beq.w	800ea3e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e2d8:	4b8d      	ldr	r3, [pc, #564]	; (800e510 <tcp_input+0x28c>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	899b      	ldrh	r3, [r3, #12]
 800e2de:	b29b      	uxth	r3, r3
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7fc fb2b 	bl	800a93c <lwip_htons>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	0b1b      	lsrs	r3, r3, #12
 800e2ea:	b29b      	uxth	r3, r3
 800e2ec:	b2db      	uxtb	r3, r3
 800e2ee:	009b      	lsls	r3, r3, #2
 800e2f0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e2f2:	7cbb      	ldrb	r3, [r7, #18]
 800e2f4:	2b13      	cmp	r3, #19
 800e2f6:	f240 83a2 	bls.w	800ea3e <tcp_input+0x7ba>
 800e2fa:	7cbb      	ldrb	r3, [r7, #18]
 800e2fc:	b29a      	uxth	r2, r3
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	891b      	ldrh	r3, [r3, #8]
 800e302:	429a      	cmp	r2, r3
 800e304:	f200 839b 	bhi.w	800ea3e <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e308:	7cbb      	ldrb	r3, [r7, #18]
 800e30a:	b29b      	uxth	r3, r3
 800e30c:	3b14      	subs	r3, #20
 800e30e:	b29a      	uxth	r2, r3
 800e310:	4b81      	ldr	r3, [pc, #516]	; (800e518 <tcp_input+0x294>)
 800e312:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e314:	4b81      	ldr	r3, [pc, #516]	; (800e51c <tcp_input+0x298>)
 800e316:	2200      	movs	r2, #0
 800e318:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	895a      	ldrh	r2, [r3, #10]
 800e31e:	7cbb      	ldrb	r3, [r7, #18]
 800e320:	b29b      	uxth	r3, r3
 800e322:	429a      	cmp	r2, r3
 800e324:	d309      	bcc.n	800e33a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e326:	4b7c      	ldr	r3, [pc, #496]	; (800e518 <tcp_input+0x294>)
 800e328:	881a      	ldrh	r2, [r3, #0]
 800e32a:	4b7d      	ldr	r3, [pc, #500]	; (800e520 <tcp_input+0x29c>)
 800e32c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e32e:	7cbb      	ldrb	r3, [r7, #18]
 800e330:	4619      	mov	r1, r3
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f7fd fe30 	bl	800bf98 <pbuf_remove_header>
 800e338:	e04e      	b.n	800e3d8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d105      	bne.n	800e34e <tcp_input+0xca>
 800e342:	4b70      	ldr	r3, [pc, #448]	; (800e504 <tcp_input+0x280>)
 800e344:	22c2      	movs	r2, #194	; 0xc2
 800e346:	4977      	ldr	r1, [pc, #476]	; (800e524 <tcp_input+0x2a0>)
 800e348:	4870      	ldr	r0, [pc, #448]	; (800e50c <tcp_input+0x288>)
 800e34a:	f00b fc69 	bl	8019c20 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e34e:	2114      	movs	r1, #20
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f7fd fe21 	bl	800bf98 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	895a      	ldrh	r2, [r3, #10]
 800e35a:	4b71      	ldr	r3, [pc, #452]	; (800e520 <tcp_input+0x29c>)
 800e35c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e35e:	4b6e      	ldr	r3, [pc, #440]	; (800e518 <tcp_input+0x294>)
 800e360:	881a      	ldrh	r2, [r3, #0]
 800e362:	4b6f      	ldr	r3, [pc, #444]	; (800e520 <tcp_input+0x29c>)
 800e364:	881b      	ldrh	r3, [r3, #0]
 800e366:	1ad3      	subs	r3, r2, r3
 800e368:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e36a:	4b6d      	ldr	r3, [pc, #436]	; (800e520 <tcp_input+0x29c>)
 800e36c:	881b      	ldrh	r3, [r3, #0]
 800e36e:	4619      	mov	r1, r3
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f7fd fe11 	bl	800bf98 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	895b      	ldrh	r3, [r3, #10]
 800e37c:	8a3a      	ldrh	r2, [r7, #16]
 800e37e:	429a      	cmp	r2, r3
 800e380:	f200 835f 	bhi.w	800ea42 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	685b      	ldr	r3, [r3, #4]
 800e38a:	4a64      	ldr	r2, [pc, #400]	; (800e51c <tcp_input+0x298>)
 800e38c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	8a3a      	ldrh	r2, [r7, #16]
 800e394:	4611      	mov	r1, r2
 800e396:	4618      	mov	r0, r3
 800e398:	f7fd fdfe 	bl	800bf98 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	891a      	ldrh	r2, [r3, #8]
 800e3a0:	8a3b      	ldrh	r3, [r7, #16]
 800e3a2:	1ad3      	subs	r3, r2, r3
 800e3a4:	b29a      	uxth	r2, r3
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	895b      	ldrh	r3, [r3, #10]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d005      	beq.n	800e3be <tcp_input+0x13a>
 800e3b2:	4b54      	ldr	r3, [pc, #336]	; (800e504 <tcp_input+0x280>)
 800e3b4:	22df      	movs	r2, #223	; 0xdf
 800e3b6:	495c      	ldr	r1, [pc, #368]	; (800e528 <tcp_input+0x2a4>)
 800e3b8:	4854      	ldr	r0, [pc, #336]	; (800e50c <tcp_input+0x288>)
 800e3ba:	f00b fc31 	bl	8019c20 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	891a      	ldrh	r2, [r3, #8]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	891b      	ldrh	r3, [r3, #8]
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d005      	beq.n	800e3d8 <tcp_input+0x154>
 800e3cc:	4b4d      	ldr	r3, [pc, #308]	; (800e504 <tcp_input+0x280>)
 800e3ce:	22e0      	movs	r2, #224	; 0xe0
 800e3d0:	4956      	ldr	r1, [pc, #344]	; (800e52c <tcp_input+0x2a8>)
 800e3d2:	484e      	ldr	r0, [pc, #312]	; (800e50c <tcp_input+0x288>)
 800e3d4:	f00b fc24 	bl	8019c20 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e3d8:	4b4d      	ldr	r3, [pc, #308]	; (800e510 <tcp_input+0x28c>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	881b      	ldrh	r3, [r3, #0]
 800e3de:	b29a      	uxth	r2, r3
 800e3e0:	4b4b      	ldr	r3, [pc, #300]	; (800e510 <tcp_input+0x28c>)
 800e3e2:	681c      	ldr	r4, [r3, #0]
 800e3e4:	4610      	mov	r0, r2
 800e3e6:	f7fc faa9 	bl	800a93c <lwip_htons>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e3ee:	4b48      	ldr	r3, [pc, #288]	; (800e510 <tcp_input+0x28c>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	885b      	ldrh	r3, [r3, #2]
 800e3f4:	b29a      	uxth	r2, r3
 800e3f6:	4b46      	ldr	r3, [pc, #280]	; (800e510 <tcp_input+0x28c>)
 800e3f8:	681c      	ldr	r4, [r3, #0]
 800e3fa:	4610      	mov	r0, r2
 800e3fc:	f7fc fa9e 	bl	800a93c <lwip_htons>
 800e400:	4603      	mov	r3, r0
 800e402:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e404:	4b42      	ldr	r3, [pc, #264]	; (800e510 <tcp_input+0x28c>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	685a      	ldr	r2, [r3, #4]
 800e40a:	4b41      	ldr	r3, [pc, #260]	; (800e510 <tcp_input+0x28c>)
 800e40c:	681c      	ldr	r4, [r3, #0]
 800e40e:	4610      	mov	r0, r2
 800e410:	f7fc faa9 	bl	800a966 <lwip_htonl>
 800e414:	4603      	mov	r3, r0
 800e416:	6063      	str	r3, [r4, #4]
 800e418:	6863      	ldr	r3, [r4, #4]
 800e41a:	4a45      	ldr	r2, [pc, #276]	; (800e530 <tcp_input+0x2ac>)
 800e41c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e41e:	4b3c      	ldr	r3, [pc, #240]	; (800e510 <tcp_input+0x28c>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	689a      	ldr	r2, [r3, #8]
 800e424:	4b3a      	ldr	r3, [pc, #232]	; (800e510 <tcp_input+0x28c>)
 800e426:	681c      	ldr	r4, [r3, #0]
 800e428:	4610      	mov	r0, r2
 800e42a:	f7fc fa9c 	bl	800a966 <lwip_htonl>
 800e42e:	4603      	mov	r3, r0
 800e430:	60a3      	str	r3, [r4, #8]
 800e432:	68a3      	ldr	r3, [r4, #8]
 800e434:	4a3f      	ldr	r2, [pc, #252]	; (800e534 <tcp_input+0x2b0>)
 800e436:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e438:	4b35      	ldr	r3, [pc, #212]	; (800e510 <tcp_input+0x28c>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	89db      	ldrh	r3, [r3, #14]
 800e43e:	b29a      	uxth	r2, r3
 800e440:	4b33      	ldr	r3, [pc, #204]	; (800e510 <tcp_input+0x28c>)
 800e442:	681c      	ldr	r4, [r3, #0]
 800e444:	4610      	mov	r0, r2
 800e446:	f7fc fa79 	bl	800a93c <lwip_htons>
 800e44a:	4603      	mov	r3, r0
 800e44c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e44e:	4b30      	ldr	r3, [pc, #192]	; (800e510 <tcp_input+0x28c>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	899b      	ldrh	r3, [r3, #12]
 800e454:	b29b      	uxth	r3, r3
 800e456:	4618      	mov	r0, r3
 800e458:	f7fc fa70 	bl	800a93c <lwip_htons>
 800e45c:	4603      	mov	r3, r0
 800e45e:	b2db      	uxtb	r3, r3
 800e460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e464:	b2da      	uxtb	r2, r3
 800e466:	4b34      	ldr	r3, [pc, #208]	; (800e538 <tcp_input+0x2b4>)
 800e468:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	891a      	ldrh	r2, [r3, #8]
 800e46e:	4b33      	ldr	r3, [pc, #204]	; (800e53c <tcp_input+0x2b8>)
 800e470:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e472:	4b31      	ldr	r3, [pc, #196]	; (800e538 <tcp_input+0x2b4>)
 800e474:	781b      	ldrb	r3, [r3, #0]
 800e476:	f003 0303 	and.w	r3, r3, #3
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d00c      	beq.n	800e498 <tcp_input+0x214>
    tcplen++;
 800e47e:	4b2f      	ldr	r3, [pc, #188]	; (800e53c <tcp_input+0x2b8>)
 800e480:	881b      	ldrh	r3, [r3, #0]
 800e482:	3301      	adds	r3, #1
 800e484:	b29a      	uxth	r2, r3
 800e486:	4b2d      	ldr	r3, [pc, #180]	; (800e53c <tcp_input+0x2b8>)
 800e488:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	891a      	ldrh	r2, [r3, #8]
 800e48e:	4b2b      	ldr	r3, [pc, #172]	; (800e53c <tcp_input+0x2b8>)
 800e490:	881b      	ldrh	r3, [r3, #0]
 800e492:	429a      	cmp	r2, r3
 800e494:	f200 82d7 	bhi.w	800ea46 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e498:	2300      	movs	r3, #0
 800e49a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e49c:	4b28      	ldr	r3, [pc, #160]	; (800e540 <tcp_input+0x2bc>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	61fb      	str	r3, [r7, #28]
 800e4a2:	e09d      	b.n	800e5e0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e4a4:	69fb      	ldr	r3, [r7, #28]
 800e4a6:	7d1b      	ldrb	r3, [r3, #20]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d105      	bne.n	800e4b8 <tcp_input+0x234>
 800e4ac:	4b15      	ldr	r3, [pc, #84]	; (800e504 <tcp_input+0x280>)
 800e4ae:	22fb      	movs	r2, #251	; 0xfb
 800e4b0:	4924      	ldr	r1, [pc, #144]	; (800e544 <tcp_input+0x2c0>)
 800e4b2:	4816      	ldr	r0, [pc, #88]	; (800e50c <tcp_input+0x288>)
 800e4b4:	f00b fbb4 	bl	8019c20 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	7d1b      	ldrb	r3, [r3, #20]
 800e4bc:	2b0a      	cmp	r3, #10
 800e4be:	d105      	bne.n	800e4cc <tcp_input+0x248>
 800e4c0:	4b10      	ldr	r3, [pc, #64]	; (800e504 <tcp_input+0x280>)
 800e4c2:	22fc      	movs	r2, #252	; 0xfc
 800e4c4:	4920      	ldr	r1, [pc, #128]	; (800e548 <tcp_input+0x2c4>)
 800e4c6:	4811      	ldr	r0, [pc, #68]	; (800e50c <tcp_input+0x288>)
 800e4c8:	f00b fbaa 	bl	8019c20 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e4cc:	69fb      	ldr	r3, [r7, #28]
 800e4ce:	7d1b      	ldrb	r3, [r3, #20]
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	d105      	bne.n	800e4e0 <tcp_input+0x25c>
 800e4d4:	4b0b      	ldr	r3, [pc, #44]	; (800e504 <tcp_input+0x280>)
 800e4d6:	22fd      	movs	r2, #253	; 0xfd
 800e4d8:	491c      	ldr	r1, [pc, #112]	; (800e54c <tcp_input+0x2c8>)
 800e4da:	480c      	ldr	r0, [pc, #48]	; (800e50c <tcp_input+0x288>)
 800e4dc:	f00b fba0 	bl	8019c20 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e4e0:	69fb      	ldr	r3, [r7, #28]
 800e4e2:	7a1b      	ldrb	r3, [r3, #8]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d033      	beq.n	800e550 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e4e8:	69fb      	ldr	r3, [r7, #28]
 800e4ea:	7a1a      	ldrb	r2, [r3, #8]
 800e4ec:	4b09      	ldr	r3, [pc, #36]	; (800e514 <tcp_input+0x290>)
 800e4ee:	685b      	ldr	r3, [r3, #4]
 800e4f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e4f4:	3301      	adds	r3, #1
 800e4f6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d029      	beq.n	800e550 <tcp_input+0x2cc>
      prev = pcb;
 800e4fc:	69fb      	ldr	r3, [r7, #28]
 800e4fe:	61bb      	str	r3, [r7, #24]
      continue;
 800e500:	e06b      	b.n	800e5da <tcp_input+0x356>
 800e502:	bf00      	nop
 800e504:	0801cee8 	.word	0x0801cee8
 800e508:	0801cf1c 	.word	0x0801cf1c
 800e50c:	0801cf34 	.word	0x0801cf34
 800e510:	20008660 	.word	0x20008660
 800e514:	2000c5e4 	.word	0x2000c5e4
 800e518:	20008664 	.word	0x20008664
 800e51c:	20008668 	.word	0x20008668
 800e520:	20008666 	.word	0x20008666
 800e524:	0801cf5c 	.word	0x0801cf5c
 800e528:	0801cf6c 	.word	0x0801cf6c
 800e52c:	0801cf78 	.word	0x0801cf78
 800e530:	20008670 	.word	0x20008670
 800e534:	20008674 	.word	0x20008674
 800e538:	2000867c 	.word	0x2000867c
 800e53c:	2000867a 	.word	0x2000867a
 800e540:	2000fd38 	.word	0x2000fd38
 800e544:	0801cf98 	.word	0x0801cf98
 800e548:	0801cfc0 	.word	0x0801cfc0
 800e54c:	0801cfec 	.word	0x0801cfec
    }

    if (pcb->remote_port == tcphdr->src &&
 800e550:	69fb      	ldr	r3, [r7, #28]
 800e552:	8b1a      	ldrh	r2, [r3, #24]
 800e554:	4b94      	ldr	r3, [pc, #592]	; (800e7a8 <tcp_input+0x524>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	881b      	ldrh	r3, [r3, #0]
 800e55a:	b29b      	uxth	r3, r3
 800e55c:	429a      	cmp	r2, r3
 800e55e:	d13a      	bne.n	800e5d6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e560:	69fb      	ldr	r3, [r7, #28]
 800e562:	8ada      	ldrh	r2, [r3, #22]
 800e564:	4b90      	ldr	r3, [pc, #576]	; (800e7a8 <tcp_input+0x524>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	885b      	ldrh	r3, [r3, #2]
 800e56a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e56c:	429a      	cmp	r2, r3
 800e56e:	d132      	bne.n	800e5d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e570:	69fb      	ldr	r3, [r7, #28]
 800e572:	685a      	ldr	r2, [r3, #4]
 800e574:	4b8d      	ldr	r3, [pc, #564]	; (800e7ac <tcp_input+0x528>)
 800e576:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e578:	429a      	cmp	r2, r3
 800e57a:	d12c      	bne.n	800e5d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e57c:	69fb      	ldr	r3, [r7, #28]
 800e57e:	681a      	ldr	r2, [r3, #0]
 800e580:	4b8a      	ldr	r3, [pc, #552]	; (800e7ac <tcp_input+0x528>)
 800e582:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e584:	429a      	cmp	r2, r3
 800e586:	d126      	bne.n	800e5d6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e588:	69fb      	ldr	r3, [r7, #28]
 800e58a:	68db      	ldr	r3, [r3, #12]
 800e58c:	69fa      	ldr	r2, [r7, #28]
 800e58e:	429a      	cmp	r2, r3
 800e590:	d106      	bne.n	800e5a0 <tcp_input+0x31c>
 800e592:	4b87      	ldr	r3, [pc, #540]	; (800e7b0 <tcp_input+0x52c>)
 800e594:	f240 120d 	movw	r2, #269	; 0x10d
 800e598:	4986      	ldr	r1, [pc, #536]	; (800e7b4 <tcp_input+0x530>)
 800e59a:	4887      	ldr	r0, [pc, #540]	; (800e7b8 <tcp_input+0x534>)
 800e59c:	f00b fb40 	bl	8019c20 <iprintf>
      if (prev != NULL) {
 800e5a0:	69bb      	ldr	r3, [r7, #24]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d00a      	beq.n	800e5bc <tcp_input+0x338>
        prev->next = pcb->next;
 800e5a6:	69fb      	ldr	r3, [r7, #28]
 800e5a8:	68da      	ldr	r2, [r3, #12]
 800e5aa:	69bb      	ldr	r3, [r7, #24]
 800e5ac:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e5ae:	4b83      	ldr	r3, [pc, #524]	; (800e7bc <tcp_input+0x538>)
 800e5b0:	681a      	ldr	r2, [r3, #0]
 800e5b2:	69fb      	ldr	r3, [r7, #28]
 800e5b4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e5b6:	4a81      	ldr	r2, [pc, #516]	; (800e7bc <tcp_input+0x538>)
 800e5b8:	69fb      	ldr	r3, [r7, #28]
 800e5ba:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e5bc:	69fb      	ldr	r3, [r7, #28]
 800e5be:	68db      	ldr	r3, [r3, #12]
 800e5c0:	69fa      	ldr	r2, [r7, #28]
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	d111      	bne.n	800e5ea <tcp_input+0x366>
 800e5c6:	4b7a      	ldr	r3, [pc, #488]	; (800e7b0 <tcp_input+0x52c>)
 800e5c8:	f240 1215 	movw	r2, #277	; 0x115
 800e5cc:	497c      	ldr	r1, [pc, #496]	; (800e7c0 <tcp_input+0x53c>)
 800e5ce:	487a      	ldr	r0, [pc, #488]	; (800e7b8 <tcp_input+0x534>)
 800e5d0:	f00b fb26 	bl	8019c20 <iprintf>
      break;
 800e5d4:	e009      	b.n	800e5ea <tcp_input+0x366>
    }
    prev = pcb;
 800e5d6:	69fb      	ldr	r3, [r7, #28]
 800e5d8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5da:	69fb      	ldr	r3, [r7, #28]
 800e5dc:	68db      	ldr	r3, [r3, #12]
 800e5de:	61fb      	str	r3, [r7, #28]
 800e5e0:	69fb      	ldr	r3, [r7, #28]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	f47f af5e 	bne.w	800e4a4 <tcp_input+0x220>
 800e5e8:	e000      	b.n	800e5ec <tcp_input+0x368>
      break;
 800e5ea:	bf00      	nop
  }

  if (pcb == NULL) {
 800e5ec:	69fb      	ldr	r3, [r7, #28]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	f040 8095 	bne.w	800e71e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5f4:	4b73      	ldr	r3, [pc, #460]	; (800e7c4 <tcp_input+0x540>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	61fb      	str	r3, [r7, #28]
 800e5fa:	e03f      	b.n	800e67c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e5fc:	69fb      	ldr	r3, [r7, #28]
 800e5fe:	7d1b      	ldrb	r3, [r3, #20]
 800e600:	2b0a      	cmp	r3, #10
 800e602:	d006      	beq.n	800e612 <tcp_input+0x38e>
 800e604:	4b6a      	ldr	r3, [pc, #424]	; (800e7b0 <tcp_input+0x52c>)
 800e606:	f240 121f 	movw	r2, #287	; 0x11f
 800e60a:	496f      	ldr	r1, [pc, #444]	; (800e7c8 <tcp_input+0x544>)
 800e60c:	486a      	ldr	r0, [pc, #424]	; (800e7b8 <tcp_input+0x534>)
 800e60e:	f00b fb07 	bl	8019c20 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e612:	69fb      	ldr	r3, [r7, #28]
 800e614:	7a1b      	ldrb	r3, [r3, #8]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d009      	beq.n	800e62e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e61a:	69fb      	ldr	r3, [r7, #28]
 800e61c:	7a1a      	ldrb	r2, [r3, #8]
 800e61e:	4b63      	ldr	r3, [pc, #396]	; (800e7ac <tcp_input+0x528>)
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e626:	3301      	adds	r3, #1
 800e628:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d122      	bne.n	800e674 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e62e:	69fb      	ldr	r3, [r7, #28]
 800e630:	8b1a      	ldrh	r2, [r3, #24]
 800e632:	4b5d      	ldr	r3, [pc, #372]	; (800e7a8 <tcp_input+0x524>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	881b      	ldrh	r3, [r3, #0]
 800e638:	b29b      	uxth	r3, r3
 800e63a:	429a      	cmp	r2, r3
 800e63c:	d11b      	bne.n	800e676 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e63e:	69fb      	ldr	r3, [r7, #28]
 800e640:	8ada      	ldrh	r2, [r3, #22]
 800e642:	4b59      	ldr	r3, [pc, #356]	; (800e7a8 <tcp_input+0x524>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	885b      	ldrh	r3, [r3, #2]
 800e648:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d113      	bne.n	800e676 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e64e:	69fb      	ldr	r3, [r7, #28]
 800e650:	685a      	ldr	r2, [r3, #4]
 800e652:	4b56      	ldr	r3, [pc, #344]	; (800e7ac <tcp_input+0x528>)
 800e654:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e656:	429a      	cmp	r2, r3
 800e658:	d10d      	bne.n	800e676 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e65a:	69fb      	ldr	r3, [r7, #28]
 800e65c:	681a      	ldr	r2, [r3, #0]
 800e65e:	4b53      	ldr	r3, [pc, #332]	; (800e7ac <tcp_input+0x528>)
 800e660:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e662:	429a      	cmp	r2, r3
 800e664:	d107      	bne.n	800e676 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e666:	69f8      	ldr	r0, [r7, #28]
 800e668:	f000 fb52 	bl	800ed10 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f7fd fd4b 	bl	800c108 <pbuf_free>
        return;
 800e672:	e1ee      	b.n	800ea52 <tcp_input+0x7ce>
        continue;
 800e674:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e676:	69fb      	ldr	r3, [r7, #28]
 800e678:	68db      	ldr	r3, [r3, #12]
 800e67a:	61fb      	str	r3, [r7, #28]
 800e67c:	69fb      	ldr	r3, [r7, #28]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d1bc      	bne.n	800e5fc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e682:	2300      	movs	r3, #0
 800e684:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e686:	4b51      	ldr	r3, [pc, #324]	; (800e7cc <tcp_input+0x548>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	617b      	str	r3, [r7, #20]
 800e68c:	e02a      	b.n	800e6e4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	7a1b      	ldrb	r3, [r3, #8]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d00c      	beq.n	800e6b0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	7a1a      	ldrb	r2, [r3, #8]
 800e69a:	4b44      	ldr	r3, [pc, #272]	; (800e7ac <tcp_input+0x528>)
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e6a2:	3301      	adds	r3, #1
 800e6a4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d002      	beq.n	800e6b0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	61bb      	str	r3, [r7, #24]
        continue;
 800e6ae:	e016      	b.n	800e6de <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	8ada      	ldrh	r2, [r3, #22]
 800e6b4:	4b3c      	ldr	r3, [pc, #240]	; (800e7a8 <tcp_input+0x524>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	885b      	ldrh	r3, [r3, #2]
 800e6ba:	b29b      	uxth	r3, r3
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d10c      	bne.n	800e6da <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	681a      	ldr	r2, [r3, #0]
 800e6c4:	4b39      	ldr	r3, [pc, #228]	; (800e7ac <tcp_input+0x528>)
 800e6c6:	695b      	ldr	r3, [r3, #20]
 800e6c8:	429a      	cmp	r2, r3
 800e6ca:	d00f      	beq.n	800e6ec <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d00d      	beq.n	800e6ee <tcp_input+0x46a>
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d009      	beq.n	800e6ee <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e6da:	697b      	ldr	r3, [r7, #20]
 800e6dc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	68db      	ldr	r3, [r3, #12]
 800e6e2:	617b      	str	r3, [r7, #20]
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d1d1      	bne.n	800e68e <tcp_input+0x40a>
 800e6ea:	e000      	b.n	800e6ee <tcp_input+0x46a>
            break;
 800e6ec:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d014      	beq.n	800e71e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e6f4:	69bb      	ldr	r3, [r7, #24]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d00a      	beq.n	800e710 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	68da      	ldr	r2, [r3, #12]
 800e6fe:	69bb      	ldr	r3, [r7, #24]
 800e700:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e702:	4b32      	ldr	r3, [pc, #200]	; (800e7cc <tcp_input+0x548>)
 800e704:	681a      	ldr	r2, [r3, #0]
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e70a:	4a30      	ldr	r2, [pc, #192]	; (800e7cc <tcp_input+0x548>)
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e710:	6978      	ldr	r0, [r7, #20]
 800e712:	f000 f9ff 	bl	800eb14 <tcp_listen_input>
      }
      pbuf_free(p);
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	f7fd fcf6 	bl	800c108 <pbuf_free>
      return;
 800e71c:	e199      	b.n	800ea52 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e71e:	69fb      	ldr	r3, [r7, #28]
 800e720:	2b00      	cmp	r3, #0
 800e722:	f000 8160 	beq.w	800e9e6 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e726:	4b2a      	ldr	r3, [pc, #168]	; (800e7d0 <tcp_input+0x54c>)
 800e728:	2200      	movs	r2, #0
 800e72a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	891a      	ldrh	r2, [r3, #8]
 800e730:	4b27      	ldr	r3, [pc, #156]	; (800e7d0 <tcp_input+0x54c>)
 800e732:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e734:	4a26      	ldr	r2, [pc, #152]	; (800e7d0 <tcp_input+0x54c>)
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e73a:	4b1b      	ldr	r3, [pc, #108]	; (800e7a8 <tcp_input+0x524>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	4a24      	ldr	r2, [pc, #144]	; (800e7d0 <tcp_input+0x54c>)
 800e740:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e742:	4b24      	ldr	r3, [pc, #144]	; (800e7d4 <tcp_input+0x550>)
 800e744:	2200      	movs	r2, #0
 800e746:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e748:	4b23      	ldr	r3, [pc, #140]	; (800e7d8 <tcp_input+0x554>)
 800e74a:	2200      	movs	r2, #0
 800e74c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e74e:	4b23      	ldr	r3, [pc, #140]	; (800e7dc <tcp_input+0x558>)
 800e750:	2200      	movs	r2, #0
 800e752:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e754:	4b22      	ldr	r3, [pc, #136]	; (800e7e0 <tcp_input+0x55c>)
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	f003 0308 	and.w	r3, r3, #8
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d006      	beq.n	800e76e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	7b5b      	ldrb	r3, [r3, #13]
 800e764:	f043 0301 	orr.w	r3, r3, #1
 800e768:	b2da      	uxtb	r2, r3
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e76e:	69fb      	ldr	r3, [r7, #28]
 800e770:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e772:	2b00      	cmp	r3, #0
 800e774:	d038      	beq.n	800e7e8 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e776:	69f8      	ldr	r0, [r7, #28]
 800e778:	f7ff f872 	bl	800d860 <tcp_process_refused_data>
 800e77c:	4603      	mov	r3, r0
 800e77e:	f113 0f0d 	cmn.w	r3, #13
 800e782:	d007      	beq.n	800e794 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e784:	69fb      	ldr	r3, [r7, #28]
 800e786:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d02d      	beq.n	800e7e8 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e78c:	4b15      	ldr	r3, [pc, #84]	; (800e7e4 <tcp_input+0x560>)
 800e78e:	881b      	ldrh	r3, [r3, #0]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d029      	beq.n	800e7e8 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e794:	69fb      	ldr	r3, [r7, #28]
 800e796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e798:	2b00      	cmp	r3, #0
 800e79a:	f040 8104 	bne.w	800e9a6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e79e:	69f8      	ldr	r0, [r7, #28]
 800e7a0:	f003 fe28 	bl	80123f4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e7a4:	e0ff      	b.n	800e9a6 <tcp_input+0x722>
 800e7a6:	bf00      	nop
 800e7a8:	20008660 	.word	0x20008660
 800e7ac:	2000c5e4 	.word	0x2000c5e4
 800e7b0:	0801cee8 	.word	0x0801cee8
 800e7b4:	0801d014 	.word	0x0801d014
 800e7b8:	0801cf34 	.word	0x0801cf34
 800e7bc:	2000fd38 	.word	0x2000fd38
 800e7c0:	0801d040 	.word	0x0801d040
 800e7c4:	2000fd48 	.word	0x2000fd48
 800e7c8:	0801d06c 	.word	0x0801d06c
 800e7cc:	2000fd40 	.word	0x2000fd40
 800e7d0:	20008650 	.word	0x20008650
 800e7d4:	20008680 	.word	0x20008680
 800e7d8:	2000867d 	.word	0x2000867d
 800e7dc:	20008678 	.word	0x20008678
 800e7e0:	2000867c 	.word	0x2000867c
 800e7e4:	2000867a 	.word	0x2000867a
      }
    }
    tcp_input_pcb = pcb;
 800e7e8:	4a9b      	ldr	r2, [pc, #620]	; (800ea58 <tcp_input+0x7d4>)
 800e7ea:	69fb      	ldr	r3, [r7, #28]
 800e7ec:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e7ee:	69f8      	ldr	r0, [r7, #28]
 800e7f0:	f000 fb0a 	bl	800ee08 <tcp_process>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e7f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e7fc:	f113 0f0d 	cmn.w	r3, #13
 800e800:	f000 80d3 	beq.w	800e9aa <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800e804:	4b95      	ldr	r3, [pc, #596]	; (800ea5c <tcp_input+0x7d8>)
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	f003 0308 	and.w	r3, r3, #8
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d015      	beq.n	800e83c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e810:	69fb      	ldr	r3, [r7, #28]
 800e812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e816:	2b00      	cmp	r3, #0
 800e818:	d008      	beq.n	800e82c <tcp_input+0x5a8>
 800e81a:	69fb      	ldr	r3, [r7, #28]
 800e81c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e820:	69fa      	ldr	r2, [r7, #28]
 800e822:	6912      	ldr	r2, [r2, #16]
 800e824:	f06f 010d 	mvn.w	r1, #13
 800e828:	4610      	mov	r0, r2
 800e82a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e82c:	69f9      	ldr	r1, [r7, #28]
 800e82e:	488c      	ldr	r0, [pc, #560]	; (800ea60 <tcp_input+0x7dc>)
 800e830:	f7ff fbb0 	bl	800df94 <tcp_pcb_remove>
        tcp_free(pcb);
 800e834:	69f8      	ldr	r0, [r7, #28]
 800e836:	f7fd ff23 	bl	800c680 <tcp_free>
 800e83a:	e0c1      	b.n	800e9c0 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800e83c:	2300      	movs	r3, #0
 800e83e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e840:	4b88      	ldr	r3, [pc, #544]	; (800ea64 <tcp_input+0x7e0>)
 800e842:	881b      	ldrh	r3, [r3, #0]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d01d      	beq.n	800e884 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e848:	4b86      	ldr	r3, [pc, #536]	; (800ea64 <tcp_input+0x7e0>)
 800e84a:	881b      	ldrh	r3, [r3, #0]
 800e84c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e84e:	69fb      	ldr	r3, [r7, #28]
 800e850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e854:	2b00      	cmp	r3, #0
 800e856:	d00a      	beq.n	800e86e <tcp_input+0x5ea>
 800e858:	69fb      	ldr	r3, [r7, #28]
 800e85a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e85e:	69fa      	ldr	r2, [r7, #28]
 800e860:	6910      	ldr	r0, [r2, #16]
 800e862:	89fa      	ldrh	r2, [r7, #14]
 800e864:	69f9      	ldr	r1, [r7, #28]
 800e866:	4798      	blx	r3
 800e868:	4603      	mov	r3, r0
 800e86a:	74fb      	strb	r3, [r7, #19]
 800e86c:	e001      	b.n	800e872 <tcp_input+0x5ee>
 800e86e:	2300      	movs	r3, #0
 800e870:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e872:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e876:	f113 0f0d 	cmn.w	r3, #13
 800e87a:	f000 8098 	beq.w	800e9ae <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e87e:	4b79      	ldr	r3, [pc, #484]	; (800ea64 <tcp_input+0x7e0>)
 800e880:	2200      	movs	r2, #0
 800e882:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e884:	69f8      	ldr	r0, [r7, #28]
 800e886:	f000 f905 	bl	800ea94 <tcp_input_delayed_close>
 800e88a:	4603      	mov	r3, r0
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	f040 8090 	bne.w	800e9b2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e892:	4b75      	ldr	r3, [pc, #468]	; (800ea68 <tcp_input+0x7e4>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d041      	beq.n	800e91e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e89a:	69fb      	ldr	r3, [r7, #28]
 800e89c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d006      	beq.n	800e8b0 <tcp_input+0x62c>
 800e8a2:	4b72      	ldr	r3, [pc, #456]	; (800ea6c <tcp_input+0x7e8>)
 800e8a4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e8a8:	4971      	ldr	r1, [pc, #452]	; (800ea70 <tcp_input+0x7ec>)
 800e8aa:	4872      	ldr	r0, [pc, #456]	; (800ea74 <tcp_input+0x7f0>)
 800e8ac:	f00b f9b8 	bl	8019c20 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e8b0:	69fb      	ldr	r3, [r7, #28]
 800e8b2:	8b5b      	ldrh	r3, [r3, #26]
 800e8b4:	f003 0310 	and.w	r3, r3, #16
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d008      	beq.n	800e8ce <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e8bc:	4b6a      	ldr	r3, [pc, #424]	; (800ea68 <tcp_input+0x7e4>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7fd fc21 	bl	800c108 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e8c6:	69f8      	ldr	r0, [r7, #28]
 800e8c8:	f7fe fa14 	bl	800ccf4 <tcp_abort>
            goto aborted;
 800e8cc:	e078      	b.n	800e9c0 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e8ce:	69fb      	ldr	r3, [r7, #28]
 800e8d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d00c      	beq.n	800e8f2 <tcp_input+0x66e>
 800e8d8:	69fb      	ldr	r3, [r7, #28]
 800e8da:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e8de:	69fb      	ldr	r3, [r7, #28]
 800e8e0:	6918      	ldr	r0, [r3, #16]
 800e8e2:	4b61      	ldr	r3, [pc, #388]	; (800ea68 <tcp_input+0x7e4>)
 800e8e4:	681a      	ldr	r2, [r3, #0]
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	69f9      	ldr	r1, [r7, #28]
 800e8ea:	47a0      	blx	r4
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	74fb      	strb	r3, [r7, #19]
 800e8f0:	e008      	b.n	800e904 <tcp_input+0x680>
 800e8f2:	4b5d      	ldr	r3, [pc, #372]	; (800ea68 <tcp_input+0x7e4>)
 800e8f4:	681a      	ldr	r2, [r3, #0]
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	69f9      	ldr	r1, [r7, #28]
 800e8fa:	2000      	movs	r0, #0
 800e8fc:	f7ff f884 	bl	800da08 <tcp_recv_null>
 800e900:	4603      	mov	r3, r0
 800e902:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e904:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e908:	f113 0f0d 	cmn.w	r3, #13
 800e90c:	d053      	beq.n	800e9b6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e90e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d003      	beq.n	800e91e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e916:	4b54      	ldr	r3, [pc, #336]	; (800ea68 <tcp_input+0x7e4>)
 800e918:	681a      	ldr	r2, [r3, #0]
 800e91a:	69fb      	ldr	r3, [r7, #28]
 800e91c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e91e:	4b4f      	ldr	r3, [pc, #316]	; (800ea5c <tcp_input+0x7d8>)
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	f003 0320 	and.w	r3, r3, #32
 800e926:	2b00      	cmp	r3, #0
 800e928:	d030      	beq.n	800e98c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800e92a:	69fb      	ldr	r3, [r7, #28]
 800e92c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d009      	beq.n	800e946 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e932:	69fb      	ldr	r3, [r7, #28]
 800e934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e936:	7b5a      	ldrb	r2, [r3, #13]
 800e938:	69fb      	ldr	r3, [r7, #28]
 800e93a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e93c:	f042 0220 	orr.w	r2, r2, #32
 800e940:	b2d2      	uxtb	r2, r2
 800e942:	735a      	strb	r2, [r3, #13]
 800e944:	e022      	b.n	800e98c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e946:	69fb      	ldr	r3, [r7, #28]
 800e948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e94a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e94e:	d005      	beq.n	800e95c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800e950:	69fb      	ldr	r3, [r7, #28]
 800e952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e954:	3301      	adds	r3, #1
 800e956:	b29a      	uxth	r2, r3
 800e958:	69fb      	ldr	r3, [r7, #28]
 800e95a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e962:	2b00      	cmp	r3, #0
 800e964:	d00b      	beq.n	800e97e <tcp_input+0x6fa>
 800e966:	69fb      	ldr	r3, [r7, #28]
 800e968:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e96c:	69fb      	ldr	r3, [r7, #28]
 800e96e:	6918      	ldr	r0, [r3, #16]
 800e970:	2300      	movs	r3, #0
 800e972:	2200      	movs	r2, #0
 800e974:	69f9      	ldr	r1, [r7, #28]
 800e976:	47a0      	blx	r4
 800e978:	4603      	mov	r3, r0
 800e97a:	74fb      	strb	r3, [r7, #19]
 800e97c:	e001      	b.n	800e982 <tcp_input+0x6fe>
 800e97e:	2300      	movs	r3, #0
 800e980:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e982:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e986:	f113 0f0d 	cmn.w	r3, #13
 800e98a:	d016      	beq.n	800e9ba <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e98c:	4b32      	ldr	r3, [pc, #200]	; (800ea58 <tcp_input+0x7d4>)
 800e98e:	2200      	movs	r2, #0
 800e990:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e992:	69f8      	ldr	r0, [r7, #28]
 800e994:	f000 f87e 	bl	800ea94 <tcp_input_delayed_close>
 800e998:	4603      	mov	r3, r0
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d10f      	bne.n	800e9be <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e99e:	69f8      	ldr	r0, [r7, #28]
 800e9a0:	f002 ff10 	bl	80117c4 <tcp_output>
 800e9a4:	e00c      	b.n	800e9c0 <tcp_input+0x73c>
        goto aborted;
 800e9a6:	bf00      	nop
 800e9a8:	e00a      	b.n	800e9c0 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e9aa:	bf00      	nop
 800e9ac:	e008      	b.n	800e9c0 <tcp_input+0x73c>
              goto aborted;
 800e9ae:	bf00      	nop
 800e9b0:	e006      	b.n	800e9c0 <tcp_input+0x73c>
          goto aborted;
 800e9b2:	bf00      	nop
 800e9b4:	e004      	b.n	800e9c0 <tcp_input+0x73c>
            goto aborted;
 800e9b6:	bf00      	nop
 800e9b8:	e002      	b.n	800e9c0 <tcp_input+0x73c>
              goto aborted;
 800e9ba:	bf00      	nop
 800e9bc:	e000      	b.n	800e9c0 <tcp_input+0x73c>
          goto aborted;
 800e9be:	bf00      	nop
    tcp_input_pcb = NULL;
 800e9c0:	4b25      	ldr	r3, [pc, #148]	; (800ea58 <tcp_input+0x7d4>)
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e9c6:	4b28      	ldr	r3, [pc, #160]	; (800ea68 <tcp_input+0x7e4>)
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e9cc:	4b2a      	ldr	r3, [pc, #168]	; (800ea78 <tcp_input+0x7f4>)
 800e9ce:	685b      	ldr	r3, [r3, #4]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d03d      	beq.n	800ea50 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800e9d4:	4b28      	ldr	r3, [pc, #160]	; (800ea78 <tcp_input+0x7f4>)
 800e9d6:	685b      	ldr	r3, [r3, #4]
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f7fd fb95 	bl	800c108 <pbuf_free>
      inseg.p = NULL;
 800e9de:	4b26      	ldr	r3, [pc, #152]	; (800ea78 <tcp_input+0x7f4>)
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e9e4:	e034      	b.n	800ea50 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e9e6:	4b25      	ldr	r3, [pc, #148]	; (800ea7c <tcp_input+0x7f8>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	899b      	ldrh	r3, [r3, #12]
 800e9ec:	b29b      	uxth	r3, r3
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7fb ffa4 	bl	800a93c <lwip_htons>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	b2db      	uxtb	r3, r3
 800e9f8:	f003 0304 	and.w	r3, r3, #4
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d118      	bne.n	800ea32 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea00:	4b1f      	ldr	r3, [pc, #124]	; (800ea80 <tcp_input+0x7fc>)
 800ea02:	6819      	ldr	r1, [r3, #0]
 800ea04:	4b1f      	ldr	r3, [pc, #124]	; (800ea84 <tcp_input+0x800>)
 800ea06:	881b      	ldrh	r3, [r3, #0]
 800ea08:	461a      	mov	r2, r3
 800ea0a:	4b1f      	ldr	r3, [pc, #124]	; (800ea88 <tcp_input+0x804>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea10:	4b1a      	ldr	r3, [pc, #104]	; (800ea7c <tcp_input+0x7f8>)
 800ea12:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea14:	885b      	ldrh	r3, [r3, #2]
 800ea16:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea18:	4a18      	ldr	r2, [pc, #96]	; (800ea7c <tcp_input+0x7f8>)
 800ea1a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea1c:	8812      	ldrh	r2, [r2, #0]
 800ea1e:	b292      	uxth	r2, r2
 800ea20:	9202      	str	r2, [sp, #8]
 800ea22:	9301      	str	r3, [sp, #4]
 800ea24:	4b19      	ldr	r3, [pc, #100]	; (800ea8c <tcp_input+0x808>)
 800ea26:	9300      	str	r3, [sp, #0]
 800ea28:	4b19      	ldr	r3, [pc, #100]	; (800ea90 <tcp_input+0x80c>)
 800ea2a:	4602      	mov	r2, r0
 800ea2c:	2000      	movs	r0, #0
 800ea2e:	f003 fc8f 	bl	8012350 <tcp_rst>
    pbuf_free(p);
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f7fd fb68 	bl	800c108 <pbuf_free>
  return;
 800ea38:	e00a      	b.n	800ea50 <tcp_input+0x7cc>
    goto dropped;
 800ea3a:	bf00      	nop
 800ea3c:	e004      	b.n	800ea48 <tcp_input+0x7c4>
dropped:
 800ea3e:	bf00      	nop
 800ea40:	e002      	b.n	800ea48 <tcp_input+0x7c4>
      goto dropped;
 800ea42:	bf00      	nop
 800ea44:	e000      	b.n	800ea48 <tcp_input+0x7c4>
      goto dropped;
 800ea46:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f7fd fb5d 	bl	800c108 <pbuf_free>
 800ea4e:	e000      	b.n	800ea52 <tcp_input+0x7ce>
  return;
 800ea50:	bf00      	nop
}
 800ea52:	3724      	adds	r7, #36	; 0x24
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd90      	pop	{r4, r7, pc}
 800ea58:	2000fd4c 	.word	0x2000fd4c
 800ea5c:	2000867d 	.word	0x2000867d
 800ea60:	2000fd38 	.word	0x2000fd38
 800ea64:	20008678 	.word	0x20008678
 800ea68:	20008680 	.word	0x20008680
 800ea6c:	0801cee8 	.word	0x0801cee8
 800ea70:	0801d09c 	.word	0x0801d09c
 800ea74:	0801cf34 	.word	0x0801cf34
 800ea78:	20008650 	.word	0x20008650
 800ea7c:	20008660 	.word	0x20008660
 800ea80:	20008674 	.word	0x20008674
 800ea84:	2000867a 	.word	0x2000867a
 800ea88:	20008670 	.word	0x20008670
 800ea8c:	2000c5f4 	.word	0x2000c5f4
 800ea90:	2000c5f8 	.word	0x2000c5f8

0800ea94 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b082      	sub	sp, #8
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d106      	bne.n	800eab0 <tcp_input_delayed_close+0x1c>
 800eaa2:	4b17      	ldr	r3, [pc, #92]	; (800eb00 <tcp_input_delayed_close+0x6c>)
 800eaa4:	f240 225a 	movw	r2, #602	; 0x25a
 800eaa8:	4916      	ldr	r1, [pc, #88]	; (800eb04 <tcp_input_delayed_close+0x70>)
 800eaaa:	4817      	ldr	r0, [pc, #92]	; (800eb08 <tcp_input_delayed_close+0x74>)
 800eaac:	f00b f8b8 	bl	8019c20 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800eab0:	4b16      	ldr	r3, [pc, #88]	; (800eb0c <tcp_input_delayed_close+0x78>)
 800eab2:	781b      	ldrb	r3, [r3, #0]
 800eab4:	f003 0310 	and.w	r3, r3, #16
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d01c      	beq.n	800eaf6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	8b5b      	ldrh	r3, [r3, #26]
 800eac0:	f003 0310 	and.w	r3, r3, #16
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d10d      	bne.n	800eae4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d008      	beq.n	800eae4 <tcp_input_delayed_close+0x50>
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ead8:	687a      	ldr	r2, [r7, #4]
 800eada:	6912      	ldr	r2, [r2, #16]
 800eadc:	f06f 010e 	mvn.w	r1, #14
 800eae0:	4610      	mov	r0, r2
 800eae2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800eae4:	6879      	ldr	r1, [r7, #4]
 800eae6:	480a      	ldr	r0, [pc, #40]	; (800eb10 <tcp_input_delayed_close+0x7c>)
 800eae8:	f7ff fa54 	bl	800df94 <tcp_pcb_remove>
    tcp_free(pcb);
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f7fd fdc7 	bl	800c680 <tcp_free>
    return 1;
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	e000      	b.n	800eaf8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800eaf6:	2300      	movs	r3, #0
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3708      	adds	r7, #8
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}
 800eb00:	0801cee8 	.word	0x0801cee8
 800eb04:	0801d0b8 	.word	0x0801d0b8
 800eb08:	0801cf34 	.word	0x0801cf34
 800eb0c:	2000867d 	.word	0x2000867d
 800eb10:	2000fd38 	.word	0x2000fd38

0800eb14 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800eb14:	b590      	push	{r4, r7, lr}
 800eb16:	b08b      	sub	sp, #44	; 0x2c
 800eb18:	af04      	add	r7, sp, #16
 800eb1a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800eb1c:	4b6f      	ldr	r3, [pc, #444]	; (800ecdc <tcp_listen_input+0x1c8>)
 800eb1e:	781b      	ldrb	r3, [r3, #0]
 800eb20:	f003 0304 	and.w	r3, r3, #4
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	f040 80d3 	bne.w	800ecd0 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d106      	bne.n	800eb3e <tcp_listen_input+0x2a>
 800eb30:	4b6b      	ldr	r3, [pc, #428]	; (800ece0 <tcp_listen_input+0x1cc>)
 800eb32:	f240 2281 	movw	r2, #641	; 0x281
 800eb36:	496b      	ldr	r1, [pc, #428]	; (800ece4 <tcp_listen_input+0x1d0>)
 800eb38:	486b      	ldr	r0, [pc, #428]	; (800ece8 <tcp_listen_input+0x1d4>)
 800eb3a:	f00b f871 	bl	8019c20 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800eb3e:	4b67      	ldr	r3, [pc, #412]	; (800ecdc <tcp_listen_input+0x1c8>)
 800eb40:	781b      	ldrb	r3, [r3, #0]
 800eb42:	f003 0310 	and.w	r3, r3, #16
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d019      	beq.n	800eb7e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb4a:	4b68      	ldr	r3, [pc, #416]	; (800ecec <tcp_listen_input+0x1d8>)
 800eb4c:	6819      	ldr	r1, [r3, #0]
 800eb4e:	4b68      	ldr	r3, [pc, #416]	; (800ecf0 <tcp_listen_input+0x1dc>)
 800eb50:	881b      	ldrh	r3, [r3, #0]
 800eb52:	461a      	mov	r2, r3
 800eb54:	4b67      	ldr	r3, [pc, #412]	; (800ecf4 <tcp_listen_input+0x1e0>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb5a:	4b67      	ldr	r3, [pc, #412]	; (800ecf8 <tcp_listen_input+0x1e4>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb5e:	885b      	ldrh	r3, [r3, #2]
 800eb60:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb62:	4a65      	ldr	r2, [pc, #404]	; (800ecf8 <tcp_listen_input+0x1e4>)
 800eb64:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb66:	8812      	ldrh	r2, [r2, #0]
 800eb68:	b292      	uxth	r2, r2
 800eb6a:	9202      	str	r2, [sp, #8]
 800eb6c:	9301      	str	r3, [sp, #4]
 800eb6e:	4b63      	ldr	r3, [pc, #396]	; (800ecfc <tcp_listen_input+0x1e8>)
 800eb70:	9300      	str	r3, [sp, #0]
 800eb72:	4b63      	ldr	r3, [pc, #396]	; (800ed00 <tcp_listen_input+0x1ec>)
 800eb74:	4602      	mov	r2, r0
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f003 fbea 	bl	8012350 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800eb7c:	e0aa      	b.n	800ecd4 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800eb7e:	4b57      	ldr	r3, [pc, #348]	; (800ecdc <tcp_listen_input+0x1c8>)
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	f003 0302 	and.w	r3, r3, #2
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	f000 80a4 	beq.w	800ecd4 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	7d5b      	ldrb	r3, [r3, #21]
 800eb90:	4618      	mov	r0, r3
 800eb92:	f7ff f85d 	bl	800dc50 <tcp_alloc>
 800eb96:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d111      	bne.n	800ebc2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	699b      	ldr	r3, [r3, #24]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d00a      	beq.n	800ebbc <tcp_listen_input+0xa8>
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	699b      	ldr	r3, [r3, #24]
 800ebaa:	687a      	ldr	r2, [r7, #4]
 800ebac:	6910      	ldr	r0, [r2, #16]
 800ebae:	f04f 32ff 	mov.w	r2, #4294967295
 800ebb2:	2100      	movs	r1, #0
 800ebb4:	4798      	blx	r3
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	73bb      	strb	r3, [r7, #14]
      return;
 800ebba:	e08c      	b.n	800ecd6 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ebbc:	23f0      	movs	r3, #240	; 0xf0
 800ebbe:	73bb      	strb	r3, [r7, #14]
      return;
 800ebc0:	e089      	b.n	800ecd6 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ebc2:	4b50      	ldr	r3, [pc, #320]	; (800ed04 <tcp_listen_input+0x1f0>)
 800ebc4:	695a      	ldr	r2, [r3, #20]
 800ebc6:	697b      	ldr	r3, [r7, #20]
 800ebc8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ebca:	4b4e      	ldr	r3, [pc, #312]	; (800ed04 <tcp_listen_input+0x1f0>)
 800ebcc:	691a      	ldr	r2, [r3, #16]
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	8ada      	ldrh	r2, [r3, #22]
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ebda:	4b47      	ldr	r3, [pc, #284]	; (800ecf8 <tcp_listen_input+0x1e4>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	881b      	ldrh	r3, [r3, #0]
 800ebe0:	b29a      	uxth	r2, r3
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	2203      	movs	r2, #3
 800ebea:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ebec:	4b41      	ldr	r3, [pc, #260]	; (800ecf4 <tcp_listen_input+0x1e0>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	1c5a      	adds	r2, r3, #1
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ebfe:	6978      	ldr	r0, [r7, #20]
 800ec00:	f7ff fa5c 	bl	800e0bc <tcp_next_iss>
 800ec04:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	693a      	ldr	r2, [r7, #16]
 800ec0a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	693a      	ldr	r2, [r7, #16]
 800ec10:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	693a      	ldr	r2, [r7, #16]
 800ec16:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	693a      	ldr	r2, [r7, #16]
 800ec1c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ec1e:	4b35      	ldr	r3, [pc, #212]	; (800ecf4 <tcp_listen_input+0x1e0>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	1e5a      	subs	r2, r3, #1
 800ec24:	697b      	ldr	r3, [r7, #20]
 800ec26:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	691a      	ldr	r2, [r3, #16]
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	687a      	ldr	r2, [r7, #4]
 800ec34:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	7a5b      	ldrb	r3, [r3, #9]
 800ec3a:	f003 030c 	and.w	r3, r3, #12
 800ec3e:	b2da      	uxtb	r2, r3
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	7a1a      	ldrb	r2, [r3, #8]
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ec4c:	4b2e      	ldr	r3, [pc, #184]	; (800ed08 <tcp_listen_input+0x1f4>)
 800ec4e:	681a      	ldr	r2, [r3, #0]
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	60da      	str	r2, [r3, #12]
 800ec54:	4a2c      	ldr	r2, [pc, #176]	; (800ed08 <tcp_listen_input+0x1f4>)
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	6013      	str	r3, [r2, #0]
 800ec5a:	f003 fd3b 	bl	80126d4 <tcp_timer_needed>
 800ec5e:	4b2b      	ldr	r3, [pc, #172]	; (800ed0c <tcp_listen_input+0x1f8>)
 800ec60:	2201      	movs	r2, #1
 800ec62:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ec64:	6978      	ldr	r0, [r7, #20]
 800ec66:	f001 fd8f 	bl	8010788 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ec6a:	4b23      	ldr	r3, [pc, #140]	; (800ecf8 <tcp_listen_input+0x1e4>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	89db      	ldrh	r3, [r3, #14]
 800ec70:	b29a      	uxth	r2, r3
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	3304      	adds	r3, #4
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f007 fb9b 	bl	80163c8 <ip4_route>
 800ec92:	4601      	mov	r1, r0
 800ec94:	697b      	ldr	r3, [r7, #20]
 800ec96:	3304      	adds	r3, #4
 800ec98:	461a      	mov	r2, r3
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	f7ff fa34 	bl	800e108 <tcp_eff_send_mss_netif>
 800eca0:	4603      	mov	r3, r0
 800eca2:	461a      	mov	r2, r3
 800eca4:	697b      	ldr	r3, [r7, #20]
 800eca6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800eca8:	2112      	movs	r1, #18
 800ecaa:	6978      	ldr	r0, [r7, #20]
 800ecac:	f002 fc9c 	bl	80115e8 <tcp_enqueue_flags>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ecb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d004      	beq.n	800ecc6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ecbc:	2100      	movs	r1, #0
 800ecbe:	6978      	ldr	r0, [r7, #20]
 800ecc0:	f7fd ff5a 	bl	800cb78 <tcp_abandon>
      return;
 800ecc4:	e007      	b.n	800ecd6 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800ecc6:	6978      	ldr	r0, [r7, #20]
 800ecc8:	f002 fd7c 	bl	80117c4 <tcp_output>
  return;
 800eccc:	bf00      	nop
 800ecce:	e001      	b.n	800ecd4 <tcp_listen_input+0x1c0>
    return;
 800ecd0:	bf00      	nop
 800ecd2:	e000      	b.n	800ecd6 <tcp_listen_input+0x1c2>
  return;
 800ecd4:	bf00      	nop
}
 800ecd6:	371c      	adds	r7, #28
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd90      	pop	{r4, r7, pc}
 800ecdc:	2000867c 	.word	0x2000867c
 800ece0:	0801cee8 	.word	0x0801cee8
 800ece4:	0801d0e0 	.word	0x0801d0e0
 800ece8:	0801cf34 	.word	0x0801cf34
 800ecec:	20008674 	.word	0x20008674
 800ecf0:	2000867a 	.word	0x2000867a
 800ecf4:	20008670 	.word	0x20008670
 800ecf8:	20008660 	.word	0x20008660
 800ecfc:	2000c5f4 	.word	0x2000c5f4
 800ed00:	2000c5f8 	.word	0x2000c5f8
 800ed04:	2000c5e4 	.word	0x2000c5e4
 800ed08:	2000fd38 	.word	0x2000fd38
 800ed0c:	2000fd34 	.word	0x2000fd34

0800ed10 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b086      	sub	sp, #24
 800ed14:	af04      	add	r7, sp, #16
 800ed16:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ed18:	4b30      	ldr	r3, [pc, #192]	; (800eddc <tcp_timewait_input+0xcc>)
 800ed1a:	781b      	ldrb	r3, [r3, #0]
 800ed1c:	f003 0304 	and.w	r3, r3, #4
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d154      	bne.n	800edce <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d106      	bne.n	800ed38 <tcp_timewait_input+0x28>
 800ed2a:	4b2d      	ldr	r3, [pc, #180]	; (800ede0 <tcp_timewait_input+0xd0>)
 800ed2c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ed30:	492c      	ldr	r1, [pc, #176]	; (800ede4 <tcp_timewait_input+0xd4>)
 800ed32:	482d      	ldr	r0, [pc, #180]	; (800ede8 <tcp_timewait_input+0xd8>)
 800ed34:	f00a ff74 	bl	8019c20 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ed38:	4b28      	ldr	r3, [pc, #160]	; (800eddc <tcp_timewait_input+0xcc>)
 800ed3a:	781b      	ldrb	r3, [r3, #0]
 800ed3c:	f003 0302 	and.w	r3, r3, #2
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d02a      	beq.n	800ed9a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ed44:	4b29      	ldr	r3, [pc, #164]	; (800edec <tcp_timewait_input+0xdc>)
 800ed46:	681a      	ldr	r2, [r3, #0]
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed4c:	1ad3      	subs	r3, r2, r3
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	db2d      	blt.n	800edae <tcp_timewait_input+0x9e>
 800ed52:	4b26      	ldr	r3, [pc, #152]	; (800edec <tcp_timewait_input+0xdc>)
 800ed54:	681a      	ldr	r2, [r3, #0]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed5a:	6879      	ldr	r1, [r7, #4]
 800ed5c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ed5e:	440b      	add	r3, r1
 800ed60:	1ad3      	subs	r3, r2, r3
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	dc23      	bgt.n	800edae <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed66:	4b22      	ldr	r3, [pc, #136]	; (800edf0 <tcp_timewait_input+0xe0>)
 800ed68:	6819      	ldr	r1, [r3, #0]
 800ed6a:	4b22      	ldr	r3, [pc, #136]	; (800edf4 <tcp_timewait_input+0xe4>)
 800ed6c:	881b      	ldrh	r3, [r3, #0]
 800ed6e:	461a      	mov	r2, r3
 800ed70:	4b1e      	ldr	r3, [pc, #120]	; (800edec <tcp_timewait_input+0xdc>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed76:	4b20      	ldr	r3, [pc, #128]	; (800edf8 <tcp_timewait_input+0xe8>)
 800ed78:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed7a:	885b      	ldrh	r3, [r3, #2]
 800ed7c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed7e:	4a1e      	ldr	r2, [pc, #120]	; (800edf8 <tcp_timewait_input+0xe8>)
 800ed80:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed82:	8812      	ldrh	r2, [r2, #0]
 800ed84:	b292      	uxth	r2, r2
 800ed86:	9202      	str	r2, [sp, #8]
 800ed88:	9301      	str	r3, [sp, #4]
 800ed8a:	4b1c      	ldr	r3, [pc, #112]	; (800edfc <tcp_timewait_input+0xec>)
 800ed8c:	9300      	str	r3, [sp, #0]
 800ed8e:	4b1c      	ldr	r3, [pc, #112]	; (800ee00 <tcp_timewait_input+0xf0>)
 800ed90:	4602      	mov	r2, r0
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f003 fadc 	bl	8012350 <tcp_rst>
      return;
 800ed98:	e01c      	b.n	800edd4 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800ed9a:	4b10      	ldr	r3, [pc, #64]	; (800eddc <tcp_timewait_input+0xcc>)
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	f003 0301 	and.w	r3, r3, #1
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d003      	beq.n	800edae <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800eda6:	4b17      	ldr	r3, [pc, #92]	; (800ee04 <tcp_timewait_input+0xf4>)
 800eda8:	681a      	ldr	r2, [r3, #0]
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800edae:	4b11      	ldr	r3, [pc, #68]	; (800edf4 <tcp_timewait_input+0xe4>)
 800edb0:	881b      	ldrh	r3, [r3, #0]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d00d      	beq.n	800edd2 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	8b5b      	ldrh	r3, [r3, #26]
 800edba:	f043 0302 	orr.w	r3, r3, #2
 800edbe:	b29a      	uxth	r2, r3
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f002 fcfd 	bl	80117c4 <tcp_output>
  }
  return;
 800edca:	bf00      	nop
 800edcc:	e001      	b.n	800edd2 <tcp_timewait_input+0xc2>
    return;
 800edce:	bf00      	nop
 800edd0:	e000      	b.n	800edd4 <tcp_timewait_input+0xc4>
  return;
 800edd2:	bf00      	nop
}
 800edd4:	3708      	adds	r7, #8
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
 800edda:	bf00      	nop
 800eddc:	2000867c 	.word	0x2000867c
 800ede0:	0801cee8 	.word	0x0801cee8
 800ede4:	0801d100 	.word	0x0801d100
 800ede8:	0801cf34 	.word	0x0801cf34
 800edec:	20008670 	.word	0x20008670
 800edf0:	20008674 	.word	0x20008674
 800edf4:	2000867a 	.word	0x2000867a
 800edf8:	20008660 	.word	0x20008660
 800edfc:	2000c5f4 	.word	0x2000c5f4
 800ee00:	2000c5f8 	.word	0x2000c5f8
 800ee04:	2000fd3c 	.word	0x2000fd3c

0800ee08 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ee08:	b590      	push	{r4, r7, lr}
 800ee0a:	b08d      	sub	sp, #52	; 0x34
 800ee0c:	af04      	add	r7, sp, #16
 800ee0e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ee10:	2300      	movs	r3, #0
 800ee12:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ee14:	2300      	movs	r3, #0
 800ee16:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d106      	bne.n	800ee2c <tcp_process+0x24>
 800ee1e:	4ba5      	ldr	r3, [pc, #660]	; (800f0b4 <tcp_process+0x2ac>)
 800ee20:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ee24:	49a4      	ldr	r1, [pc, #656]	; (800f0b8 <tcp_process+0x2b0>)
 800ee26:	48a5      	ldr	r0, [pc, #660]	; (800f0bc <tcp_process+0x2b4>)
 800ee28:	f00a fefa 	bl	8019c20 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ee2c:	4ba4      	ldr	r3, [pc, #656]	; (800f0c0 <tcp_process+0x2b8>)
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	f003 0304 	and.w	r3, r3, #4
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d04e      	beq.n	800eed6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	7d1b      	ldrb	r3, [r3, #20]
 800ee3c:	2b02      	cmp	r3, #2
 800ee3e:	d108      	bne.n	800ee52 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee44:	4b9f      	ldr	r3, [pc, #636]	; (800f0c4 <tcp_process+0x2bc>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	d123      	bne.n	800ee94 <tcp_process+0x8c>
        acceptable = 1;
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	76fb      	strb	r3, [r7, #27]
 800ee50:	e020      	b.n	800ee94 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee56:	4b9c      	ldr	r3, [pc, #624]	; (800f0c8 <tcp_process+0x2c0>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	d102      	bne.n	800ee64 <tcp_process+0x5c>
        acceptable = 1;
 800ee5e:	2301      	movs	r3, #1
 800ee60:	76fb      	strb	r3, [r7, #27]
 800ee62:	e017      	b.n	800ee94 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ee64:	4b98      	ldr	r3, [pc, #608]	; (800f0c8 <tcp_process+0x2c0>)
 800ee66:	681a      	ldr	r2, [r3, #0]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee6c:	1ad3      	subs	r3, r2, r3
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	db10      	blt.n	800ee94 <tcp_process+0x8c>
 800ee72:	4b95      	ldr	r3, [pc, #596]	; (800f0c8 <tcp_process+0x2c0>)
 800ee74:	681a      	ldr	r2, [r3, #0]
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee7a:	6879      	ldr	r1, [r7, #4]
 800ee7c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ee7e:	440b      	add	r3, r1
 800ee80:	1ad3      	subs	r3, r2, r3
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	dc06      	bgt.n	800ee94 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	8b5b      	ldrh	r3, [r3, #26]
 800ee8a:	f043 0302 	orr.w	r3, r3, #2
 800ee8e:	b29a      	uxth	r2, r3
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ee94:	7efb      	ldrb	r3, [r7, #27]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d01b      	beq.n	800eed2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	7d1b      	ldrb	r3, [r3, #20]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d106      	bne.n	800eeb0 <tcp_process+0xa8>
 800eea2:	4b84      	ldr	r3, [pc, #528]	; (800f0b4 <tcp_process+0x2ac>)
 800eea4:	f44f 724e 	mov.w	r2, #824	; 0x338
 800eea8:	4988      	ldr	r1, [pc, #544]	; (800f0cc <tcp_process+0x2c4>)
 800eeaa:	4884      	ldr	r0, [pc, #528]	; (800f0bc <tcp_process+0x2b4>)
 800eeac:	f00a feb8 	bl	8019c20 <iprintf>
      recv_flags |= TF_RESET;
 800eeb0:	4b87      	ldr	r3, [pc, #540]	; (800f0d0 <tcp_process+0x2c8>)
 800eeb2:	781b      	ldrb	r3, [r3, #0]
 800eeb4:	f043 0308 	orr.w	r3, r3, #8
 800eeb8:	b2da      	uxtb	r2, r3
 800eeba:	4b85      	ldr	r3, [pc, #532]	; (800f0d0 <tcp_process+0x2c8>)
 800eebc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	8b5b      	ldrh	r3, [r3, #26]
 800eec2:	f023 0301 	bic.w	r3, r3, #1
 800eec6:	b29a      	uxth	r2, r3
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800eecc:	f06f 030d 	mvn.w	r3, #13
 800eed0:	e37a      	b.n	800f5c8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800eed2:	2300      	movs	r3, #0
 800eed4:	e378      	b.n	800f5c8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800eed6:	4b7a      	ldr	r3, [pc, #488]	; (800f0c0 <tcp_process+0x2b8>)
 800eed8:	781b      	ldrb	r3, [r3, #0]
 800eeda:	f003 0302 	and.w	r3, r3, #2
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d010      	beq.n	800ef04 <tcp_process+0xfc>
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	7d1b      	ldrb	r3, [r3, #20]
 800eee6:	2b02      	cmp	r3, #2
 800eee8:	d00c      	beq.n	800ef04 <tcp_process+0xfc>
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	7d1b      	ldrb	r3, [r3, #20]
 800eeee:	2b03      	cmp	r3, #3
 800eef0:	d008      	beq.n	800ef04 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	8b5b      	ldrh	r3, [r3, #26]
 800eef6:	f043 0302 	orr.w	r3, r3, #2
 800eefa:	b29a      	uxth	r2, r3
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ef00:	2300      	movs	r3, #0
 800ef02:	e361      	b.n	800f5c8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	8b5b      	ldrh	r3, [r3, #26]
 800ef08:	f003 0310 	and.w	r3, r3, #16
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d103      	bne.n	800ef18 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ef10:	4b70      	ldr	r3, [pc, #448]	; (800f0d4 <tcp_process+0x2cc>)
 800ef12:	681a      	ldr	r2, [r3, #0]
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2200      	movs	r2, #0
 800ef24:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f001 fc2d 	bl	8010788 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	7d1b      	ldrb	r3, [r3, #20]
 800ef32:	3b02      	subs	r3, #2
 800ef34:	2b07      	cmp	r3, #7
 800ef36:	f200 8337 	bhi.w	800f5a8 <tcp_process+0x7a0>
 800ef3a:	a201      	add	r2, pc, #4	; (adr r2, 800ef40 <tcp_process+0x138>)
 800ef3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef40:	0800ef61 	.word	0x0800ef61
 800ef44:	0800f191 	.word	0x0800f191
 800ef48:	0800f309 	.word	0x0800f309
 800ef4c:	0800f333 	.word	0x0800f333
 800ef50:	0800f457 	.word	0x0800f457
 800ef54:	0800f309 	.word	0x0800f309
 800ef58:	0800f4e3 	.word	0x0800f4e3
 800ef5c:	0800f573 	.word	0x0800f573
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ef60:	4b57      	ldr	r3, [pc, #348]	; (800f0c0 <tcp_process+0x2b8>)
 800ef62:	781b      	ldrb	r3, [r3, #0]
 800ef64:	f003 0310 	and.w	r3, r3, #16
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	f000 80e4 	beq.w	800f136 <tcp_process+0x32e>
 800ef6e:	4b54      	ldr	r3, [pc, #336]	; (800f0c0 <tcp_process+0x2b8>)
 800ef70:	781b      	ldrb	r3, [r3, #0]
 800ef72:	f003 0302 	and.w	r3, r3, #2
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	f000 80dd 	beq.w	800f136 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef80:	1c5a      	adds	r2, r3, #1
 800ef82:	4b50      	ldr	r3, [pc, #320]	; (800f0c4 <tcp_process+0x2bc>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	429a      	cmp	r2, r3
 800ef88:	f040 80d5 	bne.w	800f136 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ef8c:	4b4e      	ldr	r3, [pc, #312]	; (800f0c8 <tcp_process+0x2c0>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	1c5a      	adds	r2, r3, #1
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ef9e:	4b49      	ldr	r3, [pc, #292]	; (800f0c4 <tcp_process+0x2bc>)
 800efa0:	681a      	ldr	r2, [r3, #0]
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800efa6:	4b4c      	ldr	r3, [pc, #304]	; (800f0d8 <tcp_process+0x2d0>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	89db      	ldrh	r3, [r3, #14]
 800efac:	b29a      	uxth	r2, r3
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800efc0:	4b41      	ldr	r3, [pc, #260]	; (800f0c8 <tcp_process+0x2c0>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	1e5a      	subs	r2, r3, #1
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2204      	movs	r2, #4
 800efce:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	3304      	adds	r3, #4
 800efd8:	4618      	mov	r0, r3
 800efda:	f007 f9f5 	bl	80163c8 <ip4_route>
 800efde:	4601      	mov	r1, r0
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	3304      	adds	r3, #4
 800efe4:	461a      	mov	r2, r3
 800efe6:	4620      	mov	r0, r4
 800efe8:	f7ff f88e 	bl	800e108 <tcp_eff_send_mss_netif>
 800efec:	4603      	mov	r3, r0
 800efee:	461a      	mov	r2, r3
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eff8:	009a      	lsls	r2, r3, #2
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800effe:	005b      	lsls	r3, r3, #1
 800f000:	f241 111c 	movw	r1, #4380	; 0x111c
 800f004:	428b      	cmp	r3, r1
 800f006:	bf38      	it	cc
 800f008:	460b      	movcc	r3, r1
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d204      	bcs.n	800f018 <tcp_process+0x210>
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f012:	009b      	lsls	r3, r3, #2
 800f014:	b29b      	uxth	r3, r3
 800f016:	e00d      	b.n	800f034 <tcp_process+0x22c>
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f01c:	005b      	lsls	r3, r3, #1
 800f01e:	f241 121c 	movw	r2, #4380	; 0x111c
 800f022:	4293      	cmp	r3, r2
 800f024:	d904      	bls.n	800f030 <tcp_process+0x228>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f02a:	005b      	lsls	r3, r3, #1
 800f02c:	b29b      	uxth	r3, r3
 800f02e:	e001      	b.n	800f034 <tcp_process+0x22c>
 800f030:	f241 131c 	movw	r3, #4380	; 0x111c
 800f034:	687a      	ldr	r2, [r7, #4]
 800f036:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f040:	2b00      	cmp	r3, #0
 800f042:	d106      	bne.n	800f052 <tcp_process+0x24a>
 800f044:	4b1b      	ldr	r3, [pc, #108]	; (800f0b4 <tcp_process+0x2ac>)
 800f046:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f04a:	4924      	ldr	r1, [pc, #144]	; (800f0dc <tcp_process+0x2d4>)
 800f04c:	481b      	ldr	r0, [pc, #108]	; (800f0bc <tcp_process+0x2b4>)
 800f04e:	f00a fde7 	bl	8019c20 <iprintf>
        --pcb->snd_queuelen;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f058:	3b01      	subs	r3, #1
 800f05a:	b29a      	uxth	r2, r3
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f066:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f068:	69fb      	ldr	r3, [r7, #28]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d111      	bne.n	800f092 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f072:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f074:	69fb      	ldr	r3, [r7, #28]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d106      	bne.n	800f088 <tcp_process+0x280>
 800f07a:	4b0e      	ldr	r3, [pc, #56]	; (800f0b4 <tcp_process+0x2ac>)
 800f07c:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f080:	4917      	ldr	r1, [pc, #92]	; (800f0e0 <tcp_process+0x2d8>)
 800f082:	480e      	ldr	r0, [pc, #56]	; (800f0bc <tcp_process+0x2b4>)
 800f084:	f00a fdcc 	bl	8019c20 <iprintf>
          pcb->unsent = rseg->next;
 800f088:	69fb      	ldr	r3, [r7, #28]
 800f08a:	681a      	ldr	r2, [r3, #0]
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	66da      	str	r2, [r3, #108]	; 0x6c
 800f090:	e003      	b.n	800f09a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800f092:	69fb      	ldr	r3, [r7, #28]
 800f094:	681a      	ldr	r2, [r3, #0]
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f09a:	69f8      	ldr	r0, [r7, #28]
 800f09c:	f7fe fc70 	bl	800d980 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d11d      	bne.n	800f0e4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0ae:	861a      	strh	r2, [r3, #48]	; 0x30
 800f0b0:	e01f      	b.n	800f0f2 <tcp_process+0x2ea>
 800f0b2:	bf00      	nop
 800f0b4:	0801cee8 	.word	0x0801cee8
 800f0b8:	0801d120 	.word	0x0801d120
 800f0bc:	0801cf34 	.word	0x0801cf34
 800f0c0:	2000867c 	.word	0x2000867c
 800f0c4:	20008674 	.word	0x20008674
 800f0c8:	20008670 	.word	0x20008670
 800f0cc:	0801d13c 	.word	0x0801d13c
 800f0d0:	2000867d 	.word	0x2000867d
 800f0d4:	2000fd3c 	.word	0x2000fd3c
 800f0d8:	20008660 	.word	0x20008660
 800f0dc:	0801d15c 	.word	0x0801d15c
 800f0e0:	0801d174 	.word	0x0801d174
        } else {
          pcb->rtime = 0;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d00a      	beq.n	800f112 <tcp_process+0x30a>
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f102:	687a      	ldr	r2, [r7, #4]
 800f104:	6910      	ldr	r0, [r2, #16]
 800f106:	2200      	movs	r2, #0
 800f108:	6879      	ldr	r1, [r7, #4]
 800f10a:	4798      	blx	r3
 800f10c:	4603      	mov	r3, r0
 800f10e:	76bb      	strb	r3, [r7, #26]
 800f110:	e001      	b.n	800f116 <tcp_process+0x30e>
 800f112:	2300      	movs	r3, #0
 800f114:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f116:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f11a:	f113 0f0d 	cmn.w	r3, #13
 800f11e:	d102      	bne.n	800f126 <tcp_process+0x31e>
          return ERR_ABRT;
 800f120:	f06f 030c 	mvn.w	r3, #12
 800f124:	e250      	b.n	800f5c8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	8b5b      	ldrh	r3, [r3, #26]
 800f12a:	f043 0302 	orr.w	r3, r3, #2
 800f12e:	b29a      	uxth	r2, r3
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f134:	e23a      	b.n	800f5ac <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f136:	4b9d      	ldr	r3, [pc, #628]	; (800f3ac <tcp_process+0x5a4>)
 800f138:	781b      	ldrb	r3, [r3, #0]
 800f13a:	f003 0310 	and.w	r3, r3, #16
 800f13e:	2b00      	cmp	r3, #0
 800f140:	f000 8234 	beq.w	800f5ac <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f144:	4b9a      	ldr	r3, [pc, #616]	; (800f3b0 <tcp_process+0x5a8>)
 800f146:	6819      	ldr	r1, [r3, #0]
 800f148:	4b9a      	ldr	r3, [pc, #616]	; (800f3b4 <tcp_process+0x5ac>)
 800f14a:	881b      	ldrh	r3, [r3, #0]
 800f14c:	461a      	mov	r2, r3
 800f14e:	4b9a      	ldr	r3, [pc, #616]	; (800f3b8 <tcp_process+0x5b0>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f154:	4b99      	ldr	r3, [pc, #612]	; (800f3bc <tcp_process+0x5b4>)
 800f156:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f158:	885b      	ldrh	r3, [r3, #2]
 800f15a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f15c:	4a97      	ldr	r2, [pc, #604]	; (800f3bc <tcp_process+0x5b4>)
 800f15e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f160:	8812      	ldrh	r2, [r2, #0]
 800f162:	b292      	uxth	r2, r2
 800f164:	9202      	str	r2, [sp, #8]
 800f166:	9301      	str	r3, [sp, #4]
 800f168:	4b95      	ldr	r3, [pc, #596]	; (800f3c0 <tcp_process+0x5b8>)
 800f16a:	9300      	str	r3, [sp, #0]
 800f16c:	4b95      	ldr	r3, [pc, #596]	; (800f3c4 <tcp_process+0x5bc>)
 800f16e:	4602      	mov	r2, r0
 800f170:	6878      	ldr	r0, [r7, #4]
 800f172:	f003 f8ed 	bl	8012350 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f17c:	2b05      	cmp	r3, #5
 800f17e:	f200 8215 	bhi.w	800f5ac <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2200      	movs	r2, #0
 800f186:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f188:	6878      	ldr	r0, [r7, #4]
 800f18a:	f002 feab 	bl	8011ee4 <tcp_rexmit_rto>
      break;
 800f18e:	e20d      	b.n	800f5ac <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f190:	4b86      	ldr	r3, [pc, #536]	; (800f3ac <tcp_process+0x5a4>)
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	f003 0310 	and.w	r3, r3, #16
 800f198:	2b00      	cmp	r3, #0
 800f19a:	f000 80a1 	beq.w	800f2e0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f19e:	4b84      	ldr	r3, [pc, #528]	; (800f3b0 <tcp_process+0x5a8>)
 800f1a0:	681a      	ldr	r2, [r3, #0]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1a6:	1ad3      	subs	r3, r2, r3
 800f1a8:	3b01      	subs	r3, #1
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	db7e      	blt.n	800f2ac <tcp_process+0x4a4>
 800f1ae:	4b80      	ldr	r3, [pc, #512]	; (800f3b0 <tcp_process+0x5a8>)
 800f1b0:	681a      	ldr	r2, [r3, #0]
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1b6:	1ad3      	subs	r3, r2, r3
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	dc77      	bgt.n	800f2ac <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2204      	movs	r2, #4
 800f1c0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d102      	bne.n	800f1d0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f1ca:	23fa      	movs	r3, #250	; 0xfa
 800f1cc:	76bb      	strb	r3, [r7, #26]
 800f1ce:	e01d      	b.n	800f20c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1d4:	699b      	ldr	r3, [r3, #24]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d106      	bne.n	800f1e8 <tcp_process+0x3e0>
 800f1da:	4b7b      	ldr	r3, [pc, #492]	; (800f3c8 <tcp_process+0x5c0>)
 800f1dc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f1e0:	497a      	ldr	r1, [pc, #488]	; (800f3cc <tcp_process+0x5c4>)
 800f1e2:	487b      	ldr	r0, [pc, #492]	; (800f3d0 <tcp_process+0x5c8>)
 800f1e4:	f00a fd1c 	bl	8019c20 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1ec:	699b      	ldr	r3, [r3, #24]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d00a      	beq.n	800f208 <tcp_process+0x400>
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1f6:	699b      	ldr	r3, [r3, #24]
 800f1f8:	687a      	ldr	r2, [r7, #4]
 800f1fa:	6910      	ldr	r0, [r2, #16]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	6879      	ldr	r1, [r7, #4]
 800f200:	4798      	blx	r3
 800f202:	4603      	mov	r3, r0
 800f204:	76bb      	strb	r3, [r7, #26]
 800f206:	e001      	b.n	800f20c <tcp_process+0x404>
 800f208:	23f0      	movs	r3, #240	; 0xf0
 800f20a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f20c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d00a      	beq.n	800f22a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f214:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f218:	f113 0f0d 	cmn.w	r3, #13
 800f21c:	d002      	beq.n	800f224 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f7fd fd68 	bl	800ccf4 <tcp_abort>
            }
            return ERR_ABRT;
 800f224:	f06f 030c 	mvn.w	r3, #12
 800f228:	e1ce      	b.n	800f5c8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f000 fae0 	bl	800f7f0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f230:	4b68      	ldr	r3, [pc, #416]	; (800f3d4 <tcp_process+0x5cc>)
 800f232:	881b      	ldrh	r3, [r3, #0]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d005      	beq.n	800f244 <tcp_process+0x43c>
            recv_acked--;
 800f238:	4b66      	ldr	r3, [pc, #408]	; (800f3d4 <tcp_process+0x5cc>)
 800f23a:	881b      	ldrh	r3, [r3, #0]
 800f23c:	3b01      	subs	r3, #1
 800f23e:	b29a      	uxth	r2, r3
 800f240:	4b64      	ldr	r3, [pc, #400]	; (800f3d4 <tcp_process+0x5cc>)
 800f242:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f248:	009a      	lsls	r2, r3, #2
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f24e:	005b      	lsls	r3, r3, #1
 800f250:	f241 111c 	movw	r1, #4380	; 0x111c
 800f254:	428b      	cmp	r3, r1
 800f256:	bf38      	it	cc
 800f258:	460b      	movcc	r3, r1
 800f25a:	429a      	cmp	r2, r3
 800f25c:	d204      	bcs.n	800f268 <tcp_process+0x460>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f262:	009b      	lsls	r3, r3, #2
 800f264:	b29b      	uxth	r3, r3
 800f266:	e00d      	b.n	800f284 <tcp_process+0x47c>
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f26c:	005b      	lsls	r3, r3, #1
 800f26e:	f241 121c 	movw	r2, #4380	; 0x111c
 800f272:	4293      	cmp	r3, r2
 800f274:	d904      	bls.n	800f280 <tcp_process+0x478>
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f27a:	005b      	lsls	r3, r3, #1
 800f27c:	b29b      	uxth	r3, r3
 800f27e:	e001      	b.n	800f284 <tcp_process+0x47c>
 800f280:	f241 131c 	movw	r3, #4380	; 0x111c
 800f284:	687a      	ldr	r2, [r7, #4]
 800f286:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f28a:	4b53      	ldr	r3, [pc, #332]	; (800f3d8 <tcp_process+0x5d0>)
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	f003 0320 	and.w	r3, r3, #32
 800f292:	2b00      	cmp	r3, #0
 800f294:	d037      	beq.n	800f306 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	8b5b      	ldrh	r3, [r3, #26]
 800f29a:	f043 0302 	orr.w	r3, r3, #2
 800f29e:	b29a      	uxth	r2, r3
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2207      	movs	r2, #7
 800f2a8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f2aa:	e02c      	b.n	800f306 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2ac:	4b40      	ldr	r3, [pc, #256]	; (800f3b0 <tcp_process+0x5a8>)
 800f2ae:	6819      	ldr	r1, [r3, #0]
 800f2b0:	4b40      	ldr	r3, [pc, #256]	; (800f3b4 <tcp_process+0x5ac>)
 800f2b2:	881b      	ldrh	r3, [r3, #0]
 800f2b4:	461a      	mov	r2, r3
 800f2b6:	4b40      	ldr	r3, [pc, #256]	; (800f3b8 <tcp_process+0x5b0>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f2bc:	4b3f      	ldr	r3, [pc, #252]	; (800f3bc <tcp_process+0x5b4>)
 800f2be:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2c0:	885b      	ldrh	r3, [r3, #2]
 800f2c2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f2c4:	4a3d      	ldr	r2, [pc, #244]	; (800f3bc <tcp_process+0x5b4>)
 800f2c6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2c8:	8812      	ldrh	r2, [r2, #0]
 800f2ca:	b292      	uxth	r2, r2
 800f2cc:	9202      	str	r2, [sp, #8]
 800f2ce:	9301      	str	r3, [sp, #4]
 800f2d0:	4b3b      	ldr	r3, [pc, #236]	; (800f3c0 <tcp_process+0x5b8>)
 800f2d2:	9300      	str	r3, [sp, #0]
 800f2d4:	4b3b      	ldr	r3, [pc, #236]	; (800f3c4 <tcp_process+0x5bc>)
 800f2d6:	4602      	mov	r2, r0
 800f2d8:	6878      	ldr	r0, [r7, #4]
 800f2da:	f003 f839 	bl	8012350 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f2de:	e167      	b.n	800f5b0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f2e0:	4b32      	ldr	r3, [pc, #200]	; (800f3ac <tcp_process+0x5a4>)
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	f003 0302 	and.w	r3, r3, #2
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	f000 8161 	beq.w	800f5b0 <tcp_process+0x7a8>
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2f2:	1e5a      	subs	r2, r3, #1
 800f2f4:	4b30      	ldr	r3, [pc, #192]	; (800f3b8 <tcp_process+0x5b0>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	f040 8159 	bne.w	800f5b0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f002 fe12 	bl	8011f28 <tcp_rexmit>
      break;
 800f304:	e154      	b.n	800f5b0 <tcp_process+0x7a8>
 800f306:	e153      	b.n	800f5b0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f308:	6878      	ldr	r0, [r7, #4]
 800f30a:	f000 fa71 	bl	800f7f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f30e:	4b32      	ldr	r3, [pc, #200]	; (800f3d8 <tcp_process+0x5d0>)
 800f310:	781b      	ldrb	r3, [r3, #0]
 800f312:	f003 0320 	and.w	r3, r3, #32
 800f316:	2b00      	cmp	r3, #0
 800f318:	f000 814c 	beq.w	800f5b4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	8b5b      	ldrh	r3, [r3, #26]
 800f320:	f043 0302 	orr.w	r3, r3, #2
 800f324:	b29a      	uxth	r2, r3
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2207      	movs	r2, #7
 800f32e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f330:	e140      	b.n	800f5b4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f000 fa5c 	bl	800f7f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f338:	4b27      	ldr	r3, [pc, #156]	; (800f3d8 <tcp_process+0x5d0>)
 800f33a:	781b      	ldrb	r3, [r3, #0]
 800f33c:	f003 0320 	and.w	r3, r3, #32
 800f340:	2b00      	cmp	r3, #0
 800f342:	d071      	beq.n	800f428 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f344:	4b19      	ldr	r3, [pc, #100]	; (800f3ac <tcp_process+0x5a4>)
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	f003 0310 	and.w	r3, r3, #16
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d060      	beq.n	800f412 <tcp_process+0x60a>
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f354:	4b16      	ldr	r3, [pc, #88]	; (800f3b0 <tcp_process+0x5a8>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	429a      	cmp	r2, r3
 800f35a:	d15a      	bne.n	800f412 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f360:	2b00      	cmp	r3, #0
 800f362:	d156      	bne.n	800f412 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	8b5b      	ldrh	r3, [r3, #26]
 800f368:	f043 0302 	orr.w	r3, r3, #2
 800f36c:	b29a      	uxth	r2, r3
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f7fe fdbe 	bl	800def4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f378:	4b18      	ldr	r3, [pc, #96]	; (800f3dc <tcp_process+0x5d4>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	687a      	ldr	r2, [r7, #4]
 800f37e:	429a      	cmp	r2, r3
 800f380:	d105      	bne.n	800f38e <tcp_process+0x586>
 800f382:	4b16      	ldr	r3, [pc, #88]	; (800f3dc <tcp_process+0x5d4>)
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	68db      	ldr	r3, [r3, #12]
 800f388:	4a14      	ldr	r2, [pc, #80]	; (800f3dc <tcp_process+0x5d4>)
 800f38a:	6013      	str	r3, [r2, #0]
 800f38c:	e02e      	b.n	800f3ec <tcp_process+0x5e4>
 800f38e:	4b13      	ldr	r3, [pc, #76]	; (800f3dc <tcp_process+0x5d4>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	617b      	str	r3, [r7, #20]
 800f394:	e027      	b.n	800f3e6 <tcp_process+0x5de>
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	68db      	ldr	r3, [r3, #12]
 800f39a:	687a      	ldr	r2, [r7, #4]
 800f39c:	429a      	cmp	r2, r3
 800f39e:	d11f      	bne.n	800f3e0 <tcp_process+0x5d8>
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	68da      	ldr	r2, [r3, #12]
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	60da      	str	r2, [r3, #12]
 800f3a8:	e020      	b.n	800f3ec <tcp_process+0x5e4>
 800f3aa:	bf00      	nop
 800f3ac:	2000867c 	.word	0x2000867c
 800f3b0:	20008674 	.word	0x20008674
 800f3b4:	2000867a 	.word	0x2000867a
 800f3b8:	20008670 	.word	0x20008670
 800f3bc:	20008660 	.word	0x20008660
 800f3c0:	2000c5f4 	.word	0x2000c5f4
 800f3c4:	2000c5f8 	.word	0x2000c5f8
 800f3c8:	0801cee8 	.word	0x0801cee8
 800f3cc:	0801d188 	.word	0x0801d188
 800f3d0:	0801cf34 	.word	0x0801cf34
 800f3d4:	20008678 	.word	0x20008678
 800f3d8:	2000867d 	.word	0x2000867d
 800f3dc:	2000fd38 	.word	0x2000fd38
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	68db      	ldr	r3, [r3, #12]
 800f3e4:	617b      	str	r3, [r7, #20]
 800f3e6:	697b      	ldr	r3, [r7, #20]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d1d4      	bne.n	800f396 <tcp_process+0x58e>
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	60da      	str	r2, [r3, #12]
 800f3f2:	4b77      	ldr	r3, [pc, #476]	; (800f5d0 <tcp_process+0x7c8>)
 800f3f4:	2201      	movs	r2, #1
 800f3f6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	220a      	movs	r2, #10
 800f3fc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f3fe:	4b75      	ldr	r3, [pc, #468]	; (800f5d4 <tcp_process+0x7cc>)
 800f400:	681a      	ldr	r2, [r3, #0]
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	60da      	str	r2, [r3, #12]
 800f406:	4a73      	ldr	r2, [pc, #460]	; (800f5d4 <tcp_process+0x7cc>)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6013      	str	r3, [r2, #0]
 800f40c:	f003 f962 	bl	80126d4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f410:	e0d2      	b.n	800f5b8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	8b5b      	ldrh	r3, [r3, #26]
 800f416:	f043 0302 	orr.w	r3, r3, #2
 800f41a:	b29a      	uxth	r2, r3
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2208      	movs	r2, #8
 800f424:	751a      	strb	r2, [r3, #20]
      break;
 800f426:	e0c7      	b.n	800f5b8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f428:	4b6b      	ldr	r3, [pc, #428]	; (800f5d8 <tcp_process+0x7d0>)
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	f003 0310 	and.w	r3, r3, #16
 800f430:	2b00      	cmp	r3, #0
 800f432:	f000 80c1 	beq.w	800f5b8 <tcp_process+0x7b0>
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f43a:	4b68      	ldr	r3, [pc, #416]	; (800f5dc <tcp_process+0x7d4>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	429a      	cmp	r2, r3
 800f440:	f040 80ba 	bne.w	800f5b8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f448:	2b00      	cmp	r3, #0
 800f44a:	f040 80b5 	bne.w	800f5b8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2206      	movs	r2, #6
 800f452:	751a      	strb	r2, [r3, #20]
      break;
 800f454:	e0b0      	b.n	800f5b8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f000 f9ca 	bl	800f7f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f45c:	4b60      	ldr	r3, [pc, #384]	; (800f5e0 <tcp_process+0x7d8>)
 800f45e:	781b      	ldrb	r3, [r3, #0]
 800f460:	f003 0320 	and.w	r3, r3, #32
 800f464:	2b00      	cmp	r3, #0
 800f466:	f000 80a9 	beq.w	800f5bc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	8b5b      	ldrh	r3, [r3, #26]
 800f46e:	f043 0302 	orr.w	r3, r3, #2
 800f472:	b29a      	uxth	r2, r3
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f7fe fd3b 	bl	800def4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f47e:	4b59      	ldr	r3, [pc, #356]	; (800f5e4 <tcp_process+0x7dc>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	687a      	ldr	r2, [r7, #4]
 800f484:	429a      	cmp	r2, r3
 800f486:	d105      	bne.n	800f494 <tcp_process+0x68c>
 800f488:	4b56      	ldr	r3, [pc, #344]	; (800f5e4 <tcp_process+0x7dc>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	68db      	ldr	r3, [r3, #12]
 800f48e:	4a55      	ldr	r2, [pc, #340]	; (800f5e4 <tcp_process+0x7dc>)
 800f490:	6013      	str	r3, [r2, #0]
 800f492:	e013      	b.n	800f4bc <tcp_process+0x6b4>
 800f494:	4b53      	ldr	r3, [pc, #332]	; (800f5e4 <tcp_process+0x7dc>)
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	613b      	str	r3, [r7, #16]
 800f49a:	e00c      	b.n	800f4b6 <tcp_process+0x6ae>
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	68db      	ldr	r3, [r3, #12]
 800f4a0:	687a      	ldr	r2, [r7, #4]
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	d104      	bne.n	800f4b0 <tcp_process+0x6a8>
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	68da      	ldr	r2, [r3, #12]
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	60da      	str	r2, [r3, #12]
 800f4ae:	e005      	b.n	800f4bc <tcp_process+0x6b4>
 800f4b0:	693b      	ldr	r3, [r7, #16]
 800f4b2:	68db      	ldr	r3, [r3, #12]
 800f4b4:	613b      	str	r3, [r7, #16]
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d1ef      	bne.n	800f49c <tcp_process+0x694>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	60da      	str	r2, [r3, #12]
 800f4c2:	4b43      	ldr	r3, [pc, #268]	; (800f5d0 <tcp_process+0x7c8>)
 800f4c4:	2201      	movs	r2, #1
 800f4c6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	220a      	movs	r2, #10
 800f4cc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f4ce:	4b41      	ldr	r3, [pc, #260]	; (800f5d4 <tcp_process+0x7cc>)
 800f4d0:	681a      	ldr	r2, [r3, #0]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	60da      	str	r2, [r3, #12]
 800f4d6:	4a3f      	ldr	r2, [pc, #252]	; (800f5d4 <tcp_process+0x7cc>)
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	6013      	str	r3, [r2, #0]
 800f4dc:	f003 f8fa 	bl	80126d4 <tcp_timer_needed>
      }
      break;
 800f4e0:	e06c      	b.n	800f5bc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f000 f984 	bl	800f7f0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f4e8:	4b3b      	ldr	r3, [pc, #236]	; (800f5d8 <tcp_process+0x7d0>)
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	f003 0310 	and.w	r3, r3, #16
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d065      	beq.n	800f5c0 <tcp_process+0x7b8>
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f4f8:	4b38      	ldr	r3, [pc, #224]	; (800f5dc <tcp_process+0x7d4>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	d15f      	bne.n	800f5c0 <tcp_process+0x7b8>
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f504:	2b00      	cmp	r3, #0
 800f506:	d15b      	bne.n	800f5c0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	f7fe fcf3 	bl	800def4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f50e:	4b35      	ldr	r3, [pc, #212]	; (800f5e4 <tcp_process+0x7dc>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	687a      	ldr	r2, [r7, #4]
 800f514:	429a      	cmp	r2, r3
 800f516:	d105      	bne.n	800f524 <tcp_process+0x71c>
 800f518:	4b32      	ldr	r3, [pc, #200]	; (800f5e4 <tcp_process+0x7dc>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	68db      	ldr	r3, [r3, #12]
 800f51e:	4a31      	ldr	r2, [pc, #196]	; (800f5e4 <tcp_process+0x7dc>)
 800f520:	6013      	str	r3, [r2, #0]
 800f522:	e013      	b.n	800f54c <tcp_process+0x744>
 800f524:	4b2f      	ldr	r3, [pc, #188]	; (800f5e4 <tcp_process+0x7dc>)
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	60fb      	str	r3, [r7, #12]
 800f52a:	e00c      	b.n	800f546 <tcp_process+0x73e>
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	68db      	ldr	r3, [r3, #12]
 800f530:	687a      	ldr	r2, [r7, #4]
 800f532:	429a      	cmp	r2, r3
 800f534:	d104      	bne.n	800f540 <tcp_process+0x738>
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	68da      	ldr	r2, [r3, #12]
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	60da      	str	r2, [r3, #12]
 800f53e:	e005      	b.n	800f54c <tcp_process+0x744>
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	68db      	ldr	r3, [r3, #12]
 800f544:	60fb      	str	r3, [r7, #12]
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d1ef      	bne.n	800f52c <tcp_process+0x724>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2200      	movs	r2, #0
 800f550:	60da      	str	r2, [r3, #12]
 800f552:	4b1f      	ldr	r3, [pc, #124]	; (800f5d0 <tcp_process+0x7c8>)
 800f554:	2201      	movs	r2, #1
 800f556:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	220a      	movs	r2, #10
 800f55c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f55e:	4b1d      	ldr	r3, [pc, #116]	; (800f5d4 <tcp_process+0x7cc>)
 800f560:	681a      	ldr	r2, [r3, #0]
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	60da      	str	r2, [r3, #12]
 800f566:	4a1b      	ldr	r2, [pc, #108]	; (800f5d4 <tcp_process+0x7cc>)
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6013      	str	r3, [r2, #0]
 800f56c:	f003 f8b2 	bl	80126d4 <tcp_timer_needed>
      }
      break;
 800f570:	e026      	b.n	800f5c0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	f000 f93c 	bl	800f7f0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f578:	4b17      	ldr	r3, [pc, #92]	; (800f5d8 <tcp_process+0x7d0>)
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	f003 0310 	and.w	r3, r3, #16
 800f580:	2b00      	cmp	r3, #0
 800f582:	d01f      	beq.n	800f5c4 <tcp_process+0x7bc>
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f588:	4b14      	ldr	r3, [pc, #80]	; (800f5dc <tcp_process+0x7d4>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	429a      	cmp	r2, r3
 800f58e:	d119      	bne.n	800f5c4 <tcp_process+0x7bc>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f594:	2b00      	cmp	r3, #0
 800f596:	d115      	bne.n	800f5c4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f598:	4b11      	ldr	r3, [pc, #68]	; (800f5e0 <tcp_process+0x7d8>)
 800f59a:	781b      	ldrb	r3, [r3, #0]
 800f59c:	f043 0310 	orr.w	r3, r3, #16
 800f5a0:	b2da      	uxtb	r2, r3
 800f5a2:	4b0f      	ldr	r3, [pc, #60]	; (800f5e0 <tcp_process+0x7d8>)
 800f5a4:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f5a6:	e00d      	b.n	800f5c4 <tcp_process+0x7bc>
    default:
      break;
 800f5a8:	bf00      	nop
 800f5aa:	e00c      	b.n	800f5c6 <tcp_process+0x7be>
      break;
 800f5ac:	bf00      	nop
 800f5ae:	e00a      	b.n	800f5c6 <tcp_process+0x7be>
      break;
 800f5b0:	bf00      	nop
 800f5b2:	e008      	b.n	800f5c6 <tcp_process+0x7be>
      break;
 800f5b4:	bf00      	nop
 800f5b6:	e006      	b.n	800f5c6 <tcp_process+0x7be>
      break;
 800f5b8:	bf00      	nop
 800f5ba:	e004      	b.n	800f5c6 <tcp_process+0x7be>
      break;
 800f5bc:	bf00      	nop
 800f5be:	e002      	b.n	800f5c6 <tcp_process+0x7be>
      break;
 800f5c0:	bf00      	nop
 800f5c2:	e000      	b.n	800f5c6 <tcp_process+0x7be>
      break;
 800f5c4:	bf00      	nop
  }
  return ERR_OK;
 800f5c6:	2300      	movs	r3, #0
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3724      	adds	r7, #36	; 0x24
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd90      	pop	{r4, r7, pc}
 800f5d0:	2000fd34 	.word	0x2000fd34
 800f5d4:	2000fd48 	.word	0x2000fd48
 800f5d8:	2000867c 	.word	0x2000867c
 800f5dc:	20008674 	.word	0x20008674
 800f5e0:	2000867d 	.word	0x2000867d
 800f5e4:	2000fd38 	.word	0x2000fd38

0800f5e8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f5e8:	b590      	push	{r4, r7, lr}
 800f5ea:	b085      	sub	sp, #20
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
 800f5f0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d106      	bne.n	800f606 <tcp_oos_insert_segment+0x1e>
 800f5f8:	4b3b      	ldr	r3, [pc, #236]	; (800f6e8 <tcp_oos_insert_segment+0x100>)
 800f5fa:	f240 421f 	movw	r2, #1055	; 0x41f
 800f5fe:	493b      	ldr	r1, [pc, #236]	; (800f6ec <tcp_oos_insert_segment+0x104>)
 800f600:	483b      	ldr	r0, [pc, #236]	; (800f6f0 <tcp_oos_insert_segment+0x108>)
 800f602:	f00a fb0d 	bl	8019c20 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	68db      	ldr	r3, [r3, #12]
 800f60a:	899b      	ldrh	r3, [r3, #12]
 800f60c:	b29b      	uxth	r3, r3
 800f60e:	4618      	mov	r0, r3
 800f610:	f7fb f994 	bl	800a93c <lwip_htons>
 800f614:	4603      	mov	r3, r0
 800f616:	b2db      	uxtb	r3, r3
 800f618:	f003 0301 	and.w	r3, r3, #1
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d028      	beq.n	800f672 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f620:	6838      	ldr	r0, [r7, #0]
 800f622:	f7fe f999 	bl	800d958 <tcp_segs_free>
    next = NULL;
 800f626:	2300      	movs	r3, #0
 800f628:	603b      	str	r3, [r7, #0]
 800f62a:	e056      	b.n	800f6da <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	68db      	ldr	r3, [r3, #12]
 800f630:	899b      	ldrh	r3, [r3, #12]
 800f632:	b29b      	uxth	r3, r3
 800f634:	4618      	mov	r0, r3
 800f636:	f7fb f981 	bl	800a93c <lwip_htons>
 800f63a:	4603      	mov	r3, r0
 800f63c:	b2db      	uxtb	r3, r3
 800f63e:	f003 0301 	and.w	r3, r3, #1
 800f642:	2b00      	cmp	r3, #0
 800f644:	d00d      	beq.n	800f662 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	68db      	ldr	r3, [r3, #12]
 800f64a:	899b      	ldrh	r3, [r3, #12]
 800f64c:	b29c      	uxth	r4, r3
 800f64e:	2001      	movs	r0, #1
 800f650:	f7fb f974 	bl	800a93c <lwip_htons>
 800f654:	4603      	mov	r3, r0
 800f656:	461a      	mov	r2, r3
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	68db      	ldr	r3, [r3, #12]
 800f65c:	4322      	orrs	r2, r4
 800f65e:	b292      	uxth	r2, r2
 800f660:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f66c:	68f8      	ldr	r0, [r7, #12]
 800f66e:	f7fe f987 	bl	800d980 <tcp_seg_free>
    while (next &&
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d00e      	beq.n	800f696 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	891b      	ldrh	r3, [r3, #8]
 800f67c:	461a      	mov	r2, r3
 800f67e:	4b1d      	ldr	r3, [pc, #116]	; (800f6f4 <tcp_oos_insert_segment+0x10c>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	441a      	add	r2, r3
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	68db      	ldr	r3, [r3, #12]
 800f688:	685b      	ldr	r3, [r3, #4]
 800f68a:	6839      	ldr	r1, [r7, #0]
 800f68c:	8909      	ldrh	r1, [r1, #8]
 800f68e:	440b      	add	r3, r1
 800f690:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f692:	2b00      	cmp	r3, #0
 800f694:	daca      	bge.n	800f62c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d01e      	beq.n	800f6da <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	891b      	ldrh	r3, [r3, #8]
 800f6a0:	461a      	mov	r2, r3
 800f6a2:	4b14      	ldr	r3, [pc, #80]	; (800f6f4 <tcp_oos_insert_segment+0x10c>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	441a      	add	r2, r3
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	68db      	ldr	r3, [r3, #12]
 800f6ac:	685b      	ldr	r3, [r3, #4]
 800f6ae:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	dd12      	ble.n	800f6da <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	68db      	ldr	r3, [r3, #12]
 800f6b8:	685b      	ldr	r3, [r3, #4]
 800f6ba:	b29a      	uxth	r2, r3
 800f6bc:	4b0d      	ldr	r3, [pc, #52]	; (800f6f4 <tcp_oos_insert_segment+0x10c>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	1ad3      	subs	r3, r2, r3
 800f6c4:	b29a      	uxth	r2, r3
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	685a      	ldr	r2, [r3, #4]
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	891b      	ldrh	r3, [r3, #8]
 800f6d2:	4619      	mov	r1, r3
 800f6d4:	4610      	mov	r0, r2
 800f6d6:	f7fc fb5f 	bl	800bd98 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	683a      	ldr	r2, [r7, #0]
 800f6de:	601a      	str	r2, [r3, #0]
}
 800f6e0:	bf00      	nop
 800f6e2:	3714      	adds	r7, #20
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd90      	pop	{r4, r7, pc}
 800f6e8:	0801cee8 	.word	0x0801cee8
 800f6ec:	0801d1a8 	.word	0x0801d1a8
 800f6f0:	0801cf34 	.word	0x0801cf34
 800f6f4:	20008670 	.word	0x20008670

0800f6f8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f6f8:	b5b0      	push	{r4, r5, r7, lr}
 800f6fa:	b086      	sub	sp, #24
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	60f8      	str	r0, [r7, #12]
 800f700:	60b9      	str	r1, [r7, #8]
 800f702:	607a      	str	r2, [r7, #4]
 800f704:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f706:	e03e      	b.n	800f786 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	685b      	ldr	r3, [r3, #4]
 800f716:	4618      	mov	r0, r3
 800f718:	f7fc fd84 	bl	800c224 <pbuf_clen>
 800f71c:	4603      	mov	r3, r0
 800f71e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f726:	8a7a      	ldrh	r2, [r7, #18]
 800f728:	429a      	cmp	r2, r3
 800f72a:	d906      	bls.n	800f73a <tcp_free_acked_segments+0x42>
 800f72c:	4b2a      	ldr	r3, [pc, #168]	; (800f7d8 <tcp_free_acked_segments+0xe0>)
 800f72e:	f240 4257 	movw	r2, #1111	; 0x457
 800f732:	492a      	ldr	r1, [pc, #168]	; (800f7dc <tcp_free_acked_segments+0xe4>)
 800f734:	482a      	ldr	r0, [pc, #168]	; (800f7e0 <tcp_free_acked_segments+0xe8>)
 800f736:	f00a fa73 	bl	8019c20 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f740:	8a7b      	ldrh	r3, [r7, #18]
 800f742:	1ad3      	subs	r3, r2, r3
 800f744:	b29a      	uxth	r2, r3
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	891a      	ldrh	r2, [r3, #8]
 800f750:	4b24      	ldr	r3, [pc, #144]	; (800f7e4 <tcp_free_acked_segments+0xec>)
 800f752:	881b      	ldrh	r3, [r3, #0]
 800f754:	4413      	add	r3, r2
 800f756:	b29a      	uxth	r2, r3
 800f758:	4b22      	ldr	r3, [pc, #136]	; (800f7e4 <tcp_free_acked_segments+0xec>)
 800f75a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f75c:	6978      	ldr	r0, [r7, #20]
 800f75e:	f7fe f90f 	bl	800d980 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d00c      	beq.n	800f786 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d109      	bne.n	800f786 <tcp_free_acked_segments+0x8e>
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d106      	bne.n	800f786 <tcp_free_acked_segments+0x8e>
 800f778:	4b17      	ldr	r3, [pc, #92]	; (800f7d8 <tcp_free_acked_segments+0xe0>)
 800f77a:	f240 4262 	movw	r2, #1122	; 0x462
 800f77e:	491a      	ldr	r1, [pc, #104]	; (800f7e8 <tcp_free_acked_segments+0xf0>)
 800f780:	4817      	ldr	r0, [pc, #92]	; (800f7e0 <tcp_free_acked_segments+0xe8>)
 800f782:	f00a fa4d 	bl	8019c20 <iprintf>
  while (seg_list != NULL &&
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d020      	beq.n	800f7ce <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	68db      	ldr	r3, [r3, #12]
 800f790:	685b      	ldr	r3, [r3, #4]
 800f792:	4618      	mov	r0, r3
 800f794:	f7fb f8e7 	bl	800a966 <lwip_htonl>
 800f798:	4604      	mov	r4, r0
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	891b      	ldrh	r3, [r3, #8]
 800f79e:	461d      	mov	r5, r3
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	68db      	ldr	r3, [r3, #12]
 800f7a4:	899b      	ldrh	r3, [r3, #12]
 800f7a6:	b29b      	uxth	r3, r3
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f7fb f8c7 	bl	800a93c <lwip_htons>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	b2db      	uxtb	r3, r3
 800f7b2:	f003 0303 	and.w	r3, r3, #3
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d001      	beq.n	800f7be <tcp_free_acked_segments+0xc6>
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	e000      	b.n	800f7c0 <tcp_free_acked_segments+0xc8>
 800f7be:	2300      	movs	r3, #0
 800f7c0:	442b      	add	r3, r5
 800f7c2:	18e2      	adds	r2, r4, r3
 800f7c4:	4b09      	ldr	r3, [pc, #36]	; (800f7ec <tcp_free_acked_segments+0xf4>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	dd9c      	ble.n	800f708 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f7ce:	68bb      	ldr	r3, [r7, #8]
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3718      	adds	r7, #24
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bdb0      	pop	{r4, r5, r7, pc}
 800f7d8:	0801cee8 	.word	0x0801cee8
 800f7dc:	0801d1d0 	.word	0x0801d1d0
 800f7e0:	0801cf34 	.word	0x0801cf34
 800f7e4:	20008678 	.word	0x20008678
 800f7e8:	0801d1f8 	.word	0x0801d1f8
 800f7ec:	20008674 	.word	0x20008674

0800f7f0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f7f0:	b5b0      	push	{r4, r5, r7, lr}
 800f7f2:	b094      	sub	sp, #80	; 0x50
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d106      	bne.n	800f810 <tcp_receive+0x20>
 800f802:	4ba6      	ldr	r3, [pc, #664]	; (800fa9c <tcp_receive+0x2ac>)
 800f804:	f240 427b 	movw	r2, #1147	; 0x47b
 800f808:	49a5      	ldr	r1, [pc, #660]	; (800faa0 <tcp_receive+0x2b0>)
 800f80a:	48a6      	ldr	r0, [pc, #664]	; (800faa4 <tcp_receive+0x2b4>)
 800f80c:	f00a fa08 	bl	8019c20 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	7d1b      	ldrb	r3, [r3, #20]
 800f814:	2b03      	cmp	r3, #3
 800f816:	d806      	bhi.n	800f826 <tcp_receive+0x36>
 800f818:	4ba0      	ldr	r3, [pc, #640]	; (800fa9c <tcp_receive+0x2ac>)
 800f81a:	f240 427c 	movw	r2, #1148	; 0x47c
 800f81e:	49a2      	ldr	r1, [pc, #648]	; (800faa8 <tcp_receive+0x2b8>)
 800f820:	48a0      	ldr	r0, [pc, #640]	; (800faa4 <tcp_receive+0x2b4>)
 800f822:	f00a f9fd 	bl	8019c20 <iprintf>

  if (flags & TCP_ACK) {
 800f826:	4ba1      	ldr	r3, [pc, #644]	; (800faac <tcp_receive+0x2bc>)
 800f828:	781b      	ldrb	r3, [r3, #0]
 800f82a:	f003 0310 	and.w	r3, r3, #16
 800f82e:	2b00      	cmp	r3, #0
 800f830:	f000 8263 	beq.w	800fcfa <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f83a:	461a      	mov	r2, r3
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f840:	4413      	add	r3, r2
 800f842:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f848:	4b99      	ldr	r3, [pc, #612]	; (800fab0 <tcp_receive+0x2c0>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	1ad3      	subs	r3, r2, r3
 800f84e:	2b00      	cmp	r3, #0
 800f850:	db1b      	blt.n	800f88a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f856:	4b96      	ldr	r3, [pc, #600]	; (800fab0 <tcp_receive+0x2c0>)
 800f858:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d106      	bne.n	800f86c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f862:	4b94      	ldr	r3, [pc, #592]	; (800fab4 <tcp_receive+0x2c4>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	1ad3      	subs	r3, r2, r3
 800f868:	2b00      	cmp	r3, #0
 800f86a:	db0e      	blt.n	800f88a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f870:	4b90      	ldr	r3, [pc, #576]	; (800fab4 <tcp_receive+0x2c4>)
 800f872:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f874:	429a      	cmp	r2, r3
 800f876:	d125      	bne.n	800f8c4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f878:	4b8f      	ldr	r3, [pc, #572]	; (800fab8 <tcp_receive+0x2c8>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	89db      	ldrh	r3, [r3, #14]
 800f87e:	b29a      	uxth	r2, r3
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f886:	429a      	cmp	r2, r3
 800f888:	d91c      	bls.n	800f8c4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f88a:	4b8b      	ldr	r3, [pc, #556]	; (800fab8 <tcp_receive+0x2c8>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	89db      	ldrh	r3, [r3, #14]
 800f890:	b29a      	uxth	r2, r3
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	d205      	bcs.n	800f8b4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f8b4:	4b7e      	ldr	r3, [pc, #504]	; (800fab0 <tcp_receive+0x2c0>)
 800f8b6:	681a      	ldr	r2, [r3, #0]
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f8bc:	4b7d      	ldr	r3, [pc, #500]	; (800fab4 <tcp_receive+0x2c4>)
 800f8be:	681a      	ldr	r2, [r3, #0]
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f8c4:	4b7b      	ldr	r3, [pc, #492]	; (800fab4 <tcp_receive+0x2c4>)
 800f8c6:	681a      	ldr	r2, [r3, #0]
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8cc:	1ad3      	subs	r3, r2, r3
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	dc58      	bgt.n	800f984 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f8d2:	4b7a      	ldr	r3, [pc, #488]	; (800fabc <tcp_receive+0x2cc>)
 800f8d4:	881b      	ldrh	r3, [r3, #0]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d14b      	bne.n	800f972 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8de:	687a      	ldr	r2, [r7, #4]
 800f8e0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f8e4:	4413      	add	r3, r2
 800f8e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d142      	bne.n	800f972 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	db3d      	blt.n	800f972 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f8fa:	4b6e      	ldr	r3, [pc, #440]	; (800fab4 <tcp_receive+0x2c4>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	429a      	cmp	r2, r3
 800f900:	d137      	bne.n	800f972 <tcp_receive+0x182>
              found_dupack = 1;
 800f902:	2301      	movs	r3, #1
 800f904:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f90c:	2bff      	cmp	r3, #255	; 0xff
 800f90e:	d007      	beq.n	800f920 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f916:	3301      	adds	r3, #1
 800f918:	b2da      	uxtb	r2, r3
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f926:	2b03      	cmp	r3, #3
 800f928:	d91b      	bls.n	800f962 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f934:	4413      	add	r3, r2
 800f936:	b29a      	uxth	r2, r3
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f93e:	429a      	cmp	r2, r3
 800f940:	d30a      	bcc.n	800f958 <tcp_receive+0x168>
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f94c:	4413      	add	r3, r2
 800f94e:	b29a      	uxth	r2, r3
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f956:	e004      	b.n	800f962 <tcp_receive+0x172>
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f95e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f968:	2b02      	cmp	r3, #2
 800f96a:	d902      	bls.n	800f972 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f002 fb47 	bl	8012000 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f974:	2b00      	cmp	r3, #0
 800f976:	f040 8160 	bne.w	800fc3a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2200      	movs	r2, #0
 800f97e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f982:	e15a      	b.n	800fc3a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f984:	4b4b      	ldr	r3, [pc, #300]	; (800fab4 <tcp_receive+0x2c4>)
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f98c:	1ad3      	subs	r3, r2, r3
 800f98e:	3b01      	subs	r3, #1
 800f990:	2b00      	cmp	r3, #0
 800f992:	f2c0 814d 	blt.w	800fc30 <tcp_receive+0x440>
 800f996:	4b47      	ldr	r3, [pc, #284]	; (800fab4 <tcp_receive+0x2c4>)
 800f998:	681a      	ldr	r2, [r3, #0]
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f99e:	1ad3      	subs	r3, r2, r3
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	f300 8145 	bgt.w	800fc30 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	8b5b      	ldrh	r3, [r3, #26]
 800f9aa:	f003 0304 	and.w	r3, r3, #4
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d010      	beq.n	800f9d4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	8b5b      	ldrh	r3, [r3, #26]
 800f9b6:	f023 0304 	bic.w	r3, r3, #4
 800f9ba:	b29a      	uxth	r2, r3
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f9e2:	10db      	asrs	r3, r3, #3
 800f9e4:	b21b      	sxth	r3, r3
 800f9e6:	b29a      	uxth	r2, r3
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f9ee:	b29b      	uxth	r3, r3
 800f9f0:	4413      	add	r3, r2
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	b21a      	sxth	r2, r3
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f9fc:	4b2d      	ldr	r3, [pc, #180]	; (800fab4 <tcp_receive+0x2c4>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	b29a      	uxth	r2, r3
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa06:	b29b      	uxth	r3, r3
 800fa08:	1ad3      	subs	r3, r2, r3
 800fa0a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2200      	movs	r2, #0
 800fa10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800fa14:	4b27      	ldr	r3, [pc, #156]	; (800fab4 <tcp_receive+0x2c4>)
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	7d1b      	ldrb	r3, [r3, #20]
 800fa20:	2b03      	cmp	r3, #3
 800fa22:	f240 8096 	bls.w	800fb52 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fa32:	429a      	cmp	r2, r3
 800fa34:	d244      	bcs.n	800fac0 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	8b5b      	ldrh	r3, [r3, #26]
 800fa3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d001      	beq.n	800fa46 <tcp_receive+0x256>
 800fa42:	2301      	movs	r3, #1
 800fa44:	e000      	b.n	800fa48 <tcp_receive+0x258>
 800fa46:	2302      	movs	r3, #2
 800fa48:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800fa4c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fa50:	b29a      	uxth	r2, r3
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa56:	fb12 f303 	smulbb	r3, r2, r3
 800fa5a:	b29b      	uxth	r3, r3
 800fa5c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	bf28      	it	cs
 800fa62:	4613      	movcs	r3, r2
 800fa64:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa6c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fa6e:	4413      	add	r3, r2
 800fa70:	b29a      	uxth	r2, r3
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	d309      	bcc.n	800fa90 <tcp_receive+0x2a0>
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fa84:	4413      	add	r3, r2
 800fa86:	b29a      	uxth	r2, r3
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fa8e:	e060      	b.n	800fb52 <tcp_receive+0x362>
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa96:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fa9a:	e05a      	b.n	800fb52 <tcp_receive+0x362>
 800fa9c:	0801cee8 	.word	0x0801cee8
 800faa0:	0801d218 	.word	0x0801d218
 800faa4:	0801cf34 	.word	0x0801cf34
 800faa8:	0801d234 	.word	0x0801d234
 800faac:	2000867c 	.word	0x2000867c
 800fab0:	20008670 	.word	0x20008670
 800fab4:	20008674 	.word	0x20008674
 800fab8:	20008660 	.word	0x20008660
 800fabc:	2000867a 	.word	0x2000867a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fac6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fac8:	4413      	add	r3, r2
 800faca:	b29a      	uxth	r2, r3
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fad2:	429a      	cmp	r2, r3
 800fad4:	d309      	bcc.n	800faea <tcp_receive+0x2fa>
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fadc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fade:	4413      	add	r3, r2
 800fae0:	b29a      	uxth	r2, r3
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fae8:	e004      	b.n	800faf4 <tcp_receive+0x304>
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800faf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fb00:	429a      	cmp	r2, r3
 800fb02:	d326      	bcc.n	800fb52 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fb10:	1ad3      	subs	r3, r2, r3
 800fb12:	b29a      	uxth	r2, r3
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb24:	4413      	add	r3, r2
 800fb26:	b29a      	uxth	r2, r3
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fb2e:	429a      	cmp	r2, r3
 800fb30:	d30a      	bcc.n	800fb48 <tcp_receive+0x358>
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb3c:	4413      	add	r3, r2
 800fb3e:	b29a      	uxth	r2, r3
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fb46:	e004      	b.n	800fb52 <tcp_receive+0x362>
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb4e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb5a:	4a98      	ldr	r2, [pc, #608]	; (800fdbc <tcp_receive+0x5cc>)
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f7ff fdcb 	bl	800f6f8 <tcp_free_acked_segments>
 800fb62:	4602      	mov	r2, r0
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb70:	4a93      	ldr	r2, [pc, #588]	; (800fdc0 <tcp_receive+0x5d0>)
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f7ff fdc0 	bl	800f6f8 <tcp_free_acked_segments>
 800fb78:	4602      	mov	r2, r0
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d104      	bne.n	800fb90 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb8c:	861a      	strh	r2, [r3, #48]	; 0x30
 800fb8e:	e002      	b.n	800fb96 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2200      	movs	r2, #0
 800fb94:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2200      	movs	r2, #0
 800fb9a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d103      	bne.n	800fbac <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2200      	movs	r2, #0
 800fba8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800fbb2:	4b84      	ldr	r3, [pc, #528]	; (800fdc4 <tcp_receive+0x5d4>)
 800fbb4:	881b      	ldrh	r3, [r3, #0]
 800fbb6:	4413      	add	r3, r2
 800fbb8:	b29a      	uxth	r2, r3
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	8b5b      	ldrh	r3, [r3, #26]
 800fbc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d035      	beq.n	800fc38 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d118      	bne.n	800fc06 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d00c      	beq.n	800fbf6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbe4:	68db      	ldr	r3, [r3, #12]
 800fbe6:	685b      	ldr	r3, [r3, #4]
 800fbe8:	4618      	mov	r0, r3
 800fbea:	f7fa febc 	bl	800a966 <lwip_htonl>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	dc20      	bgt.n	800fc38 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	8b5b      	ldrh	r3, [r3, #26]
 800fbfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fbfe:	b29a      	uxth	r2, r3
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fc04:	e018      	b.n	800fc38 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc0e:	68db      	ldr	r3, [r3, #12]
 800fc10:	685b      	ldr	r3, [r3, #4]
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7fa fea7 	bl	800a966 <lwip_htonl>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	1ae3      	subs	r3, r4, r3
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	dc0b      	bgt.n	800fc38 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	8b5b      	ldrh	r3, [r3, #26]
 800fc24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fc28:	b29a      	uxth	r2, r3
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fc2e:	e003      	b.n	800fc38 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f002 fbdf 	bl	80123f4 <tcp_send_empty_ack>
 800fc36:	e000      	b.n	800fc3a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fc38:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d05b      	beq.n	800fcfa <tcp_receive+0x50a>
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fc46:	4b60      	ldr	r3, [pc, #384]	; (800fdc8 <tcp_receive+0x5d8>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	1ad3      	subs	r3, r2, r3
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	da54      	bge.n	800fcfa <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fc50:	4b5e      	ldr	r3, [pc, #376]	; (800fdcc <tcp_receive+0x5dc>)
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	b29a      	uxth	r2, r3
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	1ad3      	subs	r3, r2, r3
 800fc5e:	b29b      	uxth	r3, r3
 800fc60:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800fc64:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fc6e:	10db      	asrs	r3, r3, #3
 800fc70:	b21b      	sxth	r3, r3
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	1ad3      	subs	r3, r2, r3
 800fc76:	b29b      	uxth	r3, r3
 800fc78:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fc82:	b29a      	uxth	r2, r3
 800fc84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fc88:	4413      	add	r3, r2
 800fc8a:	b29b      	uxth	r3, r3
 800fc8c:	b21a      	sxth	r2, r3
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800fc92:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	da05      	bge.n	800fca6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800fc9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fc9e:	425b      	negs	r3, r3
 800fca0:	b29b      	uxth	r3, r3
 800fca2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800fca6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fcb0:	109b      	asrs	r3, r3, #2
 800fcb2:	b21b      	sxth	r3, r3
 800fcb4:	b29b      	uxth	r3, r3
 800fcb6:	1ad3      	subs	r3, r2, r3
 800fcb8:	b29b      	uxth	r3, r3
 800fcba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fcc4:	b29a      	uxth	r2, r3
 800fcc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fcca:	4413      	add	r3, r2
 800fccc:	b29b      	uxth	r3, r3
 800fcce:	b21a      	sxth	r2, r3
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fcda:	10db      	asrs	r3, r3, #3
 800fcdc:	b21b      	sxth	r3, r3
 800fcde:	b29a      	uxth	r2, r3
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fce6:	b29b      	uxth	r3, r3
 800fce8:	4413      	add	r3, r2
 800fcea:	b29b      	uxth	r3, r3
 800fcec:	b21a      	sxth	r2, r3
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fcfa:	4b35      	ldr	r3, [pc, #212]	; (800fdd0 <tcp_receive+0x5e0>)
 800fcfc:	881b      	ldrh	r3, [r3, #0]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	f000 84e1 	beq.w	80106c6 <tcp_receive+0xed6>
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	7d1b      	ldrb	r3, [r3, #20]
 800fd08:	2b06      	cmp	r3, #6
 800fd0a:	f200 84dc 	bhi.w	80106c6 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd12:	4b30      	ldr	r3, [pc, #192]	; (800fdd4 <tcp_receive+0x5e4>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	1ad3      	subs	r3, r2, r3
 800fd18:	3b01      	subs	r3, #1
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	f2c0 808e 	blt.w	800fe3c <tcp_receive+0x64c>
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd24:	4b2a      	ldr	r3, [pc, #168]	; (800fdd0 <tcp_receive+0x5e0>)
 800fd26:	881b      	ldrh	r3, [r3, #0]
 800fd28:	4619      	mov	r1, r3
 800fd2a:	4b2a      	ldr	r3, [pc, #168]	; (800fdd4 <tcp_receive+0x5e4>)
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	440b      	add	r3, r1
 800fd30:	1ad3      	subs	r3, r2, r3
 800fd32:	3301      	adds	r3, #1
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	f300 8081 	bgt.w	800fe3c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fd3a:	4b27      	ldr	r3, [pc, #156]	; (800fdd8 <tcp_receive+0x5e8>)
 800fd3c:	685b      	ldr	r3, [r3, #4]
 800fd3e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd44:	4b23      	ldr	r3, [pc, #140]	; (800fdd4 <tcp_receive+0x5e4>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	1ad3      	subs	r3, r2, r3
 800fd4a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800fd4c:	4b22      	ldr	r3, [pc, #136]	; (800fdd8 <tcp_receive+0x5e8>)
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d106      	bne.n	800fd62 <tcp_receive+0x572>
 800fd54:	4b21      	ldr	r3, [pc, #132]	; (800fddc <tcp_receive+0x5ec>)
 800fd56:	f240 5294 	movw	r2, #1428	; 0x594
 800fd5a:	4921      	ldr	r1, [pc, #132]	; (800fde0 <tcp_receive+0x5f0>)
 800fd5c:	4821      	ldr	r0, [pc, #132]	; (800fde4 <tcp_receive+0x5f4>)
 800fd5e:	f009 ff5f 	bl	8019c20 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800fd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fd68:	4293      	cmp	r3, r2
 800fd6a:	d906      	bls.n	800fd7a <tcp_receive+0x58a>
 800fd6c:	4b1b      	ldr	r3, [pc, #108]	; (800fddc <tcp_receive+0x5ec>)
 800fd6e:	f240 5295 	movw	r2, #1429	; 0x595
 800fd72:	491d      	ldr	r1, [pc, #116]	; (800fde8 <tcp_receive+0x5f8>)
 800fd74:	481b      	ldr	r0, [pc, #108]	; (800fde4 <tcp_receive+0x5f4>)
 800fd76:	f009 ff53 	bl	8019c20 <iprintf>
      off = (u16_t)off32;
 800fd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fd80:	4b15      	ldr	r3, [pc, #84]	; (800fdd8 <tcp_receive+0x5e8>)
 800fd82:	685b      	ldr	r3, [r3, #4]
 800fd84:	891b      	ldrh	r3, [r3, #8]
 800fd86:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	d906      	bls.n	800fd9c <tcp_receive+0x5ac>
 800fd8e:	4b13      	ldr	r3, [pc, #76]	; (800fddc <tcp_receive+0x5ec>)
 800fd90:	f240 5297 	movw	r2, #1431	; 0x597
 800fd94:	4915      	ldr	r1, [pc, #84]	; (800fdec <tcp_receive+0x5fc>)
 800fd96:	4813      	ldr	r0, [pc, #76]	; (800fde4 <tcp_receive+0x5f4>)
 800fd98:	f009 ff42 	bl	8019c20 <iprintf>
      inseg.len -= off;
 800fd9c:	4b0e      	ldr	r3, [pc, #56]	; (800fdd8 <tcp_receive+0x5e8>)
 800fd9e:	891a      	ldrh	r2, [r3, #8]
 800fda0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fda4:	1ad3      	subs	r3, r2, r3
 800fda6:	b29a      	uxth	r2, r3
 800fda8:	4b0b      	ldr	r3, [pc, #44]	; (800fdd8 <tcp_receive+0x5e8>)
 800fdaa:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800fdac:	4b0a      	ldr	r3, [pc, #40]	; (800fdd8 <tcp_receive+0x5e8>)
 800fdae:	685b      	ldr	r3, [r3, #4]
 800fdb0:	891a      	ldrh	r2, [r3, #8]
 800fdb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fdb6:	1ad3      	subs	r3, r2, r3
 800fdb8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800fdba:	e029      	b.n	800fe10 <tcp_receive+0x620>
 800fdbc:	0801d250 	.word	0x0801d250
 800fdc0:	0801d258 	.word	0x0801d258
 800fdc4:	20008678 	.word	0x20008678
 800fdc8:	20008674 	.word	0x20008674
 800fdcc:	2000fd3c 	.word	0x2000fd3c
 800fdd0:	2000867a 	.word	0x2000867a
 800fdd4:	20008670 	.word	0x20008670
 800fdd8:	20008650 	.word	0x20008650
 800fddc:	0801cee8 	.word	0x0801cee8
 800fde0:	0801d260 	.word	0x0801d260
 800fde4:	0801cf34 	.word	0x0801cf34
 800fde8:	0801d270 	.word	0x0801d270
 800fdec:	0801d280 	.word	0x0801d280
        off -= p->len;
 800fdf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fdf2:	895b      	ldrh	r3, [r3, #10]
 800fdf4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fdf8:	1ad3      	subs	r3, r2, r3
 800fdfa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800fdfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe00:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fe02:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800fe04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe06:	2200      	movs	r2, #0
 800fe08:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800fe0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800fe10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe12:	895b      	ldrh	r3, [r3, #10]
 800fe14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fe18:	429a      	cmp	r2, r3
 800fe1a:	d8e9      	bhi.n	800fdf0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800fe1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fe20:	4619      	mov	r1, r3
 800fe22:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fe24:	f7fc f8b8 	bl	800bf98 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe2c:	4a91      	ldr	r2, [pc, #580]	; (8010074 <tcp_receive+0x884>)
 800fe2e:	6013      	str	r3, [r2, #0]
 800fe30:	4b91      	ldr	r3, [pc, #580]	; (8010078 <tcp_receive+0x888>)
 800fe32:	68db      	ldr	r3, [r3, #12]
 800fe34:	4a8f      	ldr	r2, [pc, #572]	; (8010074 <tcp_receive+0x884>)
 800fe36:	6812      	ldr	r2, [r2, #0]
 800fe38:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fe3a:	e00d      	b.n	800fe58 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800fe3c:	4b8d      	ldr	r3, [pc, #564]	; (8010074 <tcp_receive+0x884>)
 800fe3e:	681a      	ldr	r2, [r3, #0]
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe44:	1ad3      	subs	r3, r2, r3
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	da06      	bge.n	800fe58 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	8b5b      	ldrh	r3, [r3, #26]
 800fe4e:	f043 0302 	orr.w	r3, r3, #2
 800fe52:	b29a      	uxth	r2, r3
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fe58:	4b86      	ldr	r3, [pc, #536]	; (8010074 <tcp_receive+0x884>)
 800fe5a:	681a      	ldr	r2, [r3, #0]
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe60:	1ad3      	subs	r3, r2, r3
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	f2c0 842a 	blt.w	80106bc <tcp_receive+0xecc>
 800fe68:	4b82      	ldr	r3, [pc, #520]	; (8010074 <tcp_receive+0x884>)
 800fe6a:	681a      	ldr	r2, [r3, #0]
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe70:	6879      	ldr	r1, [r7, #4]
 800fe72:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fe74:	440b      	add	r3, r1
 800fe76:	1ad3      	subs	r3, r2, r3
 800fe78:	3301      	adds	r3, #1
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	f300 841e 	bgt.w	80106bc <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe84:	4b7b      	ldr	r3, [pc, #492]	; (8010074 <tcp_receive+0x884>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	f040 829a 	bne.w	80103c2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800fe8e:	4b7a      	ldr	r3, [pc, #488]	; (8010078 <tcp_receive+0x888>)
 800fe90:	891c      	ldrh	r4, [r3, #8]
 800fe92:	4b79      	ldr	r3, [pc, #484]	; (8010078 <tcp_receive+0x888>)
 800fe94:	68db      	ldr	r3, [r3, #12]
 800fe96:	899b      	ldrh	r3, [r3, #12]
 800fe98:	b29b      	uxth	r3, r3
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f7fa fd4e 	bl	800a93c <lwip_htons>
 800fea0:	4603      	mov	r3, r0
 800fea2:	b2db      	uxtb	r3, r3
 800fea4:	f003 0303 	and.w	r3, r3, #3
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d001      	beq.n	800feb0 <tcp_receive+0x6c0>
 800feac:	2301      	movs	r3, #1
 800feae:	e000      	b.n	800feb2 <tcp_receive+0x6c2>
 800feb0:	2300      	movs	r3, #0
 800feb2:	4423      	add	r3, r4
 800feb4:	b29a      	uxth	r2, r3
 800feb6:	4b71      	ldr	r3, [pc, #452]	; (801007c <tcp_receive+0x88c>)
 800feb8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800febe:	4b6f      	ldr	r3, [pc, #444]	; (801007c <tcp_receive+0x88c>)
 800fec0:	881b      	ldrh	r3, [r3, #0]
 800fec2:	429a      	cmp	r2, r3
 800fec4:	d275      	bcs.n	800ffb2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fec6:	4b6c      	ldr	r3, [pc, #432]	; (8010078 <tcp_receive+0x888>)
 800fec8:	68db      	ldr	r3, [r3, #12]
 800feca:	899b      	ldrh	r3, [r3, #12]
 800fecc:	b29b      	uxth	r3, r3
 800fece:	4618      	mov	r0, r3
 800fed0:	f7fa fd34 	bl	800a93c <lwip_htons>
 800fed4:	4603      	mov	r3, r0
 800fed6:	b2db      	uxtb	r3, r3
 800fed8:	f003 0301 	and.w	r3, r3, #1
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d01f      	beq.n	800ff20 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800fee0:	4b65      	ldr	r3, [pc, #404]	; (8010078 <tcp_receive+0x888>)
 800fee2:	68db      	ldr	r3, [r3, #12]
 800fee4:	899b      	ldrh	r3, [r3, #12]
 800fee6:	b29b      	uxth	r3, r3
 800fee8:	b21b      	sxth	r3, r3
 800feea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800feee:	b21c      	sxth	r4, r3
 800fef0:	4b61      	ldr	r3, [pc, #388]	; (8010078 <tcp_receive+0x888>)
 800fef2:	68db      	ldr	r3, [r3, #12]
 800fef4:	899b      	ldrh	r3, [r3, #12]
 800fef6:	b29b      	uxth	r3, r3
 800fef8:	4618      	mov	r0, r3
 800fefa:	f7fa fd1f 	bl	800a93c <lwip_htons>
 800fefe:	4603      	mov	r3, r0
 800ff00:	b2db      	uxtb	r3, r3
 800ff02:	b29b      	uxth	r3, r3
 800ff04:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ff08:	b29b      	uxth	r3, r3
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f7fa fd16 	bl	800a93c <lwip_htons>
 800ff10:	4603      	mov	r3, r0
 800ff12:	b21b      	sxth	r3, r3
 800ff14:	4323      	orrs	r3, r4
 800ff16:	b21a      	sxth	r2, r3
 800ff18:	4b57      	ldr	r3, [pc, #348]	; (8010078 <tcp_receive+0x888>)
 800ff1a:	68db      	ldr	r3, [r3, #12]
 800ff1c:	b292      	uxth	r2, r2
 800ff1e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ff24:	4b54      	ldr	r3, [pc, #336]	; (8010078 <tcp_receive+0x888>)
 800ff26:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ff28:	4b53      	ldr	r3, [pc, #332]	; (8010078 <tcp_receive+0x888>)
 800ff2a:	68db      	ldr	r3, [r3, #12]
 800ff2c:	899b      	ldrh	r3, [r3, #12]
 800ff2e:	b29b      	uxth	r3, r3
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7fa fd03 	bl	800a93c <lwip_htons>
 800ff36:	4603      	mov	r3, r0
 800ff38:	b2db      	uxtb	r3, r3
 800ff3a:	f003 0302 	and.w	r3, r3, #2
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d005      	beq.n	800ff4e <tcp_receive+0x75e>
            inseg.len -= 1;
 800ff42:	4b4d      	ldr	r3, [pc, #308]	; (8010078 <tcp_receive+0x888>)
 800ff44:	891b      	ldrh	r3, [r3, #8]
 800ff46:	3b01      	subs	r3, #1
 800ff48:	b29a      	uxth	r2, r3
 800ff4a:	4b4b      	ldr	r3, [pc, #300]	; (8010078 <tcp_receive+0x888>)
 800ff4c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ff4e:	4b4a      	ldr	r3, [pc, #296]	; (8010078 <tcp_receive+0x888>)
 800ff50:	685a      	ldr	r2, [r3, #4]
 800ff52:	4b49      	ldr	r3, [pc, #292]	; (8010078 <tcp_receive+0x888>)
 800ff54:	891b      	ldrh	r3, [r3, #8]
 800ff56:	4619      	mov	r1, r3
 800ff58:	4610      	mov	r0, r2
 800ff5a:	f7fb ff1d 	bl	800bd98 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ff5e:	4b46      	ldr	r3, [pc, #280]	; (8010078 <tcp_receive+0x888>)
 800ff60:	891c      	ldrh	r4, [r3, #8]
 800ff62:	4b45      	ldr	r3, [pc, #276]	; (8010078 <tcp_receive+0x888>)
 800ff64:	68db      	ldr	r3, [r3, #12]
 800ff66:	899b      	ldrh	r3, [r3, #12]
 800ff68:	b29b      	uxth	r3, r3
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f7fa fce6 	bl	800a93c <lwip_htons>
 800ff70:	4603      	mov	r3, r0
 800ff72:	b2db      	uxtb	r3, r3
 800ff74:	f003 0303 	and.w	r3, r3, #3
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d001      	beq.n	800ff80 <tcp_receive+0x790>
 800ff7c:	2301      	movs	r3, #1
 800ff7e:	e000      	b.n	800ff82 <tcp_receive+0x792>
 800ff80:	2300      	movs	r3, #0
 800ff82:	4423      	add	r3, r4
 800ff84:	b29a      	uxth	r2, r3
 800ff86:	4b3d      	ldr	r3, [pc, #244]	; (801007c <tcp_receive+0x88c>)
 800ff88:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ff8a:	4b3c      	ldr	r3, [pc, #240]	; (801007c <tcp_receive+0x88c>)
 800ff8c:	881b      	ldrh	r3, [r3, #0]
 800ff8e:	461a      	mov	r2, r3
 800ff90:	4b38      	ldr	r3, [pc, #224]	; (8010074 <tcp_receive+0x884>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	441a      	add	r2, r3
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff9a:	6879      	ldr	r1, [r7, #4]
 800ff9c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ff9e:	440b      	add	r3, r1
 800ffa0:	429a      	cmp	r2, r3
 800ffa2:	d006      	beq.n	800ffb2 <tcp_receive+0x7c2>
 800ffa4:	4b36      	ldr	r3, [pc, #216]	; (8010080 <tcp_receive+0x890>)
 800ffa6:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800ffaa:	4936      	ldr	r1, [pc, #216]	; (8010084 <tcp_receive+0x894>)
 800ffac:	4836      	ldr	r0, [pc, #216]	; (8010088 <tcp_receive+0x898>)
 800ffae:	f009 fe37 	bl	8019c20 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	f000 80e7 	beq.w	801018a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ffbc:	4b2e      	ldr	r3, [pc, #184]	; (8010078 <tcp_receive+0x888>)
 800ffbe:	68db      	ldr	r3, [r3, #12]
 800ffc0:	899b      	ldrh	r3, [r3, #12]
 800ffc2:	b29b      	uxth	r3, r3
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f7fa fcb9 	bl	800a93c <lwip_htons>
 800ffca:	4603      	mov	r3, r0
 800ffcc:	b2db      	uxtb	r3, r3
 800ffce:	f003 0301 	and.w	r3, r3, #1
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d010      	beq.n	800fff8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ffd6:	e00a      	b.n	800ffee <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffdc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffe2:	681a      	ldr	r2, [r3, #0]
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800ffe8:	68f8      	ldr	r0, [r7, #12]
 800ffea:	f7fd fcc9 	bl	800d980 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d1f0      	bne.n	800ffd8 <tcp_receive+0x7e8>
 800fff6:	e0c8      	b.n	801018a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fffc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fffe:	e052      	b.n	80100a6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010002:	68db      	ldr	r3, [r3, #12]
 8010004:	899b      	ldrh	r3, [r3, #12]
 8010006:	b29b      	uxth	r3, r3
 8010008:	4618      	mov	r0, r3
 801000a:	f7fa fc97 	bl	800a93c <lwip_htons>
 801000e:	4603      	mov	r3, r0
 8010010:	b2db      	uxtb	r3, r3
 8010012:	f003 0301 	and.w	r3, r3, #1
 8010016:	2b00      	cmp	r3, #0
 8010018:	d03d      	beq.n	8010096 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801001a:	4b17      	ldr	r3, [pc, #92]	; (8010078 <tcp_receive+0x888>)
 801001c:	68db      	ldr	r3, [r3, #12]
 801001e:	899b      	ldrh	r3, [r3, #12]
 8010020:	b29b      	uxth	r3, r3
 8010022:	4618      	mov	r0, r3
 8010024:	f7fa fc8a 	bl	800a93c <lwip_htons>
 8010028:	4603      	mov	r3, r0
 801002a:	b2db      	uxtb	r3, r3
 801002c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010030:	2b00      	cmp	r3, #0
 8010032:	d130      	bne.n	8010096 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010034:	4b10      	ldr	r3, [pc, #64]	; (8010078 <tcp_receive+0x888>)
 8010036:	68db      	ldr	r3, [r3, #12]
 8010038:	899b      	ldrh	r3, [r3, #12]
 801003a:	b29c      	uxth	r4, r3
 801003c:	2001      	movs	r0, #1
 801003e:	f7fa fc7d 	bl	800a93c <lwip_htons>
 8010042:	4603      	mov	r3, r0
 8010044:	461a      	mov	r2, r3
 8010046:	4b0c      	ldr	r3, [pc, #48]	; (8010078 <tcp_receive+0x888>)
 8010048:	68db      	ldr	r3, [r3, #12]
 801004a:	4322      	orrs	r2, r4
 801004c:	b292      	uxth	r2, r2
 801004e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010050:	4b09      	ldr	r3, [pc, #36]	; (8010078 <tcp_receive+0x888>)
 8010052:	891c      	ldrh	r4, [r3, #8]
 8010054:	4b08      	ldr	r3, [pc, #32]	; (8010078 <tcp_receive+0x888>)
 8010056:	68db      	ldr	r3, [r3, #12]
 8010058:	899b      	ldrh	r3, [r3, #12]
 801005a:	b29b      	uxth	r3, r3
 801005c:	4618      	mov	r0, r3
 801005e:	f7fa fc6d 	bl	800a93c <lwip_htons>
 8010062:	4603      	mov	r3, r0
 8010064:	b2db      	uxtb	r3, r3
 8010066:	f003 0303 	and.w	r3, r3, #3
 801006a:	2b00      	cmp	r3, #0
 801006c:	d00e      	beq.n	801008c <tcp_receive+0x89c>
 801006e:	2301      	movs	r3, #1
 8010070:	e00d      	b.n	801008e <tcp_receive+0x89e>
 8010072:	bf00      	nop
 8010074:	20008670 	.word	0x20008670
 8010078:	20008650 	.word	0x20008650
 801007c:	2000867a 	.word	0x2000867a
 8010080:	0801cee8 	.word	0x0801cee8
 8010084:	0801d290 	.word	0x0801d290
 8010088:	0801cf34 	.word	0x0801cf34
 801008c:	2300      	movs	r3, #0
 801008e:	4423      	add	r3, r4
 8010090:	b29a      	uxth	r2, r3
 8010092:	4b98      	ldr	r3, [pc, #608]	; (80102f4 <tcp_receive+0xb04>)
 8010094:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010098:	613b      	str	r3, [r7, #16]
              next = next->next;
 801009a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80100a0:	6938      	ldr	r0, [r7, #16]
 80100a2:	f7fd fc6d 	bl	800d980 <tcp_seg_free>
            while (next &&
 80100a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d00e      	beq.n	80100ca <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80100ac:	4b91      	ldr	r3, [pc, #580]	; (80102f4 <tcp_receive+0xb04>)
 80100ae:	881b      	ldrh	r3, [r3, #0]
 80100b0:	461a      	mov	r2, r3
 80100b2:	4b91      	ldr	r3, [pc, #580]	; (80102f8 <tcp_receive+0xb08>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	441a      	add	r2, r3
 80100b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100ba:	68db      	ldr	r3, [r3, #12]
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80100c0:	8909      	ldrh	r1, [r1, #8]
 80100c2:	440b      	add	r3, r1
 80100c4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	da9a      	bge.n	8010000 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80100ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d059      	beq.n	8010184 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80100d0:	4b88      	ldr	r3, [pc, #544]	; (80102f4 <tcp_receive+0xb04>)
 80100d2:	881b      	ldrh	r3, [r3, #0]
 80100d4:	461a      	mov	r2, r3
 80100d6:	4b88      	ldr	r3, [pc, #544]	; (80102f8 <tcp_receive+0xb08>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	441a      	add	r2, r3
 80100dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100de:	68db      	ldr	r3, [r3, #12]
 80100e0:	685b      	ldr	r3, [r3, #4]
 80100e2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	dd4d      	ble.n	8010184 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80100e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100ea:	68db      	ldr	r3, [r3, #12]
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	b29a      	uxth	r2, r3
 80100f0:	4b81      	ldr	r3, [pc, #516]	; (80102f8 <tcp_receive+0xb08>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	1ad3      	subs	r3, r2, r3
 80100f8:	b29a      	uxth	r2, r3
 80100fa:	4b80      	ldr	r3, [pc, #512]	; (80102fc <tcp_receive+0xb0c>)
 80100fc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80100fe:	4b7f      	ldr	r3, [pc, #508]	; (80102fc <tcp_receive+0xb0c>)
 8010100:	68db      	ldr	r3, [r3, #12]
 8010102:	899b      	ldrh	r3, [r3, #12]
 8010104:	b29b      	uxth	r3, r3
 8010106:	4618      	mov	r0, r3
 8010108:	f7fa fc18 	bl	800a93c <lwip_htons>
 801010c:	4603      	mov	r3, r0
 801010e:	b2db      	uxtb	r3, r3
 8010110:	f003 0302 	and.w	r3, r3, #2
 8010114:	2b00      	cmp	r3, #0
 8010116:	d005      	beq.n	8010124 <tcp_receive+0x934>
                inseg.len -= 1;
 8010118:	4b78      	ldr	r3, [pc, #480]	; (80102fc <tcp_receive+0xb0c>)
 801011a:	891b      	ldrh	r3, [r3, #8]
 801011c:	3b01      	subs	r3, #1
 801011e:	b29a      	uxth	r2, r3
 8010120:	4b76      	ldr	r3, [pc, #472]	; (80102fc <tcp_receive+0xb0c>)
 8010122:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010124:	4b75      	ldr	r3, [pc, #468]	; (80102fc <tcp_receive+0xb0c>)
 8010126:	685a      	ldr	r2, [r3, #4]
 8010128:	4b74      	ldr	r3, [pc, #464]	; (80102fc <tcp_receive+0xb0c>)
 801012a:	891b      	ldrh	r3, [r3, #8]
 801012c:	4619      	mov	r1, r3
 801012e:	4610      	mov	r0, r2
 8010130:	f7fb fe32 	bl	800bd98 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010134:	4b71      	ldr	r3, [pc, #452]	; (80102fc <tcp_receive+0xb0c>)
 8010136:	891c      	ldrh	r4, [r3, #8]
 8010138:	4b70      	ldr	r3, [pc, #448]	; (80102fc <tcp_receive+0xb0c>)
 801013a:	68db      	ldr	r3, [r3, #12]
 801013c:	899b      	ldrh	r3, [r3, #12]
 801013e:	b29b      	uxth	r3, r3
 8010140:	4618      	mov	r0, r3
 8010142:	f7fa fbfb 	bl	800a93c <lwip_htons>
 8010146:	4603      	mov	r3, r0
 8010148:	b2db      	uxtb	r3, r3
 801014a:	f003 0303 	and.w	r3, r3, #3
 801014e:	2b00      	cmp	r3, #0
 8010150:	d001      	beq.n	8010156 <tcp_receive+0x966>
 8010152:	2301      	movs	r3, #1
 8010154:	e000      	b.n	8010158 <tcp_receive+0x968>
 8010156:	2300      	movs	r3, #0
 8010158:	4423      	add	r3, r4
 801015a:	b29a      	uxth	r2, r3
 801015c:	4b65      	ldr	r3, [pc, #404]	; (80102f4 <tcp_receive+0xb04>)
 801015e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010160:	4b64      	ldr	r3, [pc, #400]	; (80102f4 <tcp_receive+0xb04>)
 8010162:	881b      	ldrh	r3, [r3, #0]
 8010164:	461a      	mov	r2, r3
 8010166:	4b64      	ldr	r3, [pc, #400]	; (80102f8 <tcp_receive+0xb08>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	441a      	add	r2, r3
 801016c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801016e:	68db      	ldr	r3, [r3, #12]
 8010170:	685b      	ldr	r3, [r3, #4]
 8010172:	429a      	cmp	r2, r3
 8010174:	d006      	beq.n	8010184 <tcp_receive+0x994>
 8010176:	4b62      	ldr	r3, [pc, #392]	; (8010300 <tcp_receive+0xb10>)
 8010178:	f240 52fd 	movw	r2, #1533	; 0x5fd
 801017c:	4961      	ldr	r1, [pc, #388]	; (8010304 <tcp_receive+0xb14>)
 801017e:	4862      	ldr	r0, [pc, #392]	; (8010308 <tcp_receive+0xb18>)
 8010180:	f009 fd4e 	bl	8019c20 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010188:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801018a:	4b5a      	ldr	r3, [pc, #360]	; (80102f4 <tcp_receive+0xb04>)
 801018c:	881b      	ldrh	r3, [r3, #0]
 801018e:	461a      	mov	r2, r3
 8010190:	4b59      	ldr	r3, [pc, #356]	; (80102f8 <tcp_receive+0xb08>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	441a      	add	r2, r3
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801019e:	4b55      	ldr	r3, [pc, #340]	; (80102f4 <tcp_receive+0xb04>)
 80101a0:	881b      	ldrh	r3, [r3, #0]
 80101a2:	429a      	cmp	r2, r3
 80101a4:	d206      	bcs.n	80101b4 <tcp_receive+0x9c4>
 80101a6:	4b56      	ldr	r3, [pc, #344]	; (8010300 <tcp_receive+0xb10>)
 80101a8:	f240 6207 	movw	r2, #1543	; 0x607
 80101ac:	4957      	ldr	r1, [pc, #348]	; (801030c <tcp_receive+0xb1c>)
 80101ae:	4856      	ldr	r0, [pc, #344]	; (8010308 <tcp_receive+0xb18>)
 80101b0:	f009 fd36 	bl	8019c20 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80101b8:	4b4e      	ldr	r3, [pc, #312]	; (80102f4 <tcp_receive+0xb04>)
 80101ba:	881b      	ldrh	r3, [r3, #0]
 80101bc:	1ad3      	subs	r3, r2, r3
 80101be:	b29a      	uxth	r2, r3
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80101c4:	6878      	ldr	r0, [r7, #4]
 80101c6:	f7fc fda1 	bl	800cd0c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80101ca:	4b4c      	ldr	r3, [pc, #304]	; (80102fc <tcp_receive+0xb0c>)
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	891b      	ldrh	r3, [r3, #8]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d006      	beq.n	80101e2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80101d4:	4b49      	ldr	r3, [pc, #292]	; (80102fc <tcp_receive+0xb0c>)
 80101d6:	685b      	ldr	r3, [r3, #4]
 80101d8:	4a4d      	ldr	r2, [pc, #308]	; (8010310 <tcp_receive+0xb20>)
 80101da:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80101dc:	4b47      	ldr	r3, [pc, #284]	; (80102fc <tcp_receive+0xb0c>)
 80101de:	2200      	movs	r2, #0
 80101e0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80101e2:	4b46      	ldr	r3, [pc, #280]	; (80102fc <tcp_receive+0xb0c>)
 80101e4:	68db      	ldr	r3, [r3, #12]
 80101e6:	899b      	ldrh	r3, [r3, #12]
 80101e8:	b29b      	uxth	r3, r3
 80101ea:	4618      	mov	r0, r3
 80101ec:	f7fa fba6 	bl	800a93c <lwip_htons>
 80101f0:	4603      	mov	r3, r0
 80101f2:	b2db      	uxtb	r3, r3
 80101f4:	f003 0301 	and.w	r3, r3, #1
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	f000 80b8 	beq.w	801036e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80101fe:	4b45      	ldr	r3, [pc, #276]	; (8010314 <tcp_receive+0xb24>)
 8010200:	781b      	ldrb	r3, [r3, #0]
 8010202:	f043 0320 	orr.w	r3, r3, #32
 8010206:	b2da      	uxtb	r2, r3
 8010208:	4b42      	ldr	r3, [pc, #264]	; (8010314 <tcp_receive+0xb24>)
 801020a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801020c:	e0af      	b.n	801036e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010212:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010218:	68db      	ldr	r3, [r3, #12]
 801021a:	685b      	ldr	r3, [r3, #4]
 801021c:	4a36      	ldr	r2, [pc, #216]	; (80102f8 <tcp_receive+0xb08>)
 801021e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	891b      	ldrh	r3, [r3, #8]
 8010224:	461c      	mov	r4, r3
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	68db      	ldr	r3, [r3, #12]
 801022a:	899b      	ldrh	r3, [r3, #12]
 801022c:	b29b      	uxth	r3, r3
 801022e:	4618      	mov	r0, r3
 8010230:	f7fa fb84 	bl	800a93c <lwip_htons>
 8010234:	4603      	mov	r3, r0
 8010236:	b2db      	uxtb	r3, r3
 8010238:	f003 0303 	and.w	r3, r3, #3
 801023c:	2b00      	cmp	r3, #0
 801023e:	d001      	beq.n	8010244 <tcp_receive+0xa54>
 8010240:	2301      	movs	r3, #1
 8010242:	e000      	b.n	8010246 <tcp_receive+0xa56>
 8010244:	2300      	movs	r3, #0
 8010246:	191a      	adds	r2, r3, r4
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801024c:	441a      	add	r2, r3
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010256:	461c      	mov	r4, r3
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	891b      	ldrh	r3, [r3, #8]
 801025c:	461d      	mov	r5, r3
 801025e:	68bb      	ldr	r3, [r7, #8]
 8010260:	68db      	ldr	r3, [r3, #12]
 8010262:	899b      	ldrh	r3, [r3, #12]
 8010264:	b29b      	uxth	r3, r3
 8010266:	4618      	mov	r0, r3
 8010268:	f7fa fb68 	bl	800a93c <lwip_htons>
 801026c:	4603      	mov	r3, r0
 801026e:	b2db      	uxtb	r3, r3
 8010270:	f003 0303 	and.w	r3, r3, #3
 8010274:	2b00      	cmp	r3, #0
 8010276:	d001      	beq.n	801027c <tcp_receive+0xa8c>
 8010278:	2301      	movs	r3, #1
 801027a:	e000      	b.n	801027e <tcp_receive+0xa8e>
 801027c:	2300      	movs	r3, #0
 801027e:	442b      	add	r3, r5
 8010280:	429c      	cmp	r4, r3
 8010282:	d206      	bcs.n	8010292 <tcp_receive+0xaa2>
 8010284:	4b1e      	ldr	r3, [pc, #120]	; (8010300 <tcp_receive+0xb10>)
 8010286:	f240 622c 	movw	r2, #1580	; 0x62c
 801028a:	4923      	ldr	r1, [pc, #140]	; (8010318 <tcp_receive+0xb28>)
 801028c:	481e      	ldr	r0, [pc, #120]	; (8010308 <tcp_receive+0xb18>)
 801028e:	f009 fcc7 	bl	8019c20 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010292:	68bb      	ldr	r3, [r7, #8]
 8010294:	891b      	ldrh	r3, [r3, #8]
 8010296:	461c      	mov	r4, r3
 8010298:	68bb      	ldr	r3, [r7, #8]
 801029a:	68db      	ldr	r3, [r3, #12]
 801029c:	899b      	ldrh	r3, [r3, #12]
 801029e:	b29b      	uxth	r3, r3
 80102a0:	4618      	mov	r0, r3
 80102a2:	f7fa fb4b 	bl	800a93c <lwip_htons>
 80102a6:	4603      	mov	r3, r0
 80102a8:	b2db      	uxtb	r3, r3
 80102aa:	f003 0303 	and.w	r3, r3, #3
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d001      	beq.n	80102b6 <tcp_receive+0xac6>
 80102b2:	2301      	movs	r3, #1
 80102b4:	e000      	b.n	80102b8 <tcp_receive+0xac8>
 80102b6:	2300      	movs	r3, #0
 80102b8:	1919      	adds	r1, r3, r4
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80102be:	b28b      	uxth	r3, r1
 80102c0:	1ad3      	subs	r3, r2, r3
 80102c2:	b29a      	uxth	r2, r3
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80102c8:	6878      	ldr	r0, [r7, #4]
 80102ca:	f7fc fd1f 	bl	800cd0c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80102ce:	68bb      	ldr	r3, [r7, #8]
 80102d0:	685b      	ldr	r3, [r3, #4]
 80102d2:	891b      	ldrh	r3, [r3, #8]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d028      	beq.n	801032a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80102d8:	4b0d      	ldr	r3, [pc, #52]	; (8010310 <tcp_receive+0xb20>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d01d      	beq.n	801031c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80102e0:	4b0b      	ldr	r3, [pc, #44]	; (8010310 <tcp_receive+0xb20>)
 80102e2:	681a      	ldr	r2, [r3, #0]
 80102e4:	68bb      	ldr	r3, [r7, #8]
 80102e6:	685b      	ldr	r3, [r3, #4]
 80102e8:	4619      	mov	r1, r3
 80102ea:	4610      	mov	r0, r2
 80102ec:	f7fb ffda 	bl	800c2a4 <pbuf_cat>
 80102f0:	e018      	b.n	8010324 <tcp_receive+0xb34>
 80102f2:	bf00      	nop
 80102f4:	2000867a 	.word	0x2000867a
 80102f8:	20008670 	.word	0x20008670
 80102fc:	20008650 	.word	0x20008650
 8010300:	0801cee8 	.word	0x0801cee8
 8010304:	0801d2c8 	.word	0x0801d2c8
 8010308:	0801cf34 	.word	0x0801cf34
 801030c:	0801d304 	.word	0x0801d304
 8010310:	20008680 	.word	0x20008680
 8010314:	2000867d 	.word	0x2000867d
 8010318:	0801d324 	.word	0x0801d324
            } else {
              recv_data = cseg->p;
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	685b      	ldr	r3, [r3, #4]
 8010320:	4a70      	ldr	r2, [pc, #448]	; (80104e4 <tcp_receive+0xcf4>)
 8010322:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	2200      	movs	r2, #0
 8010328:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	68db      	ldr	r3, [r3, #12]
 801032e:	899b      	ldrh	r3, [r3, #12]
 8010330:	b29b      	uxth	r3, r3
 8010332:	4618      	mov	r0, r3
 8010334:	f7fa fb02 	bl	800a93c <lwip_htons>
 8010338:	4603      	mov	r3, r0
 801033a:	b2db      	uxtb	r3, r3
 801033c:	f003 0301 	and.w	r3, r3, #1
 8010340:	2b00      	cmp	r3, #0
 8010342:	d00d      	beq.n	8010360 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010344:	4b68      	ldr	r3, [pc, #416]	; (80104e8 <tcp_receive+0xcf8>)
 8010346:	781b      	ldrb	r3, [r3, #0]
 8010348:	f043 0320 	orr.w	r3, r3, #32
 801034c:	b2da      	uxtb	r2, r3
 801034e:	4b66      	ldr	r3, [pc, #408]	; (80104e8 <tcp_receive+0xcf8>)
 8010350:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	7d1b      	ldrb	r3, [r3, #20]
 8010356:	2b04      	cmp	r3, #4
 8010358:	d102      	bne.n	8010360 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2207      	movs	r2, #7
 801035e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	681a      	ldr	r2, [r3, #0]
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010368:	68b8      	ldr	r0, [r7, #8]
 801036a:	f7fd fb09 	bl	800d980 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010372:	2b00      	cmp	r3, #0
 8010374:	d008      	beq.n	8010388 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801037a:	68db      	ldr	r3, [r3, #12]
 801037c:	685a      	ldr	r2, [r3, #4]
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010382:	429a      	cmp	r2, r3
 8010384:	f43f af43 	beq.w	801020e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	8b5b      	ldrh	r3, [r3, #26]
 801038c:	f003 0301 	and.w	r3, r3, #1
 8010390:	2b00      	cmp	r3, #0
 8010392:	d00e      	beq.n	80103b2 <tcp_receive+0xbc2>
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	8b5b      	ldrh	r3, [r3, #26]
 8010398:	f023 0301 	bic.w	r3, r3, #1
 801039c:	b29a      	uxth	r2, r3
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	835a      	strh	r2, [r3, #26]
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	8b5b      	ldrh	r3, [r3, #26]
 80103a6:	f043 0302 	orr.w	r3, r3, #2
 80103aa:	b29a      	uxth	r2, r3
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80103b0:	e188      	b.n	80106c4 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	8b5b      	ldrh	r3, [r3, #26]
 80103b6:	f043 0301 	orr.w	r3, r3, #1
 80103ba:	b29a      	uxth	r2, r3
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80103c0:	e180      	b.n	80106c4 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d106      	bne.n	80103d8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80103ca:	4848      	ldr	r0, [pc, #288]	; (80104ec <tcp_receive+0xcfc>)
 80103cc:	f7fd faf0 	bl	800d9b0 <tcp_seg_copy>
 80103d0:	4602      	mov	r2, r0
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	675a      	str	r2, [r3, #116]	; 0x74
 80103d6:	e16d      	b.n	80106b4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80103d8:	2300      	movs	r3, #0
 80103da:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80103e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80103e2:	e157      	b.n	8010694 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80103e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103e6:	68db      	ldr	r3, [r3, #12]
 80103e8:	685a      	ldr	r2, [r3, #4]
 80103ea:	4b41      	ldr	r3, [pc, #260]	; (80104f0 <tcp_receive+0xd00>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	429a      	cmp	r2, r3
 80103f0:	d11d      	bne.n	801042e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80103f2:	4b3e      	ldr	r3, [pc, #248]	; (80104ec <tcp_receive+0xcfc>)
 80103f4:	891a      	ldrh	r2, [r3, #8]
 80103f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103f8:	891b      	ldrh	r3, [r3, #8]
 80103fa:	429a      	cmp	r2, r3
 80103fc:	f240 814f 	bls.w	801069e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010400:	483a      	ldr	r0, [pc, #232]	; (80104ec <tcp_receive+0xcfc>)
 8010402:	f7fd fad5 	bl	800d9b0 <tcp_seg_copy>
 8010406:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010408:	697b      	ldr	r3, [r7, #20]
 801040a:	2b00      	cmp	r3, #0
 801040c:	f000 8149 	beq.w	80106a2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8010410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010412:	2b00      	cmp	r3, #0
 8010414:	d003      	beq.n	801041e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8010416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010418:	697a      	ldr	r2, [r7, #20]
 801041a:	601a      	str	r2, [r3, #0]
 801041c:	e002      	b.n	8010424 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	697a      	ldr	r2, [r7, #20]
 8010422:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010424:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010426:	6978      	ldr	r0, [r7, #20]
 8010428:	f7ff f8de 	bl	800f5e8 <tcp_oos_insert_segment>
                }
                break;
 801042c:	e139      	b.n	80106a2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801042e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010430:	2b00      	cmp	r3, #0
 8010432:	d117      	bne.n	8010464 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010434:	4b2e      	ldr	r3, [pc, #184]	; (80104f0 <tcp_receive+0xd00>)
 8010436:	681a      	ldr	r2, [r3, #0]
 8010438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801043a:	68db      	ldr	r3, [r3, #12]
 801043c:	685b      	ldr	r3, [r3, #4]
 801043e:	1ad3      	subs	r3, r2, r3
 8010440:	2b00      	cmp	r3, #0
 8010442:	da57      	bge.n	80104f4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010444:	4829      	ldr	r0, [pc, #164]	; (80104ec <tcp_receive+0xcfc>)
 8010446:	f7fd fab3 	bl	800d9b0 <tcp_seg_copy>
 801044a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801044c:	69bb      	ldr	r3, [r7, #24]
 801044e:	2b00      	cmp	r3, #0
 8010450:	f000 8129 	beq.w	80106a6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	69ba      	ldr	r2, [r7, #24]
 8010458:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801045a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801045c:	69b8      	ldr	r0, [r7, #24]
 801045e:	f7ff f8c3 	bl	800f5e8 <tcp_oos_insert_segment>
                  }
                  break;
 8010462:	e120      	b.n	80106a6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010464:	4b22      	ldr	r3, [pc, #136]	; (80104f0 <tcp_receive+0xd00>)
 8010466:	681a      	ldr	r2, [r3, #0]
 8010468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801046a:	68db      	ldr	r3, [r3, #12]
 801046c:	685b      	ldr	r3, [r3, #4]
 801046e:	1ad3      	subs	r3, r2, r3
 8010470:	3b01      	subs	r3, #1
 8010472:	2b00      	cmp	r3, #0
 8010474:	db3e      	blt.n	80104f4 <tcp_receive+0xd04>
 8010476:	4b1e      	ldr	r3, [pc, #120]	; (80104f0 <tcp_receive+0xd00>)
 8010478:	681a      	ldr	r2, [r3, #0]
 801047a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801047c:	68db      	ldr	r3, [r3, #12]
 801047e:	685b      	ldr	r3, [r3, #4]
 8010480:	1ad3      	subs	r3, r2, r3
 8010482:	3301      	adds	r3, #1
 8010484:	2b00      	cmp	r3, #0
 8010486:	dc35      	bgt.n	80104f4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010488:	4818      	ldr	r0, [pc, #96]	; (80104ec <tcp_receive+0xcfc>)
 801048a:	f7fd fa91 	bl	800d9b0 <tcp_seg_copy>
 801048e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010490:	69fb      	ldr	r3, [r7, #28]
 8010492:	2b00      	cmp	r3, #0
 8010494:	f000 8109 	beq.w	80106aa <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801049a:	68db      	ldr	r3, [r3, #12]
 801049c:	685b      	ldr	r3, [r3, #4]
 801049e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104a0:	8912      	ldrh	r2, [r2, #8]
 80104a2:	441a      	add	r2, r3
 80104a4:	4b12      	ldr	r3, [pc, #72]	; (80104f0 <tcp_receive+0xd00>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	1ad3      	subs	r3, r2, r3
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	dd12      	ble.n	80104d4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80104ae:	4b10      	ldr	r3, [pc, #64]	; (80104f0 <tcp_receive+0xd00>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	b29a      	uxth	r2, r3
 80104b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104b6:	68db      	ldr	r3, [r3, #12]
 80104b8:	685b      	ldr	r3, [r3, #4]
 80104ba:	b29b      	uxth	r3, r3
 80104bc:	1ad3      	subs	r3, r2, r3
 80104be:	b29a      	uxth	r2, r3
 80104c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104c2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80104c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104c6:	685a      	ldr	r2, [r3, #4]
 80104c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104ca:	891b      	ldrh	r3, [r3, #8]
 80104cc:	4619      	mov	r1, r3
 80104ce:	4610      	mov	r0, r2
 80104d0:	f7fb fc62 	bl	800bd98 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80104d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104d6:	69fa      	ldr	r2, [r7, #28]
 80104d8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80104da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80104dc:	69f8      	ldr	r0, [r7, #28]
 80104de:	f7ff f883 	bl	800f5e8 <tcp_oos_insert_segment>
                  }
                  break;
 80104e2:	e0e2      	b.n	80106aa <tcp_receive+0xeba>
 80104e4:	20008680 	.word	0x20008680
 80104e8:	2000867d 	.word	0x2000867d
 80104ec:	20008650 	.word	0x20008650
 80104f0:	20008670 	.word	0x20008670
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80104f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104f6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80104f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	f040 80c6 	bne.w	801068e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010502:	4b80      	ldr	r3, [pc, #512]	; (8010704 <tcp_receive+0xf14>)
 8010504:	681a      	ldr	r2, [r3, #0]
 8010506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010508:	68db      	ldr	r3, [r3, #12]
 801050a:	685b      	ldr	r3, [r3, #4]
 801050c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801050e:	2b00      	cmp	r3, #0
 8010510:	f340 80bd 	ble.w	801068e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010516:	68db      	ldr	r3, [r3, #12]
 8010518:	899b      	ldrh	r3, [r3, #12]
 801051a:	b29b      	uxth	r3, r3
 801051c:	4618      	mov	r0, r3
 801051e:	f7fa fa0d 	bl	800a93c <lwip_htons>
 8010522:	4603      	mov	r3, r0
 8010524:	b2db      	uxtb	r3, r3
 8010526:	f003 0301 	and.w	r3, r3, #1
 801052a:	2b00      	cmp	r3, #0
 801052c:	f040 80bf 	bne.w	80106ae <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010530:	4875      	ldr	r0, [pc, #468]	; (8010708 <tcp_receive+0xf18>)
 8010532:	f7fd fa3d 	bl	800d9b0 <tcp_seg_copy>
 8010536:	4602      	mov	r2, r0
 8010538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801053a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801053c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	2b00      	cmp	r3, #0
 8010542:	f000 80b6 	beq.w	80106b2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010548:	68db      	ldr	r3, [r3, #12]
 801054a:	685b      	ldr	r3, [r3, #4]
 801054c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801054e:	8912      	ldrh	r2, [r2, #8]
 8010550:	441a      	add	r2, r3
 8010552:	4b6c      	ldr	r3, [pc, #432]	; (8010704 <tcp_receive+0xf14>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	1ad3      	subs	r3, r2, r3
 8010558:	2b00      	cmp	r3, #0
 801055a:	dd12      	ble.n	8010582 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801055c:	4b69      	ldr	r3, [pc, #420]	; (8010704 <tcp_receive+0xf14>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	b29a      	uxth	r2, r3
 8010562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010564:	68db      	ldr	r3, [r3, #12]
 8010566:	685b      	ldr	r3, [r3, #4]
 8010568:	b29b      	uxth	r3, r3
 801056a:	1ad3      	subs	r3, r2, r3
 801056c:	b29a      	uxth	r2, r3
 801056e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010570:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010574:	685a      	ldr	r2, [r3, #4]
 8010576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010578:	891b      	ldrh	r3, [r3, #8]
 801057a:	4619      	mov	r1, r3
 801057c:	4610      	mov	r0, r2
 801057e:	f7fb fc0b 	bl	800bd98 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010582:	4b62      	ldr	r3, [pc, #392]	; (801070c <tcp_receive+0xf1c>)
 8010584:	881b      	ldrh	r3, [r3, #0]
 8010586:	461a      	mov	r2, r3
 8010588:	4b5e      	ldr	r3, [pc, #376]	; (8010704 <tcp_receive+0xf14>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	441a      	add	r2, r3
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010592:	6879      	ldr	r1, [r7, #4]
 8010594:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010596:	440b      	add	r3, r1
 8010598:	1ad3      	subs	r3, r2, r3
 801059a:	2b00      	cmp	r3, #0
 801059c:	f340 8089 	ble.w	80106b2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80105a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	68db      	ldr	r3, [r3, #12]
 80105a6:	899b      	ldrh	r3, [r3, #12]
 80105a8:	b29b      	uxth	r3, r3
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7fa f9c6 	bl	800a93c <lwip_htons>
 80105b0:	4603      	mov	r3, r0
 80105b2:	b2db      	uxtb	r3, r3
 80105b4:	f003 0301 	and.w	r3, r3, #1
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d022      	beq.n	8010602 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80105bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	68db      	ldr	r3, [r3, #12]
 80105c2:	899b      	ldrh	r3, [r3, #12]
 80105c4:	b29b      	uxth	r3, r3
 80105c6:	b21b      	sxth	r3, r3
 80105c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80105cc:	b21c      	sxth	r4, r3
 80105ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	68db      	ldr	r3, [r3, #12]
 80105d4:	899b      	ldrh	r3, [r3, #12]
 80105d6:	b29b      	uxth	r3, r3
 80105d8:	4618      	mov	r0, r3
 80105da:	f7fa f9af 	bl	800a93c <lwip_htons>
 80105de:	4603      	mov	r3, r0
 80105e0:	b2db      	uxtb	r3, r3
 80105e2:	b29b      	uxth	r3, r3
 80105e4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80105e8:	b29b      	uxth	r3, r3
 80105ea:	4618      	mov	r0, r3
 80105ec:	f7fa f9a6 	bl	800a93c <lwip_htons>
 80105f0:	4603      	mov	r3, r0
 80105f2:	b21b      	sxth	r3, r3
 80105f4:	4323      	orrs	r3, r4
 80105f6:	b21a      	sxth	r2, r3
 80105f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	68db      	ldr	r3, [r3, #12]
 80105fe:	b292      	uxth	r2, r2
 8010600:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010606:	b29a      	uxth	r2, r3
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801060c:	4413      	add	r3, r2
 801060e:	b299      	uxth	r1, r3
 8010610:	4b3c      	ldr	r3, [pc, #240]	; (8010704 <tcp_receive+0xf14>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	b29a      	uxth	r2, r3
 8010616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	1a8a      	subs	r2, r1, r2
 801061c:	b292      	uxth	r2, r2
 801061e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	685a      	ldr	r2, [r3, #4]
 8010626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	891b      	ldrh	r3, [r3, #8]
 801062c:	4619      	mov	r1, r3
 801062e:	4610      	mov	r0, r2
 8010630:	f7fb fbb2 	bl	800bd98 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	891c      	ldrh	r4, [r3, #8]
 801063a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	68db      	ldr	r3, [r3, #12]
 8010640:	899b      	ldrh	r3, [r3, #12]
 8010642:	b29b      	uxth	r3, r3
 8010644:	4618      	mov	r0, r3
 8010646:	f7fa f979 	bl	800a93c <lwip_htons>
 801064a:	4603      	mov	r3, r0
 801064c:	b2db      	uxtb	r3, r3
 801064e:	f003 0303 	and.w	r3, r3, #3
 8010652:	2b00      	cmp	r3, #0
 8010654:	d001      	beq.n	801065a <tcp_receive+0xe6a>
 8010656:	2301      	movs	r3, #1
 8010658:	e000      	b.n	801065c <tcp_receive+0xe6c>
 801065a:	2300      	movs	r3, #0
 801065c:	4423      	add	r3, r4
 801065e:	b29a      	uxth	r2, r3
 8010660:	4b2a      	ldr	r3, [pc, #168]	; (801070c <tcp_receive+0xf1c>)
 8010662:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010664:	4b29      	ldr	r3, [pc, #164]	; (801070c <tcp_receive+0xf1c>)
 8010666:	881b      	ldrh	r3, [r3, #0]
 8010668:	461a      	mov	r2, r3
 801066a:	4b26      	ldr	r3, [pc, #152]	; (8010704 <tcp_receive+0xf14>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	441a      	add	r2, r3
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010674:	6879      	ldr	r1, [r7, #4]
 8010676:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010678:	440b      	add	r3, r1
 801067a:	429a      	cmp	r2, r3
 801067c:	d019      	beq.n	80106b2 <tcp_receive+0xec2>
 801067e:	4b24      	ldr	r3, [pc, #144]	; (8010710 <tcp_receive+0xf20>)
 8010680:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010684:	4923      	ldr	r1, [pc, #140]	; (8010714 <tcp_receive+0xf24>)
 8010686:	4824      	ldr	r0, [pc, #144]	; (8010718 <tcp_receive+0xf28>)
 8010688:	f009 faca 	bl	8019c20 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801068c:	e011      	b.n	80106b2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801068e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	63bb      	str	r3, [r7, #56]	; 0x38
 8010694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010696:	2b00      	cmp	r3, #0
 8010698:	f47f aea4 	bne.w	80103e4 <tcp_receive+0xbf4>
 801069c:	e00a      	b.n	80106b4 <tcp_receive+0xec4>
                break;
 801069e:	bf00      	nop
 80106a0:	e008      	b.n	80106b4 <tcp_receive+0xec4>
                break;
 80106a2:	bf00      	nop
 80106a4:	e006      	b.n	80106b4 <tcp_receive+0xec4>
                  break;
 80106a6:	bf00      	nop
 80106a8:	e004      	b.n	80106b4 <tcp_receive+0xec4>
                  break;
 80106aa:	bf00      	nop
 80106ac:	e002      	b.n	80106b4 <tcp_receive+0xec4>
                  break;
 80106ae:	bf00      	nop
 80106b0:	e000      	b.n	80106b4 <tcp_receive+0xec4>
                break;
 80106b2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80106b4:	6878      	ldr	r0, [r7, #4]
 80106b6:	f001 fe9d 	bl	80123f4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80106ba:	e003      	b.n	80106c4 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f001 fe99 	bl	80123f4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80106c2:	e01a      	b.n	80106fa <tcp_receive+0xf0a>
 80106c4:	e019      	b.n	80106fa <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80106c6:	4b0f      	ldr	r3, [pc, #60]	; (8010704 <tcp_receive+0xf14>)
 80106c8:	681a      	ldr	r2, [r3, #0]
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106ce:	1ad3      	subs	r3, r2, r3
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	db0a      	blt.n	80106ea <tcp_receive+0xefa>
 80106d4:	4b0b      	ldr	r3, [pc, #44]	; (8010704 <tcp_receive+0xf14>)
 80106d6:	681a      	ldr	r2, [r3, #0]
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106dc:	6879      	ldr	r1, [r7, #4]
 80106de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80106e0:	440b      	add	r3, r1
 80106e2:	1ad3      	subs	r3, r2, r3
 80106e4:	3301      	adds	r3, #1
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	dd07      	ble.n	80106fa <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	8b5b      	ldrh	r3, [r3, #26]
 80106ee:	f043 0302 	orr.w	r3, r3, #2
 80106f2:	b29a      	uxth	r2, r3
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80106f8:	e7ff      	b.n	80106fa <tcp_receive+0xf0a>
 80106fa:	bf00      	nop
 80106fc:	3750      	adds	r7, #80	; 0x50
 80106fe:	46bd      	mov	sp, r7
 8010700:	bdb0      	pop	{r4, r5, r7, pc}
 8010702:	bf00      	nop
 8010704:	20008670 	.word	0x20008670
 8010708:	20008650 	.word	0x20008650
 801070c:	2000867a 	.word	0x2000867a
 8010710:	0801cee8 	.word	0x0801cee8
 8010714:	0801d290 	.word	0x0801d290
 8010718:	0801cf34 	.word	0x0801cf34

0801071c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801071c:	b480      	push	{r7}
 801071e:	b083      	sub	sp, #12
 8010720:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010722:	4b15      	ldr	r3, [pc, #84]	; (8010778 <tcp_get_next_optbyte+0x5c>)
 8010724:	881b      	ldrh	r3, [r3, #0]
 8010726:	1c5a      	adds	r2, r3, #1
 8010728:	b291      	uxth	r1, r2
 801072a:	4a13      	ldr	r2, [pc, #76]	; (8010778 <tcp_get_next_optbyte+0x5c>)
 801072c:	8011      	strh	r1, [r2, #0]
 801072e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010730:	4b12      	ldr	r3, [pc, #72]	; (801077c <tcp_get_next_optbyte+0x60>)
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d004      	beq.n	8010742 <tcp_get_next_optbyte+0x26>
 8010738:	4b11      	ldr	r3, [pc, #68]	; (8010780 <tcp_get_next_optbyte+0x64>)
 801073a:	881b      	ldrh	r3, [r3, #0]
 801073c:	88fa      	ldrh	r2, [r7, #6]
 801073e:	429a      	cmp	r2, r3
 8010740:	d208      	bcs.n	8010754 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010742:	4b10      	ldr	r3, [pc, #64]	; (8010784 <tcp_get_next_optbyte+0x68>)
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	3314      	adds	r3, #20
 8010748:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801074a:	88fb      	ldrh	r3, [r7, #6]
 801074c:	683a      	ldr	r2, [r7, #0]
 801074e:	4413      	add	r3, r2
 8010750:	781b      	ldrb	r3, [r3, #0]
 8010752:	e00b      	b.n	801076c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010754:	88fb      	ldrh	r3, [r7, #6]
 8010756:	b2da      	uxtb	r2, r3
 8010758:	4b09      	ldr	r3, [pc, #36]	; (8010780 <tcp_get_next_optbyte+0x64>)
 801075a:	881b      	ldrh	r3, [r3, #0]
 801075c:	b2db      	uxtb	r3, r3
 801075e:	1ad3      	subs	r3, r2, r3
 8010760:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010762:	4b06      	ldr	r3, [pc, #24]	; (801077c <tcp_get_next_optbyte+0x60>)
 8010764:	681a      	ldr	r2, [r3, #0]
 8010766:	797b      	ldrb	r3, [r7, #5]
 8010768:	4413      	add	r3, r2
 801076a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801076c:	4618      	mov	r0, r3
 801076e:	370c      	adds	r7, #12
 8010770:	46bd      	mov	sp, r7
 8010772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010776:	4770      	bx	lr
 8010778:	2000866c 	.word	0x2000866c
 801077c:	20008668 	.word	0x20008668
 8010780:	20008666 	.word	0x20008666
 8010784:	20008660 	.word	0x20008660

08010788 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b084      	sub	sp, #16
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d106      	bne.n	80107a4 <tcp_parseopt+0x1c>
 8010796:	4b31      	ldr	r3, [pc, #196]	; (801085c <tcp_parseopt+0xd4>)
 8010798:	f240 727d 	movw	r2, #1917	; 0x77d
 801079c:	4930      	ldr	r1, [pc, #192]	; (8010860 <tcp_parseopt+0xd8>)
 801079e:	4831      	ldr	r0, [pc, #196]	; (8010864 <tcp_parseopt+0xdc>)
 80107a0:	f009 fa3e 	bl	8019c20 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80107a4:	4b30      	ldr	r3, [pc, #192]	; (8010868 <tcp_parseopt+0xe0>)
 80107a6:	881b      	ldrh	r3, [r3, #0]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d053      	beq.n	8010854 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80107ac:	4b2f      	ldr	r3, [pc, #188]	; (801086c <tcp_parseopt+0xe4>)
 80107ae:	2200      	movs	r2, #0
 80107b0:	801a      	strh	r2, [r3, #0]
 80107b2:	e043      	b.n	801083c <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 80107b4:	f7ff ffb2 	bl	801071c <tcp_get_next_optbyte>
 80107b8:	4603      	mov	r3, r0
 80107ba:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80107bc:	7bfb      	ldrb	r3, [r7, #15]
 80107be:	2b01      	cmp	r3, #1
 80107c0:	d03c      	beq.n	801083c <tcp_parseopt+0xb4>
 80107c2:	2b02      	cmp	r3, #2
 80107c4:	d002      	beq.n	80107cc <tcp_parseopt+0x44>
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d03f      	beq.n	801084a <tcp_parseopt+0xc2>
 80107ca:	e026      	b.n	801081a <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80107cc:	f7ff ffa6 	bl	801071c <tcp_get_next_optbyte>
 80107d0:	4603      	mov	r3, r0
 80107d2:	2b04      	cmp	r3, #4
 80107d4:	d13b      	bne.n	801084e <tcp_parseopt+0xc6>
 80107d6:	4b25      	ldr	r3, [pc, #148]	; (801086c <tcp_parseopt+0xe4>)
 80107d8:	881b      	ldrh	r3, [r3, #0]
 80107da:	3302      	adds	r3, #2
 80107dc:	4a22      	ldr	r2, [pc, #136]	; (8010868 <tcp_parseopt+0xe0>)
 80107de:	8812      	ldrh	r2, [r2, #0]
 80107e0:	4293      	cmp	r3, r2
 80107e2:	dc34      	bgt.n	801084e <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80107e4:	f7ff ff9a 	bl	801071c <tcp_get_next_optbyte>
 80107e8:	4603      	mov	r3, r0
 80107ea:	b29b      	uxth	r3, r3
 80107ec:	021b      	lsls	r3, r3, #8
 80107ee:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80107f0:	f7ff ff94 	bl	801071c <tcp_get_next_optbyte>
 80107f4:	4603      	mov	r3, r0
 80107f6:	b29a      	uxth	r2, r3
 80107f8:	89bb      	ldrh	r3, [r7, #12]
 80107fa:	4313      	orrs	r3, r2
 80107fc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80107fe:	89bb      	ldrh	r3, [r7, #12]
 8010800:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010804:	d804      	bhi.n	8010810 <tcp_parseopt+0x88>
 8010806:	89bb      	ldrh	r3, [r7, #12]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d001      	beq.n	8010810 <tcp_parseopt+0x88>
 801080c:	89ba      	ldrh	r2, [r7, #12]
 801080e:	e001      	b.n	8010814 <tcp_parseopt+0x8c>
 8010810:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010818:	e010      	b.n	801083c <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801081a:	f7ff ff7f 	bl	801071c <tcp_get_next_optbyte>
 801081e:	4603      	mov	r3, r0
 8010820:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010822:	7afb      	ldrb	r3, [r7, #11]
 8010824:	2b01      	cmp	r3, #1
 8010826:	d914      	bls.n	8010852 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010828:	7afb      	ldrb	r3, [r7, #11]
 801082a:	b29a      	uxth	r2, r3
 801082c:	4b0f      	ldr	r3, [pc, #60]	; (801086c <tcp_parseopt+0xe4>)
 801082e:	881b      	ldrh	r3, [r3, #0]
 8010830:	4413      	add	r3, r2
 8010832:	b29b      	uxth	r3, r3
 8010834:	3b02      	subs	r3, #2
 8010836:	b29a      	uxth	r2, r3
 8010838:	4b0c      	ldr	r3, [pc, #48]	; (801086c <tcp_parseopt+0xe4>)
 801083a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801083c:	4b0b      	ldr	r3, [pc, #44]	; (801086c <tcp_parseopt+0xe4>)
 801083e:	881a      	ldrh	r2, [r3, #0]
 8010840:	4b09      	ldr	r3, [pc, #36]	; (8010868 <tcp_parseopt+0xe0>)
 8010842:	881b      	ldrh	r3, [r3, #0]
 8010844:	429a      	cmp	r2, r3
 8010846:	d3b5      	bcc.n	80107b4 <tcp_parseopt+0x2c>
 8010848:	e004      	b.n	8010854 <tcp_parseopt+0xcc>
          return;
 801084a:	bf00      	nop
 801084c:	e002      	b.n	8010854 <tcp_parseopt+0xcc>
            return;
 801084e:	bf00      	nop
 8010850:	e000      	b.n	8010854 <tcp_parseopt+0xcc>
            return;
 8010852:	bf00      	nop
      }
    }
  }
}
 8010854:	3710      	adds	r7, #16
 8010856:	46bd      	mov	sp, r7
 8010858:	bd80      	pop	{r7, pc}
 801085a:	bf00      	nop
 801085c:	0801cee8 	.word	0x0801cee8
 8010860:	0801d34c 	.word	0x0801d34c
 8010864:	0801cf34 	.word	0x0801cf34
 8010868:	20008664 	.word	0x20008664
 801086c:	2000866c 	.word	0x2000866c

08010870 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010870:	b480      	push	{r7}
 8010872:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010874:	4b05      	ldr	r3, [pc, #20]	; (801088c <tcp_trigger_input_pcb_close+0x1c>)
 8010876:	781b      	ldrb	r3, [r3, #0]
 8010878:	f043 0310 	orr.w	r3, r3, #16
 801087c:	b2da      	uxtb	r2, r3
 801087e:	4b03      	ldr	r3, [pc, #12]	; (801088c <tcp_trigger_input_pcb_close+0x1c>)
 8010880:	701a      	strb	r2, [r3, #0]
}
 8010882:	bf00      	nop
 8010884:	46bd      	mov	sp, r7
 8010886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088a:	4770      	bx	lr
 801088c:	2000867d 	.word	0x2000867d

08010890 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b084      	sub	sp, #16
 8010894:	af00      	add	r7, sp, #0
 8010896:	60f8      	str	r0, [r7, #12]
 8010898:	60b9      	str	r1, [r7, #8]
 801089a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d00a      	beq.n	80108b8 <tcp_route+0x28>
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	7a1b      	ldrb	r3, [r3, #8]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d006      	beq.n	80108b8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	7a1b      	ldrb	r3, [r3, #8]
 80108ae:	4618      	mov	r0, r3
 80108b0:	f7fb f86e 	bl	800b990 <netif_get_by_index>
 80108b4:	4603      	mov	r3, r0
 80108b6:	e003      	b.n	80108c0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f005 fd85 	bl	80163c8 <ip4_route>
 80108be:	4603      	mov	r3, r0
  }
}
 80108c0:	4618      	mov	r0, r3
 80108c2:	3710      	adds	r7, #16
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}

080108c8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80108c8:	b590      	push	{r4, r7, lr}
 80108ca:	b087      	sub	sp, #28
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	60f8      	str	r0, [r7, #12]
 80108d0:	60b9      	str	r1, [r7, #8]
 80108d2:	603b      	str	r3, [r7, #0]
 80108d4:	4613      	mov	r3, r2
 80108d6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d105      	bne.n	80108ea <tcp_create_segment+0x22>
 80108de:	4b44      	ldr	r3, [pc, #272]	; (80109f0 <tcp_create_segment+0x128>)
 80108e0:	22a3      	movs	r2, #163	; 0xa3
 80108e2:	4944      	ldr	r1, [pc, #272]	; (80109f4 <tcp_create_segment+0x12c>)
 80108e4:	4844      	ldr	r0, [pc, #272]	; (80109f8 <tcp_create_segment+0x130>)
 80108e6:	f009 f99b 	bl	8019c20 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80108ea:	68bb      	ldr	r3, [r7, #8]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d105      	bne.n	80108fc <tcp_create_segment+0x34>
 80108f0:	4b3f      	ldr	r3, [pc, #252]	; (80109f0 <tcp_create_segment+0x128>)
 80108f2:	22a4      	movs	r2, #164	; 0xa4
 80108f4:	4941      	ldr	r1, [pc, #260]	; (80109fc <tcp_create_segment+0x134>)
 80108f6:	4840      	ldr	r0, [pc, #256]	; (80109f8 <tcp_create_segment+0x130>)
 80108f8:	f009 f992 	bl	8019c20 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80108fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010900:	009b      	lsls	r3, r3, #2
 8010902:	b2db      	uxtb	r3, r3
 8010904:	f003 0304 	and.w	r3, r3, #4
 8010908:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801090a:	2003      	movs	r0, #3
 801090c:	f7fa fccc 	bl	800b2a8 <memp_malloc>
 8010910:	6138      	str	r0, [r7, #16]
 8010912:	693b      	ldr	r3, [r7, #16]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d104      	bne.n	8010922 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010918:	68b8      	ldr	r0, [r7, #8]
 801091a:	f7fb fbf5 	bl	800c108 <pbuf_free>
    return NULL;
 801091e:	2300      	movs	r3, #0
 8010920:	e061      	b.n	80109e6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010922:	693b      	ldr	r3, [r7, #16]
 8010924:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010928:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801092a:	693b      	ldr	r3, [r7, #16]
 801092c:	2200      	movs	r2, #0
 801092e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010930:	693b      	ldr	r3, [r7, #16]
 8010932:	68ba      	ldr	r2, [r7, #8]
 8010934:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010936:	68bb      	ldr	r3, [r7, #8]
 8010938:	891a      	ldrh	r2, [r3, #8]
 801093a:	7dfb      	ldrb	r3, [r7, #23]
 801093c:	b29b      	uxth	r3, r3
 801093e:	429a      	cmp	r2, r3
 8010940:	d205      	bcs.n	801094e <tcp_create_segment+0x86>
 8010942:	4b2b      	ldr	r3, [pc, #172]	; (80109f0 <tcp_create_segment+0x128>)
 8010944:	22b0      	movs	r2, #176	; 0xb0
 8010946:	492e      	ldr	r1, [pc, #184]	; (8010a00 <tcp_create_segment+0x138>)
 8010948:	482b      	ldr	r0, [pc, #172]	; (80109f8 <tcp_create_segment+0x130>)
 801094a:	f009 f969 	bl	8019c20 <iprintf>
  seg->len = p->tot_len - optlen;
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	891a      	ldrh	r2, [r3, #8]
 8010952:	7dfb      	ldrb	r3, [r7, #23]
 8010954:	b29b      	uxth	r3, r3
 8010956:	1ad3      	subs	r3, r2, r3
 8010958:	b29a      	uxth	r2, r3
 801095a:	693b      	ldr	r3, [r7, #16]
 801095c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801095e:	2114      	movs	r1, #20
 8010960:	68b8      	ldr	r0, [r7, #8]
 8010962:	f7fb fb09 	bl	800bf78 <pbuf_add_header>
 8010966:	4603      	mov	r3, r0
 8010968:	2b00      	cmp	r3, #0
 801096a:	d004      	beq.n	8010976 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801096c:	6938      	ldr	r0, [r7, #16]
 801096e:	f7fd f807 	bl	800d980 <tcp_seg_free>
    return NULL;
 8010972:	2300      	movs	r3, #0
 8010974:	e037      	b.n	80109e6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010976:	693b      	ldr	r3, [r7, #16]
 8010978:	685b      	ldr	r3, [r3, #4]
 801097a:	685a      	ldr	r2, [r3, #4]
 801097c:	693b      	ldr	r3, [r7, #16]
 801097e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	8ada      	ldrh	r2, [r3, #22]
 8010984:	693b      	ldr	r3, [r7, #16]
 8010986:	68dc      	ldr	r4, [r3, #12]
 8010988:	4610      	mov	r0, r2
 801098a:	f7f9 ffd7 	bl	800a93c <lwip_htons>
 801098e:	4603      	mov	r3, r0
 8010990:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	8b1a      	ldrh	r2, [r3, #24]
 8010996:	693b      	ldr	r3, [r7, #16]
 8010998:	68dc      	ldr	r4, [r3, #12]
 801099a:	4610      	mov	r0, r2
 801099c:	f7f9 ffce 	bl	800a93c <lwip_htons>
 80109a0:	4603      	mov	r3, r0
 80109a2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80109a4:	693b      	ldr	r3, [r7, #16]
 80109a6:	68dc      	ldr	r4, [r3, #12]
 80109a8:	6838      	ldr	r0, [r7, #0]
 80109aa:	f7f9 ffdc 	bl	800a966 <lwip_htonl>
 80109ae:	4603      	mov	r3, r0
 80109b0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80109b2:	7dfb      	ldrb	r3, [r7, #23]
 80109b4:	089b      	lsrs	r3, r3, #2
 80109b6:	b2db      	uxtb	r3, r3
 80109b8:	b29b      	uxth	r3, r3
 80109ba:	3305      	adds	r3, #5
 80109bc:	b29b      	uxth	r3, r3
 80109be:	031b      	lsls	r3, r3, #12
 80109c0:	b29a      	uxth	r2, r3
 80109c2:	79fb      	ldrb	r3, [r7, #7]
 80109c4:	b29b      	uxth	r3, r3
 80109c6:	4313      	orrs	r3, r2
 80109c8:	b29a      	uxth	r2, r3
 80109ca:	693b      	ldr	r3, [r7, #16]
 80109cc:	68dc      	ldr	r4, [r3, #12]
 80109ce:	4610      	mov	r0, r2
 80109d0:	f7f9 ffb4 	bl	800a93c <lwip_htons>
 80109d4:	4603      	mov	r3, r0
 80109d6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80109d8:	693b      	ldr	r3, [r7, #16]
 80109da:	68db      	ldr	r3, [r3, #12]
 80109dc:	2200      	movs	r2, #0
 80109de:	749a      	strb	r2, [r3, #18]
 80109e0:	2200      	movs	r2, #0
 80109e2:	74da      	strb	r2, [r3, #19]
  return seg;
 80109e4:	693b      	ldr	r3, [r7, #16]
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	371c      	adds	r7, #28
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd90      	pop	{r4, r7, pc}
 80109ee:	bf00      	nop
 80109f0:	0801d368 	.word	0x0801d368
 80109f4:	0801d39c 	.word	0x0801d39c
 80109f8:	0801d3bc 	.word	0x0801d3bc
 80109fc:	0801d3e4 	.word	0x0801d3e4
 8010a00:	0801d408 	.word	0x0801d408

08010a04 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b086      	sub	sp, #24
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	607b      	str	r3, [r7, #4]
 8010a0c:	4603      	mov	r3, r0
 8010a0e:	73fb      	strb	r3, [r7, #15]
 8010a10:	460b      	mov	r3, r1
 8010a12:	81bb      	strh	r3, [r7, #12]
 8010a14:	4613      	mov	r3, r2
 8010a16:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010a18:	89bb      	ldrh	r3, [r7, #12]
 8010a1a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d105      	bne.n	8010a2e <tcp_pbuf_prealloc+0x2a>
 8010a22:	4b30      	ldr	r3, [pc, #192]	; (8010ae4 <tcp_pbuf_prealloc+0xe0>)
 8010a24:	22e8      	movs	r2, #232	; 0xe8
 8010a26:	4930      	ldr	r1, [pc, #192]	; (8010ae8 <tcp_pbuf_prealloc+0xe4>)
 8010a28:	4830      	ldr	r0, [pc, #192]	; (8010aec <tcp_pbuf_prealloc+0xe8>)
 8010a2a:	f009 f8f9 	bl	8019c20 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8010a2e:	6a3b      	ldr	r3, [r7, #32]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d105      	bne.n	8010a40 <tcp_pbuf_prealloc+0x3c>
 8010a34:	4b2b      	ldr	r3, [pc, #172]	; (8010ae4 <tcp_pbuf_prealloc+0xe0>)
 8010a36:	22e9      	movs	r2, #233	; 0xe9
 8010a38:	492d      	ldr	r1, [pc, #180]	; (8010af0 <tcp_pbuf_prealloc+0xec>)
 8010a3a:	482c      	ldr	r0, [pc, #176]	; (8010aec <tcp_pbuf_prealloc+0xe8>)
 8010a3c:	f009 f8f0 	bl	8019c20 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010a40:	89ba      	ldrh	r2, [r7, #12]
 8010a42:	897b      	ldrh	r3, [r7, #10]
 8010a44:	429a      	cmp	r2, r3
 8010a46:	d221      	bcs.n	8010a8c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010a48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010a4c:	f003 0302 	and.w	r3, r3, #2
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d111      	bne.n	8010a78 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010a54:	6a3b      	ldr	r3, [r7, #32]
 8010a56:	8b5b      	ldrh	r3, [r3, #26]
 8010a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d115      	bne.n	8010a8c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010a60:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d007      	beq.n	8010a78 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010a68:	6a3b      	ldr	r3, [r7, #32]
 8010a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d103      	bne.n	8010a78 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8010a70:	6a3b      	ldr	r3, [r7, #32]
 8010a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d009      	beq.n	8010a8c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010a78:	89bb      	ldrh	r3, [r7, #12]
 8010a7a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8010a7e:	f023 0203 	bic.w	r2, r3, #3
 8010a82:	897b      	ldrh	r3, [r7, #10]
 8010a84:	4293      	cmp	r3, r2
 8010a86:	bf28      	it	cs
 8010a88:	4613      	movcs	r3, r2
 8010a8a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010a8c:	8af9      	ldrh	r1, [r7, #22]
 8010a8e:	7bfb      	ldrb	r3, [r7, #15]
 8010a90:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010a94:	4618      	mov	r0, r3
 8010a96:	f7fb f825 	bl	800bae4 <pbuf_alloc>
 8010a9a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010a9c:	693b      	ldr	r3, [r7, #16]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d101      	bne.n	8010aa6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	e019      	b.n	8010ada <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010aa6:	693b      	ldr	r3, [r7, #16]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d006      	beq.n	8010abc <tcp_pbuf_prealloc+0xb8>
 8010aae:	4b0d      	ldr	r3, [pc, #52]	; (8010ae4 <tcp_pbuf_prealloc+0xe0>)
 8010ab0:	f240 120b 	movw	r2, #267	; 0x10b
 8010ab4:	490f      	ldr	r1, [pc, #60]	; (8010af4 <tcp_pbuf_prealloc+0xf0>)
 8010ab6:	480d      	ldr	r0, [pc, #52]	; (8010aec <tcp_pbuf_prealloc+0xe8>)
 8010ab8:	f009 f8b2 	bl	8019c20 <iprintf>
  *oversize = p->len - length;
 8010abc:	693b      	ldr	r3, [r7, #16]
 8010abe:	895a      	ldrh	r2, [r3, #10]
 8010ac0:	89bb      	ldrh	r3, [r7, #12]
 8010ac2:	1ad3      	subs	r3, r2, r3
 8010ac4:	b29a      	uxth	r2, r3
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010aca:	693b      	ldr	r3, [r7, #16]
 8010acc:	89ba      	ldrh	r2, [r7, #12]
 8010ace:	811a      	strh	r2, [r3, #8]
 8010ad0:	693b      	ldr	r3, [r7, #16]
 8010ad2:	891a      	ldrh	r2, [r3, #8]
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	815a      	strh	r2, [r3, #10]
  return p;
 8010ad8:	693b      	ldr	r3, [r7, #16]
}
 8010ada:	4618      	mov	r0, r3
 8010adc:	3718      	adds	r7, #24
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}
 8010ae2:	bf00      	nop
 8010ae4:	0801d368 	.word	0x0801d368
 8010ae8:	0801d420 	.word	0x0801d420
 8010aec:	0801d3bc 	.word	0x0801d3bc
 8010af0:	0801d444 	.word	0x0801d444
 8010af4:	0801d464 	.word	0x0801d464

08010af8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b082      	sub	sp, #8
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
 8010b00:	460b      	mov	r3, r1
 8010b02:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d106      	bne.n	8010b18 <tcp_write_checks+0x20>
 8010b0a:	4b33      	ldr	r3, [pc, #204]	; (8010bd8 <tcp_write_checks+0xe0>)
 8010b0c:	f240 1233 	movw	r2, #307	; 0x133
 8010b10:	4932      	ldr	r1, [pc, #200]	; (8010bdc <tcp_write_checks+0xe4>)
 8010b12:	4833      	ldr	r0, [pc, #204]	; (8010be0 <tcp_write_checks+0xe8>)
 8010b14:	f009 f884 	bl	8019c20 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	7d1b      	ldrb	r3, [r3, #20]
 8010b1c:	2b04      	cmp	r3, #4
 8010b1e:	d00e      	beq.n	8010b3e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010b24:	2b07      	cmp	r3, #7
 8010b26:	d00a      	beq.n	8010b3e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010b2c:	2b02      	cmp	r3, #2
 8010b2e:	d006      	beq.n	8010b3e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010b34:	2b03      	cmp	r3, #3
 8010b36:	d002      	beq.n	8010b3e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010b38:	f06f 030a 	mvn.w	r3, #10
 8010b3c:	e048      	b.n	8010bd0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8010b3e:	887b      	ldrh	r3, [r7, #2]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d101      	bne.n	8010b48 <tcp_write_checks+0x50>
    return ERR_OK;
 8010b44:	2300      	movs	r3, #0
 8010b46:	e043      	b.n	8010bd0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010b4e:	887a      	ldrh	r2, [r7, #2]
 8010b50:	429a      	cmp	r2, r3
 8010b52:	d909      	bls.n	8010b68 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	8b5b      	ldrh	r3, [r3, #26]
 8010b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b5c:	b29a      	uxth	r2, r3
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010b62:	f04f 33ff 	mov.w	r3, #4294967295
 8010b66:	e033      	b.n	8010bd0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b6e:	2b08      	cmp	r3, #8
 8010b70:	d909      	bls.n	8010b86 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	8b5b      	ldrh	r3, [r3, #26]
 8010b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b7a:	b29a      	uxth	r2, r3
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010b80:	f04f 33ff 	mov.w	r3, #4294967295
 8010b84:	e024      	b.n	8010bd0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d00f      	beq.n	8010bb0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d11a      	bne.n	8010bce <tcp_write_checks+0xd6>
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d116      	bne.n	8010bce <tcp_write_checks+0xd6>
 8010ba0:	4b0d      	ldr	r3, [pc, #52]	; (8010bd8 <tcp_write_checks+0xe0>)
 8010ba2:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8010ba6:	490f      	ldr	r1, [pc, #60]	; (8010be4 <tcp_write_checks+0xec>)
 8010ba8:	480d      	ldr	r0, [pc, #52]	; (8010be0 <tcp_write_checks+0xe8>)
 8010baa:	f009 f839 	bl	8019c20 <iprintf>
 8010bae:	e00e      	b.n	8010bce <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d103      	bne.n	8010bc0 <tcp_write_checks+0xc8>
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d006      	beq.n	8010bce <tcp_write_checks+0xd6>
 8010bc0:	4b05      	ldr	r3, [pc, #20]	; (8010bd8 <tcp_write_checks+0xe0>)
 8010bc2:	f240 1259 	movw	r2, #345	; 0x159
 8010bc6:	4908      	ldr	r1, [pc, #32]	; (8010be8 <tcp_write_checks+0xf0>)
 8010bc8:	4805      	ldr	r0, [pc, #20]	; (8010be0 <tcp_write_checks+0xe8>)
 8010bca:	f009 f829 	bl	8019c20 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010bce:	2300      	movs	r3, #0
}
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	3708      	adds	r7, #8
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	bd80      	pop	{r7, pc}
 8010bd8:	0801d368 	.word	0x0801d368
 8010bdc:	0801d478 	.word	0x0801d478
 8010be0:	0801d3bc 	.word	0x0801d3bc
 8010be4:	0801d498 	.word	0x0801d498
 8010be8:	0801d4d4 	.word	0x0801d4d4

08010bec <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010bec:	b590      	push	{r4, r7, lr}
 8010bee:	b09b      	sub	sp, #108	; 0x6c
 8010bf0:	af04      	add	r7, sp, #16
 8010bf2:	60f8      	str	r0, [r7, #12]
 8010bf4:	60b9      	str	r1, [r7, #8]
 8010bf6:	4611      	mov	r1, r2
 8010bf8:	461a      	mov	r2, r3
 8010bfa:	460b      	mov	r3, r1
 8010bfc:	80fb      	strh	r3, [r7, #6]
 8010bfe:	4613      	mov	r3, r2
 8010c00:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010c02:	2300      	movs	r3, #0
 8010c04:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010c06:	2300      	movs	r3, #0
 8010c08:	653b      	str	r3, [r7, #80]	; 0x50
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010c0e:	2300      	movs	r3, #0
 8010c10:	64bb      	str	r3, [r7, #72]	; 0x48
 8010c12:	2300      	movs	r3, #0
 8010c14:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010c16:	2300      	movs	r3, #0
 8010c18:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010c22:	2300      	movs	r3, #0
 8010c24:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010c26:	2300      	movs	r3, #0
 8010c28:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d109      	bne.n	8010c48 <tcp_write+0x5c>
 8010c34:	4ba5      	ldr	r3, [pc, #660]	; (8010ecc <tcp_write+0x2e0>)
 8010c36:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8010c3a:	49a5      	ldr	r1, [pc, #660]	; (8010ed0 <tcp_write+0x2e4>)
 8010c3c:	48a5      	ldr	r0, [pc, #660]	; (8010ed4 <tcp_write+0x2e8>)
 8010c3e:	f008 ffef 	bl	8019c20 <iprintf>
 8010c42:	f06f 030f 	mvn.w	r3, #15
 8010c46:	e32c      	b.n	80112a2 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010c4e:	085b      	lsrs	r3, r3, #1
 8010c50:	b29a      	uxth	r2, r3
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c56:	4293      	cmp	r3, r2
 8010c58:	bf28      	it	cs
 8010c5a:	4613      	movcs	r3, r2
 8010c5c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010c5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d102      	bne.n	8010c6a <tcp_write+0x7e>
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c68:	e000      	b.n	8010c6c <tcp_write+0x80>
 8010c6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c6c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d109      	bne.n	8010c88 <tcp_write+0x9c>
 8010c74:	4b95      	ldr	r3, [pc, #596]	; (8010ecc <tcp_write+0x2e0>)
 8010c76:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8010c7a:	4997      	ldr	r1, [pc, #604]	; (8010ed8 <tcp_write+0x2ec>)
 8010c7c:	4895      	ldr	r0, [pc, #596]	; (8010ed4 <tcp_write+0x2e8>)
 8010c7e:	f008 ffcf 	bl	8019c20 <iprintf>
 8010c82:	f06f 030f 	mvn.w	r3, #15
 8010c86:	e30c      	b.n	80112a2 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010c88:	88fb      	ldrh	r3, [r7, #6]
 8010c8a:	4619      	mov	r1, r3
 8010c8c:	68f8      	ldr	r0, [r7, #12]
 8010c8e:	f7ff ff33 	bl	8010af8 <tcp_write_checks>
 8010c92:	4603      	mov	r3, r0
 8010c94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010c98:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d002      	beq.n	8010ca6 <tcp_write+0xba>
    return err;
 8010ca0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010ca4:	e2fd      	b.n	80112a2 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	f000 80f7 	beq.w	8010eae <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cc4:	653b      	str	r3, [r7, #80]	; 0x50
 8010cc6:	e002      	b.n	8010cce <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d1f8      	bne.n	8010cc8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cd8:	7a9b      	ldrb	r3, [r3, #10]
 8010cda:	009b      	lsls	r3, r3, #2
 8010cdc:	b29b      	uxth	r3, r3
 8010cde:	f003 0304 	and.w	r3, r3, #4
 8010ce2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010ce4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ce8:	891b      	ldrh	r3, [r3, #8]
 8010cea:	4619      	mov	r1, r3
 8010cec:	8c3b      	ldrh	r3, [r7, #32]
 8010cee:	440b      	add	r3, r1
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	da06      	bge.n	8010d02 <tcp_write+0x116>
 8010cf4:	4b75      	ldr	r3, [pc, #468]	; (8010ecc <tcp_write+0x2e0>)
 8010cf6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010cfa:	4978      	ldr	r1, [pc, #480]	; (8010edc <tcp_write+0x2f0>)
 8010cfc:	4875      	ldr	r0, [pc, #468]	; (8010ed4 <tcp_write+0x2e8>)
 8010cfe:	f008 ff8f 	bl	8019c20 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d04:	891a      	ldrh	r2, [r3, #8]
 8010d06:	8c3b      	ldrh	r3, [r7, #32]
 8010d08:	4413      	add	r3, r2
 8010d0a:	b29b      	uxth	r3, r3
 8010d0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010d0e:	1ad3      	subs	r3, r2, r3
 8010d10:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010d18:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010d1a:	8a7b      	ldrh	r3, [r7, #18]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d027      	beq.n	8010d70 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010d20:	8a7b      	ldrh	r3, [r7, #18]
 8010d22:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010d24:	429a      	cmp	r2, r3
 8010d26:	d206      	bcs.n	8010d36 <tcp_write+0x14a>
 8010d28:	4b68      	ldr	r3, [pc, #416]	; (8010ecc <tcp_write+0x2e0>)
 8010d2a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8010d2e:	496c      	ldr	r1, [pc, #432]	; (8010ee0 <tcp_write+0x2f4>)
 8010d30:	4868      	ldr	r0, [pc, #416]	; (8010ed4 <tcp_write+0x2e8>)
 8010d32:	f008 ff75 	bl	8019c20 <iprintf>
      seg = last_unsent;
 8010d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d38:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010d3a:	8a7b      	ldrh	r3, [r7, #18]
 8010d3c:	88fa      	ldrh	r2, [r7, #6]
 8010d3e:	429a      	cmp	r2, r3
 8010d40:	d901      	bls.n	8010d46 <tcp_write+0x15a>
 8010d42:	8a7b      	ldrh	r3, [r7, #18]
 8010d44:	e000      	b.n	8010d48 <tcp_write+0x15c>
 8010d46:	88fb      	ldrh	r3, [r7, #6]
 8010d48:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010d4a:	4293      	cmp	r3, r2
 8010d4c:	bfa8      	it	ge
 8010d4e:	4613      	movge	r3, r2
 8010d50:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010d52:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d56:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010d58:	4413      	add	r3, r2
 8010d5a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8010d5e:	8a7a      	ldrh	r2, [r7, #18]
 8010d60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010d62:	1ad3      	subs	r3, r2, r3
 8010d64:	b29b      	uxth	r3, r3
 8010d66:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010d68:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010d6a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010d6c:	1ad3      	subs	r3, r2, r3
 8010d6e:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010d70:	8a7b      	ldrh	r3, [r7, #18]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d00b      	beq.n	8010d8e <tcp_write+0x1a2>
 8010d76:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d7a:	88fb      	ldrh	r3, [r7, #6]
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	d006      	beq.n	8010d8e <tcp_write+0x1a2>
 8010d80:	4b52      	ldr	r3, [pc, #328]	; (8010ecc <tcp_write+0x2e0>)
 8010d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010d86:	4957      	ldr	r1, [pc, #348]	; (8010ee4 <tcp_write+0x2f8>)
 8010d88:	4852      	ldr	r0, [pc, #328]	; (8010ed4 <tcp_write+0x2e8>)
 8010d8a:	f008 ff49 	bl	8019c20 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010d8e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d92:	88fb      	ldrh	r3, [r7, #6]
 8010d94:	429a      	cmp	r2, r3
 8010d96:	f080 8168 	bcs.w	801106a <tcp_write+0x47e>
 8010d9a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	f000 8164 	beq.w	801106a <tcp_write+0x47e>
 8010da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010da4:	891b      	ldrh	r3, [r3, #8]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	f000 815f 	beq.w	801106a <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010dac:	88fa      	ldrh	r2, [r7, #6]
 8010dae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010db2:	1ad2      	subs	r2, r2, r3
 8010db4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010db6:	4293      	cmp	r3, r2
 8010db8:	bfa8      	it	ge
 8010dba:	4613      	movge	r3, r2
 8010dbc:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dc0:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010dc2:	797b      	ldrb	r3, [r7, #5]
 8010dc4:	f003 0301 	and.w	r3, r3, #1
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d027      	beq.n	8010e1c <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010dcc:	f107 0012 	add.w	r0, r7, #18
 8010dd0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010dd2:	8bf9      	ldrh	r1, [r7, #30]
 8010dd4:	2301      	movs	r3, #1
 8010dd6:	9302      	str	r3, [sp, #8]
 8010dd8:	797b      	ldrb	r3, [r7, #5]
 8010dda:	9301      	str	r3, [sp, #4]
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	9300      	str	r3, [sp, #0]
 8010de0:	4603      	mov	r3, r0
 8010de2:	2000      	movs	r0, #0
 8010de4:	f7ff fe0e 	bl	8010a04 <tcp_pbuf_prealloc>
 8010de8:	6578      	str	r0, [r7, #84]	; 0x54
 8010dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	f000 8226 	beq.w	801123e <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010df4:	6858      	ldr	r0, [r3, #4]
 8010df6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010dfa:	68ba      	ldr	r2, [r7, #8]
 8010dfc:	4413      	add	r3, r2
 8010dfe:	8bfa      	ldrh	r2, [r7, #30]
 8010e00:	4619      	mov	r1, r3
 8010e02:	f008 fefa 	bl	8019bfa <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010e06:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010e08:	f7fb fa0c 	bl	800c224 <pbuf_clen>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	461a      	mov	r2, r3
 8010e10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010e14:	4413      	add	r3, r2
 8010e16:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010e1a:	e041      	b.n	8010ea0 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010e1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e1e:	685b      	ldr	r3, [r3, #4]
 8010e20:	637b      	str	r3, [r7, #52]	; 0x34
 8010e22:	e002      	b.n	8010e2a <tcp_write+0x23e>
 8010e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	637b      	str	r3, [r7, #52]	; 0x34
 8010e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d1f8      	bne.n	8010e24 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e34:	7b1b      	ldrb	r3, [r3, #12]
 8010e36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d115      	bne.n	8010e6a <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e40:	685b      	ldr	r3, [r3, #4]
 8010e42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e44:	8952      	ldrh	r2, [r2, #10]
 8010e46:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010e48:	68ba      	ldr	r2, [r7, #8]
 8010e4a:	429a      	cmp	r2, r3
 8010e4c:	d10d      	bne.n	8010e6a <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010e4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d006      	beq.n	8010e64 <tcp_write+0x278>
 8010e56:	4b1d      	ldr	r3, [pc, #116]	; (8010ecc <tcp_write+0x2e0>)
 8010e58:	f240 2231 	movw	r2, #561	; 0x231
 8010e5c:	4922      	ldr	r1, [pc, #136]	; (8010ee8 <tcp_write+0x2fc>)
 8010e5e:	481d      	ldr	r0, [pc, #116]	; (8010ed4 <tcp_write+0x2e8>)
 8010e60:	f008 fede 	bl	8019c20 <iprintf>
          extendlen = seglen;
 8010e64:	8bfb      	ldrh	r3, [r7, #30]
 8010e66:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010e68:	e01a      	b.n	8010ea0 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010e6a:	8bfb      	ldrh	r3, [r7, #30]
 8010e6c:	2201      	movs	r2, #1
 8010e6e:	4619      	mov	r1, r3
 8010e70:	2000      	movs	r0, #0
 8010e72:	f7fa fe37 	bl	800bae4 <pbuf_alloc>
 8010e76:	6578      	str	r0, [r7, #84]	; 0x54
 8010e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	f000 81e1 	beq.w	8011242 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8010e80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010e84:	68ba      	ldr	r2, [r7, #8]
 8010e86:	441a      	add	r2, r3
 8010e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e8a:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010e8c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010e8e:	f7fb f9c9 	bl	800c224 <pbuf_clen>
 8010e92:	4603      	mov	r3, r0
 8010e94:	461a      	mov	r2, r3
 8010e96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010e9a:	4413      	add	r3, r2
 8010e9c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8010ea0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010ea4:	8bfb      	ldrh	r3, [r7, #30]
 8010ea6:	4413      	add	r3, r2
 8010ea8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010eac:	e0dd      	b.n	801106a <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	f000 80d8 	beq.w	801106a <tcp_write+0x47e>
 8010eba:	4b04      	ldr	r3, [pc, #16]	; (8010ecc <tcp_write+0x2e0>)
 8010ebc:	f240 224b 	movw	r2, #587	; 0x24b
 8010ec0:	490a      	ldr	r1, [pc, #40]	; (8010eec <tcp_write+0x300>)
 8010ec2:	4804      	ldr	r0, [pc, #16]	; (8010ed4 <tcp_write+0x2e8>)
 8010ec4:	f008 feac 	bl	8019c20 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8010ec8:	e0cf      	b.n	801106a <tcp_write+0x47e>
 8010eca:	bf00      	nop
 8010ecc:	0801d368 	.word	0x0801d368
 8010ed0:	0801d508 	.word	0x0801d508
 8010ed4:	0801d3bc 	.word	0x0801d3bc
 8010ed8:	0801d520 	.word	0x0801d520
 8010edc:	0801d554 	.word	0x0801d554
 8010ee0:	0801d56c 	.word	0x0801d56c
 8010ee4:	0801d58c 	.word	0x0801d58c
 8010ee8:	0801d5ac 	.word	0x0801d5ac
 8010eec:	0801d5d8 	.word	0x0801d5d8
    struct pbuf *p;
    u16_t left = len - pos;
 8010ef0:	88fa      	ldrh	r2, [r7, #6]
 8010ef2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010ef6:	1ad3      	subs	r3, r2, r3
 8010ef8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8010efa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010efe:	b29b      	uxth	r3, r3
 8010f00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010f02:	1ad3      	subs	r3, r2, r3
 8010f04:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010f06:	8b7a      	ldrh	r2, [r7, #26]
 8010f08:	8bbb      	ldrh	r3, [r7, #28]
 8010f0a:	4293      	cmp	r3, r2
 8010f0c:	bf28      	it	cs
 8010f0e:	4613      	movcs	r3, r2
 8010f10:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010f12:	797b      	ldrb	r3, [r7, #5]
 8010f14:	f003 0301 	and.w	r3, r3, #1
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d036      	beq.n	8010f8a <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010f1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010f20:	b29a      	uxth	r2, r3
 8010f22:	8b3b      	ldrh	r3, [r7, #24]
 8010f24:	4413      	add	r3, r2
 8010f26:	b299      	uxth	r1, r3
 8010f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	bf0c      	ite	eq
 8010f2e:	2301      	moveq	r3, #1
 8010f30:	2300      	movne	r3, #0
 8010f32:	b2db      	uxtb	r3, r3
 8010f34:	f107 0012 	add.w	r0, r7, #18
 8010f38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010f3a:	9302      	str	r3, [sp, #8]
 8010f3c:	797b      	ldrb	r3, [r7, #5]
 8010f3e:	9301      	str	r3, [sp, #4]
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	9300      	str	r3, [sp, #0]
 8010f44:	4603      	mov	r3, r0
 8010f46:	2036      	movs	r0, #54	; 0x36
 8010f48:	f7ff fd5c 	bl	8010a04 <tcp_pbuf_prealloc>
 8010f4c:	6338      	str	r0, [r7, #48]	; 0x30
 8010f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	f000 8178 	beq.w	8011246 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8010f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f58:	895b      	ldrh	r3, [r3, #10]
 8010f5a:	8b3a      	ldrh	r2, [r7, #24]
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	d906      	bls.n	8010f6e <tcp_write+0x382>
 8010f60:	4b8c      	ldr	r3, [pc, #560]	; (8011194 <tcp_write+0x5a8>)
 8010f62:	f240 2267 	movw	r2, #615	; 0x267
 8010f66:	498c      	ldr	r1, [pc, #560]	; (8011198 <tcp_write+0x5ac>)
 8010f68:	488c      	ldr	r0, [pc, #560]	; (801119c <tcp_write+0x5b0>)
 8010f6a:	f008 fe59 	bl	8019c20 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8010f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f70:	685a      	ldr	r2, [r3, #4]
 8010f72:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010f76:	18d0      	adds	r0, r2, r3
 8010f78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f7c:	68ba      	ldr	r2, [r7, #8]
 8010f7e:	4413      	add	r3, r2
 8010f80:	8b3a      	ldrh	r2, [r7, #24]
 8010f82:	4619      	mov	r1, r3
 8010f84:	f008 fe39 	bl	8019bfa <memcpy>
 8010f88:	e02f      	b.n	8010fea <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010f8a:	8a7b      	ldrh	r3, [r7, #18]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d006      	beq.n	8010f9e <tcp_write+0x3b2>
 8010f90:	4b80      	ldr	r3, [pc, #512]	; (8011194 <tcp_write+0x5a8>)
 8010f92:	f240 2271 	movw	r2, #625	; 0x271
 8010f96:	4982      	ldr	r1, [pc, #520]	; (80111a0 <tcp_write+0x5b4>)
 8010f98:	4880      	ldr	r0, [pc, #512]	; (801119c <tcp_write+0x5b0>)
 8010f9a:	f008 fe41 	bl	8019c20 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010f9e:	8b3b      	ldrh	r3, [r7, #24]
 8010fa0:	2201      	movs	r2, #1
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	2036      	movs	r0, #54	; 0x36
 8010fa6:	f7fa fd9d 	bl	800bae4 <pbuf_alloc>
 8010faa:	6178      	str	r0, [r7, #20]
 8010fac:	697b      	ldr	r3, [r7, #20]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	f000 814b 	beq.w	801124a <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010fb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010fb8:	68ba      	ldr	r2, [r7, #8]
 8010fba:	441a      	add	r2, r3
 8010fbc:	697b      	ldr	r3, [r7, #20]
 8010fbe:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010fc0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010fc4:	b29b      	uxth	r3, r3
 8010fc6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010fca:	4619      	mov	r1, r3
 8010fcc:	2036      	movs	r0, #54	; 0x36
 8010fce:	f7fa fd89 	bl	800bae4 <pbuf_alloc>
 8010fd2:	6338      	str	r0, [r7, #48]	; 0x30
 8010fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d103      	bne.n	8010fe2 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010fda:	6978      	ldr	r0, [r7, #20]
 8010fdc:	f7fb f894 	bl	800c108 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010fe0:	e136      	b.n	8011250 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010fe2:	6979      	ldr	r1, [r7, #20]
 8010fe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010fe6:	f7fb f95d 	bl	800c2a4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010fea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010fec:	f7fb f91a 	bl	800c224 <pbuf_clen>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	461a      	mov	r2, r3
 8010ff4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010ff8:	4413      	add	r3, r2
 8010ffa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8010ffe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011002:	2b09      	cmp	r3, #9
 8011004:	d903      	bls.n	801100e <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011006:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011008:	f7fb f87e 	bl	800c108 <pbuf_free>
      goto memerr;
 801100c:	e120      	b.n	8011250 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011012:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011016:	441a      	add	r2, r3
 8011018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801101c:	9300      	str	r3, [sp, #0]
 801101e:	4613      	mov	r3, r2
 8011020:	2200      	movs	r2, #0
 8011022:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011024:	68f8      	ldr	r0, [r7, #12]
 8011026:	f7ff fc4f 	bl	80108c8 <tcp_create_segment>
 801102a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801102c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801102e:	2b00      	cmp	r3, #0
 8011030:	f000 810d 	beq.w	801124e <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011036:	2b00      	cmp	r3, #0
 8011038:	d102      	bne.n	8011040 <tcp_write+0x454>
      queue = seg;
 801103a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801103c:	647b      	str	r3, [r7, #68]	; 0x44
 801103e:	e00c      	b.n	801105a <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011042:	2b00      	cmp	r3, #0
 8011044:	d106      	bne.n	8011054 <tcp_write+0x468>
 8011046:	4b53      	ldr	r3, [pc, #332]	; (8011194 <tcp_write+0x5a8>)
 8011048:	f240 22ab 	movw	r2, #683	; 0x2ab
 801104c:	4955      	ldr	r1, [pc, #340]	; (80111a4 <tcp_write+0x5b8>)
 801104e:	4853      	ldr	r0, [pc, #332]	; (801119c <tcp_write+0x5b0>)
 8011050:	f008 fde6 	bl	8019c20 <iprintf>
      prev_seg->next = seg;
 8011054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011056:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011058:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801105a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801105c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801105e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011062:	8b3b      	ldrh	r3, [r7, #24]
 8011064:	4413      	add	r3, r2
 8011066:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801106a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801106e:	88fb      	ldrh	r3, [r7, #6]
 8011070:	429a      	cmp	r2, r3
 8011072:	f4ff af3d 	bcc.w	8010ef0 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011076:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011078:	2b00      	cmp	r3, #0
 801107a:	d02c      	beq.n	80110d6 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801107c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801107e:	685b      	ldr	r3, [r3, #4]
 8011080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011082:	e01e      	b.n	80110c2 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8011084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011086:	891a      	ldrh	r2, [r3, #8]
 8011088:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801108a:	4413      	add	r3, r2
 801108c:	b29a      	uxth	r2, r3
 801108e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011090:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d110      	bne.n	80110bc <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801109a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801109c:	685b      	ldr	r3, [r3, #4]
 801109e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110a0:	8952      	ldrh	r2, [r2, #10]
 80110a2:	4413      	add	r3, r2
 80110a4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80110a6:	68b9      	ldr	r1, [r7, #8]
 80110a8:	4618      	mov	r0, r3
 80110aa:	f008 fda6 	bl	8019bfa <memcpy>
        p->len += oversize_used;
 80110ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b0:	895a      	ldrh	r2, [r3, #10]
 80110b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80110b4:	4413      	add	r3, r2
 80110b6:	b29a      	uxth	r2, r3
 80110b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ba:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80110bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80110c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d1dd      	bne.n	8011084 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 80110c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110ca:	891a      	ldrh	r2, [r3, #8]
 80110cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80110ce:	4413      	add	r3, r2
 80110d0:	b29a      	uxth	r2, r3
 80110d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110d4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80110d6:	8a7a      	ldrh	r2, [r7, #18]
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80110de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d018      	beq.n	8011116 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80110e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d106      	bne.n	80110f8 <tcp_write+0x50c>
 80110ea:	4b2a      	ldr	r3, [pc, #168]	; (8011194 <tcp_write+0x5a8>)
 80110ec:	f240 22e1 	movw	r2, #737	; 0x2e1
 80110f0:	492d      	ldr	r1, [pc, #180]	; (80111a8 <tcp_write+0x5bc>)
 80110f2:	482a      	ldr	r0, [pc, #168]	; (801119c <tcp_write+0x5b0>)
 80110f4:	f008 fd94 	bl	8019c20 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80110f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110fa:	685b      	ldr	r3, [r3, #4]
 80110fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80110fe:	4618      	mov	r0, r3
 8011100:	f7fb f8d0 	bl	800c2a4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011106:	891a      	ldrh	r2, [r3, #8]
 8011108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801110a:	891b      	ldrh	r3, [r3, #8]
 801110c:	4413      	add	r3, r2
 801110e:	b29a      	uxth	r2, r3
 8011110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011112:	811a      	strh	r2, [r3, #8]
 8011114:	e037      	b.n	8011186 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 8011116:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011118:	2b00      	cmp	r3, #0
 801111a:	d034      	beq.n	8011186 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801111c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801111e:	2b00      	cmp	r3, #0
 8011120:	d003      	beq.n	801112a <tcp_write+0x53e>
 8011122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011124:	685b      	ldr	r3, [r3, #4]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d106      	bne.n	8011138 <tcp_write+0x54c>
 801112a:	4b1a      	ldr	r3, [pc, #104]	; (8011194 <tcp_write+0x5a8>)
 801112c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8011130:	491e      	ldr	r1, [pc, #120]	; (80111ac <tcp_write+0x5c0>)
 8011132:	481a      	ldr	r0, [pc, #104]	; (801119c <tcp_write+0x5b0>)
 8011134:	f008 fd74 	bl	8019c20 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801113a:	685b      	ldr	r3, [r3, #4]
 801113c:	62bb      	str	r3, [r7, #40]	; 0x28
 801113e:	e009      	b.n	8011154 <tcp_write+0x568>
      p->tot_len += extendlen;
 8011140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011142:	891a      	ldrh	r2, [r3, #8]
 8011144:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011146:	4413      	add	r3, r2
 8011148:	b29a      	uxth	r2, r3
 801114a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801114c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801114e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	62bb      	str	r3, [r7, #40]	; 0x28
 8011154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d1f1      	bne.n	8011140 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 801115c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801115e:	891a      	ldrh	r2, [r3, #8]
 8011160:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011162:	4413      	add	r3, r2
 8011164:	b29a      	uxth	r2, r3
 8011166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011168:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801116a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801116c:	895a      	ldrh	r2, [r3, #10]
 801116e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011170:	4413      	add	r3, r2
 8011172:	b29a      	uxth	r2, r3
 8011174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011176:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801117a:	891a      	ldrh	r2, [r3, #8]
 801117c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801117e:	4413      	add	r3, r2
 8011180:	b29a      	uxth	r2, r3
 8011182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011184:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011188:	2b00      	cmp	r3, #0
 801118a:	d111      	bne.n	80111b0 <tcp_write+0x5c4>
    pcb->unsent = queue;
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011190:	66da      	str	r2, [r3, #108]	; 0x6c
 8011192:	e010      	b.n	80111b6 <tcp_write+0x5ca>
 8011194:	0801d368 	.word	0x0801d368
 8011198:	0801d608 	.word	0x0801d608
 801119c:	0801d3bc 	.word	0x0801d3bc
 80111a0:	0801d648 	.word	0x0801d648
 80111a4:	0801d658 	.word	0x0801d658
 80111a8:	0801d66c 	.word	0x0801d66c
 80111ac:	0801d6a4 	.word	0x0801d6a4
  } else {
    last_unsent->next = queue;
 80111b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80111b4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80111ba:	88fb      	ldrh	r3, [r7, #6]
 80111bc:	441a      	add	r2, r3
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80111c8:	88fb      	ldrh	r3, [r7, #6]
 80111ca:	1ad3      	subs	r3, r2, r3
 80111cc:	b29a      	uxth	r2, r3
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80111da:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d00e      	beq.n	8011206 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d10a      	bne.n	8011206 <tcp_write+0x61a>
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d106      	bne.n	8011206 <tcp_write+0x61a>
 80111f8:	4b2c      	ldr	r3, [pc, #176]	; (80112ac <tcp_write+0x6c0>)
 80111fa:	f240 3213 	movw	r2, #787	; 0x313
 80111fe:	492c      	ldr	r1, [pc, #176]	; (80112b0 <tcp_write+0x6c4>)
 8011200:	482c      	ldr	r0, [pc, #176]	; (80112b4 <tcp_write+0x6c8>)
 8011202:	f008 fd0d 	bl	8019c20 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011208:	2b00      	cmp	r3, #0
 801120a:	d016      	beq.n	801123a <tcp_write+0x64e>
 801120c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801120e:	68db      	ldr	r3, [r3, #12]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d012      	beq.n	801123a <tcp_write+0x64e>
 8011214:	797b      	ldrb	r3, [r7, #5]
 8011216:	f003 0302 	and.w	r3, r3, #2
 801121a:	2b00      	cmp	r3, #0
 801121c:	d10d      	bne.n	801123a <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801121e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011220:	68db      	ldr	r3, [r3, #12]
 8011222:	899b      	ldrh	r3, [r3, #12]
 8011224:	b29c      	uxth	r4, r3
 8011226:	2008      	movs	r0, #8
 8011228:	f7f9 fb88 	bl	800a93c <lwip_htons>
 801122c:	4603      	mov	r3, r0
 801122e:	461a      	mov	r2, r3
 8011230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011232:	68db      	ldr	r3, [r3, #12]
 8011234:	4322      	orrs	r2, r4
 8011236:	b292      	uxth	r2, r2
 8011238:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801123a:	2300      	movs	r3, #0
 801123c:	e031      	b.n	80112a2 <tcp_write+0x6b6>
          goto memerr;
 801123e:	bf00      	nop
 8011240:	e006      	b.n	8011250 <tcp_write+0x664>
            goto memerr;
 8011242:	bf00      	nop
 8011244:	e004      	b.n	8011250 <tcp_write+0x664>
        goto memerr;
 8011246:	bf00      	nop
 8011248:	e002      	b.n	8011250 <tcp_write+0x664>
        goto memerr;
 801124a:	bf00      	nop
 801124c:	e000      	b.n	8011250 <tcp_write+0x664>
      goto memerr;
 801124e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	8b5b      	ldrh	r3, [r3, #26]
 8011254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011258:	b29a      	uxth	r2, r3
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801125e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011260:	2b00      	cmp	r3, #0
 8011262:	d002      	beq.n	801126a <tcp_write+0x67e>
    pbuf_free(concat_p);
 8011264:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011266:	f7fa ff4f 	bl	800c108 <pbuf_free>
  }
  if (queue != NULL) {
 801126a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801126c:	2b00      	cmp	r3, #0
 801126e:	d002      	beq.n	8011276 <tcp_write+0x68a>
    tcp_segs_free(queue);
 8011270:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011272:	f7fc fb71 	bl	800d958 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801127c:	2b00      	cmp	r3, #0
 801127e:	d00e      	beq.n	801129e <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011284:	2b00      	cmp	r3, #0
 8011286:	d10a      	bne.n	801129e <tcp_write+0x6b2>
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801128c:	2b00      	cmp	r3, #0
 801128e:	d106      	bne.n	801129e <tcp_write+0x6b2>
 8011290:	4b06      	ldr	r3, [pc, #24]	; (80112ac <tcp_write+0x6c0>)
 8011292:	f44f 724a 	mov.w	r2, #808	; 0x328
 8011296:	4906      	ldr	r1, [pc, #24]	; (80112b0 <tcp_write+0x6c4>)
 8011298:	4806      	ldr	r0, [pc, #24]	; (80112b4 <tcp_write+0x6c8>)
 801129a:	f008 fcc1 	bl	8019c20 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801129e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80112a2:	4618      	mov	r0, r3
 80112a4:	375c      	adds	r7, #92	; 0x5c
 80112a6:	46bd      	mov	sp, r7
 80112a8:	bd90      	pop	{r4, r7, pc}
 80112aa:	bf00      	nop
 80112ac:	0801d368 	.word	0x0801d368
 80112b0:	0801d6dc 	.word	0x0801d6dc
 80112b4:	0801d3bc 	.word	0x0801d3bc

080112b8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80112b8:	b590      	push	{r4, r7, lr}
 80112ba:	b08b      	sub	sp, #44	; 0x2c
 80112bc:	af02      	add	r7, sp, #8
 80112be:	6078      	str	r0, [r7, #4]
 80112c0:	460b      	mov	r3, r1
 80112c2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80112c4:	2300      	movs	r3, #0
 80112c6:	61fb      	str	r3, [r7, #28]
 80112c8:	2300      	movs	r3, #0
 80112ca:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80112cc:	2300      	movs	r3, #0
 80112ce:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d106      	bne.n	80112e4 <tcp_split_unsent_seg+0x2c>
 80112d6:	4b95      	ldr	r3, [pc, #596]	; (801152c <tcp_split_unsent_seg+0x274>)
 80112d8:	f240 324b 	movw	r2, #843	; 0x34b
 80112dc:	4994      	ldr	r1, [pc, #592]	; (8011530 <tcp_split_unsent_seg+0x278>)
 80112de:	4895      	ldr	r0, [pc, #596]	; (8011534 <tcp_split_unsent_seg+0x27c>)
 80112e0:	f008 fc9e 	bl	8019c20 <iprintf>

  useg = pcb->unsent;
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112e8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d102      	bne.n	80112f6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80112f0:	f04f 33ff 	mov.w	r3, #4294967295
 80112f4:	e116      	b.n	8011524 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80112f6:	887b      	ldrh	r3, [r7, #2]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d109      	bne.n	8011310 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80112fc:	4b8b      	ldr	r3, [pc, #556]	; (801152c <tcp_split_unsent_seg+0x274>)
 80112fe:	f240 3253 	movw	r2, #851	; 0x353
 8011302:	498d      	ldr	r1, [pc, #564]	; (8011538 <tcp_split_unsent_seg+0x280>)
 8011304:	488b      	ldr	r0, [pc, #556]	; (8011534 <tcp_split_unsent_seg+0x27c>)
 8011306:	f008 fc8b 	bl	8019c20 <iprintf>
    return ERR_VAL;
 801130a:	f06f 0305 	mvn.w	r3, #5
 801130e:	e109      	b.n	8011524 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011310:	697b      	ldr	r3, [r7, #20]
 8011312:	891b      	ldrh	r3, [r3, #8]
 8011314:	887a      	ldrh	r2, [r7, #2]
 8011316:	429a      	cmp	r2, r3
 8011318:	d301      	bcc.n	801131e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801131a:	2300      	movs	r3, #0
 801131c:	e102      	b.n	8011524 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011322:	887a      	ldrh	r2, [r7, #2]
 8011324:	429a      	cmp	r2, r3
 8011326:	d906      	bls.n	8011336 <tcp_split_unsent_seg+0x7e>
 8011328:	4b80      	ldr	r3, [pc, #512]	; (801152c <tcp_split_unsent_seg+0x274>)
 801132a:	f240 325b 	movw	r2, #859	; 0x35b
 801132e:	4983      	ldr	r1, [pc, #524]	; (801153c <tcp_split_unsent_seg+0x284>)
 8011330:	4880      	ldr	r0, [pc, #512]	; (8011534 <tcp_split_unsent_seg+0x27c>)
 8011332:	f008 fc75 	bl	8019c20 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011336:	697b      	ldr	r3, [r7, #20]
 8011338:	891b      	ldrh	r3, [r3, #8]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d106      	bne.n	801134c <tcp_split_unsent_seg+0x94>
 801133e:	4b7b      	ldr	r3, [pc, #492]	; (801152c <tcp_split_unsent_seg+0x274>)
 8011340:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011344:	497e      	ldr	r1, [pc, #504]	; (8011540 <tcp_split_unsent_seg+0x288>)
 8011346:	487b      	ldr	r0, [pc, #492]	; (8011534 <tcp_split_unsent_seg+0x27c>)
 8011348:	f008 fc6a 	bl	8019c20 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801134c:	697b      	ldr	r3, [r7, #20]
 801134e:	7a9b      	ldrb	r3, [r3, #10]
 8011350:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011352:	7bfb      	ldrb	r3, [r7, #15]
 8011354:	009b      	lsls	r3, r3, #2
 8011356:	b2db      	uxtb	r3, r3
 8011358:	f003 0304 	and.w	r3, r3, #4
 801135c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801135e:	697b      	ldr	r3, [r7, #20]
 8011360:	891a      	ldrh	r2, [r3, #8]
 8011362:	887b      	ldrh	r3, [r7, #2]
 8011364:	1ad3      	subs	r3, r2, r3
 8011366:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011368:	7bbb      	ldrb	r3, [r7, #14]
 801136a:	b29a      	uxth	r2, r3
 801136c:	89bb      	ldrh	r3, [r7, #12]
 801136e:	4413      	add	r3, r2
 8011370:	b29b      	uxth	r3, r3
 8011372:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011376:	4619      	mov	r1, r3
 8011378:	2036      	movs	r0, #54	; 0x36
 801137a:	f7fa fbb3 	bl	800bae4 <pbuf_alloc>
 801137e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011380:	693b      	ldr	r3, [r7, #16]
 8011382:	2b00      	cmp	r3, #0
 8011384:	f000 80b7 	beq.w	80114f6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011388:	697b      	ldr	r3, [r7, #20]
 801138a:	685b      	ldr	r3, [r3, #4]
 801138c:	891a      	ldrh	r2, [r3, #8]
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	891b      	ldrh	r3, [r3, #8]
 8011392:	1ad3      	subs	r3, r2, r3
 8011394:	b29a      	uxth	r2, r3
 8011396:	887b      	ldrh	r3, [r7, #2]
 8011398:	4413      	add	r3, r2
 801139a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801139c:	697b      	ldr	r3, [r7, #20]
 801139e:	6858      	ldr	r0, [r3, #4]
 80113a0:	693b      	ldr	r3, [r7, #16]
 80113a2:	685a      	ldr	r2, [r3, #4]
 80113a4:	7bbb      	ldrb	r3, [r7, #14]
 80113a6:	18d1      	adds	r1, r2, r3
 80113a8:	897b      	ldrh	r3, [r7, #10]
 80113aa:	89ba      	ldrh	r2, [r7, #12]
 80113ac:	f7fb f8b2 	bl	800c514 <pbuf_copy_partial>
 80113b0:	4603      	mov	r3, r0
 80113b2:	461a      	mov	r2, r3
 80113b4:	89bb      	ldrh	r3, [r7, #12]
 80113b6:	4293      	cmp	r3, r2
 80113b8:	f040 809f 	bne.w	80114fa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80113bc:	697b      	ldr	r3, [r7, #20]
 80113be:	68db      	ldr	r3, [r3, #12]
 80113c0:	899b      	ldrh	r3, [r3, #12]
 80113c2:	b29b      	uxth	r3, r3
 80113c4:	4618      	mov	r0, r3
 80113c6:	f7f9 fab9 	bl	800a93c <lwip_htons>
 80113ca:	4603      	mov	r3, r0
 80113cc:	b2db      	uxtb	r3, r3
 80113ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80113d2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80113d4:	2300      	movs	r3, #0
 80113d6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80113d8:	7efb      	ldrb	r3, [r7, #27]
 80113da:	f003 0308 	and.w	r3, r3, #8
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d007      	beq.n	80113f2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80113e2:	7efb      	ldrb	r3, [r7, #27]
 80113e4:	f023 0308 	bic.w	r3, r3, #8
 80113e8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80113ea:	7ebb      	ldrb	r3, [r7, #26]
 80113ec:	f043 0308 	orr.w	r3, r3, #8
 80113f0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80113f2:	7efb      	ldrb	r3, [r7, #27]
 80113f4:	f003 0301 	and.w	r3, r3, #1
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d007      	beq.n	801140c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80113fc:	7efb      	ldrb	r3, [r7, #27]
 80113fe:	f023 0301 	bic.w	r3, r3, #1
 8011402:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011404:	7ebb      	ldrb	r3, [r7, #26]
 8011406:	f043 0301 	orr.w	r3, r3, #1
 801140a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801140c:	697b      	ldr	r3, [r7, #20]
 801140e:	68db      	ldr	r3, [r3, #12]
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	4618      	mov	r0, r3
 8011414:	f7f9 faa7 	bl	800a966 <lwip_htonl>
 8011418:	4602      	mov	r2, r0
 801141a:	887b      	ldrh	r3, [r7, #2]
 801141c:	18d1      	adds	r1, r2, r3
 801141e:	7eba      	ldrb	r2, [r7, #26]
 8011420:	7bfb      	ldrb	r3, [r7, #15]
 8011422:	9300      	str	r3, [sp, #0]
 8011424:	460b      	mov	r3, r1
 8011426:	6939      	ldr	r1, [r7, #16]
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f7ff fa4d 	bl	80108c8 <tcp_create_segment>
 801142e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011430:	69fb      	ldr	r3, [r7, #28]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d063      	beq.n	80114fe <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011436:	697b      	ldr	r3, [r7, #20]
 8011438:	685b      	ldr	r3, [r3, #4]
 801143a:	4618      	mov	r0, r3
 801143c:	f7fa fef2 	bl	800c224 <pbuf_clen>
 8011440:	4603      	mov	r3, r0
 8011442:	461a      	mov	r2, r3
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801144a:	1a9b      	subs	r3, r3, r2
 801144c:	b29a      	uxth	r2, r3
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011454:	697b      	ldr	r3, [r7, #20]
 8011456:	6858      	ldr	r0, [r3, #4]
 8011458:	697b      	ldr	r3, [r7, #20]
 801145a:	685b      	ldr	r3, [r3, #4]
 801145c:	891a      	ldrh	r2, [r3, #8]
 801145e:	89bb      	ldrh	r3, [r7, #12]
 8011460:	1ad3      	subs	r3, r2, r3
 8011462:	b29b      	uxth	r3, r3
 8011464:	4619      	mov	r1, r3
 8011466:	f7fa fc97 	bl	800bd98 <pbuf_realloc>
  useg->len -= remainder;
 801146a:	697b      	ldr	r3, [r7, #20]
 801146c:	891a      	ldrh	r2, [r3, #8]
 801146e:	89bb      	ldrh	r3, [r7, #12]
 8011470:	1ad3      	subs	r3, r2, r3
 8011472:	b29a      	uxth	r2, r3
 8011474:	697b      	ldr	r3, [r7, #20]
 8011476:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	68db      	ldr	r3, [r3, #12]
 801147c:	899b      	ldrh	r3, [r3, #12]
 801147e:	b29c      	uxth	r4, r3
 8011480:	7efb      	ldrb	r3, [r7, #27]
 8011482:	b29b      	uxth	r3, r3
 8011484:	4618      	mov	r0, r3
 8011486:	f7f9 fa59 	bl	800a93c <lwip_htons>
 801148a:	4603      	mov	r3, r0
 801148c:	461a      	mov	r2, r3
 801148e:	697b      	ldr	r3, [r7, #20]
 8011490:	68db      	ldr	r3, [r3, #12]
 8011492:	4322      	orrs	r2, r4
 8011494:	b292      	uxth	r2, r2
 8011496:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	685b      	ldr	r3, [r3, #4]
 801149c:	4618      	mov	r0, r3
 801149e:	f7fa fec1 	bl	800c224 <pbuf_clen>
 80114a2:	4603      	mov	r3, r0
 80114a4:	461a      	mov	r2, r3
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80114ac:	4413      	add	r3, r2
 80114ae:	b29a      	uxth	r2, r3
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80114b6:	69fb      	ldr	r3, [r7, #28]
 80114b8:	685b      	ldr	r3, [r3, #4]
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7fa feb2 	bl	800c224 <pbuf_clen>
 80114c0:	4603      	mov	r3, r0
 80114c2:	461a      	mov	r2, r3
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80114ca:	4413      	add	r3, r2
 80114cc:	b29a      	uxth	r2, r3
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80114d4:	697b      	ldr	r3, [r7, #20]
 80114d6:	681a      	ldr	r2, [r3, #0]
 80114d8:	69fb      	ldr	r3, [r7, #28]
 80114da:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80114dc:	697b      	ldr	r3, [r7, #20]
 80114de:	69fa      	ldr	r2, [r7, #28]
 80114e0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80114e2:	69fb      	ldr	r3, [r7, #28]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d103      	bne.n	80114f2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	2200      	movs	r2, #0
 80114ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80114f2:	2300      	movs	r3, #0
 80114f4:	e016      	b.n	8011524 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80114f6:	bf00      	nop
 80114f8:	e002      	b.n	8011500 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80114fa:	bf00      	nop
 80114fc:	e000      	b.n	8011500 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80114fe:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011500:	69fb      	ldr	r3, [r7, #28]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d006      	beq.n	8011514 <tcp_split_unsent_seg+0x25c>
 8011506:	4b09      	ldr	r3, [pc, #36]	; (801152c <tcp_split_unsent_seg+0x274>)
 8011508:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801150c:	490d      	ldr	r1, [pc, #52]	; (8011544 <tcp_split_unsent_seg+0x28c>)
 801150e:	4809      	ldr	r0, [pc, #36]	; (8011534 <tcp_split_unsent_seg+0x27c>)
 8011510:	f008 fb86 	bl	8019c20 <iprintf>
  if (p != NULL) {
 8011514:	693b      	ldr	r3, [r7, #16]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d002      	beq.n	8011520 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801151a:	6938      	ldr	r0, [r7, #16]
 801151c:	f7fa fdf4 	bl	800c108 <pbuf_free>
  }

  return ERR_MEM;
 8011520:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011524:	4618      	mov	r0, r3
 8011526:	3724      	adds	r7, #36	; 0x24
 8011528:	46bd      	mov	sp, r7
 801152a:	bd90      	pop	{r4, r7, pc}
 801152c:	0801d368 	.word	0x0801d368
 8011530:	0801d6fc 	.word	0x0801d6fc
 8011534:	0801d3bc 	.word	0x0801d3bc
 8011538:	0801d720 	.word	0x0801d720
 801153c:	0801d744 	.word	0x0801d744
 8011540:	0801d754 	.word	0x0801d754
 8011544:	0801d764 	.word	0x0801d764

08011548 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011548:	b590      	push	{r4, r7, lr}
 801154a:	b085      	sub	sp, #20
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d106      	bne.n	8011564 <tcp_send_fin+0x1c>
 8011556:	4b21      	ldr	r3, [pc, #132]	; (80115dc <tcp_send_fin+0x94>)
 8011558:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801155c:	4920      	ldr	r1, [pc, #128]	; (80115e0 <tcp_send_fin+0x98>)
 801155e:	4821      	ldr	r0, [pc, #132]	; (80115e4 <tcp_send_fin+0x9c>)
 8011560:	f008 fb5e 	bl	8019c20 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011568:	2b00      	cmp	r3, #0
 801156a:	d02e      	beq.n	80115ca <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011570:	60fb      	str	r3, [r7, #12]
 8011572:	e002      	b.n	801157a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d1f8      	bne.n	8011574 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	68db      	ldr	r3, [r3, #12]
 8011586:	899b      	ldrh	r3, [r3, #12]
 8011588:	b29b      	uxth	r3, r3
 801158a:	4618      	mov	r0, r3
 801158c:	f7f9 f9d6 	bl	800a93c <lwip_htons>
 8011590:	4603      	mov	r3, r0
 8011592:	b2db      	uxtb	r3, r3
 8011594:	f003 0307 	and.w	r3, r3, #7
 8011598:	2b00      	cmp	r3, #0
 801159a:	d116      	bne.n	80115ca <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	68db      	ldr	r3, [r3, #12]
 80115a0:	899b      	ldrh	r3, [r3, #12]
 80115a2:	b29c      	uxth	r4, r3
 80115a4:	2001      	movs	r0, #1
 80115a6:	f7f9 f9c9 	bl	800a93c <lwip_htons>
 80115aa:	4603      	mov	r3, r0
 80115ac:	461a      	mov	r2, r3
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	68db      	ldr	r3, [r3, #12]
 80115b2:	4322      	orrs	r2, r4
 80115b4:	b292      	uxth	r2, r2
 80115b6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	8b5b      	ldrh	r3, [r3, #26]
 80115bc:	f043 0320 	orr.w	r3, r3, #32
 80115c0:	b29a      	uxth	r2, r3
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80115c6:	2300      	movs	r3, #0
 80115c8:	e004      	b.n	80115d4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80115ca:	2101      	movs	r1, #1
 80115cc:	6878      	ldr	r0, [r7, #4]
 80115ce:	f000 f80b 	bl	80115e8 <tcp_enqueue_flags>
 80115d2:	4603      	mov	r3, r0
}
 80115d4:	4618      	mov	r0, r3
 80115d6:	3714      	adds	r7, #20
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd90      	pop	{r4, r7, pc}
 80115dc:	0801d368 	.word	0x0801d368
 80115e0:	0801d770 	.word	0x0801d770
 80115e4:	0801d3bc 	.word	0x0801d3bc

080115e8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b08a      	sub	sp, #40	; 0x28
 80115ec:	af02      	add	r7, sp, #8
 80115ee:	6078      	str	r0, [r7, #4]
 80115f0:	460b      	mov	r3, r1
 80115f2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80115f4:	2300      	movs	r3, #0
 80115f6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80115f8:	2300      	movs	r3, #0
 80115fa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80115fc:	78fb      	ldrb	r3, [r7, #3]
 80115fe:	f003 0303 	and.w	r3, r3, #3
 8011602:	2b00      	cmp	r3, #0
 8011604:	d106      	bne.n	8011614 <tcp_enqueue_flags+0x2c>
 8011606:	4b67      	ldr	r3, [pc, #412]	; (80117a4 <tcp_enqueue_flags+0x1bc>)
 8011608:	f240 4212 	movw	r2, #1042	; 0x412
 801160c:	4966      	ldr	r1, [pc, #408]	; (80117a8 <tcp_enqueue_flags+0x1c0>)
 801160e:	4867      	ldr	r0, [pc, #412]	; (80117ac <tcp_enqueue_flags+0x1c4>)
 8011610:	f008 fb06 	bl	8019c20 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d106      	bne.n	8011628 <tcp_enqueue_flags+0x40>
 801161a:	4b62      	ldr	r3, [pc, #392]	; (80117a4 <tcp_enqueue_flags+0x1bc>)
 801161c:	f240 4213 	movw	r2, #1043	; 0x413
 8011620:	4963      	ldr	r1, [pc, #396]	; (80117b0 <tcp_enqueue_flags+0x1c8>)
 8011622:	4862      	ldr	r0, [pc, #392]	; (80117ac <tcp_enqueue_flags+0x1c4>)
 8011624:	f008 fafc 	bl	8019c20 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011628:	78fb      	ldrb	r3, [r7, #3]
 801162a:	f003 0302 	and.w	r3, r3, #2
 801162e:	2b00      	cmp	r3, #0
 8011630:	d001      	beq.n	8011636 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011632:	2301      	movs	r3, #1
 8011634:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011636:	7ffb      	ldrb	r3, [r7, #31]
 8011638:	009b      	lsls	r3, r3, #2
 801163a:	b2db      	uxtb	r3, r3
 801163c:	f003 0304 	and.w	r3, r3, #4
 8011640:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011642:	7dfb      	ldrb	r3, [r7, #23]
 8011644:	b29b      	uxth	r3, r3
 8011646:	f44f 7220 	mov.w	r2, #640	; 0x280
 801164a:	4619      	mov	r1, r3
 801164c:	2036      	movs	r0, #54	; 0x36
 801164e:	f7fa fa49 	bl	800bae4 <pbuf_alloc>
 8011652:	6138      	str	r0, [r7, #16]
 8011654:	693b      	ldr	r3, [r7, #16]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d109      	bne.n	801166e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	8b5b      	ldrh	r3, [r3, #26]
 801165e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011662:	b29a      	uxth	r2, r3
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011668:	f04f 33ff 	mov.w	r3, #4294967295
 801166c:	e095      	b.n	801179a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801166e:	693b      	ldr	r3, [r7, #16]
 8011670:	895a      	ldrh	r2, [r3, #10]
 8011672:	7dfb      	ldrb	r3, [r7, #23]
 8011674:	b29b      	uxth	r3, r3
 8011676:	429a      	cmp	r2, r3
 8011678:	d206      	bcs.n	8011688 <tcp_enqueue_flags+0xa0>
 801167a:	4b4a      	ldr	r3, [pc, #296]	; (80117a4 <tcp_enqueue_flags+0x1bc>)
 801167c:	f240 423a 	movw	r2, #1082	; 0x43a
 8011680:	494c      	ldr	r1, [pc, #304]	; (80117b4 <tcp_enqueue_flags+0x1cc>)
 8011682:	484a      	ldr	r0, [pc, #296]	; (80117ac <tcp_enqueue_flags+0x1c4>)
 8011684:	f008 facc 	bl	8019c20 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801168c:	78fa      	ldrb	r2, [r7, #3]
 801168e:	7ffb      	ldrb	r3, [r7, #31]
 8011690:	9300      	str	r3, [sp, #0]
 8011692:	460b      	mov	r3, r1
 8011694:	6939      	ldr	r1, [r7, #16]
 8011696:	6878      	ldr	r0, [r7, #4]
 8011698:	f7ff f916 	bl	80108c8 <tcp_create_segment>
 801169c:	60f8      	str	r0, [r7, #12]
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d109      	bne.n	80116b8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	8b5b      	ldrh	r3, [r3, #26]
 80116a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116ac:	b29a      	uxth	r2, r3
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80116b2:	f04f 33ff 	mov.w	r3, #4294967295
 80116b6:	e070      	b.n	801179a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	68db      	ldr	r3, [r3, #12]
 80116bc:	f003 0303 	and.w	r3, r3, #3
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d006      	beq.n	80116d2 <tcp_enqueue_flags+0xea>
 80116c4:	4b37      	ldr	r3, [pc, #220]	; (80117a4 <tcp_enqueue_flags+0x1bc>)
 80116c6:	f240 4242 	movw	r2, #1090	; 0x442
 80116ca:	493b      	ldr	r1, [pc, #236]	; (80117b8 <tcp_enqueue_flags+0x1d0>)
 80116cc:	4837      	ldr	r0, [pc, #220]	; (80117ac <tcp_enqueue_flags+0x1c4>)
 80116ce:	f008 faa7 	bl	8019c20 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	891b      	ldrh	r3, [r3, #8]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d006      	beq.n	80116e8 <tcp_enqueue_flags+0x100>
 80116da:	4b32      	ldr	r3, [pc, #200]	; (80117a4 <tcp_enqueue_flags+0x1bc>)
 80116dc:	f240 4243 	movw	r2, #1091	; 0x443
 80116e0:	4936      	ldr	r1, [pc, #216]	; (80117bc <tcp_enqueue_flags+0x1d4>)
 80116e2:	4832      	ldr	r0, [pc, #200]	; (80117ac <tcp_enqueue_flags+0x1c4>)
 80116e4:	f008 fa9c 	bl	8019c20 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d103      	bne.n	80116f8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	68fa      	ldr	r2, [r7, #12]
 80116f4:	66da      	str	r2, [r3, #108]	; 0x6c
 80116f6:	e00d      	b.n	8011714 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116fc:	61bb      	str	r3, [r7, #24]
 80116fe:	e002      	b.n	8011706 <tcp_enqueue_flags+0x11e>
 8011700:	69bb      	ldr	r3, [r7, #24]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	61bb      	str	r3, [r7, #24]
 8011706:	69bb      	ldr	r3, [r7, #24]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d1f8      	bne.n	8011700 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801170e:	69bb      	ldr	r3, [r7, #24]
 8011710:	68fa      	ldr	r2, [r7, #12]
 8011712:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2200      	movs	r2, #0
 8011718:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801171c:	78fb      	ldrb	r3, [r7, #3]
 801171e:	f003 0302 	and.w	r3, r3, #2
 8011722:	2b00      	cmp	r3, #0
 8011724:	d104      	bne.n	8011730 <tcp_enqueue_flags+0x148>
 8011726:	78fb      	ldrb	r3, [r7, #3]
 8011728:	f003 0301 	and.w	r3, r3, #1
 801172c:	2b00      	cmp	r3, #0
 801172e:	d004      	beq.n	801173a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011734:	1c5a      	adds	r2, r3, #1
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801173a:	78fb      	ldrb	r3, [r7, #3]
 801173c:	f003 0301 	and.w	r3, r3, #1
 8011740:	2b00      	cmp	r3, #0
 8011742:	d006      	beq.n	8011752 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	8b5b      	ldrh	r3, [r3, #26]
 8011748:	f043 0320 	orr.w	r3, r3, #32
 801174c:	b29a      	uxth	r2, r3
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	685b      	ldr	r3, [r3, #4]
 8011756:	4618      	mov	r0, r3
 8011758:	f7fa fd64 	bl	800c224 <pbuf_clen>
 801175c:	4603      	mov	r3, r0
 801175e:	461a      	mov	r2, r3
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011766:	4413      	add	r3, r2
 8011768:	b29a      	uxth	r2, r3
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011776:	2b00      	cmp	r3, #0
 8011778:	d00e      	beq.n	8011798 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801177e:	2b00      	cmp	r3, #0
 8011780:	d10a      	bne.n	8011798 <tcp_enqueue_flags+0x1b0>
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011786:	2b00      	cmp	r3, #0
 8011788:	d106      	bne.n	8011798 <tcp_enqueue_flags+0x1b0>
 801178a:	4b06      	ldr	r3, [pc, #24]	; (80117a4 <tcp_enqueue_flags+0x1bc>)
 801178c:	f240 4266 	movw	r2, #1126	; 0x466
 8011790:	490b      	ldr	r1, [pc, #44]	; (80117c0 <tcp_enqueue_flags+0x1d8>)
 8011792:	4806      	ldr	r0, [pc, #24]	; (80117ac <tcp_enqueue_flags+0x1c4>)
 8011794:	f008 fa44 	bl	8019c20 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011798:	2300      	movs	r3, #0
}
 801179a:	4618      	mov	r0, r3
 801179c:	3720      	adds	r7, #32
 801179e:	46bd      	mov	sp, r7
 80117a0:	bd80      	pop	{r7, pc}
 80117a2:	bf00      	nop
 80117a4:	0801d368 	.word	0x0801d368
 80117a8:	0801d78c 	.word	0x0801d78c
 80117ac:	0801d3bc 	.word	0x0801d3bc
 80117b0:	0801d7e4 	.word	0x0801d7e4
 80117b4:	0801d804 	.word	0x0801d804
 80117b8:	0801d840 	.word	0x0801d840
 80117bc:	0801d858 	.word	0x0801d858
 80117c0:	0801d884 	.word	0x0801d884

080117c4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80117c4:	b5b0      	push	{r4, r5, r7, lr}
 80117c6:	b08a      	sub	sp, #40	; 0x28
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d106      	bne.n	80117e0 <tcp_output+0x1c>
 80117d2:	4ba0      	ldr	r3, [pc, #640]	; (8011a54 <tcp_output+0x290>)
 80117d4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80117d8:	499f      	ldr	r1, [pc, #636]	; (8011a58 <tcp_output+0x294>)
 80117da:	48a0      	ldr	r0, [pc, #640]	; (8011a5c <tcp_output+0x298>)
 80117dc:	f008 fa20 	bl	8019c20 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	7d1b      	ldrb	r3, [r3, #20]
 80117e4:	2b01      	cmp	r3, #1
 80117e6:	d106      	bne.n	80117f6 <tcp_output+0x32>
 80117e8:	4b9a      	ldr	r3, [pc, #616]	; (8011a54 <tcp_output+0x290>)
 80117ea:	f240 42e4 	movw	r2, #1252	; 0x4e4
 80117ee:	499c      	ldr	r1, [pc, #624]	; (8011a60 <tcp_output+0x29c>)
 80117f0:	489a      	ldr	r0, [pc, #616]	; (8011a5c <tcp_output+0x298>)
 80117f2:	f008 fa15 	bl	8019c20 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80117f6:	4b9b      	ldr	r3, [pc, #620]	; (8011a64 <tcp_output+0x2a0>)
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	687a      	ldr	r2, [r7, #4]
 80117fc:	429a      	cmp	r2, r3
 80117fe:	d101      	bne.n	8011804 <tcp_output+0x40>
    return ERR_OK;
 8011800:	2300      	movs	r3, #0
 8011802:	e1d2      	b.n	8011baa <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011810:	429a      	cmp	r2, r3
 8011812:	d203      	bcs.n	801181c <tcp_output+0x58>
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801181a:	e002      	b.n	8011822 <tcp_output+0x5e>
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011822:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011828:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801182c:	2b00      	cmp	r3, #0
 801182e:	d10b      	bne.n	8011848 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	8b5b      	ldrh	r3, [r3, #26]
 8011834:	f003 0302 	and.w	r3, r3, #2
 8011838:	2b00      	cmp	r3, #0
 801183a:	f000 81a9 	beq.w	8011b90 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801183e:	6878      	ldr	r0, [r7, #4]
 8011840:	f000 fdd8 	bl	80123f4 <tcp_send_empty_ack>
 8011844:	4603      	mov	r3, r0
 8011846:	e1b0      	b.n	8011baa <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011848:	6879      	ldr	r1, [r7, #4]
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	3304      	adds	r3, #4
 801184e:	461a      	mov	r2, r3
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	f7ff f81d 	bl	8010890 <tcp_route>
 8011856:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011858:	697b      	ldr	r3, [r7, #20]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d102      	bne.n	8011864 <tcp_output+0xa0>
    return ERR_RTE;
 801185e:	f06f 0303 	mvn.w	r3, #3
 8011862:	e1a2      	b.n	8011baa <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d003      	beq.n	8011872 <tcp_output+0xae>
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d111      	bne.n	8011896 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d002      	beq.n	801187e <tcp_output+0xba>
 8011878:	697b      	ldr	r3, [r7, #20]
 801187a:	3304      	adds	r3, #4
 801187c:	e000      	b.n	8011880 <tcp_output+0xbc>
 801187e:	2300      	movs	r3, #0
 8011880:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011882:	693b      	ldr	r3, [r7, #16]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d102      	bne.n	801188e <tcp_output+0xca>
      return ERR_RTE;
 8011888:	f06f 0303 	mvn.w	r3, #3
 801188c:	e18d      	b.n	8011baa <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801188e:	693b      	ldr	r3, [r7, #16]
 8011890:	681a      	ldr	r2, [r3, #0]
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011898:	68db      	ldr	r3, [r3, #12]
 801189a:	685b      	ldr	r3, [r3, #4]
 801189c:	4618      	mov	r0, r3
 801189e:	f7f9 f862 	bl	800a966 <lwip_htonl>
 80118a2:	4602      	mov	r2, r0
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118a8:	1ad3      	subs	r3, r2, r3
 80118aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118ac:	8912      	ldrh	r2, [r2, #8]
 80118ae:	4413      	add	r3, r2
 80118b0:	69ba      	ldr	r2, [r7, #24]
 80118b2:	429a      	cmp	r2, r3
 80118b4:	d227      	bcs.n	8011906 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80118bc:	461a      	mov	r2, r3
 80118be:	69bb      	ldr	r3, [r7, #24]
 80118c0:	4293      	cmp	r3, r2
 80118c2:	d114      	bne.n	80118ee <tcp_output+0x12a>
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d110      	bne.n	80118ee <tcp_output+0x12a>
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d10b      	bne.n	80118ee <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	2200      	movs	r2, #0
 80118da:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	2201      	movs	r2, #1
 80118e2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	2200      	movs	r2, #0
 80118ea:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	8b5b      	ldrh	r3, [r3, #26]
 80118f2:	f003 0302 	and.w	r3, r3, #2
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	f000 814c 	beq.w	8011b94 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 80118fc:	6878      	ldr	r0, [r7, #4]
 80118fe:	f000 fd79 	bl	80123f4 <tcp_send_empty_ack>
 8011902:	4603      	mov	r3, r0
 8011904:	e151      	b.n	8011baa <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	2200      	movs	r2, #0
 801190a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011912:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011914:	6a3b      	ldr	r3, [r7, #32]
 8011916:	2b00      	cmp	r3, #0
 8011918:	f000 811b 	beq.w	8011b52 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 801191c:	e002      	b.n	8011924 <tcp_output+0x160>
 801191e:	6a3b      	ldr	r3, [r7, #32]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	623b      	str	r3, [r7, #32]
 8011924:	6a3b      	ldr	r3, [r7, #32]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d1f8      	bne.n	801191e <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801192c:	e111      	b.n	8011b52 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011930:	68db      	ldr	r3, [r3, #12]
 8011932:	899b      	ldrh	r3, [r3, #12]
 8011934:	b29b      	uxth	r3, r3
 8011936:	4618      	mov	r0, r3
 8011938:	f7f9 f800 	bl	800a93c <lwip_htons>
 801193c:	4603      	mov	r3, r0
 801193e:	b2db      	uxtb	r3, r3
 8011940:	f003 0304 	and.w	r3, r3, #4
 8011944:	2b00      	cmp	r3, #0
 8011946:	d006      	beq.n	8011956 <tcp_output+0x192>
 8011948:	4b42      	ldr	r3, [pc, #264]	; (8011a54 <tcp_output+0x290>)
 801194a:	f240 5237 	movw	r2, #1335	; 0x537
 801194e:	4946      	ldr	r1, [pc, #280]	; (8011a68 <tcp_output+0x2a4>)
 8011950:	4842      	ldr	r0, [pc, #264]	; (8011a5c <tcp_output+0x298>)
 8011952:	f008 f965 	bl	8019c20 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801195a:	2b00      	cmp	r3, #0
 801195c:	d01f      	beq.n	801199e <tcp_output+0x1da>
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	8b5b      	ldrh	r3, [r3, #26]
 8011962:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011966:	2b00      	cmp	r3, #0
 8011968:	d119      	bne.n	801199e <tcp_output+0x1da>
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801196e:	2b00      	cmp	r3, #0
 8011970:	d00b      	beq.n	801198a <tcp_output+0x1c6>
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d110      	bne.n	801199e <tcp_output+0x1da>
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011980:	891a      	ldrh	r2, [r3, #8]
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011986:	429a      	cmp	r2, r3
 8011988:	d209      	bcs.n	801199e <tcp_output+0x1da>
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011990:	2b00      	cmp	r3, #0
 8011992:	d004      	beq.n	801199e <tcp_output+0x1da>
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801199a:	2b08      	cmp	r3, #8
 801199c:	d901      	bls.n	80119a2 <tcp_output+0x1de>
 801199e:	2301      	movs	r3, #1
 80119a0:	e000      	b.n	80119a4 <tcp_output+0x1e0>
 80119a2:	2300      	movs	r3, #0
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d106      	bne.n	80119b6 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	8b5b      	ldrh	r3, [r3, #26]
 80119ac:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	f000 80e3 	beq.w	8011b7c <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	7d1b      	ldrb	r3, [r3, #20]
 80119ba:	2b02      	cmp	r3, #2
 80119bc:	d00d      	beq.n	80119da <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80119be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119c0:	68db      	ldr	r3, [r3, #12]
 80119c2:	899b      	ldrh	r3, [r3, #12]
 80119c4:	b29c      	uxth	r4, r3
 80119c6:	2010      	movs	r0, #16
 80119c8:	f7f8 ffb8 	bl	800a93c <lwip_htons>
 80119cc:	4603      	mov	r3, r0
 80119ce:	461a      	mov	r2, r3
 80119d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119d2:	68db      	ldr	r3, [r3, #12]
 80119d4:	4322      	orrs	r2, r4
 80119d6:	b292      	uxth	r2, r2
 80119d8:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80119da:	697a      	ldr	r2, [r7, #20]
 80119dc:	6879      	ldr	r1, [r7, #4]
 80119de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80119e0:	f000 f908 	bl	8011bf4 <tcp_output_segment>
 80119e4:	4603      	mov	r3, r0
 80119e6:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80119e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d009      	beq.n	8011a04 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	8b5b      	ldrh	r3, [r3, #26]
 80119f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119f8:	b29a      	uxth	r2, r3
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	835a      	strh	r2, [r3, #26]
      return err;
 80119fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a02:	e0d2      	b.n	8011baa <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a06:	681a      	ldr	r2, [r3, #0]
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	7d1b      	ldrb	r3, [r3, #20]
 8011a10:	2b02      	cmp	r3, #2
 8011a12:	d006      	beq.n	8011a22 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	8b5b      	ldrh	r3, [r3, #26]
 8011a18:	f023 0303 	bic.w	r3, r3, #3
 8011a1c:	b29a      	uxth	r2, r3
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a24:	68db      	ldr	r3, [r3, #12]
 8011a26:	685b      	ldr	r3, [r3, #4]
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f7f8 ff9c 	bl	800a966 <lwip_htonl>
 8011a2e:	4604      	mov	r4, r0
 8011a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a32:	891b      	ldrh	r3, [r3, #8]
 8011a34:	461d      	mov	r5, r3
 8011a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a38:	68db      	ldr	r3, [r3, #12]
 8011a3a:	899b      	ldrh	r3, [r3, #12]
 8011a3c:	b29b      	uxth	r3, r3
 8011a3e:	4618      	mov	r0, r3
 8011a40:	f7f8 ff7c 	bl	800a93c <lwip_htons>
 8011a44:	4603      	mov	r3, r0
 8011a46:	b2db      	uxtb	r3, r3
 8011a48:	f003 0303 	and.w	r3, r3, #3
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d00d      	beq.n	8011a6c <tcp_output+0x2a8>
 8011a50:	2301      	movs	r3, #1
 8011a52:	e00c      	b.n	8011a6e <tcp_output+0x2aa>
 8011a54:	0801d368 	.word	0x0801d368
 8011a58:	0801d8ac 	.word	0x0801d8ac
 8011a5c:	0801d3bc 	.word	0x0801d3bc
 8011a60:	0801d8c4 	.word	0x0801d8c4
 8011a64:	2000fd4c 	.word	0x2000fd4c
 8011a68:	0801d8ec 	.word	0x0801d8ec
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	442b      	add	r3, r5
 8011a70:	4423      	add	r3, r4
 8011a72:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	1ad3      	subs	r3, r2, r3
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	da02      	bge.n	8011a86 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	68ba      	ldr	r2, [r7, #8]
 8011a84:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a88:	891b      	ldrh	r3, [r3, #8]
 8011a8a:	461c      	mov	r4, r3
 8011a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a8e:	68db      	ldr	r3, [r3, #12]
 8011a90:	899b      	ldrh	r3, [r3, #12]
 8011a92:	b29b      	uxth	r3, r3
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7f8 ff51 	bl	800a93c <lwip_htons>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	b2db      	uxtb	r3, r3
 8011a9e:	f003 0303 	and.w	r3, r3, #3
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d001      	beq.n	8011aaa <tcp_output+0x2e6>
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	e000      	b.n	8011aac <tcp_output+0x2e8>
 8011aaa:	2300      	movs	r3, #0
 8011aac:	4423      	add	r3, r4
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d049      	beq.n	8011b46 <tcp_output+0x382>
      seg->next = NULL;
 8011ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d105      	bne.n	8011acc <tcp_output+0x308>
        pcb->unacked = seg;
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ac4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ac8:	623b      	str	r3, [r7, #32]
 8011aca:	e03f      	b.n	8011b4c <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ace:	68db      	ldr	r3, [r3, #12]
 8011ad0:	685b      	ldr	r3, [r3, #4]
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f7f8 ff47 	bl	800a966 <lwip_htonl>
 8011ad8:	4604      	mov	r4, r0
 8011ada:	6a3b      	ldr	r3, [r7, #32]
 8011adc:	68db      	ldr	r3, [r3, #12]
 8011ade:	685b      	ldr	r3, [r3, #4]
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	f7f8 ff40 	bl	800a966 <lwip_htonl>
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	1ae3      	subs	r3, r4, r3
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	da24      	bge.n	8011b38 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	3370      	adds	r3, #112	; 0x70
 8011af2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011af4:	e002      	b.n	8011afc <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011af6:	69fb      	ldr	r3, [r7, #28]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011afc:	69fb      	ldr	r3, [r7, #28]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d011      	beq.n	8011b28 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011b04:	69fb      	ldr	r3, [r7, #28]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	68db      	ldr	r3, [r3, #12]
 8011b0a:	685b      	ldr	r3, [r3, #4]
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f7f8 ff2a 	bl	800a966 <lwip_htonl>
 8011b12:	4604      	mov	r4, r0
 8011b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b16:	68db      	ldr	r3, [r3, #12]
 8011b18:	685b      	ldr	r3, [r3, #4]
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f7f8 ff23 	bl	800a966 <lwip_htonl>
 8011b20:	4603      	mov	r3, r0
 8011b22:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	dbe6      	blt.n	8011af6 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8011b28:	69fb      	ldr	r3, [r7, #28]
 8011b2a:	681a      	ldr	r2, [r3, #0]
 8011b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b2e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011b30:	69fb      	ldr	r3, [r7, #28]
 8011b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b34:	601a      	str	r2, [r3, #0]
 8011b36:	e009      	b.n	8011b4c <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011b38:	6a3b      	ldr	r3, [r7, #32]
 8011b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b3c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011b3e:	6a3b      	ldr	r3, [r7, #32]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	623b      	str	r3, [r7, #32]
 8011b44:	e002      	b.n	8011b4c <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011b46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b48:	f7fb ff1a 	bl	800d980 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b50:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d012      	beq.n	8011b7e <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b5a:	68db      	ldr	r3, [r3, #12]
 8011b5c:	685b      	ldr	r3, [r3, #4]
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f7f8 ff01 	bl	800a966 <lwip_htonl>
 8011b64:	4602      	mov	r2, r0
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b6a:	1ad3      	subs	r3, r2, r3
 8011b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b6e:	8912      	ldrh	r2, [r2, #8]
 8011b70:	4413      	add	r3, r2
  while (seg != NULL &&
 8011b72:	69ba      	ldr	r2, [r7, #24]
 8011b74:	429a      	cmp	r2, r3
 8011b76:	f4bf aeda 	bcs.w	801192e <tcp_output+0x16a>
 8011b7a:	e000      	b.n	8011b7e <tcp_output+0x3ba>
      break;
 8011b7c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d108      	bne.n	8011b98 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2200      	movs	r2, #0
 8011b8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011b8e:	e004      	b.n	8011b9a <tcp_output+0x3d6>
    goto output_done;
 8011b90:	bf00      	nop
 8011b92:	e002      	b.n	8011b9a <tcp_output+0x3d6>
    goto output_done;
 8011b94:	bf00      	nop
 8011b96:	e000      	b.n	8011b9a <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011b98:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	8b5b      	ldrh	r3, [r3, #26]
 8011b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011ba2:	b29a      	uxth	r2, r3
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011ba8:	2300      	movs	r3, #0
}
 8011baa:	4618      	mov	r0, r3
 8011bac:	3728      	adds	r7, #40	; 0x28
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8011bb2:	bf00      	nop

08011bb4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b082      	sub	sp, #8
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d106      	bne.n	8011bd0 <tcp_output_segment_busy+0x1c>
 8011bc2:	4b09      	ldr	r3, [pc, #36]	; (8011be8 <tcp_output_segment_busy+0x34>)
 8011bc4:	f240 529a 	movw	r2, #1434	; 0x59a
 8011bc8:	4908      	ldr	r1, [pc, #32]	; (8011bec <tcp_output_segment_busy+0x38>)
 8011bca:	4809      	ldr	r0, [pc, #36]	; (8011bf0 <tcp_output_segment_busy+0x3c>)
 8011bcc:	f008 f828 	bl	8019c20 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	685b      	ldr	r3, [r3, #4]
 8011bd4:	7b9b      	ldrb	r3, [r3, #14]
 8011bd6:	2b01      	cmp	r3, #1
 8011bd8:	d001      	beq.n	8011bde <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011bda:	2301      	movs	r3, #1
 8011bdc:	e000      	b.n	8011be0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011bde:	2300      	movs	r3, #0
}
 8011be0:	4618      	mov	r0, r3
 8011be2:	3708      	adds	r7, #8
 8011be4:	46bd      	mov	sp, r7
 8011be6:	bd80      	pop	{r7, pc}
 8011be8:	0801d368 	.word	0x0801d368
 8011bec:	0801d904 	.word	0x0801d904
 8011bf0:	0801d3bc 	.word	0x0801d3bc

08011bf4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011bf4:	b5b0      	push	{r4, r5, r7, lr}
 8011bf6:	b08c      	sub	sp, #48	; 0x30
 8011bf8:	af04      	add	r7, sp, #16
 8011bfa:	60f8      	str	r0, [r7, #12]
 8011bfc:	60b9      	str	r1, [r7, #8]
 8011bfe:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d106      	bne.n	8011c14 <tcp_output_segment+0x20>
 8011c06:	4b64      	ldr	r3, [pc, #400]	; (8011d98 <tcp_output_segment+0x1a4>)
 8011c08:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011c0c:	4963      	ldr	r1, [pc, #396]	; (8011d9c <tcp_output_segment+0x1a8>)
 8011c0e:	4864      	ldr	r0, [pc, #400]	; (8011da0 <tcp_output_segment+0x1ac>)
 8011c10:	f008 f806 	bl	8019c20 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d106      	bne.n	8011c28 <tcp_output_segment+0x34>
 8011c1a:	4b5f      	ldr	r3, [pc, #380]	; (8011d98 <tcp_output_segment+0x1a4>)
 8011c1c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011c20:	4960      	ldr	r1, [pc, #384]	; (8011da4 <tcp_output_segment+0x1b0>)
 8011c22:	485f      	ldr	r0, [pc, #380]	; (8011da0 <tcp_output_segment+0x1ac>)
 8011c24:	f007 fffc 	bl	8019c20 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d106      	bne.n	8011c3c <tcp_output_segment+0x48>
 8011c2e:	4b5a      	ldr	r3, [pc, #360]	; (8011d98 <tcp_output_segment+0x1a4>)
 8011c30:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011c34:	495c      	ldr	r1, [pc, #368]	; (8011da8 <tcp_output_segment+0x1b4>)
 8011c36:	485a      	ldr	r0, [pc, #360]	; (8011da0 <tcp_output_segment+0x1ac>)
 8011c38:	f007 fff2 	bl	8019c20 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011c3c:	68f8      	ldr	r0, [r7, #12]
 8011c3e:	f7ff ffb9 	bl	8011bb4 <tcp_output_segment_busy>
 8011c42:	4603      	mov	r3, r0
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d001      	beq.n	8011c4c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011c48:	2300      	movs	r3, #0
 8011c4a:	e0a0      	b.n	8011d8e <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011c4c:	68bb      	ldr	r3, [r7, #8]
 8011c4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	68dc      	ldr	r4, [r3, #12]
 8011c54:	4610      	mov	r0, r2
 8011c56:	f7f8 fe86 	bl	800a966 <lwip_htonl>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011c5e:	68bb      	ldr	r3, [r7, #8]
 8011c60:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	68dc      	ldr	r4, [r3, #12]
 8011c66:	4610      	mov	r0, r2
 8011c68:	f7f8 fe68 	bl	800a93c <lwip_htons>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c74:	68ba      	ldr	r2, [r7, #8]
 8011c76:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011c78:	441a      	add	r2, r3
 8011c7a:	68bb      	ldr	r3, [r7, #8]
 8011c7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	68db      	ldr	r3, [r3, #12]
 8011c82:	3314      	adds	r3, #20
 8011c84:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	7a9b      	ldrb	r3, [r3, #10]
 8011c8a:	f003 0301 	and.w	r3, r3, #1
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d015      	beq.n	8011cbe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011c92:	68bb      	ldr	r3, [r7, #8]
 8011c94:	3304      	adds	r3, #4
 8011c96:	461a      	mov	r2, r3
 8011c98:	6879      	ldr	r1, [r7, #4]
 8011c9a:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011c9e:	f7fc fa33 	bl	800e108 <tcp_eff_send_mss_netif>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011ca6:	8b7b      	ldrh	r3, [r7, #26]
 8011ca8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011cac:	4618      	mov	r0, r3
 8011cae:	f7f8 fe5a 	bl	800a966 <lwip_htonl>
 8011cb2:	4602      	mov	r2, r0
 8011cb4:	69fb      	ldr	r3, [r7, #28]
 8011cb6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011cb8:	69fb      	ldr	r3, [r7, #28]
 8011cba:	3304      	adds	r3, #4
 8011cbc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011cbe:	68bb      	ldr	r3, [r7, #8]
 8011cc0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	da02      	bge.n	8011cce <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	2200      	movs	r2, #0
 8011ccc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011cce:	68bb      	ldr	r3, [r7, #8]
 8011cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d10c      	bne.n	8011cf0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011cd6:	4b35      	ldr	r3, [pc, #212]	; (8011dac <tcp_output_segment+0x1b8>)
 8011cd8:	681a      	ldr	r2, [r3, #0]
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	68db      	ldr	r3, [r3, #12]
 8011ce2:	685b      	ldr	r3, [r3, #4]
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f7f8 fe3e 	bl	800a966 <lwip_htonl>
 8011cea:	4602      	mov	r2, r0
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	68db      	ldr	r3, [r3, #12]
 8011cf4:	461a      	mov	r2, r3
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	685b      	ldr	r3, [r3, #4]
 8011cfa:	685b      	ldr	r3, [r3, #4]
 8011cfc:	1ad3      	subs	r3, r2, r3
 8011cfe:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	685b      	ldr	r3, [r3, #4]
 8011d04:	8959      	ldrh	r1, [r3, #10]
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	685b      	ldr	r3, [r3, #4]
 8011d0a:	8b3a      	ldrh	r2, [r7, #24]
 8011d0c:	1a8a      	subs	r2, r1, r2
 8011d0e:	b292      	uxth	r2, r2
 8011d10:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	685b      	ldr	r3, [r3, #4]
 8011d16:	8919      	ldrh	r1, [r3, #8]
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	685b      	ldr	r3, [r3, #4]
 8011d1c:	8b3a      	ldrh	r2, [r7, #24]
 8011d1e:	1a8a      	subs	r2, r1, r2
 8011d20:	b292      	uxth	r2, r2
 8011d22:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	685b      	ldr	r3, [r3, #4]
 8011d28:	68fa      	ldr	r2, [r7, #12]
 8011d2a:	68d2      	ldr	r2, [r2, #12]
 8011d2c:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	68db      	ldr	r3, [r3, #12]
 8011d32:	2200      	movs	r2, #0
 8011d34:	741a      	strb	r2, [r3, #16]
 8011d36:	2200      	movs	r2, #0
 8011d38:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	68db      	ldr	r3, [r3, #12]
 8011d3e:	f103 0214 	add.w	r2, r3, #20
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	7a9b      	ldrb	r3, [r3, #10]
 8011d46:	009b      	lsls	r3, r3, #2
 8011d48:	f003 0304 	and.w	r3, r3, #4
 8011d4c:	4413      	add	r3, r2
 8011d4e:	69fa      	ldr	r2, [r7, #28]
 8011d50:	429a      	cmp	r2, r3
 8011d52:	d006      	beq.n	8011d62 <tcp_output_segment+0x16e>
 8011d54:	4b10      	ldr	r3, [pc, #64]	; (8011d98 <tcp_output_segment+0x1a4>)
 8011d56:	f240 621c 	movw	r2, #1564	; 0x61c
 8011d5a:	4915      	ldr	r1, [pc, #84]	; (8011db0 <tcp_output_segment+0x1bc>)
 8011d5c:	4810      	ldr	r0, [pc, #64]	; (8011da0 <tcp_output_segment+0x1ac>)
 8011d5e:	f007 ff5f 	bl	8019c20 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	6858      	ldr	r0, [r3, #4]
 8011d66:	68b9      	ldr	r1, [r7, #8]
 8011d68:	68bb      	ldr	r3, [r7, #8]
 8011d6a:	1d1c      	adds	r4, r3, #4
 8011d6c:	68bb      	ldr	r3, [r7, #8]
 8011d6e:	7add      	ldrb	r5, [r3, #11]
 8011d70:	68bb      	ldr	r3, [r7, #8]
 8011d72:	7a9b      	ldrb	r3, [r3, #10]
 8011d74:	687a      	ldr	r2, [r7, #4]
 8011d76:	9202      	str	r2, [sp, #8]
 8011d78:	2206      	movs	r2, #6
 8011d7a:	9201      	str	r2, [sp, #4]
 8011d7c:	9300      	str	r3, [sp, #0]
 8011d7e:	462b      	mov	r3, r5
 8011d80:	4622      	mov	r2, r4
 8011d82:	f004 fcfb 	bl	801677c <ip4_output_if>
 8011d86:	4603      	mov	r3, r0
 8011d88:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011d8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011d8e:	4618      	mov	r0, r3
 8011d90:	3720      	adds	r7, #32
 8011d92:	46bd      	mov	sp, r7
 8011d94:	bdb0      	pop	{r4, r5, r7, pc}
 8011d96:	bf00      	nop
 8011d98:	0801d368 	.word	0x0801d368
 8011d9c:	0801d92c 	.word	0x0801d92c
 8011da0:	0801d3bc 	.word	0x0801d3bc
 8011da4:	0801d94c 	.word	0x0801d94c
 8011da8:	0801d96c 	.word	0x0801d96c
 8011dac:	2000fd3c 	.word	0x2000fd3c
 8011db0:	0801d990 	.word	0x0801d990

08011db4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011db4:	b5b0      	push	{r4, r5, r7, lr}
 8011db6:	b084      	sub	sp, #16
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d106      	bne.n	8011dd0 <tcp_rexmit_rto_prepare+0x1c>
 8011dc2:	4b31      	ldr	r3, [pc, #196]	; (8011e88 <tcp_rexmit_rto_prepare+0xd4>)
 8011dc4:	f240 6263 	movw	r2, #1635	; 0x663
 8011dc8:	4930      	ldr	r1, [pc, #192]	; (8011e8c <tcp_rexmit_rto_prepare+0xd8>)
 8011dca:	4831      	ldr	r0, [pc, #196]	; (8011e90 <tcp_rexmit_rto_prepare+0xdc>)
 8011dcc:	f007 ff28 	bl	8019c20 <iprintf>

  if (pcb->unacked == NULL) {
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d102      	bne.n	8011dde <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011dd8:	f06f 0305 	mvn.w	r3, #5
 8011ddc:	e050      	b.n	8011e80 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011de2:	60fb      	str	r3, [r7, #12]
 8011de4:	e00b      	b.n	8011dfe <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011de6:	68f8      	ldr	r0, [r7, #12]
 8011de8:	f7ff fee4 	bl	8011bb4 <tcp_output_segment_busy>
 8011dec:	4603      	mov	r3, r0
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d002      	beq.n	8011df8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011df2:	f06f 0305 	mvn.w	r3, #5
 8011df6:	e043      	b.n	8011e80 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	60fb      	str	r3, [r7, #12]
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d1ef      	bne.n	8011de6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011e06:	68f8      	ldr	r0, [r7, #12]
 8011e08:	f7ff fed4 	bl	8011bb4 <tcp_output_segment_busy>
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d002      	beq.n	8011e18 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011e12:	f06f 0305 	mvn.w	r3, #5
 8011e16:	e033      	b.n	8011e80 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	8b5b      	ldrh	r3, [r3, #26]
 8011e32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011e36:	b29a      	uxth	r2, r3
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	68db      	ldr	r3, [r3, #12]
 8011e40:	685b      	ldr	r3, [r3, #4]
 8011e42:	4618      	mov	r0, r3
 8011e44:	f7f8 fd8f 	bl	800a966 <lwip_htonl>
 8011e48:	4604      	mov	r4, r0
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	891b      	ldrh	r3, [r3, #8]
 8011e4e:	461d      	mov	r5, r3
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	68db      	ldr	r3, [r3, #12]
 8011e54:	899b      	ldrh	r3, [r3, #12]
 8011e56:	b29b      	uxth	r3, r3
 8011e58:	4618      	mov	r0, r3
 8011e5a:	f7f8 fd6f 	bl	800a93c <lwip_htons>
 8011e5e:	4603      	mov	r3, r0
 8011e60:	b2db      	uxtb	r3, r3
 8011e62:	f003 0303 	and.w	r3, r3, #3
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d001      	beq.n	8011e6e <tcp_rexmit_rto_prepare+0xba>
 8011e6a:	2301      	movs	r3, #1
 8011e6c:	e000      	b.n	8011e70 <tcp_rexmit_rto_prepare+0xbc>
 8011e6e:	2300      	movs	r3, #0
 8011e70:	442b      	add	r3, r5
 8011e72:	18e2      	adds	r2, r4, r3
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8011e7e:	2300      	movs	r3, #0
}
 8011e80:	4618      	mov	r0, r3
 8011e82:	3710      	adds	r7, #16
 8011e84:	46bd      	mov	sp, r7
 8011e86:	bdb0      	pop	{r4, r5, r7, pc}
 8011e88:	0801d368 	.word	0x0801d368
 8011e8c:	0801d9a4 	.word	0x0801d9a4
 8011e90:	0801d3bc 	.word	0x0801d3bc

08011e94 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011e94:	b580      	push	{r7, lr}
 8011e96:	b082      	sub	sp, #8
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d106      	bne.n	8011eb0 <tcp_rexmit_rto_commit+0x1c>
 8011ea2:	4b0d      	ldr	r3, [pc, #52]	; (8011ed8 <tcp_rexmit_rto_commit+0x44>)
 8011ea4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011ea8:	490c      	ldr	r1, [pc, #48]	; (8011edc <tcp_rexmit_rto_commit+0x48>)
 8011eaa:	480d      	ldr	r0, [pc, #52]	; (8011ee0 <tcp_rexmit_rto_commit+0x4c>)
 8011eac:	f007 feb8 	bl	8019c20 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011eb6:	2bff      	cmp	r3, #255	; 0xff
 8011eb8:	d007      	beq.n	8011eca <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011ec0:	3301      	adds	r3, #1
 8011ec2:	b2da      	uxtb	r2, r3
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011eca:	6878      	ldr	r0, [r7, #4]
 8011ecc:	f7ff fc7a 	bl	80117c4 <tcp_output>
}
 8011ed0:	bf00      	nop
 8011ed2:	3708      	adds	r7, #8
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bd80      	pop	{r7, pc}
 8011ed8:	0801d368 	.word	0x0801d368
 8011edc:	0801d9c8 	.word	0x0801d9c8
 8011ee0:	0801d3bc 	.word	0x0801d3bc

08011ee4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b082      	sub	sp, #8
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d106      	bne.n	8011f00 <tcp_rexmit_rto+0x1c>
 8011ef2:	4b0a      	ldr	r3, [pc, #40]	; (8011f1c <tcp_rexmit_rto+0x38>)
 8011ef4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011ef8:	4909      	ldr	r1, [pc, #36]	; (8011f20 <tcp_rexmit_rto+0x3c>)
 8011efa:	480a      	ldr	r0, [pc, #40]	; (8011f24 <tcp_rexmit_rto+0x40>)
 8011efc:	f007 fe90 	bl	8019c20 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011f00:	6878      	ldr	r0, [r7, #4]
 8011f02:	f7ff ff57 	bl	8011db4 <tcp_rexmit_rto_prepare>
 8011f06:	4603      	mov	r3, r0
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d102      	bne.n	8011f12 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	f7ff ffc1 	bl	8011e94 <tcp_rexmit_rto_commit>
  }
}
 8011f12:	bf00      	nop
 8011f14:	3708      	adds	r7, #8
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd80      	pop	{r7, pc}
 8011f1a:	bf00      	nop
 8011f1c:	0801d368 	.word	0x0801d368
 8011f20:	0801d9ec 	.word	0x0801d9ec
 8011f24:	0801d3bc 	.word	0x0801d3bc

08011f28 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011f28:	b590      	push	{r4, r7, lr}
 8011f2a:	b085      	sub	sp, #20
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d106      	bne.n	8011f44 <tcp_rexmit+0x1c>
 8011f36:	4b2f      	ldr	r3, [pc, #188]	; (8011ff4 <tcp_rexmit+0xcc>)
 8011f38:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8011f3c:	492e      	ldr	r1, [pc, #184]	; (8011ff8 <tcp_rexmit+0xd0>)
 8011f3e:	482f      	ldr	r0, [pc, #188]	; (8011ffc <tcp_rexmit+0xd4>)
 8011f40:	f007 fe6e 	bl	8019c20 <iprintf>

  if (pcb->unacked == NULL) {
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d102      	bne.n	8011f52 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011f4c:	f06f 0305 	mvn.w	r3, #5
 8011f50:	e04c      	b.n	8011fec <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f56:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011f58:	68b8      	ldr	r0, [r7, #8]
 8011f5a:	f7ff fe2b 	bl	8011bb4 <tcp_output_segment_busy>
 8011f5e:	4603      	mov	r3, r0
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d002      	beq.n	8011f6a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011f64:	f06f 0305 	mvn.w	r3, #5
 8011f68:	e040      	b.n	8011fec <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011f6a:	68bb      	ldr	r3, [r7, #8]
 8011f6c:	681a      	ldr	r2, [r3, #0]
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	336c      	adds	r3, #108	; 0x6c
 8011f76:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011f78:	e002      	b.n	8011f80 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d011      	beq.n	8011fac <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	68db      	ldr	r3, [r3, #12]
 8011f8e:	685b      	ldr	r3, [r3, #4]
 8011f90:	4618      	mov	r0, r3
 8011f92:	f7f8 fce8 	bl	800a966 <lwip_htonl>
 8011f96:	4604      	mov	r4, r0
 8011f98:	68bb      	ldr	r3, [r7, #8]
 8011f9a:	68db      	ldr	r3, [r3, #12]
 8011f9c:	685b      	ldr	r3, [r3, #4]
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	f7f8 fce1 	bl	800a966 <lwip_htonl>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	dbe6      	blt.n	8011f7a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	681a      	ldr	r2, [r3, #0]
 8011fb0:	68bb      	ldr	r3, [r7, #8]
 8011fb2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	68ba      	ldr	r2, [r7, #8]
 8011fb8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011fba:	68bb      	ldr	r3, [r7, #8]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d103      	bne.n	8011fca <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011fd0:	2bff      	cmp	r3, #255	; 0xff
 8011fd2:	d007      	beq.n	8011fe4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011fda:	3301      	adds	r3, #1
 8011fdc:	b2da      	uxtb	r2, r3
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011fea:	2300      	movs	r3, #0
}
 8011fec:	4618      	mov	r0, r3
 8011fee:	3714      	adds	r7, #20
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	bd90      	pop	{r4, r7, pc}
 8011ff4:	0801d368 	.word	0x0801d368
 8011ff8:	0801da08 	.word	0x0801da08
 8011ffc:	0801d3bc 	.word	0x0801d3bc

08012000 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b082      	sub	sp, #8
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d106      	bne.n	801201c <tcp_rexmit_fast+0x1c>
 801200e:	4b2f      	ldr	r3, [pc, #188]	; (80120cc <tcp_rexmit_fast+0xcc>)
 8012010:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012014:	492e      	ldr	r1, [pc, #184]	; (80120d0 <tcp_rexmit_fast+0xd0>)
 8012016:	482f      	ldr	r0, [pc, #188]	; (80120d4 <tcp_rexmit_fast+0xd4>)
 8012018:	f007 fe02 	bl	8019c20 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012020:	2b00      	cmp	r3, #0
 8012022:	d04f      	beq.n	80120c4 <tcp_rexmit_fast+0xc4>
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	8b5b      	ldrh	r3, [r3, #26]
 8012028:	f003 0304 	and.w	r3, r3, #4
 801202c:	2b00      	cmp	r3, #0
 801202e:	d149      	bne.n	80120c4 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012030:	6878      	ldr	r0, [r7, #4]
 8012032:	f7ff ff79 	bl	8011f28 <tcp_rexmit>
 8012036:	4603      	mov	r3, r0
 8012038:	2b00      	cmp	r3, #0
 801203a:	d143      	bne.n	80120c4 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012048:	429a      	cmp	r2, r3
 801204a:	d208      	bcs.n	801205e <tcp_rexmit_fast+0x5e>
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012052:	2b00      	cmp	r3, #0
 8012054:	da00      	bge.n	8012058 <tcp_rexmit_fast+0x58>
 8012056:	3301      	adds	r3, #1
 8012058:	105b      	asrs	r3, r3, #1
 801205a:	b29b      	uxth	r3, r3
 801205c:	e007      	b.n	801206e <tcp_rexmit_fast+0x6e>
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012064:	2b00      	cmp	r3, #0
 8012066:	da00      	bge.n	801206a <tcp_rexmit_fast+0x6a>
 8012068:	3301      	adds	r3, #1
 801206a:	105b      	asrs	r3, r3, #1
 801206c:	b29b      	uxth	r3, r3
 801206e:	687a      	ldr	r2, [r7, #4]
 8012070:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801207a:	461a      	mov	r2, r3
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012080:	005b      	lsls	r3, r3, #1
 8012082:	429a      	cmp	r2, r3
 8012084:	d206      	bcs.n	8012094 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801208a:	005b      	lsls	r3, r3, #1
 801208c:	b29a      	uxth	r2, r3
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801209e:	4619      	mov	r1, r3
 80120a0:	0049      	lsls	r1, r1, #1
 80120a2:	440b      	add	r3, r1
 80120a4:	b29b      	uxth	r3, r3
 80120a6:	4413      	add	r3, r2
 80120a8:	b29a      	uxth	r2, r3
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	8b5b      	ldrh	r3, [r3, #26]
 80120b4:	f043 0304 	orr.w	r3, r3, #4
 80120b8:	b29a      	uxth	r2, r3
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	2200      	movs	r2, #0
 80120c2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80120c4:	bf00      	nop
 80120c6:	3708      	adds	r7, #8
 80120c8:	46bd      	mov	sp, r7
 80120ca:	bd80      	pop	{r7, pc}
 80120cc:	0801d368 	.word	0x0801d368
 80120d0:	0801da20 	.word	0x0801da20
 80120d4:	0801d3bc 	.word	0x0801d3bc

080120d8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b086      	sub	sp, #24
 80120dc:	af00      	add	r7, sp, #0
 80120de:	60f8      	str	r0, [r7, #12]
 80120e0:	607b      	str	r3, [r7, #4]
 80120e2:	460b      	mov	r3, r1
 80120e4:	817b      	strh	r3, [r7, #10]
 80120e6:	4613      	mov	r3, r2
 80120e8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80120ea:	897a      	ldrh	r2, [r7, #10]
 80120ec:	893b      	ldrh	r3, [r7, #8]
 80120ee:	4413      	add	r3, r2
 80120f0:	b29b      	uxth	r3, r3
 80120f2:	3314      	adds	r3, #20
 80120f4:	b29b      	uxth	r3, r3
 80120f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80120fa:	4619      	mov	r1, r3
 80120fc:	2022      	movs	r0, #34	; 0x22
 80120fe:	f7f9 fcf1 	bl	800bae4 <pbuf_alloc>
 8012102:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012104:	697b      	ldr	r3, [r7, #20]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d04e      	beq.n	80121a8 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801210a:	697b      	ldr	r3, [r7, #20]
 801210c:	895b      	ldrh	r3, [r3, #10]
 801210e:	461a      	mov	r2, r3
 8012110:	897b      	ldrh	r3, [r7, #10]
 8012112:	3314      	adds	r3, #20
 8012114:	429a      	cmp	r2, r3
 8012116:	da06      	bge.n	8012126 <tcp_output_alloc_header_common+0x4e>
 8012118:	4b26      	ldr	r3, [pc, #152]	; (80121b4 <tcp_output_alloc_header_common+0xdc>)
 801211a:	f240 7224 	movw	r2, #1828	; 0x724
 801211e:	4926      	ldr	r1, [pc, #152]	; (80121b8 <tcp_output_alloc_header_common+0xe0>)
 8012120:	4826      	ldr	r0, [pc, #152]	; (80121bc <tcp_output_alloc_header_common+0xe4>)
 8012122:	f007 fd7d 	bl	8019c20 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012126:	697b      	ldr	r3, [r7, #20]
 8012128:	685b      	ldr	r3, [r3, #4]
 801212a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801212c:	8c3b      	ldrh	r3, [r7, #32]
 801212e:	4618      	mov	r0, r3
 8012130:	f7f8 fc04 	bl	800a93c <lwip_htons>
 8012134:	4603      	mov	r3, r0
 8012136:	461a      	mov	r2, r3
 8012138:	693b      	ldr	r3, [r7, #16]
 801213a:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801213c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801213e:	4618      	mov	r0, r3
 8012140:	f7f8 fbfc 	bl	800a93c <lwip_htons>
 8012144:	4603      	mov	r3, r0
 8012146:	461a      	mov	r2, r3
 8012148:	693b      	ldr	r3, [r7, #16]
 801214a:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801214c:	693b      	ldr	r3, [r7, #16]
 801214e:	687a      	ldr	r2, [r7, #4]
 8012150:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012152:	68f8      	ldr	r0, [r7, #12]
 8012154:	f7f8 fc07 	bl	800a966 <lwip_htonl>
 8012158:	4602      	mov	r2, r0
 801215a:	693b      	ldr	r3, [r7, #16]
 801215c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801215e:	897b      	ldrh	r3, [r7, #10]
 8012160:	089b      	lsrs	r3, r3, #2
 8012162:	b29b      	uxth	r3, r3
 8012164:	3305      	adds	r3, #5
 8012166:	b29b      	uxth	r3, r3
 8012168:	031b      	lsls	r3, r3, #12
 801216a:	b29a      	uxth	r2, r3
 801216c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012170:	b29b      	uxth	r3, r3
 8012172:	4313      	orrs	r3, r2
 8012174:	b29b      	uxth	r3, r3
 8012176:	4618      	mov	r0, r3
 8012178:	f7f8 fbe0 	bl	800a93c <lwip_htons>
 801217c:	4603      	mov	r3, r0
 801217e:	461a      	mov	r2, r3
 8012180:	693b      	ldr	r3, [r7, #16]
 8012182:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012184:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012186:	4618      	mov	r0, r3
 8012188:	f7f8 fbd8 	bl	800a93c <lwip_htons>
 801218c:	4603      	mov	r3, r0
 801218e:	461a      	mov	r2, r3
 8012190:	693b      	ldr	r3, [r7, #16]
 8012192:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012194:	693b      	ldr	r3, [r7, #16]
 8012196:	2200      	movs	r2, #0
 8012198:	741a      	strb	r2, [r3, #16]
 801219a:	2200      	movs	r2, #0
 801219c:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801219e:	693b      	ldr	r3, [r7, #16]
 80121a0:	2200      	movs	r2, #0
 80121a2:	749a      	strb	r2, [r3, #18]
 80121a4:	2200      	movs	r2, #0
 80121a6:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80121a8:	697b      	ldr	r3, [r7, #20]
}
 80121aa:	4618      	mov	r0, r3
 80121ac:	3718      	adds	r7, #24
 80121ae:	46bd      	mov	sp, r7
 80121b0:	bd80      	pop	{r7, pc}
 80121b2:	bf00      	nop
 80121b4:	0801d368 	.word	0x0801d368
 80121b8:	0801da40 	.word	0x0801da40
 80121bc:	0801d3bc 	.word	0x0801d3bc

080121c0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80121c0:	b5b0      	push	{r4, r5, r7, lr}
 80121c2:	b08a      	sub	sp, #40	; 0x28
 80121c4:	af04      	add	r7, sp, #16
 80121c6:	60f8      	str	r0, [r7, #12]
 80121c8:	607b      	str	r3, [r7, #4]
 80121ca:	460b      	mov	r3, r1
 80121cc:	817b      	strh	r3, [r7, #10]
 80121ce:	4613      	mov	r3, r2
 80121d0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d106      	bne.n	80121e6 <tcp_output_alloc_header+0x26>
 80121d8:	4b15      	ldr	r3, [pc, #84]	; (8012230 <tcp_output_alloc_header+0x70>)
 80121da:	f240 7242 	movw	r2, #1858	; 0x742
 80121de:	4915      	ldr	r1, [pc, #84]	; (8012234 <tcp_output_alloc_header+0x74>)
 80121e0:	4815      	ldr	r0, [pc, #84]	; (8012238 <tcp_output_alloc_header+0x78>)
 80121e2:	f007 fd1d 	bl	8019c20 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	8adb      	ldrh	r3, [r3, #22]
 80121ee:	68fa      	ldr	r2, [r7, #12]
 80121f0:	8b12      	ldrh	r2, [r2, #24]
 80121f2:	68f9      	ldr	r1, [r7, #12]
 80121f4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80121f6:	893d      	ldrh	r5, [r7, #8]
 80121f8:	897c      	ldrh	r4, [r7, #10]
 80121fa:	9103      	str	r1, [sp, #12]
 80121fc:	2110      	movs	r1, #16
 80121fe:	9102      	str	r1, [sp, #8]
 8012200:	9201      	str	r2, [sp, #4]
 8012202:	9300      	str	r3, [sp, #0]
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	462a      	mov	r2, r5
 8012208:	4621      	mov	r1, r4
 801220a:	f7ff ff65 	bl	80120d8 <tcp_output_alloc_header_common>
 801220e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012210:	697b      	ldr	r3, [r7, #20]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d006      	beq.n	8012224 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801221a:	68fa      	ldr	r2, [r7, #12]
 801221c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801221e:	441a      	add	r2, r3
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012224:	697b      	ldr	r3, [r7, #20]
}
 8012226:	4618      	mov	r0, r3
 8012228:	3718      	adds	r7, #24
 801222a:	46bd      	mov	sp, r7
 801222c:	bdb0      	pop	{r4, r5, r7, pc}
 801222e:	bf00      	nop
 8012230:	0801d368 	.word	0x0801d368
 8012234:	0801da70 	.word	0x0801da70
 8012238:	0801d3bc 	.word	0x0801d3bc

0801223c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b088      	sub	sp, #32
 8012240:	af00      	add	r7, sp, #0
 8012242:	60f8      	str	r0, [r7, #12]
 8012244:	60b9      	str	r1, [r7, #8]
 8012246:	4611      	mov	r1, r2
 8012248:	461a      	mov	r2, r3
 801224a:	460b      	mov	r3, r1
 801224c:	71fb      	strb	r3, [r7, #7]
 801224e:	4613      	mov	r3, r2
 8012250:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012252:	2300      	movs	r3, #0
 8012254:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012256:	68bb      	ldr	r3, [r7, #8]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d106      	bne.n	801226a <tcp_output_fill_options+0x2e>
 801225c:	4b13      	ldr	r3, [pc, #76]	; (80122ac <tcp_output_fill_options+0x70>)
 801225e:	f240 7256 	movw	r2, #1878	; 0x756
 8012262:	4913      	ldr	r1, [pc, #76]	; (80122b0 <tcp_output_fill_options+0x74>)
 8012264:	4813      	ldr	r0, [pc, #76]	; (80122b4 <tcp_output_fill_options+0x78>)
 8012266:	f007 fcdb 	bl	8019c20 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801226a:	68bb      	ldr	r3, [r7, #8]
 801226c:	685b      	ldr	r3, [r3, #4]
 801226e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012270:	69bb      	ldr	r3, [r7, #24]
 8012272:	3314      	adds	r3, #20
 8012274:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012276:	69bb      	ldr	r3, [r7, #24]
 8012278:	f103 0214 	add.w	r2, r3, #20
 801227c:	8bfb      	ldrh	r3, [r7, #30]
 801227e:	009b      	lsls	r3, r3, #2
 8012280:	4619      	mov	r1, r3
 8012282:	79fb      	ldrb	r3, [r7, #7]
 8012284:	009b      	lsls	r3, r3, #2
 8012286:	f003 0304 	and.w	r3, r3, #4
 801228a:	440b      	add	r3, r1
 801228c:	4413      	add	r3, r2
 801228e:	697a      	ldr	r2, [r7, #20]
 8012290:	429a      	cmp	r2, r3
 8012292:	d006      	beq.n	80122a2 <tcp_output_fill_options+0x66>
 8012294:	4b05      	ldr	r3, [pc, #20]	; (80122ac <tcp_output_fill_options+0x70>)
 8012296:	f240 7275 	movw	r2, #1909	; 0x775
 801229a:	4907      	ldr	r1, [pc, #28]	; (80122b8 <tcp_output_fill_options+0x7c>)
 801229c:	4805      	ldr	r0, [pc, #20]	; (80122b4 <tcp_output_fill_options+0x78>)
 801229e:	f007 fcbf 	bl	8019c20 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80122a2:	bf00      	nop
 80122a4:	3720      	adds	r7, #32
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}
 80122aa:	bf00      	nop
 80122ac:	0801d368 	.word	0x0801d368
 80122b0:	0801da98 	.word	0x0801da98
 80122b4:	0801d3bc 	.word	0x0801d3bc
 80122b8:	0801d990 	.word	0x0801d990

080122bc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b08a      	sub	sp, #40	; 0x28
 80122c0:	af04      	add	r7, sp, #16
 80122c2:	60f8      	str	r0, [r7, #12]
 80122c4:	60b9      	str	r1, [r7, #8]
 80122c6:	607a      	str	r2, [r7, #4]
 80122c8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80122ca:	68bb      	ldr	r3, [r7, #8]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d106      	bne.n	80122de <tcp_output_control_segment+0x22>
 80122d0:	4b1c      	ldr	r3, [pc, #112]	; (8012344 <tcp_output_control_segment+0x88>)
 80122d2:	f240 7287 	movw	r2, #1927	; 0x787
 80122d6:	491c      	ldr	r1, [pc, #112]	; (8012348 <tcp_output_control_segment+0x8c>)
 80122d8:	481c      	ldr	r0, [pc, #112]	; (801234c <tcp_output_control_segment+0x90>)
 80122da:	f007 fca1 	bl	8019c20 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80122de:	683a      	ldr	r2, [r7, #0]
 80122e0:	6879      	ldr	r1, [r7, #4]
 80122e2:	68f8      	ldr	r0, [r7, #12]
 80122e4:	f7fe fad4 	bl	8010890 <tcp_route>
 80122e8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80122ea:	693b      	ldr	r3, [r7, #16]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d102      	bne.n	80122f6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80122f0:	23fc      	movs	r3, #252	; 0xfc
 80122f2:	75fb      	strb	r3, [r7, #23]
 80122f4:	e01c      	b.n	8012330 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d006      	beq.n	801230a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	7adb      	ldrb	r3, [r3, #11]
 8012300:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	7a9b      	ldrb	r3, [r3, #10]
 8012306:	757b      	strb	r3, [r7, #21]
 8012308:	e003      	b.n	8012312 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801230a:	23ff      	movs	r3, #255	; 0xff
 801230c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801230e:	2300      	movs	r3, #0
 8012310:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012312:	7dba      	ldrb	r2, [r7, #22]
 8012314:	693b      	ldr	r3, [r7, #16]
 8012316:	9302      	str	r3, [sp, #8]
 8012318:	2306      	movs	r3, #6
 801231a:	9301      	str	r3, [sp, #4]
 801231c:	7d7b      	ldrb	r3, [r7, #21]
 801231e:	9300      	str	r3, [sp, #0]
 8012320:	4613      	mov	r3, r2
 8012322:	683a      	ldr	r2, [r7, #0]
 8012324:	6879      	ldr	r1, [r7, #4]
 8012326:	68b8      	ldr	r0, [r7, #8]
 8012328:	f004 fa28 	bl	801677c <ip4_output_if>
 801232c:	4603      	mov	r3, r0
 801232e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012330:	68b8      	ldr	r0, [r7, #8]
 8012332:	f7f9 fee9 	bl	800c108 <pbuf_free>
  return err;
 8012336:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801233a:	4618      	mov	r0, r3
 801233c:	3718      	adds	r7, #24
 801233e:	46bd      	mov	sp, r7
 8012340:	bd80      	pop	{r7, pc}
 8012342:	bf00      	nop
 8012344:	0801d368 	.word	0x0801d368
 8012348:	0801dac0 	.word	0x0801dac0
 801234c:	0801d3bc 	.word	0x0801d3bc

08012350 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012350:	b590      	push	{r4, r7, lr}
 8012352:	b08b      	sub	sp, #44	; 0x2c
 8012354:	af04      	add	r7, sp, #16
 8012356:	60f8      	str	r0, [r7, #12]
 8012358:	60b9      	str	r1, [r7, #8]
 801235a:	607a      	str	r2, [r7, #4]
 801235c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801235e:	683b      	ldr	r3, [r7, #0]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d106      	bne.n	8012372 <tcp_rst+0x22>
 8012364:	4b1f      	ldr	r3, [pc, #124]	; (80123e4 <tcp_rst+0x94>)
 8012366:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801236a:	491f      	ldr	r1, [pc, #124]	; (80123e8 <tcp_rst+0x98>)
 801236c:	481f      	ldr	r0, [pc, #124]	; (80123ec <tcp_rst+0x9c>)
 801236e:	f007 fc57 	bl	8019c20 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012374:	2b00      	cmp	r3, #0
 8012376:	d106      	bne.n	8012386 <tcp_rst+0x36>
 8012378:	4b1a      	ldr	r3, [pc, #104]	; (80123e4 <tcp_rst+0x94>)
 801237a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801237e:	491c      	ldr	r1, [pc, #112]	; (80123f0 <tcp_rst+0xa0>)
 8012380:	481a      	ldr	r0, [pc, #104]	; (80123ec <tcp_rst+0x9c>)
 8012382:	f007 fc4d 	bl	8019c20 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012386:	2300      	movs	r3, #0
 8012388:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801238a:	f246 0308 	movw	r3, #24584	; 0x6008
 801238e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012390:	7dfb      	ldrb	r3, [r7, #23]
 8012392:	b29c      	uxth	r4, r3
 8012394:	68b8      	ldr	r0, [r7, #8]
 8012396:	f7f8 fae6 	bl	800a966 <lwip_htonl>
 801239a:	4602      	mov	r2, r0
 801239c:	8abb      	ldrh	r3, [r7, #20]
 801239e:	9303      	str	r3, [sp, #12]
 80123a0:	2314      	movs	r3, #20
 80123a2:	9302      	str	r3, [sp, #8]
 80123a4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80123a6:	9301      	str	r3, [sp, #4]
 80123a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80123aa:	9300      	str	r3, [sp, #0]
 80123ac:	4613      	mov	r3, r2
 80123ae:	2200      	movs	r2, #0
 80123b0:	4621      	mov	r1, r4
 80123b2:	6878      	ldr	r0, [r7, #4]
 80123b4:	f7ff fe90 	bl	80120d8 <tcp_output_alloc_header_common>
 80123b8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80123ba:	693b      	ldr	r3, [r7, #16]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d00c      	beq.n	80123da <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80123c0:	7dfb      	ldrb	r3, [r7, #23]
 80123c2:	2200      	movs	r2, #0
 80123c4:	6939      	ldr	r1, [r7, #16]
 80123c6:	68f8      	ldr	r0, [r7, #12]
 80123c8:	f7ff ff38 	bl	801223c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80123cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123ce:	683a      	ldr	r2, [r7, #0]
 80123d0:	6939      	ldr	r1, [r7, #16]
 80123d2:	68f8      	ldr	r0, [r7, #12]
 80123d4:	f7ff ff72 	bl	80122bc <tcp_output_control_segment>
 80123d8:	e000      	b.n	80123dc <tcp_rst+0x8c>
    return;
 80123da:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80123dc:	371c      	adds	r7, #28
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd90      	pop	{r4, r7, pc}
 80123e2:	bf00      	nop
 80123e4:	0801d368 	.word	0x0801d368
 80123e8:	0801daec 	.word	0x0801daec
 80123ec:	0801d3bc 	.word	0x0801d3bc
 80123f0:	0801db08 	.word	0x0801db08

080123f4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80123f4:	b590      	push	{r4, r7, lr}
 80123f6:	b087      	sub	sp, #28
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80123fc:	2300      	movs	r3, #0
 80123fe:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012400:	2300      	movs	r3, #0
 8012402:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d106      	bne.n	8012418 <tcp_send_empty_ack+0x24>
 801240a:	4b28      	ldr	r3, [pc, #160]	; (80124ac <tcp_send_empty_ack+0xb8>)
 801240c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012410:	4927      	ldr	r1, [pc, #156]	; (80124b0 <tcp_send_empty_ack+0xbc>)
 8012412:	4828      	ldr	r0, [pc, #160]	; (80124b4 <tcp_send_empty_ack+0xc0>)
 8012414:	f007 fc04 	bl	8019c20 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012418:	7dfb      	ldrb	r3, [r7, #23]
 801241a:	009b      	lsls	r3, r3, #2
 801241c:	b2db      	uxtb	r3, r3
 801241e:	f003 0304 	and.w	r3, r3, #4
 8012422:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012424:	7d7b      	ldrb	r3, [r7, #21]
 8012426:	b29c      	uxth	r4, r3
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801242c:	4618      	mov	r0, r3
 801242e:	f7f8 fa9a 	bl	800a966 <lwip_htonl>
 8012432:	4603      	mov	r3, r0
 8012434:	2200      	movs	r2, #0
 8012436:	4621      	mov	r1, r4
 8012438:	6878      	ldr	r0, [r7, #4]
 801243a:	f7ff fec1 	bl	80121c0 <tcp_output_alloc_header>
 801243e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012440:	693b      	ldr	r3, [r7, #16]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d109      	bne.n	801245a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	8b5b      	ldrh	r3, [r3, #26]
 801244a:	f043 0303 	orr.w	r3, r3, #3
 801244e:	b29a      	uxth	r2, r3
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012454:	f06f 0301 	mvn.w	r3, #1
 8012458:	e023      	b.n	80124a2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801245a:	7dbb      	ldrb	r3, [r7, #22]
 801245c:	7dfa      	ldrb	r2, [r7, #23]
 801245e:	6939      	ldr	r1, [r7, #16]
 8012460:	6878      	ldr	r0, [r7, #4]
 8012462:	f7ff feeb 	bl	801223c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012466:	687a      	ldr	r2, [r7, #4]
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	3304      	adds	r3, #4
 801246c:	6939      	ldr	r1, [r7, #16]
 801246e:	6878      	ldr	r0, [r7, #4]
 8012470:	f7ff ff24 	bl	80122bc <tcp_output_control_segment>
 8012474:	4603      	mov	r3, r0
 8012476:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012478:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d007      	beq.n	8012490 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	8b5b      	ldrh	r3, [r3, #26]
 8012484:	f043 0303 	orr.w	r3, r3, #3
 8012488:	b29a      	uxth	r2, r3
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	835a      	strh	r2, [r3, #26]
 801248e:	e006      	b.n	801249e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	8b5b      	ldrh	r3, [r3, #26]
 8012494:	f023 0303 	bic.w	r3, r3, #3
 8012498:	b29a      	uxth	r2, r3
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801249e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80124a2:	4618      	mov	r0, r3
 80124a4:	371c      	adds	r7, #28
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bd90      	pop	{r4, r7, pc}
 80124aa:	bf00      	nop
 80124ac:	0801d368 	.word	0x0801d368
 80124b0:	0801db24 	.word	0x0801db24
 80124b4:	0801d3bc 	.word	0x0801d3bc

080124b8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80124b8:	b590      	push	{r4, r7, lr}
 80124ba:	b087      	sub	sp, #28
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80124c0:	2300      	movs	r3, #0
 80124c2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d106      	bne.n	80124d8 <tcp_keepalive+0x20>
 80124ca:	4b18      	ldr	r3, [pc, #96]	; (801252c <tcp_keepalive+0x74>)
 80124cc:	f640 0224 	movw	r2, #2084	; 0x824
 80124d0:	4917      	ldr	r1, [pc, #92]	; (8012530 <tcp_keepalive+0x78>)
 80124d2:	4818      	ldr	r0, [pc, #96]	; (8012534 <tcp_keepalive+0x7c>)
 80124d4:	f007 fba4 	bl	8019c20 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80124d8:	7dfb      	ldrb	r3, [r7, #23]
 80124da:	b29c      	uxth	r4, r3
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80124e0:	3b01      	subs	r3, #1
 80124e2:	4618      	mov	r0, r3
 80124e4:	f7f8 fa3f 	bl	800a966 <lwip_htonl>
 80124e8:	4603      	mov	r3, r0
 80124ea:	2200      	movs	r2, #0
 80124ec:	4621      	mov	r1, r4
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f7ff fe66 	bl	80121c0 <tcp_output_alloc_header>
 80124f4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80124f6:	693b      	ldr	r3, [r7, #16]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d102      	bne.n	8012502 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80124fc:	f04f 33ff 	mov.w	r3, #4294967295
 8012500:	e010      	b.n	8012524 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012502:	7dfb      	ldrb	r3, [r7, #23]
 8012504:	2200      	movs	r2, #0
 8012506:	6939      	ldr	r1, [r7, #16]
 8012508:	6878      	ldr	r0, [r7, #4]
 801250a:	f7ff fe97 	bl	801223c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801250e:	687a      	ldr	r2, [r7, #4]
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	3304      	adds	r3, #4
 8012514:	6939      	ldr	r1, [r7, #16]
 8012516:	6878      	ldr	r0, [r7, #4]
 8012518:	f7ff fed0 	bl	80122bc <tcp_output_control_segment>
 801251c:	4603      	mov	r3, r0
 801251e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012520:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012524:	4618      	mov	r0, r3
 8012526:	371c      	adds	r7, #28
 8012528:	46bd      	mov	sp, r7
 801252a:	bd90      	pop	{r4, r7, pc}
 801252c:	0801d368 	.word	0x0801d368
 8012530:	0801db44 	.word	0x0801db44
 8012534:	0801d3bc 	.word	0x0801d3bc

08012538 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012538:	b590      	push	{r4, r7, lr}
 801253a:	b08b      	sub	sp, #44	; 0x2c
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012540:	2300      	movs	r3, #0
 8012542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d106      	bne.n	801255a <tcp_zero_window_probe+0x22>
 801254c:	4b4c      	ldr	r3, [pc, #304]	; (8012680 <tcp_zero_window_probe+0x148>)
 801254e:	f640 024f 	movw	r2, #2127	; 0x84f
 8012552:	494c      	ldr	r1, [pc, #304]	; (8012684 <tcp_zero_window_probe+0x14c>)
 8012554:	484c      	ldr	r0, [pc, #304]	; (8012688 <tcp_zero_window_probe+0x150>)
 8012556:	f007 fb63 	bl	8019c20 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801255e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012560:	6a3b      	ldr	r3, [r7, #32]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d101      	bne.n	801256a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012566:	2300      	movs	r3, #0
 8012568:	e086      	b.n	8012678 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012570:	2bff      	cmp	r3, #255	; 0xff
 8012572:	d007      	beq.n	8012584 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801257a:	3301      	adds	r3, #1
 801257c:	b2da      	uxtb	r2, r3
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012584:	6a3b      	ldr	r3, [r7, #32]
 8012586:	68db      	ldr	r3, [r3, #12]
 8012588:	899b      	ldrh	r3, [r3, #12]
 801258a:	b29b      	uxth	r3, r3
 801258c:	4618      	mov	r0, r3
 801258e:	f7f8 f9d5 	bl	800a93c <lwip_htons>
 8012592:	4603      	mov	r3, r0
 8012594:	b2db      	uxtb	r3, r3
 8012596:	f003 0301 	and.w	r3, r3, #1
 801259a:	2b00      	cmp	r3, #0
 801259c:	d005      	beq.n	80125aa <tcp_zero_window_probe+0x72>
 801259e:	6a3b      	ldr	r3, [r7, #32]
 80125a0:	891b      	ldrh	r3, [r3, #8]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d101      	bne.n	80125aa <tcp_zero_window_probe+0x72>
 80125a6:	2301      	movs	r3, #1
 80125a8:	e000      	b.n	80125ac <tcp_zero_window_probe+0x74>
 80125aa:	2300      	movs	r3, #0
 80125ac:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80125ae:	7ffb      	ldrb	r3, [r7, #31]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	bf0c      	ite	eq
 80125b4:	2301      	moveq	r3, #1
 80125b6:	2300      	movne	r3, #0
 80125b8:	b2db      	uxtb	r3, r3
 80125ba:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80125bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125c0:	b299      	uxth	r1, r3
 80125c2:	6a3b      	ldr	r3, [r7, #32]
 80125c4:	68db      	ldr	r3, [r3, #12]
 80125c6:	685b      	ldr	r3, [r3, #4]
 80125c8:	8bba      	ldrh	r2, [r7, #28]
 80125ca:	6878      	ldr	r0, [r7, #4]
 80125cc:	f7ff fdf8 	bl	80121c0 <tcp_output_alloc_header>
 80125d0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80125d2:	69bb      	ldr	r3, [r7, #24]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d102      	bne.n	80125de <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80125d8:	f04f 33ff 	mov.w	r3, #4294967295
 80125dc:	e04c      	b.n	8012678 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80125de:	69bb      	ldr	r3, [r7, #24]
 80125e0:	685b      	ldr	r3, [r3, #4]
 80125e2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80125e4:	7ffb      	ldrb	r3, [r7, #31]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d011      	beq.n	801260e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80125ea:	697b      	ldr	r3, [r7, #20]
 80125ec:	899b      	ldrh	r3, [r3, #12]
 80125ee:	b29b      	uxth	r3, r3
 80125f0:	b21b      	sxth	r3, r3
 80125f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80125f6:	b21c      	sxth	r4, r3
 80125f8:	2011      	movs	r0, #17
 80125fa:	f7f8 f99f 	bl	800a93c <lwip_htons>
 80125fe:	4603      	mov	r3, r0
 8012600:	b21b      	sxth	r3, r3
 8012602:	4323      	orrs	r3, r4
 8012604:	b21b      	sxth	r3, r3
 8012606:	b29a      	uxth	r2, r3
 8012608:	697b      	ldr	r3, [r7, #20]
 801260a:	819a      	strh	r2, [r3, #12]
 801260c:	e010      	b.n	8012630 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801260e:	69bb      	ldr	r3, [r7, #24]
 8012610:	685b      	ldr	r3, [r3, #4]
 8012612:	3314      	adds	r3, #20
 8012614:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012616:	6a3b      	ldr	r3, [r7, #32]
 8012618:	6858      	ldr	r0, [r3, #4]
 801261a:	6a3b      	ldr	r3, [r7, #32]
 801261c:	685b      	ldr	r3, [r3, #4]
 801261e:	891a      	ldrh	r2, [r3, #8]
 8012620:	6a3b      	ldr	r3, [r7, #32]
 8012622:	891b      	ldrh	r3, [r3, #8]
 8012624:	1ad3      	subs	r3, r2, r3
 8012626:	b29b      	uxth	r3, r3
 8012628:	2201      	movs	r2, #1
 801262a:	6939      	ldr	r1, [r7, #16]
 801262c:	f7f9 ff72 	bl	800c514 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012630:	6a3b      	ldr	r3, [r7, #32]
 8012632:	68db      	ldr	r3, [r3, #12]
 8012634:	685b      	ldr	r3, [r3, #4]
 8012636:	4618      	mov	r0, r3
 8012638:	f7f8 f995 	bl	800a966 <lwip_htonl>
 801263c:	4603      	mov	r3, r0
 801263e:	3301      	adds	r3, #1
 8012640:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	1ad3      	subs	r3, r2, r3
 801264a:	2b00      	cmp	r3, #0
 801264c:	da02      	bge.n	8012654 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	68fa      	ldr	r2, [r7, #12]
 8012652:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012658:	2200      	movs	r2, #0
 801265a:	69b9      	ldr	r1, [r7, #24]
 801265c:	6878      	ldr	r0, [r7, #4]
 801265e:	f7ff fded 	bl	801223c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012662:	687a      	ldr	r2, [r7, #4]
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	3304      	adds	r3, #4
 8012668:	69b9      	ldr	r1, [r7, #24]
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f7ff fe26 	bl	80122bc <tcp_output_control_segment>
 8012670:	4603      	mov	r3, r0
 8012672:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012674:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012678:	4618      	mov	r0, r3
 801267a:	372c      	adds	r7, #44	; 0x2c
 801267c:	46bd      	mov	sp, r7
 801267e:	bd90      	pop	{r4, r7, pc}
 8012680:	0801d368 	.word	0x0801d368
 8012684:	0801db60 	.word	0x0801db60
 8012688:	0801d3bc 	.word	0x0801d3bc

0801268c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b082      	sub	sp, #8
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012694:	f7fa f82c 	bl	800c6f0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012698:	4b0a      	ldr	r3, [pc, #40]	; (80126c4 <tcpip_tcp_timer+0x38>)
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d103      	bne.n	80126a8 <tcpip_tcp_timer+0x1c>
 80126a0:	4b09      	ldr	r3, [pc, #36]	; (80126c8 <tcpip_tcp_timer+0x3c>)
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d005      	beq.n	80126b4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80126a8:	2200      	movs	r2, #0
 80126aa:	4908      	ldr	r1, [pc, #32]	; (80126cc <tcpip_tcp_timer+0x40>)
 80126ac:	20fa      	movs	r0, #250	; 0xfa
 80126ae:	f000 f8f1 	bl	8012894 <sys_timeout>
 80126b2:	e002      	b.n	80126ba <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80126b4:	4b06      	ldr	r3, [pc, #24]	; (80126d0 <tcpip_tcp_timer+0x44>)
 80126b6:	2200      	movs	r2, #0
 80126b8:	601a      	str	r2, [r3, #0]
  }
}
 80126ba:	bf00      	nop
 80126bc:	3708      	adds	r7, #8
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd80      	pop	{r7, pc}
 80126c2:	bf00      	nop
 80126c4:	2000fd38 	.word	0x2000fd38
 80126c8:	2000fd48 	.word	0x2000fd48
 80126cc:	0801268d 	.word	0x0801268d
 80126d0:	2000868c 	.word	0x2000868c

080126d4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80126d4:	b580      	push	{r7, lr}
 80126d6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80126d8:	4b0a      	ldr	r3, [pc, #40]	; (8012704 <tcp_timer_needed+0x30>)
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d10f      	bne.n	8012700 <tcp_timer_needed+0x2c>
 80126e0:	4b09      	ldr	r3, [pc, #36]	; (8012708 <tcp_timer_needed+0x34>)
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d103      	bne.n	80126f0 <tcp_timer_needed+0x1c>
 80126e8:	4b08      	ldr	r3, [pc, #32]	; (801270c <tcp_timer_needed+0x38>)
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d007      	beq.n	8012700 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80126f0:	4b04      	ldr	r3, [pc, #16]	; (8012704 <tcp_timer_needed+0x30>)
 80126f2:	2201      	movs	r2, #1
 80126f4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80126f6:	2200      	movs	r2, #0
 80126f8:	4905      	ldr	r1, [pc, #20]	; (8012710 <tcp_timer_needed+0x3c>)
 80126fa:	20fa      	movs	r0, #250	; 0xfa
 80126fc:	f000 f8ca 	bl	8012894 <sys_timeout>
  }
}
 8012700:	bf00      	nop
 8012702:	bd80      	pop	{r7, pc}
 8012704:	2000868c 	.word	0x2000868c
 8012708:	2000fd38 	.word	0x2000fd38
 801270c:	2000fd48 	.word	0x2000fd48
 8012710:	0801268d 	.word	0x0801268d

08012714 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b086      	sub	sp, #24
 8012718:	af00      	add	r7, sp, #0
 801271a:	60f8      	str	r0, [r7, #12]
 801271c:	60b9      	str	r1, [r7, #8]
 801271e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012720:	200a      	movs	r0, #10
 8012722:	f7f8 fdc1 	bl	800b2a8 <memp_malloc>
 8012726:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012728:	693b      	ldr	r3, [r7, #16]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d109      	bne.n	8012742 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801272e:	693b      	ldr	r3, [r7, #16]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d151      	bne.n	80127d8 <sys_timeout_abs+0xc4>
 8012734:	4b2a      	ldr	r3, [pc, #168]	; (80127e0 <sys_timeout_abs+0xcc>)
 8012736:	22be      	movs	r2, #190	; 0xbe
 8012738:	492a      	ldr	r1, [pc, #168]	; (80127e4 <sys_timeout_abs+0xd0>)
 801273a:	482b      	ldr	r0, [pc, #172]	; (80127e8 <sys_timeout_abs+0xd4>)
 801273c:	f007 fa70 	bl	8019c20 <iprintf>
    return;
 8012740:	e04a      	b.n	80127d8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012742:	693b      	ldr	r3, [r7, #16]
 8012744:	2200      	movs	r2, #0
 8012746:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012748:	693b      	ldr	r3, [r7, #16]
 801274a:	68ba      	ldr	r2, [r7, #8]
 801274c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801274e:	693b      	ldr	r3, [r7, #16]
 8012750:	687a      	ldr	r2, [r7, #4]
 8012752:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012754:	693b      	ldr	r3, [r7, #16]
 8012756:	68fa      	ldr	r2, [r7, #12]
 8012758:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801275a:	4b24      	ldr	r3, [pc, #144]	; (80127ec <sys_timeout_abs+0xd8>)
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d103      	bne.n	801276a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012762:	4a22      	ldr	r2, [pc, #136]	; (80127ec <sys_timeout_abs+0xd8>)
 8012764:	693b      	ldr	r3, [r7, #16]
 8012766:	6013      	str	r3, [r2, #0]
    return;
 8012768:	e037      	b.n	80127da <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801276a:	693b      	ldr	r3, [r7, #16]
 801276c:	685a      	ldr	r2, [r3, #4]
 801276e:	4b1f      	ldr	r3, [pc, #124]	; (80127ec <sys_timeout_abs+0xd8>)
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	685b      	ldr	r3, [r3, #4]
 8012774:	1ad3      	subs	r3, r2, r3
 8012776:	0fdb      	lsrs	r3, r3, #31
 8012778:	f003 0301 	and.w	r3, r3, #1
 801277c:	b2db      	uxtb	r3, r3
 801277e:	2b00      	cmp	r3, #0
 8012780:	d007      	beq.n	8012792 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012782:	4b1a      	ldr	r3, [pc, #104]	; (80127ec <sys_timeout_abs+0xd8>)
 8012784:	681a      	ldr	r2, [r3, #0]
 8012786:	693b      	ldr	r3, [r7, #16]
 8012788:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801278a:	4a18      	ldr	r2, [pc, #96]	; (80127ec <sys_timeout_abs+0xd8>)
 801278c:	693b      	ldr	r3, [r7, #16]
 801278e:	6013      	str	r3, [r2, #0]
 8012790:	e023      	b.n	80127da <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012792:	4b16      	ldr	r3, [pc, #88]	; (80127ec <sys_timeout_abs+0xd8>)
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	617b      	str	r3, [r7, #20]
 8012798:	e01a      	b.n	80127d0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801279a:	697b      	ldr	r3, [r7, #20]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d00b      	beq.n	80127ba <sys_timeout_abs+0xa6>
 80127a2:	693b      	ldr	r3, [r7, #16]
 80127a4:	685a      	ldr	r2, [r3, #4]
 80127a6:	697b      	ldr	r3, [r7, #20]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	685b      	ldr	r3, [r3, #4]
 80127ac:	1ad3      	subs	r3, r2, r3
 80127ae:	0fdb      	lsrs	r3, r3, #31
 80127b0:	f003 0301 	and.w	r3, r3, #1
 80127b4:	b2db      	uxtb	r3, r3
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d007      	beq.n	80127ca <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80127ba:	697b      	ldr	r3, [r7, #20]
 80127bc:	681a      	ldr	r2, [r3, #0]
 80127be:	693b      	ldr	r3, [r7, #16]
 80127c0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80127c2:	697b      	ldr	r3, [r7, #20]
 80127c4:	693a      	ldr	r2, [r7, #16]
 80127c6:	601a      	str	r2, [r3, #0]
        break;
 80127c8:	e007      	b.n	80127da <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80127ca:	697b      	ldr	r3, [r7, #20]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	617b      	str	r3, [r7, #20]
 80127d0:	697b      	ldr	r3, [r7, #20]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d1e1      	bne.n	801279a <sys_timeout_abs+0x86>
 80127d6:	e000      	b.n	80127da <sys_timeout_abs+0xc6>
    return;
 80127d8:	bf00      	nop
      }
    }
  }
}
 80127da:	3718      	adds	r7, #24
 80127dc:	46bd      	mov	sp, r7
 80127de:	bd80      	pop	{r7, pc}
 80127e0:	0801db84 	.word	0x0801db84
 80127e4:	0801dbb8 	.word	0x0801dbb8
 80127e8:	0801dbf8 	.word	0x0801dbf8
 80127ec:	20008684 	.word	0x20008684

080127f0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b086      	sub	sp, #24
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80127fc:	697b      	ldr	r3, [r7, #20]
 80127fe:	685b      	ldr	r3, [r3, #4]
 8012800:	4798      	blx	r3

  now = sys_now();
 8012802:	f7f1 fad7 	bl	8003db4 <sys_now>
 8012806:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012808:	697b      	ldr	r3, [r7, #20]
 801280a:	681a      	ldr	r2, [r3, #0]
 801280c:	4b0f      	ldr	r3, [pc, #60]	; (801284c <lwip_cyclic_timer+0x5c>)
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	4413      	add	r3, r2
 8012812:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012814:	68fa      	ldr	r2, [r7, #12]
 8012816:	693b      	ldr	r3, [r7, #16]
 8012818:	1ad3      	subs	r3, r2, r3
 801281a:	0fdb      	lsrs	r3, r3, #31
 801281c:	f003 0301 	and.w	r3, r3, #1
 8012820:	b2db      	uxtb	r3, r3
 8012822:	2b00      	cmp	r3, #0
 8012824:	d009      	beq.n	801283a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012826:	697b      	ldr	r3, [r7, #20]
 8012828:	681a      	ldr	r2, [r3, #0]
 801282a:	693b      	ldr	r3, [r7, #16]
 801282c:	4413      	add	r3, r2
 801282e:	687a      	ldr	r2, [r7, #4]
 8012830:	4907      	ldr	r1, [pc, #28]	; (8012850 <lwip_cyclic_timer+0x60>)
 8012832:	4618      	mov	r0, r3
 8012834:	f7ff ff6e 	bl	8012714 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012838:	e004      	b.n	8012844 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801283a:	687a      	ldr	r2, [r7, #4]
 801283c:	4904      	ldr	r1, [pc, #16]	; (8012850 <lwip_cyclic_timer+0x60>)
 801283e:	68f8      	ldr	r0, [r7, #12]
 8012840:	f7ff ff68 	bl	8012714 <sys_timeout_abs>
}
 8012844:	bf00      	nop
 8012846:	3718      	adds	r7, #24
 8012848:	46bd      	mov	sp, r7
 801284a:	bd80      	pop	{r7, pc}
 801284c:	20008688 	.word	0x20008688
 8012850:	080127f1 	.word	0x080127f1

08012854 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012854:	b580      	push	{r7, lr}
 8012856:	b082      	sub	sp, #8
 8012858:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801285a:	2301      	movs	r3, #1
 801285c:	607b      	str	r3, [r7, #4]
 801285e:	e00e      	b.n	801287e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012860:	4a0a      	ldr	r2, [pc, #40]	; (801288c <sys_timeouts_init+0x38>)
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	00db      	lsls	r3, r3, #3
 801286c:	4a07      	ldr	r2, [pc, #28]	; (801288c <sys_timeouts_init+0x38>)
 801286e:	4413      	add	r3, r2
 8012870:	461a      	mov	r2, r3
 8012872:	4907      	ldr	r1, [pc, #28]	; (8012890 <sys_timeouts_init+0x3c>)
 8012874:	f000 f80e 	bl	8012894 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	3301      	adds	r3, #1
 801287c:	607b      	str	r3, [r7, #4]
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	2b04      	cmp	r3, #4
 8012882:	d9ed      	bls.n	8012860 <sys_timeouts_init+0xc>
  }
}
 8012884:	bf00      	nop
 8012886:	3708      	adds	r7, #8
 8012888:	46bd      	mov	sp, r7
 801288a:	bd80      	pop	{r7, pc}
 801288c:	0801ec64 	.word	0x0801ec64
 8012890:	080127f1 	.word	0x080127f1

08012894 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b086      	sub	sp, #24
 8012898:	af00      	add	r7, sp, #0
 801289a:	60f8      	str	r0, [r7, #12]
 801289c:	60b9      	str	r1, [r7, #8]
 801289e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80128a6:	d306      	bcc.n	80128b6 <sys_timeout+0x22>
 80128a8:	4b0a      	ldr	r3, [pc, #40]	; (80128d4 <sys_timeout+0x40>)
 80128aa:	f240 1229 	movw	r2, #297	; 0x129
 80128ae:	490a      	ldr	r1, [pc, #40]	; (80128d8 <sys_timeout+0x44>)
 80128b0:	480a      	ldr	r0, [pc, #40]	; (80128dc <sys_timeout+0x48>)
 80128b2:	f007 f9b5 	bl	8019c20 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80128b6:	f7f1 fa7d 	bl	8003db4 <sys_now>
 80128ba:	4602      	mov	r2, r0
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	4413      	add	r3, r2
 80128c0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80128c2:	687a      	ldr	r2, [r7, #4]
 80128c4:	68b9      	ldr	r1, [r7, #8]
 80128c6:	6978      	ldr	r0, [r7, #20]
 80128c8:	f7ff ff24 	bl	8012714 <sys_timeout_abs>
#endif
}
 80128cc:	bf00      	nop
 80128ce:	3718      	adds	r7, #24
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd80      	pop	{r7, pc}
 80128d4:	0801db84 	.word	0x0801db84
 80128d8:	0801dc20 	.word	0x0801dc20
 80128dc:	0801dbf8 	.word	0x0801dbf8

080128e0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b084      	sub	sp, #16
 80128e4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80128e6:	f7f1 fa65 	bl	8003db4 <sys_now>
 80128ea:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80128ec:	4b17      	ldr	r3, [pc, #92]	; (801294c <sys_check_timeouts+0x6c>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80128f2:	68bb      	ldr	r3, [r7, #8]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d022      	beq.n	801293e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80128f8:	68bb      	ldr	r3, [r7, #8]
 80128fa:	685b      	ldr	r3, [r3, #4]
 80128fc:	68fa      	ldr	r2, [r7, #12]
 80128fe:	1ad3      	subs	r3, r2, r3
 8012900:	0fdb      	lsrs	r3, r3, #31
 8012902:	f003 0301 	and.w	r3, r3, #1
 8012906:	b2db      	uxtb	r3, r3
 8012908:	2b00      	cmp	r3, #0
 801290a:	d11a      	bne.n	8012942 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801290c:	68bb      	ldr	r3, [r7, #8]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	4a0e      	ldr	r2, [pc, #56]	; (801294c <sys_check_timeouts+0x6c>)
 8012912:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012914:	68bb      	ldr	r3, [r7, #8]
 8012916:	689b      	ldr	r3, [r3, #8]
 8012918:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801291a:	68bb      	ldr	r3, [r7, #8]
 801291c:	68db      	ldr	r3, [r3, #12]
 801291e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012920:	68bb      	ldr	r3, [r7, #8]
 8012922:	685b      	ldr	r3, [r3, #4]
 8012924:	4a0a      	ldr	r2, [pc, #40]	; (8012950 <sys_check_timeouts+0x70>)
 8012926:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012928:	68b9      	ldr	r1, [r7, #8]
 801292a:	200a      	movs	r0, #10
 801292c:	f7f8 fd0e 	bl	800b34c <memp_free>
    if (handler != NULL) {
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d0da      	beq.n	80128ec <sys_check_timeouts+0xc>
      handler(arg);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	6838      	ldr	r0, [r7, #0]
 801293a:	4798      	blx	r3
  do {
 801293c:	e7d6      	b.n	80128ec <sys_check_timeouts+0xc>
      return;
 801293e:	bf00      	nop
 8012940:	e000      	b.n	8012944 <sys_check_timeouts+0x64>
      return;
 8012942:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012944:	3710      	adds	r7, #16
 8012946:	46bd      	mov	sp, r7
 8012948:	bd80      	pop	{r7, pc}
 801294a:	bf00      	nop
 801294c:	20008684 	.word	0x20008684
 8012950:	20008688 	.word	0x20008688

08012954 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b082      	sub	sp, #8
 8012958:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801295a:	4b16      	ldr	r3, [pc, #88]	; (80129b4 <sys_timeouts_sleeptime+0x60>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d102      	bne.n	8012968 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012962:	f04f 33ff 	mov.w	r3, #4294967295
 8012966:	e020      	b.n	80129aa <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012968:	f7f1 fa24 	bl	8003db4 <sys_now>
 801296c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801296e:	4b11      	ldr	r3, [pc, #68]	; (80129b4 <sys_timeouts_sleeptime+0x60>)
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	685a      	ldr	r2, [r3, #4]
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	1ad3      	subs	r3, r2, r3
 8012978:	0fdb      	lsrs	r3, r3, #31
 801297a:	f003 0301 	and.w	r3, r3, #1
 801297e:	b2db      	uxtb	r3, r3
 8012980:	2b00      	cmp	r3, #0
 8012982:	d001      	beq.n	8012988 <sys_timeouts_sleeptime+0x34>
    return 0;
 8012984:	2300      	movs	r3, #0
 8012986:	e010      	b.n	80129aa <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012988:	4b0a      	ldr	r3, [pc, #40]	; (80129b4 <sys_timeouts_sleeptime+0x60>)
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	685a      	ldr	r2, [r3, #4]
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	1ad3      	subs	r3, r2, r3
 8012992:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	2b00      	cmp	r3, #0
 8012998:	da06      	bge.n	80129a8 <sys_timeouts_sleeptime+0x54>
 801299a:	4b07      	ldr	r3, [pc, #28]	; (80129b8 <sys_timeouts_sleeptime+0x64>)
 801299c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80129a0:	4906      	ldr	r1, [pc, #24]	; (80129bc <sys_timeouts_sleeptime+0x68>)
 80129a2:	4807      	ldr	r0, [pc, #28]	; (80129c0 <sys_timeouts_sleeptime+0x6c>)
 80129a4:	f007 f93c 	bl	8019c20 <iprintf>
    return ret;
 80129a8:	683b      	ldr	r3, [r7, #0]
  }
}
 80129aa:	4618      	mov	r0, r3
 80129ac:	3708      	adds	r7, #8
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}
 80129b2:	bf00      	nop
 80129b4:	20008684 	.word	0x20008684
 80129b8:	0801db84 	.word	0x0801db84
 80129bc:	0801dc58 	.word	0x0801dc58
 80129c0:	0801dbf8 	.word	0x0801dbf8

080129c4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80129c8:	f007 f9a6 	bl	8019d18 <rand>
 80129cc:	4603      	mov	r3, r0
 80129ce:	b29b      	uxth	r3, r3
 80129d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80129d4:	b29b      	uxth	r3, r3
 80129d6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80129da:	b29a      	uxth	r2, r3
 80129dc:	4b01      	ldr	r3, [pc, #4]	; (80129e4 <udp_init+0x20>)
 80129de:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80129e0:	bf00      	nop
 80129e2:	bd80      	pop	{r7, pc}
 80129e4:	20000018 	.word	0x20000018

080129e8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80129e8:	b480      	push	{r7}
 80129ea:	b083      	sub	sp, #12
 80129ec:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80129ee:	2300      	movs	r3, #0
 80129f0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80129f2:	4b17      	ldr	r3, [pc, #92]	; (8012a50 <udp_new_port+0x68>)
 80129f4:	881b      	ldrh	r3, [r3, #0]
 80129f6:	1c5a      	adds	r2, r3, #1
 80129f8:	b291      	uxth	r1, r2
 80129fa:	4a15      	ldr	r2, [pc, #84]	; (8012a50 <udp_new_port+0x68>)
 80129fc:	8011      	strh	r1, [r2, #0]
 80129fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a02:	4293      	cmp	r3, r2
 8012a04:	d103      	bne.n	8012a0e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012a06:	4b12      	ldr	r3, [pc, #72]	; (8012a50 <udp_new_port+0x68>)
 8012a08:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012a0c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a0e:	4b11      	ldr	r3, [pc, #68]	; (8012a54 <udp_new_port+0x6c>)
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	603b      	str	r3, [r7, #0]
 8012a14:	e011      	b.n	8012a3a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012a16:	683b      	ldr	r3, [r7, #0]
 8012a18:	8a5a      	ldrh	r2, [r3, #18]
 8012a1a:	4b0d      	ldr	r3, [pc, #52]	; (8012a50 <udp_new_port+0x68>)
 8012a1c:	881b      	ldrh	r3, [r3, #0]
 8012a1e:	429a      	cmp	r2, r3
 8012a20:	d108      	bne.n	8012a34 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012a22:	88fb      	ldrh	r3, [r7, #6]
 8012a24:	3301      	adds	r3, #1
 8012a26:	80fb      	strh	r3, [r7, #6]
 8012a28:	88fb      	ldrh	r3, [r7, #6]
 8012a2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012a2e:	d3e0      	bcc.n	80129f2 <udp_new_port+0xa>
        return 0;
 8012a30:	2300      	movs	r3, #0
 8012a32:	e007      	b.n	8012a44 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a34:	683b      	ldr	r3, [r7, #0]
 8012a36:	68db      	ldr	r3, [r3, #12]
 8012a38:	603b      	str	r3, [r7, #0]
 8012a3a:	683b      	ldr	r3, [r7, #0]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d1ea      	bne.n	8012a16 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012a40:	4b03      	ldr	r3, [pc, #12]	; (8012a50 <udp_new_port+0x68>)
 8012a42:	881b      	ldrh	r3, [r3, #0]
}
 8012a44:	4618      	mov	r0, r3
 8012a46:	370c      	adds	r7, #12
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4e:	4770      	bx	lr
 8012a50:	20000018 	.word	0x20000018
 8012a54:	2000fd50 	.word	0x2000fd50

08012a58 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b084      	sub	sp, #16
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	60f8      	str	r0, [r7, #12]
 8012a60:	60b9      	str	r1, [r7, #8]
 8012a62:	4613      	mov	r3, r2
 8012a64:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d105      	bne.n	8012a78 <udp_input_local_match+0x20>
 8012a6c:	4b27      	ldr	r3, [pc, #156]	; (8012b0c <udp_input_local_match+0xb4>)
 8012a6e:	2287      	movs	r2, #135	; 0x87
 8012a70:	4927      	ldr	r1, [pc, #156]	; (8012b10 <udp_input_local_match+0xb8>)
 8012a72:	4828      	ldr	r0, [pc, #160]	; (8012b14 <udp_input_local_match+0xbc>)
 8012a74:	f007 f8d4 	bl	8019c20 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012a78:	68bb      	ldr	r3, [r7, #8]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d105      	bne.n	8012a8a <udp_input_local_match+0x32>
 8012a7e:	4b23      	ldr	r3, [pc, #140]	; (8012b0c <udp_input_local_match+0xb4>)
 8012a80:	2288      	movs	r2, #136	; 0x88
 8012a82:	4925      	ldr	r1, [pc, #148]	; (8012b18 <udp_input_local_match+0xc0>)
 8012a84:	4823      	ldr	r0, [pc, #140]	; (8012b14 <udp_input_local_match+0xbc>)
 8012a86:	f007 f8cb 	bl	8019c20 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	7a1b      	ldrb	r3, [r3, #8]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d00b      	beq.n	8012aaa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	7a1a      	ldrb	r2, [r3, #8]
 8012a96:	4b21      	ldr	r3, [pc, #132]	; (8012b1c <udp_input_local_match+0xc4>)
 8012a98:	685b      	ldr	r3, [r3, #4]
 8012a9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012a9e:	3301      	adds	r3, #1
 8012aa0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012aa2:	429a      	cmp	r2, r3
 8012aa4:	d001      	beq.n	8012aaa <udp_input_local_match+0x52>
    return 0;
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	e02b      	b.n	8012b02 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012aaa:	79fb      	ldrb	r3, [r7, #7]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d018      	beq.n	8012ae2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d013      	beq.n	8012ade <udp_input_local_match+0x86>
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d00f      	beq.n	8012ade <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012abe:	4b17      	ldr	r3, [pc, #92]	; (8012b1c <udp_input_local_match+0xc4>)
 8012ac0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ac6:	d00a      	beq.n	8012ade <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	681a      	ldr	r2, [r3, #0]
 8012acc:	4b13      	ldr	r3, [pc, #76]	; (8012b1c <udp_input_local_match+0xc4>)
 8012ace:	695b      	ldr	r3, [r3, #20]
 8012ad0:	405a      	eors	r2, r3
 8012ad2:	68bb      	ldr	r3, [r7, #8]
 8012ad4:	3308      	adds	r3, #8
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d110      	bne.n	8012b00 <udp_input_local_match+0xa8>
          return 1;
 8012ade:	2301      	movs	r3, #1
 8012ae0:	e00f      	b.n	8012b02 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d009      	beq.n	8012afc <udp_input_local_match+0xa4>
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d005      	beq.n	8012afc <udp_input_local_match+0xa4>
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	681a      	ldr	r2, [r3, #0]
 8012af4:	4b09      	ldr	r3, [pc, #36]	; (8012b1c <udp_input_local_match+0xc4>)
 8012af6:	695b      	ldr	r3, [r3, #20]
 8012af8:	429a      	cmp	r2, r3
 8012afa:	d101      	bne.n	8012b00 <udp_input_local_match+0xa8>
        return 1;
 8012afc:	2301      	movs	r3, #1
 8012afe:	e000      	b.n	8012b02 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012b00:	2300      	movs	r3, #0
}
 8012b02:	4618      	mov	r0, r3
 8012b04:	3710      	adds	r7, #16
 8012b06:	46bd      	mov	sp, r7
 8012b08:	bd80      	pop	{r7, pc}
 8012b0a:	bf00      	nop
 8012b0c:	0801dc6c 	.word	0x0801dc6c
 8012b10:	0801dc9c 	.word	0x0801dc9c
 8012b14:	0801dcc0 	.word	0x0801dcc0
 8012b18:	0801dce8 	.word	0x0801dce8
 8012b1c:	2000c5e4 	.word	0x2000c5e4

08012b20 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012b20:	b590      	push	{r4, r7, lr}
 8012b22:	b08d      	sub	sp, #52	; 0x34
 8012b24:	af02      	add	r7, sp, #8
 8012b26:	6078      	str	r0, [r7, #4]
 8012b28:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d105      	bne.n	8012b40 <udp_input+0x20>
 8012b34:	4b7c      	ldr	r3, [pc, #496]	; (8012d28 <udp_input+0x208>)
 8012b36:	22cf      	movs	r2, #207	; 0xcf
 8012b38:	497c      	ldr	r1, [pc, #496]	; (8012d2c <udp_input+0x20c>)
 8012b3a:	487d      	ldr	r0, [pc, #500]	; (8012d30 <udp_input+0x210>)
 8012b3c:	f007 f870 	bl	8019c20 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012b40:	683b      	ldr	r3, [r7, #0]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d105      	bne.n	8012b52 <udp_input+0x32>
 8012b46:	4b78      	ldr	r3, [pc, #480]	; (8012d28 <udp_input+0x208>)
 8012b48:	22d0      	movs	r2, #208	; 0xd0
 8012b4a:	497a      	ldr	r1, [pc, #488]	; (8012d34 <udp_input+0x214>)
 8012b4c:	4878      	ldr	r0, [pc, #480]	; (8012d30 <udp_input+0x210>)
 8012b4e:	f007 f867 	bl	8019c20 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	895b      	ldrh	r3, [r3, #10]
 8012b56:	2b07      	cmp	r3, #7
 8012b58:	d803      	bhi.n	8012b62 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012b5a:	6878      	ldr	r0, [r7, #4]
 8012b5c:	f7f9 fad4 	bl	800c108 <pbuf_free>
    goto end;
 8012b60:	e0de      	b.n	8012d20 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	685b      	ldr	r3, [r3, #4]
 8012b66:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012b68:	4b73      	ldr	r3, [pc, #460]	; (8012d38 <udp_input+0x218>)
 8012b6a:	695a      	ldr	r2, [r3, #20]
 8012b6c:	4b72      	ldr	r3, [pc, #456]	; (8012d38 <udp_input+0x218>)
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	4619      	mov	r1, r3
 8012b72:	4610      	mov	r0, r2
 8012b74:	f003 feda 	bl	801692c <ip4_addr_isbroadcast_u32>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012b7c:	697b      	ldr	r3, [r7, #20]
 8012b7e:	881b      	ldrh	r3, [r3, #0]
 8012b80:	b29b      	uxth	r3, r3
 8012b82:	4618      	mov	r0, r3
 8012b84:	f7f7 feda 	bl	800a93c <lwip_htons>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012b8c:	697b      	ldr	r3, [r7, #20]
 8012b8e:	885b      	ldrh	r3, [r3, #2]
 8012b90:	b29b      	uxth	r3, r3
 8012b92:	4618      	mov	r0, r3
 8012b94:	f7f7 fed2 	bl	800a93c <lwip_htons>
 8012b98:	4603      	mov	r3, r0
 8012b9a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012ba8:	4b64      	ldr	r3, [pc, #400]	; (8012d3c <udp_input+0x21c>)
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	627b      	str	r3, [r7, #36]	; 0x24
 8012bae:	e054      	b.n	8012c5a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bb2:	8a5b      	ldrh	r3, [r3, #18]
 8012bb4:	89fa      	ldrh	r2, [r7, #14]
 8012bb6:	429a      	cmp	r2, r3
 8012bb8:	d14a      	bne.n	8012c50 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012bba:	7cfb      	ldrb	r3, [r7, #19]
 8012bbc:	461a      	mov	r2, r3
 8012bbe:	6839      	ldr	r1, [r7, #0]
 8012bc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012bc2:	f7ff ff49 	bl	8012a58 <udp_input_local_match>
 8012bc6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d041      	beq.n	8012c50 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bce:	7c1b      	ldrb	r3, [r3, #16]
 8012bd0:	f003 0304 	and.w	r3, r3, #4
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d11d      	bne.n	8012c14 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012bd8:	69fb      	ldr	r3, [r7, #28]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d102      	bne.n	8012be4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be0:	61fb      	str	r3, [r7, #28]
 8012be2:	e017      	b.n	8012c14 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012be4:	7cfb      	ldrb	r3, [r7, #19]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d014      	beq.n	8012c14 <udp_input+0xf4>
 8012bea:	4b53      	ldr	r3, [pc, #332]	; (8012d38 <udp_input+0x218>)
 8012bec:	695b      	ldr	r3, [r3, #20]
 8012bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bf2:	d10f      	bne.n	8012c14 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012bf4:	69fb      	ldr	r3, [r7, #28]
 8012bf6:	681a      	ldr	r2, [r3, #0]
 8012bf8:	683b      	ldr	r3, [r7, #0]
 8012bfa:	3304      	adds	r3, #4
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	429a      	cmp	r2, r3
 8012c00:	d008      	beq.n	8012c14 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c04:	681a      	ldr	r2, [r3, #0]
 8012c06:	683b      	ldr	r3, [r7, #0]
 8012c08:	3304      	adds	r3, #4
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	429a      	cmp	r2, r3
 8012c0e:	d101      	bne.n	8012c14 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c12:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c16:	8a9b      	ldrh	r3, [r3, #20]
 8012c18:	8a3a      	ldrh	r2, [r7, #16]
 8012c1a:	429a      	cmp	r2, r3
 8012c1c:	d118      	bne.n	8012c50 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c20:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d005      	beq.n	8012c32 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c28:	685a      	ldr	r2, [r3, #4]
 8012c2a:	4b43      	ldr	r3, [pc, #268]	; (8012d38 <udp_input+0x218>)
 8012c2c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012c2e:	429a      	cmp	r2, r3
 8012c30:	d10e      	bne.n	8012c50 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012c32:	6a3b      	ldr	r3, [r7, #32]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d014      	beq.n	8012c62 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c3a:	68da      	ldr	r2, [r3, #12]
 8012c3c:	6a3b      	ldr	r3, [r7, #32]
 8012c3e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012c40:	4b3e      	ldr	r3, [pc, #248]	; (8012d3c <udp_input+0x21c>)
 8012c42:	681a      	ldr	r2, [r3, #0]
 8012c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c46:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012c48:	4a3c      	ldr	r2, [pc, #240]	; (8012d3c <udp_input+0x21c>)
 8012c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c4c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012c4e:	e008      	b.n	8012c62 <udp_input+0x142>
      }
    }

    prev = pcb;
 8012c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c52:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c56:	68db      	ldr	r3, [r3, #12]
 8012c58:	627b      	str	r3, [r7, #36]	; 0x24
 8012c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d1a7      	bne.n	8012bb0 <udp_input+0x90>
 8012c60:	e000      	b.n	8012c64 <udp_input+0x144>
        break;
 8012c62:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d101      	bne.n	8012c6e <udp_input+0x14e>
    pcb = uncon_pcb;
 8012c6a:	69fb      	ldr	r3, [r7, #28]
 8012c6c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d002      	beq.n	8012c7a <udp_input+0x15a>
    for_us = 1;
 8012c74:	2301      	movs	r3, #1
 8012c76:	76fb      	strb	r3, [r7, #27]
 8012c78:	e00a      	b.n	8012c90 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012c7a:	683b      	ldr	r3, [r7, #0]
 8012c7c:	3304      	adds	r3, #4
 8012c7e:	681a      	ldr	r2, [r3, #0]
 8012c80:	4b2d      	ldr	r3, [pc, #180]	; (8012d38 <udp_input+0x218>)
 8012c82:	695b      	ldr	r3, [r3, #20]
 8012c84:	429a      	cmp	r2, r3
 8012c86:	bf0c      	ite	eq
 8012c88:	2301      	moveq	r3, #1
 8012c8a:	2300      	movne	r3, #0
 8012c8c:	b2db      	uxtb	r3, r3
 8012c8e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012c90:	7efb      	ldrb	r3, [r7, #27]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d041      	beq.n	8012d1a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012c96:	2108      	movs	r1, #8
 8012c98:	6878      	ldr	r0, [r7, #4]
 8012c9a:	f7f9 f97d 	bl	800bf98 <pbuf_remove_header>
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d00a      	beq.n	8012cba <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012ca4:	4b20      	ldr	r3, [pc, #128]	; (8012d28 <udp_input+0x208>)
 8012ca6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012caa:	4925      	ldr	r1, [pc, #148]	; (8012d40 <udp_input+0x220>)
 8012cac:	4820      	ldr	r0, [pc, #128]	; (8012d30 <udp_input+0x210>)
 8012cae:	f006 ffb7 	bl	8019c20 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012cb2:	6878      	ldr	r0, [r7, #4]
 8012cb4:	f7f9 fa28 	bl	800c108 <pbuf_free>
      goto end;
 8012cb8:	e032      	b.n	8012d20 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d012      	beq.n	8012ce6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc2:	699b      	ldr	r3, [r3, #24]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d00a      	beq.n	8012cde <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cca:	699c      	ldr	r4, [r3, #24]
 8012ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cce:	69d8      	ldr	r0, [r3, #28]
 8012cd0:	8a3b      	ldrh	r3, [r7, #16]
 8012cd2:	9300      	str	r3, [sp, #0]
 8012cd4:	4b1b      	ldr	r3, [pc, #108]	; (8012d44 <udp_input+0x224>)
 8012cd6:	687a      	ldr	r2, [r7, #4]
 8012cd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012cda:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012cdc:	e021      	b.n	8012d22 <udp_input+0x202>
        pbuf_free(p);
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	f7f9 fa12 	bl	800c108 <pbuf_free>
        goto end;
 8012ce4:	e01c      	b.n	8012d20 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012ce6:	7cfb      	ldrb	r3, [r7, #19]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d112      	bne.n	8012d12 <udp_input+0x1f2>
 8012cec:	4b12      	ldr	r3, [pc, #72]	; (8012d38 <udp_input+0x218>)
 8012cee:	695b      	ldr	r3, [r3, #20]
 8012cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012cf4:	2be0      	cmp	r3, #224	; 0xe0
 8012cf6:	d00c      	beq.n	8012d12 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012cf8:	4b0f      	ldr	r3, [pc, #60]	; (8012d38 <udp_input+0x218>)
 8012cfa:	899b      	ldrh	r3, [r3, #12]
 8012cfc:	3308      	adds	r3, #8
 8012cfe:	b29b      	uxth	r3, r3
 8012d00:	b21b      	sxth	r3, r3
 8012d02:	4619      	mov	r1, r3
 8012d04:	6878      	ldr	r0, [r7, #4]
 8012d06:	f7f9 f9ba 	bl	800c07e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012d0a:	2103      	movs	r1, #3
 8012d0c:	6878      	ldr	r0, [r7, #4]
 8012d0e:	f003 fad1 	bl	80162b4 <icmp_dest_unreach>
      pbuf_free(p);
 8012d12:	6878      	ldr	r0, [r7, #4]
 8012d14:	f7f9 f9f8 	bl	800c108 <pbuf_free>
  return;
 8012d18:	e003      	b.n	8012d22 <udp_input+0x202>
    pbuf_free(p);
 8012d1a:	6878      	ldr	r0, [r7, #4]
 8012d1c:	f7f9 f9f4 	bl	800c108 <pbuf_free>
  return;
 8012d20:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012d22:	372c      	adds	r7, #44	; 0x2c
 8012d24:	46bd      	mov	sp, r7
 8012d26:	bd90      	pop	{r4, r7, pc}
 8012d28:	0801dc6c 	.word	0x0801dc6c
 8012d2c:	0801dd10 	.word	0x0801dd10
 8012d30:	0801dcc0 	.word	0x0801dcc0
 8012d34:	0801dd28 	.word	0x0801dd28
 8012d38:	2000c5e4 	.word	0x2000c5e4
 8012d3c:	2000fd50 	.word	0x2000fd50
 8012d40:	0801dd44 	.word	0x0801dd44
 8012d44:	2000c5f4 	.word	0x2000c5f4

08012d48 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b082      	sub	sp, #8
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
 8012d50:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d109      	bne.n	8012d6c <udp_send+0x24>
 8012d58:	4b11      	ldr	r3, [pc, #68]	; (8012da0 <udp_send+0x58>)
 8012d5a:	f240 12d5 	movw	r2, #469	; 0x1d5
 8012d5e:	4911      	ldr	r1, [pc, #68]	; (8012da4 <udp_send+0x5c>)
 8012d60:	4811      	ldr	r0, [pc, #68]	; (8012da8 <udp_send+0x60>)
 8012d62:	f006 ff5d 	bl	8019c20 <iprintf>
 8012d66:	f06f 030f 	mvn.w	r3, #15
 8012d6a:	e015      	b.n	8012d98 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8012d6c:	683b      	ldr	r3, [r7, #0]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d109      	bne.n	8012d86 <udp_send+0x3e>
 8012d72:	4b0b      	ldr	r3, [pc, #44]	; (8012da0 <udp_send+0x58>)
 8012d74:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8012d78:	490c      	ldr	r1, [pc, #48]	; (8012dac <udp_send+0x64>)
 8012d7a:	480b      	ldr	r0, [pc, #44]	; (8012da8 <udp_send+0x60>)
 8012d7c:	f006 ff50 	bl	8019c20 <iprintf>
 8012d80:	f06f 030f 	mvn.w	r3, #15
 8012d84:	e008      	b.n	8012d98 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	1d1a      	adds	r2, r3, #4
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	8a9b      	ldrh	r3, [r3, #20]
 8012d8e:	6839      	ldr	r1, [r7, #0]
 8012d90:	6878      	ldr	r0, [r7, #4]
 8012d92:	f000 f80d 	bl	8012db0 <udp_sendto>
 8012d96:	4603      	mov	r3, r0
}
 8012d98:	4618      	mov	r0, r3
 8012d9a:	3708      	adds	r7, #8
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd80      	pop	{r7, pc}
 8012da0:	0801dc6c 	.word	0x0801dc6c
 8012da4:	0801dd60 	.word	0x0801dd60
 8012da8:	0801dcc0 	.word	0x0801dcc0
 8012dac:	0801dd78 	.word	0x0801dd78

08012db0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b088      	sub	sp, #32
 8012db4:	af02      	add	r7, sp, #8
 8012db6:	60f8      	str	r0, [r7, #12]
 8012db8:	60b9      	str	r1, [r7, #8]
 8012dba:	607a      	str	r2, [r7, #4]
 8012dbc:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d109      	bne.n	8012dd8 <udp_sendto+0x28>
 8012dc4:	4b23      	ldr	r3, [pc, #140]	; (8012e54 <udp_sendto+0xa4>)
 8012dc6:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012dca:	4923      	ldr	r1, [pc, #140]	; (8012e58 <udp_sendto+0xa8>)
 8012dcc:	4823      	ldr	r0, [pc, #140]	; (8012e5c <udp_sendto+0xac>)
 8012dce:	f006 ff27 	bl	8019c20 <iprintf>
 8012dd2:	f06f 030f 	mvn.w	r3, #15
 8012dd6:	e038      	b.n	8012e4a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8012dd8:	68bb      	ldr	r3, [r7, #8]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d109      	bne.n	8012df2 <udp_sendto+0x42>
 8012dde:	4b1d      	ldr	r3, [pc, #116]	; (8012e54 <udp_sendto+0xa4>)
 8012de0:	f240 2219 	movw	r2, #537	; 0x219
 8012de4:	491e      	ldr	r1, [pc, #120]	; (8012e60 <udp_sendto+0xb0>)
 8012de6:	481d      	ldr	r0, [pc, #116]	; (8012e5c <udp_sendto+0xac>)
 8012de8:	f006 ff1a 	bl	8019c20 <iprintf>
 8012dec:	f06f 030f 	mvn.w	r3, #15
 8012df0:	e02b      	b.n	8012e4a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d109      	bne.n	8012e0c <udp_sendto+0x5c>
 8012df8:	4b16      	ldr	r3, [pc, #88]	; (8012e54 <udp_sendto+0xa4>)
 8012dfa:	f240 221a 	movw	r2, #538	; 0x21a
 8012dfe:	4919      	ldr	r1, [pc, #100]	; (8012e64 <udp_sendto+0xb4>)
 8012e00:	4816      	ldr	r0, [pc, #88]	; (8012e5c <udp_sendto+0xac>)
 8012e02:	f006 ff0d 	bl	8019c20 <iprintf>
 8012e06:	f06f 030f 	mvn.w	r3, #15
 8012e0a:	e01e      	b.n	8012e4a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	7a1b      	ldrb	r3, [r3, #8]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d006      	beq.n	8012e22 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	7a1b      	ldrb	r3, [r3, #8]
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f7f8 fdb9 	bl	800b990 <netif_get_by_index>
 8012e1e:	6178      	str	r0, [r7, #20]
 8012e20:	e003      	b.n	8012e2a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8012e22:	6878      	ldr	r0, [r7, #4]
 8012e24:	f003 fad0 	bl	80163c8 <ip4_route>
 8012e28:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8012e2a:	697b      	ldr	r3, [r7, #20]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d102      	bne.n	8012e36 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8012e30:	f06f 0303 	mvn.w	r3, #3
 8012e34:	e009      	b.n	8012e4a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8012e36:	887a      	ldrh	r2, [r7, #2]
 8012e38:	697b      	ldr	r3, [r7, #20]
 8012e3a:	9300      	str	r3, [sp, #0]
 8012e3c:	4613      	mov	r3, r2
 8012e3e:	687a      	ldr	r2, [r7, #4]
 8012e40:	68b9      	ldr	r1, [r7, #8]
 8012e42:	68f8      	ldr	r0, [r7, #12]
 8012e44:	f000 f810 	bl	8012e68 <udp_sendto_if>
 8012e48:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	3718      	adds	r7, #24
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	bd80      	pop	{r7, pc}
 8012e52:	bf00      	nop
 8012e54:	0801dc6c 	.word	0x0801dc6c
 8012e58:	0801dd90 	.word	0x0801dd90
 8012e5c:	0801dcc0 	.word	0x0801dcc0
 8012e60:	0801dda8 	.word	0x0801dda8
 8012e64:	0801ddc4 	.word	0x0801ddc4

08012e68 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b088      	sub	sp, #32
 8012e6c:	af02      	add	r7, sp, #8
 8012e6e:	60f8      	str	r0, [r7, #12]
 8012e70:	60b9      	str	r1, [r7, #8]
 8012e72:	607a      	str	r2, [r7, #4]
 8012e74:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d109      	bne.n	8012e90 <udp_sendto_if+0x28>
 8012e7c:	4b2e      	ldr	r3, [pc, #184]	; (8012f38 <udp_sendto_if+0xd0>)
 8012e7e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012e82:	492e      	ldr	r1, [pc, #184]	; (8012f3c <udp_sendto_if+0xd4>)
 8012e84:	482e      	ldr	r0, [pc, #184]	; (8012f40 <udp_sendto_if+0xd8>)
 8012e86:	f006 fecb 	bl	8019c20 <iprintf>
 8012e8a:	f06f 030f 	mvn.w	r3, #15
 8012e8e:	e04f      	b.n	8012f30 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8012e90:	68bb      	ldr	r3, [r7, #8]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d109      	bne.n	8012eaa <udp_sendto_if+0x42>
 8012e96:	4b28      	ldr	r3, [pc, #160]	; (8012f38 <udp_sendto_if+0xd0>)
 8012e98:	f240 2281 	movw	r2, #641	; 0x281
 8012e9c:	4929      	ldr	r1, [pc, #164]	; (8012f44 <udp_sendto_if+0xdc>)
 8012e9e:	4828      	ldr	r0, [pc, #160]	; (8012f40 <udp_sendto_if+0xd8>)
 8012ea0:	f006 febe 	bl	8019c20 <iprintf>
 8012ea4:	f06f 030f 	mvn.w	r3, #15
 8012ea8:	e042      	b.n	8012f30 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d109      	bne.n	8012ec4 <udp_sendto_if+0x5c>
 8012eb0:	4b21      	ldr	r3, [pc, #132]	; (8012f38 <udp_sendto_if+0xd0>)
 8012eb2:	f240 2282 	movw	r2, #642	; 0x282
 8012eb6:	4924      	ldr	r1, [pc, #144]	; (8012f48 <udp_sendto_if+0xe0>)
 8012eb8:	4821      	ldr	r0, [pc, #132]	; (8012f40 <udp_sendto_if+0xd8>)
 8012eba:	f006 feb1 	bl	8019c20 <iprintf>
 8012ebe:	f06f 030f 	mvn.w	r3, #15
 8012ec2:	e035      	b.n	8012f30 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8012ec4:	6a3b      	ldr	r3, [r7, #32]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d109      	bne.n	8012ede <udp_sendto_if+0x76>
 8012eca:	4b1b      	ldr	r3, [pc, #108]	; (8012f38 <udp_sendto_if+0xd0>)
 8012ecc:	f240 2283 	movw	r2, #643	; 0x283
 8012ed0:	491e      	ldr	r1, [pc, #120]	; (8012f4c <udp_sendto_if+0xe4>)
 8012ed2:	481b      	ldr	r0, [pc, #108]	; (8012f40 <udp_sendto_if+0xd8>)
 8012ed4:	f006 fea4 	bl	8019c20 <iprintf>
 8012ed8:	f06f 030f 	mvn.w	r3, #15
 8012edc:	e028      	b.n	8012f30 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d009      	beq.n	8012ef8 <udp_sendto_if+0x90>
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d005      	beq.n	8012ef8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012ef4:	2be0      	cmp	r3, #224	; 0xe0
 8012ef6:	d103      	bne.n	8012f00 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8012ef8:	6a3b      	ldr	r3, [r7, #32]
 8012efa:	3304      	adds	r3, #4
 8012efc:	617b      	str	r3, [r7, #20]
 8012efe:	e00b      	b.n	8012f18 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	681a      	ldr	r2, [r3, #0]
 8012f04:	6a3b      	ldr	r3, [r7, #32]
 8012f06:	3304      	adds	r3, #4
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	429a      	cmp	r2, r3
 8012f0c:	d002      	beq.n	8012f14 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8012f0e:	f06f 0303 	mvn.w	r3, #3
 8012f12:	e00d      	b.n	8012f30 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8012f18:	887a      	ldrh	r2, [r7, #2]
 8012f1a:	697b      	ldr	r3, [r7, #20]
 8012f1c:	9301      	str	r3, [sp, #4]
 8012f1e:	6a3b      	ldr	r3, [r7, #32]
 8012f20:	9300      	str	r3, [sp, #0]
 8012f22:	4613      	mov	r3, r2
 8012f24:	687a      	ldr	r2, [r7, #4]
 8012f26:	68b9      	ldr	r1, [r7, #8]
 8012f28:	68f8      	ldr	r0, [r7, #12]
 8012f2a:	f000 f811 	bl	8012f50 <udp_sendto_if_src>
 8012f2e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012f30:	4618      	mov	r0, r3
 8012f32:	3718      	adds	r7, #24
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bd80      	pop	{r7, pc}
 8012f38:	0801dc6c 	.word	0x0801dc6c
 8012f3c:	0801dde0 	.word	0x0801dde0
 8012f40:	0801dcc0 	.word	0x0801dcc0
 8012f44:	0801ddfc 	.word	0x0801ddfc
 8012f48:	0801de18 	.word	0x0801de18
 8012f4c:	0801de38 	.word	0x0801de38

08012f50 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b08c      	sub	sp, #48	; 0x30
 8012f54:	af04      	add	r7, sp, #16
 8012f56:	60f8      	str	r0, [r7, #12]
 8012f58:	60b9      	str	r1, [r7, #8]
 8012f5a:	607a      	str	r2, [r7, #4]
 8012f5c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d109      	bne.n	8012f78 <udp_sendto_if_src+0x28>
 8012f64:	4b65      	ldr	r3, [pc, #404]	; (80130fc <udp_sendto_if_src+0x1ac>)
 8012f66:	f240 22d1 	movw	r2, #721	; 0x2d1
 8012f6a:	4965      	ldr	r1, [pc, #404]	; (8013100 <udp_sendto_if_src+0x1b0>)
 8012f6c:	4865      	ldr	r0, [pc, #404]	; (8013104 <udp_sendto_if_src+0x1b4>)
 8012f6e:	f006 fe57 	bl	8019c20 <iprintf>
 8012f72:	f06f 030f 	mvn.w	r3, #15
 8012f76:	e0bc      	b.n	80130f2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012f78:	68bb      	ldr	r3, [r7, #8]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d109      	bne.n	8012f92 <udp_sendto_if_src+0x42>
 8012f7e:	4b5f      	ldr	r3, [pc, #380]	; (80130fc <udp_sendto_if_src+0x1ac>)
 8012f80:	f240 22d2 	movw	r2, #722	; 0x2d2
 8012f84:	4960      	ldr	r1, [pc, #384]	; (8013108 <udp_sendto_if_src+0x1b8>)
 8012f86:	485f      	ldr	r0, [pc, #380]	; (8013104 <udp_sendto_if_src+0x1b4>)
 8012f88:	f006 fe4a 	bl	8019c20 <iprintf>
 8012f8c:	f06f 030f 	mvn.w	r3, #15
 8012f90:	e0af      	b.n	80130f2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d109      	bne.n	8012fac <udp_sendto_if_src+0x5c>
 8012f98:	4b58      	ldr	r3, [pc, #352]	; (80130fc <udp_sendto_if_src+0x1ac>)
 8012f9a:	f240 22d3 	movw	r2, #723	; 0x2d3
 8012f9e:	495b      	ldr	r1, [pc, #364]	; (801310c <udp_sendto_if_src+0x1bc>)
 8012fa0:	4858      	ldr	r0, [pc, #352]	; (8013104 <udp_sendto_if_src+0x1b4>)
 8012fa2:	f006 fe3d 	bl	8019c20 <iprintf>
 8012fa6:	f06f 030f 	mvn.w	r3, #15
 8012faa:	e0a2      	b.n	80130f2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8012fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d109      	bne.n	8012fc6 <udp_sendto_if_src+0x76>
 8012fb2:	4b52      	ldr	r3, [pc, #328]	; (80130fc <udp_sendto_if_src+0x1ac>)
 8012fb4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8012fb8:	4955      	ldr	r1, [pc, #340]	; (8013110 <udp_sendto_if_src+0x1c0>)
 8012fba:	4852      	ldr	r0, [pc, #328]	; (8013104 <udp_sendto_if_src+0x1b4>)
 8012fbc:	f006 fe30 	bl	8019c20 <iprintf>
 8012fc0:	f06f 030f 	mvn.w	r3, #15
 8012fc4:	e095      	b.n	80130f2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8012fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d109      	bne.n	8012fe0 <udp_sendto_if_src+0x90>
 8012fcc:	4b4b      	ldr	r3, [pc, #300]	; (80130fc <udp_sendto_if_src+0x1ac>)
 8012fce:	f240 22d5 	movw	r2, #725	; 0x2d5
 8012fd2:	4950      	ldr	r1, [pc, #320]	; (8013114 <udp_sendto_if_src+0x1c4>)
 8012fd4:	484b      	ldr	r0, [pc, #300]	; (8013104 <udp_sendto_if_src+0x1b4>)
 8012fd6:	f006 fe23 	bl	8019c20 <iprintf>
 8012fda:	f06f 030f 	mvn.w	r3, #15
 8012fde:	e088      	b.n	80130f2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	8a5b      	ldrh	r3, [r3, #18]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d10f      	bne.n	8013008 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012fe8:	68f9      	ldr	r1, [r7, #12]
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	8a5b      	ldrh	r3, [r3, #18]
 8012fee:	461a      	mov	r2, r3
 8012ff0:	68f8      	ldr	r0, [r7, #12]
 8012ff2:	f000 f893 	bl	801311c <udp_bind>
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8012ffa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d002      	beq.n	8013008 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013002:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013006:	e074      	b.n	80130f2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013008:	68bb      	ldr	r3, [r7, #8]
 801300a:	891b      	ldrh	r3, [r3, #8]
 801300c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013010:	4293      	cmp	r3, r2
 8013012:	d902      	bls.n	801301a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013014:	f04f 33ff 	mov.w	r3, #4294967295
 8013018:	e06b      	b.n	80130f2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801301a:	2108      	movs	r1, #8
 801301c:	68b8      	ldr	r0, [r7, #8]
 801301e:	f7f8 ffab 	bl	800bf78 <pbuf_add_header>
 8013022:	4603      	mov	r3, r0
 8013024:	2b00      	cmp	r3, #0
 8013026:	d015      	beq.n	8013054 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013028:	f44f 7220 	mov.w	r2, #640	; 0x280
 801302c:	2108      	movs	r1, #8
 801302e:	2022      	movs	r0, #34	; 0x22
 8013030:	f7f8 fd58 	bl	800bae4 <pbuf_alloc>
 8013034:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013036:	69fb      	ldr	r3, [r7, #28]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d102      	bne.n	8013042 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801303c:	f04f 33ff 	mov.w	r3, #4294967295
 8013040:	e057      	b.n	80130f2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013042:	68bb      	ldr	r3, [r7, #8]
 8013044:	891b      	ldrh	r3, [r3, #8]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d006      	beq.n	8013058 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801304a:	68b9      	ldr	r1, [r7, #8]
 801304c:	69f8      	ldr	r0, [r7, #28]
 801304e:	f7f9 f97f 	bl	800c350 <pbuf_chain>
 8013052:	e001      	b.n	8013058 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013054:	68bb      	ldr	r3, [r7, #8]
 8013056:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013058:	69fb      	ldr	r3, [r7, #28]
 801305a:	895b      	ldrh	r3, [r3, #10]
 801305c:	2b07      	cmp	r3, #7
 801305e:	d806      	bhi.n	801306e <udp_sendto_if_src+0x11e>
 8013060:	4b26      	ldr	r3, [pc, #152]	; (80130fc <udp_sendto_if_src+0x1ac>)
 8013062:	f240 320e 	movw	r2, #782	; 0x30e
 8013066:	492c      	ldr	r1, [pc, #176]	; (8013118 <udp_sendto_if_src+0x1c8>)
 8013068:	4826      	ldr	r0, [pc, #152]	; (8013104 <udp_sendto_if_src+0x1b4>)
 801306a:	f006 fdd9 	bl	8019c20 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801306e:	69fb      	ldr	r3, [r7, #28]
 8013070:	685b      	ldr	r3, [r3, #4]
 8013072:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	8a5b      	ldrh	r3, [r3, #18]
 8013078:	4618      	mov	r0, r3
 801307a:	f7f7 fc5f 	bl	800a93c <lwip_htons>
 801307e:	4603      	mov	r3, r0
 8013080:	461a      	mov	r2, r3
 8013082:	697b      	ldr	r3, [r7, #20]
 8013084:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013086:	887b      	ldrh	r3, [r7, #2]
 8013088:	4618      	mov	r0, r3
 801308a:	f7f7 fc57 	bl	800a93c <lwip_htons>
 801308e:	4603      	mov	r3, r0
 8013090:	461a      	mov	r2, r3
 8013092:	697b      	ldr	r3, [r7, #20]
 8013094:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8013096:	697b      	ldr	r3, [r7, #20]
 8013098:	2200      	movs	r2, #0
 801309a:	719a      	strb	r2, [r3, #6]
 801309c:	2200      	movs	r2, #0
 801309e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80130a0:	69fb      	ldr	r3, [r7, #28]
 80130a2:	891b      	ldrh	r3, [r3, #8]
 80130a4:	4618      	mov	r0, r3
 80130a6:	f7f7 fc49 	bl	800a93c <lwip_htons>
 80130aa:	4603      	mov	r3, r0
 80130ac:	461a      	mov	r2, r3
 80130ae:	697b      	ldr	r3, [r7, #20]
 80130b0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80130b2:	2311      	movs	r3, #17
 80130b4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	7adb      	ldrb	r3, [r3, #11]
 80130ba:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	7a9b      	ldrb	r3, [r3, #10]
 80130c0:	7cb9      	ldrb	r1, [r7, #18]
 80130c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80130c4:	9202      	str	r2, [sp, #8]
 80130c6:	7cfa      	ldrb	r2, [r7, #19]
 80130c8:	9201      	str	r2, [sp, #4]
 80130ca:	9300      	str	r3, [sp, #0]
 80130cc:	460b      	mov	r3, r1
 80130ce:	687a      	ldr	r2, [r7, #4]
 80130d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80130d2:	69f8      	ldr	r0, [r7, #28]
 80130d4:	f003 fb7c 	bl	80167d0 <ip4_output_if_src>
 80130d8:	4603      	mov	r3, r0
 80130da:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80130dc:	69fa      	ldr	r2, [r7, #28]
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	429a      	cmp	r2, r3
 80130e2:	d004      	beq.n	80130ee <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80130e4:	69f8      	ldr	r0, [r7, #28]
 80130e6:	f7f9 f80f 	bl	800c108 <pbuf_free>
    q = NULL;
 80130ea:	2300      	movs	r3, #0
 80130ec:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80130ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80130f2:	4618      	mov	r0, r3
 80130f4:	3720      	adds	r7, #32
 80130f6:	46bd      	mov	sp, r7
 80130f8:	bd80      	pop	{r7, pc}
 80130fa:	bf00      	nop
 80130fc:	0801dc6c 	.word	0x0801dc6c
 8013100:	0801de58 	.word	0x0801de58
 8013104:	0801dcc0 	.word	0x0801dcc0
 8013108:	0801de78 	.word	0x0801de78
 801310c:	0801de98 	.word	0x0801de98
 8013110:	0801debc 	.word	0x0801debc
 8013114:	0801dee0 	.word	0x0801dee0
 8013118:	0801df04 	.word	0x0801df04

0801311c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b086      	sub	sp, #24
 8013120:	af00      	add	r7, sp, #0
 8013122:	60f8      	str	r0, [r7, #12]
 8013124:	60b9      	str	r1, [r7, #8]
 8013126:	4613      	mov	r3, r2
 8013128:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801312a:	68bb      	ldr	r3, [r7, #8]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d101      	bne.n	8013134 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013130:	4b39      	ldr	r3, [pc, #228]	; (8013218 <udp_bind+0xfc>)
 8013132:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d109      	bne.n	801314e <udp_bind+0x32>
 801313a:	4b38      	ldr	r3, [pc, #224]	; (801321c <udp_bind+0x100>)
 801313c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013140:	4937      	ldr	r1, [pc, #220]	; (8013220 <udp_bind+0x104>)
 8013142:	4838      	ldr	r0, [pc, #224]	; (8013224 <udp_bind+0x108>)
 8013144:	f006 fd6c 	bl	8019c20 <iprintf>
 8013148:	f06f 030f 	mvn.w	r3, #15
 801314c:	e060      	b.n	8013210 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801314e:	2300      	movs	r3, #0
 8013150:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013152:	4b35      	ldr	r3, [pc, #212]	; (8013228 <udp_bind+0x10c>)
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	617b      	str	r3, [r7, #20]
 8013158:	e009      	b.n	801316e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801315a:	68fa      	ldr	r2, [r7, #12]
 801315c:	697b      	ldr	r3, [r7, #20]
 801315e:	429a      	cmp	r2, r3
 8013160:	d102      	bne.n	8013168 <udp_bind+0x4c>
      rebind = 1;
 8013162:	2301      	movs	r3, #1
 8013164:	74fb      	strb	r3, [r7, #19]
      break;
 8013166:	e005      	b.n	8013174 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013168:	697b      	ldr	r3, [r7, #20]
 801316a:	68db      	ldr	r3, [r3, #12]
 801316c:	617b      	str	r3, [r7, #20]
 801316e:	697b      	ldr	r3, [r7, #20]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d1f2      	bne.n	801315a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013174:	88fb      	ldrh	r3, [r7, #6]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d109      	bne.n	801318e <udp_bind+0x72>
    port = udp_new_port();
 801317a:	f7ff fc35 	bl	80129e8 <udp_new_port>
 801317e:	4603      	mov	r3, r0
 8013180:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013182:	88fb      	ldrh	r3, [r7, #6]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d12c      	bne.n	80131e2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013188:	f06f 0307 	mvn.w	r3, #7
 801318c:	e040      	b.n	8013210 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801318e:	4b26      	ldr	r3, [pc, #152]	; (8013228 <udp_bind+0x10c>)
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	617b      	str	r3, [r7, #20]
 8013194:	e022      	b.n	80131dc <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013196:	68fa      	ldr	r2, [r7, #12]
 8013198:	697b      	ldr	r3, [r7, #20]
 801319a:	429a      	cmp	r2, r3
 801319c:	d01b      	beq.n	80131d6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801319e:	697b      	ldr	r3, [r7, #20]
 80131a0:	8a5b      	ldrh	r3, [r3, #18]
 80131a2:	88fa      	ldrh	r2, [r7, #6]
 80131a4:	429a      	cmp	r2, r3
 80131a6:	d116      	bne.n	80131d6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80131a8:	697b      	ldr	r3, [r7, #20]
 80131aa:	681a      	ldr	r2, [r3, #0]
 80131ac:	68bb      	ldr	r3, [r7, #8]
 80131ae:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80131b0:	429a      	cmp	r2, r3
 80131b2:	d00d      	beq.n	80131d0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80131b4:	68bb      	ldr	r3, [r7, #8]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d00a      	beq.n	80131d0 <udp_bind+0xb4>
 80131ba:	68bb      	ldr	r3, [r7, #8]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d006      	beq.n	80131d0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80131c2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d003      	beq.n	80131d0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80131c8:	697b      	ldr	r3, [r7, #20]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d102      	bne.n	80131d6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80131d0:	f06f 0307 	mvn.w	r3, #7
 80131d4:	e01c      	b.n	8013210 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80131d6:	697b      	ldr	r3, [r7, #20]
 80131d8:	68db      	ldr	r3, [r3, #12]
 80131da:	617b      	str	r3, [r7, #20]
 80131dc:	697b      	ldr	r3, [r7, #20]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d1d9      	bne.n	8013196 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80131e2:	68bb      	ldr	r3, [r7, #8]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d002      	beq.n	80131ee <udp_bind+0xd2>
 80131e8:	68bb      	ldr	r3, [r7, #8]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	e000      	b.n	80131f0 <udp_bind+0xd4>
 80131ee:	2300      	movs	r3, #0
 80131f0:	68fa      	ldr	r2, [r7, #12]
 80131f2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	88fa      	ldrh	r2, [r7, #6]
 80131f8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80131fa:	7cfb      	ldrb	r3, [r7, #19]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d106      	bne.n	801320e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013200:	4b09      	ldr	r3, [pc, #36]	; (8013228 <udp_bind+0x10c>)
 8013202:	681a      	ldr	r2, [r3, #0]
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013208:	4a07      	ldr	r2, [pc, #28]	; (8013228 <udp_bind+0x10c>)
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801320e:	2300      	movs	r3, #0
}
 8013210:	4618      	mov	r0, r3
 8013212:	3718      	adds	r7, #24
 8013214:	46bd      	mov	sp, r7
 8013216:	bd80      	pop	{r7, pc}
 8013218:	0801ec8c 	.word	0x0801ec8c
 801321c:	0801dc6c 	.word	0x0801dc6c
 8013220:	0801df34 	.word	0x0801df34
 8013224:	0801dcc0 	.word	0x0801dcc0
 8013228:	2000fd50 	.word	0x2000fd50

0801322c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b086      	sub	sp, #24
 8013230:	af00      	add	r7, sp, #0
 8013232:	60f8      	str	r0, [r7, #12]
 8013234:	60b9      	str	r1, [r7, #8]
 8013236:	4613      	mov	r3, r2
 8013238:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d109      	bne.n	8013254 <udp_connect+0x28>
 8013240:	4b2c      	ldr	r3, [pc, #176]	; (80132f4 <udp_connect+0xc8>)
 8013242:	f240 4235 	movw	r2, #1077	; 0x435
 8013246:	492c      	ldr	r1, [pc, #176]	; (80132f8 <udp_connect+0xcc>)
 8013248:	482c      	ldr	r0, [pc, #176]	; (80132fc <udp_connect+0xd0>)
 801324a:	f006 fce9 	bl	8019c20 <iprintf>
 801324e:	f06f 030f 	mvn.w	r3, #15
 8013252:	e04b      	b.n	80132ec <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013254:	68bb      	ldr	r3, [r7, #8]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d109      	bne.n	801326e <udp_connect+0x42>
 801325a:	4b26      	ldr	r3, [pc, #152]	; (80132f4 <udp_connect+0xc8>)
 801325c:	f240 4236 	movw	r2, #1078	; 0x436
 8013260:	4927      	ldr	r1, [pc, #156]	; (8013300 <udp_connect+0xd4>)
 8013262:	4826      	ldr	r0, [pc, #152]	; (80132fc <udp_connect+0xd0>)
 8013264:	f006 fcdc 	bl	8019c20 <iprintf>
 8013268:	f06f 030f 	mvn.w	r3, #15
 801326c:	e03e      	b.n	80132ec <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	8a5b      	ldrh	r3, [r3, #18]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d10f      	bne.n	8013296 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013276:	68f9      	ldr	r1, [r7, #12]
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	8a5b      	ldrh	r3, [r3, #18]
 801327c:	461a      	mov	r2, r3
 801327e:	68f8      	ldr	r0, [r7, #12]
 8013280:	f7ff ff4c 	bl	801311c <udp_bind>
 8013284:	4603      	mov	r3, r0
 8013286:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013288:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d002      	beq.n	8013296 <udp_connect+0x6a>
      return err;
 8013290:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013294:	e02a      	b.n	80132ec <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8013296:	68bb      	ldr	r3, [r7, #8]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d002      	beq.n	80132a2 <udp_connect+0x76>
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	e000      	b.n	80132a4 <udp_connect+0x78>
 80132a2:	2300      	movs	r3, #0
 80132a4:	68fa      	ldr	r2, [r7, #12]
 80132a6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	88fa      	ldrh	r2, [r7, #6]
 80132ac:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	7c1b      	ldrb	r3, [r3, #16]
 80132b2:	f043 0304 	orr.w	r3, r3, #4
 80132b6:	b2da      	uxtb	r2, r3
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80132bc:	4b11      	ldr	r3, [pc, #68]	; (8013304 <udp_connect+0xd8>)
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	617b      	str	r3, [r7, #20]
 80132c2:	e008      	b.n	80132d6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 80132c4:	68fa      	ldr	r2, [r7, #12]
 80132c6:	697b      	ldr	r3, [r7, #20]
 80132c8:	429a      	cmp	r2, r3
 80132ca:	d101      	bne.n	80132d0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80132cc:	2300      	movs	r3, #0
 80132ce:	e00d      	b.n	80132ec <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80132d0:	697b      	ldr	r3, [r7, #20]
 80132d2:	68db      	ldr	r3, [r3, #12]
 80132d4:	617b      	str	r3, [r7, #20]
 80132d6:	697b      	ldr	r3, [r7, #20]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d1f3      	bne.n	80132c4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80132dc:	4b09      	ldr	r3, [pc, #36]	; (8013304 <udp_connect+0xd8>)
 80132de:	681a      	ldr	r2, [r3, #0]
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80132e4:	4a07      	ldr	r2, [pc, #28]	; (8013304 <udp_connect+0xd8>)
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80132ea:	2300      	movs	r3, #0
}
 80132ec:	4618      	mov	r0, r3
 80132ee:	3718      	adds	r7, #24
 80132f0:	46bd      	mov	sp, r7
 80132f2:	bd80      	pop	{r7, pc}
 80132f4:	0801dc6c 	.word	0x0801dc6c
 80132f8:	0801df4c 	.word	0x0801df4c
 80132fc:	0801dcc0 	.word	0x0801dcc0
 8013300:	0801df68 	.word	0x0801df68
 8013304:	2000fd50 	.word	0x2000fd50

08013308 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b082      	sub	sp, #8
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d107      	bne.n	8013326 <udp_disconnect+0x1e>
 8013316:	4b0d      	ldr	r3, [pc, #52]	; (801334c <udp_disconnect+0x44>)
 8013318:	f240 426a 	movw	r2, #1130	; 0x46a
 801331c:	490c      	ldr	r1, [pc, #48]	; (8013350 <udp_disconnect+0x48>)
 801331e:	480d      	ldr	r0, [pc, #52]	; (8013354 <udp_disconnect+0x4c>)
 8013320:	f006 fc7e 	bl	8019c20 <iprintf>
 8013324:	e00f      	b.n	8013346 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	2200      	movs	r2, #0
 801332a:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	2200      	movs	r2, #0
 8013330:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	2200      	movs	r2, #0
 8013336:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	7c1b      	ldrb	r3, [r3, #16]
 801333c:	f023 0304 	bic.w	r3, r3, #4
 8013340:	b2da      	uxtb	r2, r3
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	741a      	strb	r2, [r3, #16]
}
 8013346:	3708      	adds	r7, #8
 8013348:	46bd      	mov	sp, r7
 801334a:	bd80      	pop	{r7, pc}
 801334c:	0801dc6c 	.word	0x0801dc6c
 8013350:	0801df84 	.word	0x0801df84
 8013354:	0801dcc0 	.word	0x0801dcc0

08013358 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b084      	sub	sp, #16
 801335c:	af00      	add	r7, sp, #0
 801335e:	60f8      	str	r0, [r7, #12]
 8013360:	60b9      	str	r1, [r7, #8]
 8013362:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d107      	bne.n	801337a <udp_recv+0x22>
 801336a:	4b08      	ldr	r3, [pc, #32]	; (801338c <udp_recv+0x34>)
 801336c:	f240 428a 	movw	r2, #1162	; 0x48a
 8013370:	4907      	ldr	r1, [pc, #28]	; (8013390 <udp_recv+0x38>)
 8013372:	4808      	ldr	r0, [pc, #32]	; (8013394 <udp_recv+0x3c>)
 8013374:	f006 fc54 	bl	8019c20 <iprintf>
 8013378:	e005      	b.n	8013386 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	68ba      	ldr	r2, [r7, #8]
 801337e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	687a      	ldr	r2, [r7, #4]
 8013384:	61da      	str	r2, [r3, #28]
}
 8013386:	3710      	adds	r7, #16
 8013388:	46bd      	mov	sp, r7
 801338a:	bd80      	pop	{r7, pc}
 801338c:	0801dc6c 	.word	0x0801dc6c
 8013390:	0801dfa0 	.word	0x0801dfa0
 8013394:	0801dcc0 	.word	0x0801dcc0

08013398 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013398:	b580      	push	{r7, lr}
 801339a:	b084      	sub	sp, #16
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d107      	bne.n	80133b6 <udp_remove+0x1e>
 80133a6:	4b19      	ldr	r3, [pc, #100]	; (801340c <udp_remove+0x74>)
 80133a8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80133ac:	4918      	ldr	r1, [pc, #96]	; (8013410 <udp_remove+0x78>)
 80133ae:	4819      	ldr	r0, [pc, #100]	; (8013414 <udp_remove+0x7c>)
 80133b0:	f006 fc36 	bl	8019c20 <iprintf>
 80133b4:	e026      	b.n	8013404 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80133b6:	4b18      	ldr	r3, [pc, #96]	; (8013418 <udp_remove+0x80>)
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	687a      	ldr	r2, [r7, #4]
 80133bc:	429a      	cmp	r2, r3
 80133be:	d105      	bne.n	80133cc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80133c0:	4b15      	ldr	r3, [pc, #84]	; (8013418 <udp_remove+0x80>)
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	68db      	ldr	r3, [r3, #12]
 80133c6:	4a14      	ldr	r2, [pc, #80]	; (8013418 <udp_remove+0x80>)
 80133c8:	6013      	str	r3, [r2, #0]
 80133ca:	e017      	b.n	80133fc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80133cc:	4b12      	ldr	r3, [pc, #72]	; (8013418 <udp_remove+0x80>)
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	60fb      	str	r3, [r7, #12]
 80133d2:	e010      	b.n	80133f6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	68db      	ldr	r3, [r3, #12]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d009      	beq.n	80133f0 <udp_remove+0x58>
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	68db      	ldr	r3, [r3, #12]
 80133e0:	687a      	ldr	r2, [r7, #4]
 80133e2:	429a      	cmp	r2, r3
 80133e4:	d104      	bne.n	80133f0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	68da      	ldr	r2, [r3, #12]
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	60da      	str	r2, [r3, #12]
        break;
 80133ee:	e005      	b.n	80133fc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	68db      	ldr	r3, [r3, #12]
 80133f4:	60fb      	str	r3, [r7, #12]
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d1eb      	bne.n	80133d4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80133fc:	6879      	ldr	r1, [r7, #4]
 80133fe:	2000      	movs	r0, #0
 8013400:	f7f7 ffa4 	bl	800b34c <memp_free>
}
 8013404:	3710      	adds	r7, #16
 8013406:	46bd      	mov	sp, r7
 8013408:	bd80      	pop	{r7, pc}
 801340a:	bf00      	nop
 801340c:	0801dc6c 	.word	0x0801dc6c
 8013410:	0801dfb8 	.word	0x0801dfb8
 8013414:	0801dcc0 	.word	0x0801dcc0
 8013418:	2000fd50 	.word	0x2000fd50

0801341c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b082      	sub	sp, #8
 8013420:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013422:	2000      	movs	r0, #0
 8013424:	f7f7 ff40 	bl	800b2a8 <memp_malloc>
 8013428:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d007      	beq.n	8013440 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013430:	2220      	movs	r2, #32
 8013432:	2100      	movs	r1, #0
 8013434:	6878      	ldr	r0, [r7, #4]
 8013436:	f006 fbeb 	bl	8019c10 <memset>
    pcb->ttl = UDP_TTL;
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	22ff      	movs	r2, #255	; 0xff
 801343e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013440:	687b      	ldr	r3, [r7, #4]
}
 8013442:	4618      	mov	r0, r3
 8013444:	3708      	adds	r7, #8
 8013446:	46bd      	mov	sp, r7
 8013448:	bd80      	pop	{r7, pc}

0801344a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801344a:	b580      	push	{r7, lr}
 801344c:	b084      	sub	sp, #16
 801344e:	af00      	add	r7, sp, #0
 8013450:	4603      	mov	r3, r0
 8013452:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8013454:	f7ff ffe2 	bl	801341c <udp_new>
 8013458:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801345a:	68fb      	ldr	r3, [r7, #12]
}
 801345c:	4618      	mov	r0, r3
 801345e:	3710      	adds	r7, #16
 8013460:	46bd      	mov	sp, r7
 8013462:	bd80      	pop	{r7, pc}

08013464 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013464:	b480      	push	{r7}
 8013466:	b085      	sub	sp, #20
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
 801346c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d01e      	beq.n	80134b2 <udp_netif_ip_addr_changed+0x4e>
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d01a      	beq.n	80134b2 <udp_netif_ip_addr_changed+0x4e>
 801347c:	683b      	ldr	r3, [r7, #0]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d017      	beq.n	80134b2 <udp_netif_ip_addr_changed+0x4e>
 8013482:	683b      	ldr	r3, [r7, #0]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d013      	beq.n	80134b2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801348a:	4b0d      	ldr	r3, [pc, #52]	; (80134c0 <udp_netif_ip_addr_changed+0x5c>)
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	60fb      	str	r3, [r7, #12]
 8013490:	e00c      	b.n	80134ac <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	681a      	ldr	r2, [r3, #0]
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	429a      	cmp	r2, r3
 801349c:	d103      	bne.n	80134a6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801349e:	683b      	ldr	r3, [r7, #0]
 80134a0:	681a      	ldr	r2, [r3, #0]
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	68db      	ldr	r3, [r3, #12]
 80134aa:	60fb      	str	r3, [r7, #12]
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d1ef      	bne.n	8013492 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80134b2:	bf00      	nop
 80134b4:	3714      	adds	r7, #20
 80134b6:	46bd      	mov	sp, r7
 80134b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134bc:	4770      	bx	lr
 80134be:	bf00      	nop
 80134c0:	2000fd50 	.word	0x2000fd50

080134c4 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80134c8:	4b20      	ldr	r3, [pc, #128]	; (801354c <dhcp_inc_pcb_refcount+0x88>)
 80134ca:	781b      	ldrb	r3, [r3, #0]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d133      	bne.n	8013538 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80134d0:	4b1f      	ldr	r3, [pc, #124]	; (8013550 <dhcp_inc_pcb_refcount+0x8c>)
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d005      	beq.n	80134e4 <dhcp_inc_pcb_refcount+0x20>
 80134d8:	4b1e      	ldr	r3, [pc, #120]	; (8013554 <dhcp_inc_pcb_refcount+0x90>)
 80134da:	22e5      	movs	r2, #229	; 0xe5
 80134dc:	491e      	ldr	r1, [pc, #120]	; (8013558 <dhcp_inc_pcb_refcount+0x94>)
 80134de:	481f      	ldr	r0, [pc, #124]	; (801355c <dhcp_inc_pcb_refcount+0x98>)
 80134e0:	f006 fb9e 	bl	8019c20 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80134e4:	f7ff ff9a 	bl	801341c <udp_new>
 80134e8:	4602      	mov	r2, r0
 80134ea:	4b19      	ldr	r3, [pc, #100]	; (8013550 <dhcp_inc_pcb_refcount+0x8c>)
 80134ec:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 80134ee:	4b18      	ldr	r3, [pc, #96]	; (8013550 <dhcp_inc_pcb_refcount+0x8c>)
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d102      	bne.n	80134fc <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80134f6:	f04f 33ff 	mov.w	r3, #4294967295
 80134fa:	e024      	b.n	8013546 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80134fc:	4b14      	ldr	r3, [pc, #80]	; (8013550 <dhcp_inc_pcb_refcount+0x8c>)
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	7a5a      	ldrb	r2, [r3, #9]
 8013502:	4b13      	ldr	r3, [pc, #76]	; (8013550 <dhcp_inc_pcb_refcount+0x8c>)
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	f042 0220 	orr.w	r2, r2, #32
 801350a:	b2d2      	uxtb	r2, r2
 801350c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801350e:	4b10      	ldr	r3, [pc, #64]	; (8013550 <dhcp_inc_pcb_refcount+0x8c>)
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	2244      	movs	r2, #68	; 0x44
 8013514:	4912      	ldr	r1, [pc, #72]	; (8013560 <dhcp_inc_pcb_refcount+0x9c>)
 8013516:	4618      	mov	r0, r3
 8013518:	f7ff fe00 	bl	801311c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801351c:	4b0c      	ldr	r3, [pc, #48]	; (8013550 <dhcp_inc_pcb_refcount+0x8c>)
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	2243      	movs	r2, #67	; 0x43
 8013522:	490f      	ldr	r1, [pc, #60]	; (8013560 <dhcp_inc_pcb_refcount+0x9c>)
 8013524:	4618      	mov	r0, r3
 8013526:	f7ff fe81 	bl	801322c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801352a:	4b09      	ldr	r3, [pc, #36]	; (8013550 <dhcp_inc_pcb_refcount+0x8c>)
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	2200      	movs	r2, #0
 8013530:	490c      	ldr	r1, [pc, #48]	; (8013564 <dhcp_inc_pcb_refcount+0xa0>)
 8013532:	4618      	mov	r0, r3
 8013534:	f7ff ff10 	bl	8013358 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8013538:	4b04      	ldr	r3, [pc, #16]	; (801354c <dhcp_inc_pcb_refcount+0x88>)
 801353a:	781b      	ldrb	r3, [r3, #0]
 801353c:	3301      	adds	r3, #1
 801353e:	b2da      	uxtb	r2, r3
 8013540:	4b02      	ldr	r3, [pc, #8]	; (801354c <dhcp_inc_pcb_refcount+0x88>)
 8013542:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8013544:	2300      	movs	r3, #0
}
 8013546:	4618      	mov	r0, r3
 8013548:	bd80      	pop	{r7, pc}
 801354a:	bf00      	nop
 801354c:	20008694 	.word	0x20008694
 8013550:	20008690 	.word	0x20008690
 8013554:	0801dfd0 	.word	0x0801dfd0
 8013558:	0801e008 	.word	0x0801e008
 801355c:	0801e030 	.word	0x0801e030
 8013560:	0801ec8c 	.word	0x0801ec8c
 8013564:	08014e21 	.word	0x08014e21

08013568 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8013568:	b580      	push	{r7, lr}
 801356a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801356c:	4b0e      	ldr	r3, [pc, #56]	; (80135a8 <dhcp_dec_pcb_refcount+0x40>)
 801356e:	781b      	ldrb	r3, [r3, #0]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d105      	bne.n	8013580 <dhcp_dec_pcb_refcount+0x18>
 8013574:	4b0d      	ldr	r3, [pc, #52]	; (80135ac <dhcp_dec_pcb_refcount+0x44>)
 8013576:	22ff      	movs	r2, #255	; 0xff
 8013578:	490d      	ldr	r1, [pc, #52]	; (80135b0 <dhcp_dec_pcb_refcount+0x48>)
 801357a:	480e      	ldr	r0, [pc, #56]	; (80135b4 <dhcp_dec_pcb_refcount+0x4c>)
 801357c:	f006 fb50 	bl	8019c20 <iprintf>
  dhcp_pcb_refcount--;
 8013580:	4b09      	ldr	r3, [pc, #36]	; (80135a8 <dhcp_dec_pcb_refcount+0x40>)
 8013582:	781b      	ldrb	r3, [r3, #0]
 8013584:	3b01      	subs	r3, #1
 8013586:	b2da      	uxtb	r2, r3
 8013588:	4b07      	ldr	r3, [pc, #28]	; (80135a8 <dhcp_dec_pcb_refcount+0x40>)
 801358a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801358c:	4b06      	ldr	r3, [pc, #24]	; (80135a8 <dhcp_dec_pcb_refcount+0x40>)
 801358e:	781b      	ldrb	r3, [r3, #0]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d107      	bne.n	80135a4 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8013594:	4b08      	ldr	r3, [pc, #32]	; (80135b8 <dhcp_dec_pcb_refcount+0x50>)
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	4618      	mov	r0, r3
 801359a:	f7ff fefd 	bl	8013398 <udp_remove>
    dhcp_pcb = NULL;
 801359e:	4b06      	ldr	r3, [pc, #24]	; (80135b8 <dhcp_dec_pcb_refcount+0x50>)
 80135a0:	2200      	movs	r2, #0
 80135a2:	601a      	str	r2, [r3, #0]
  }
}
 80135a4:	bf00      	nop
 80135a6:	bd80      	pop	{r7, pc}
 80135a8:	20008694 	.word	0x20008694
 80135ac:	0801dfd0 	.word	0x0801dfd0
 80135b0:	0801e058 	.word	0x0801e058
 80135b4:	0801e030 	.word	0x0801e030
 80135b8:	20008690 	.word	0x20008690

080135bc <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b084      	sub	sp, #16
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135c8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80135ca:	210c      	movs	r1, #12
 80135cc:	68f8      	ldr	r0, [r7, #12]
 80135ce:	f001 f869 	bl	80146a4 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80135d2:	4b06      	ldr	r3, [pc, #24]	; (80135ec <dhcp_handle_nak+0x30>)
 80135d4:	4a05      	ldr	r2, [pc, #20]	; (80135ec <dhcp_handle_nak+0x30>)
 80135d6:	4905      	ldr	r1, [pc, #20]	; (80135ec <dhcp_handle_nak+0x30>)
 80135d8:	6878      	ldr	r0, [r7, #4]
 80135da:	f7f8 f859 	bl	800b690 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80135de:	6878      	ldr	r0, [r7, #4]
 80135e0:	f000 fc5c 	bl	8013e9c <dhcp_discover>
}
 80135e4:	bf00      	nop
 80135e6:	3710      	adds	r7, #16
 80135e8:	46bd      	mov	sp, r7
 80135ea:	bd80      	pop	{r7, pc}
 80135ec:	0801ec8c 	.word	0x0801ec8c

080135f0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b084      	sub	sp, #16
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135fc:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80135fe:	2108      	movs	r1, #8
 8013600:	68f8      	ldr	r0, [r7, #12]
 8013602:	f001 f84f 	bl	80146a4 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	331c      	adds	r3, #28
 801360a:	2200      	movs	r2, #0
 801360c:	4619      	mov	r1, r3
 801360e:	6878      	ldr	r0, [r7, #4]
 8013610:	f002 fb4e 	bl	8015cb0 <etharp_query>
 8013614:	4603      	mov	r3, r0
 8013616:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	799b      	ldrb	r3, [r3, #6]
 801361c:	2bff      	cmp	r3, #255	; 0xff
 801361e:	d005      	beq.n	801362c <dhcp_check+0x3c>
    dhcp->tries++;
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	799b      	ldrb	r3, [r3, #6]
 8013624:	3301      	adds	r3, #1
 8013626:	b2da      	uxtb	r2, r3
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801362c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8013630:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013632:	893b      	ldrh	r3, [r7, #8]
 8013634:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013638:	4a06      	ldr	r2, [pc, #24]	; (8013654 <dhcp_check+0x64>)
 801363a:	fb82 1203 	smull	r1, r2, r2, r3
 801363e:	1152      	asrs	r2, r2, #5
 8013640:	17db      	asrs	r3, r3, #31
 8013642:	1ad3      	subs	r3, r2, r3
 8013644:	b29a      	uxth	r2, r3
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801364a:	bf00      	nop
 801364c:	3710      	adds	r7, #16
 801364e:	46bd      	mov	sp, r7
 8013650:	bd80      	pop	{r7, pc}
 8013652:	bf00      	nop
 8013654:	10624dd3 	.word	0x10624dd3

08013658 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013658:	b580      	push	{r7, lr}
 801365a:	b084      	sub	sp, #16
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
 8013660:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013666:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8013668:	4b0c      	ldr	r3, [pc, #48]	; (801369c <dhcp_handle_offer+0x44>)
 801366a:	789b      	ldrb	r3, [r3, #2]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d011      	beq.n	8013694 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	2200      	movs	r2, #0
 8013674:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8013676:	4b0a      	ldr	r3, [pc, #40]	; (80136a0 <dhcp_handle_offer+0x48>)
 8013678:	689b      	ldr	r3, [r3, #8]
 801367a:	4618      	mov	r0, r3
 801367c:	f7f7 f973 	bl	800a966 <lwip_htonl>
 8013680:	4602      	mov	r2, r0
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013686:	683b      	ldr	r3, [r7, #0]
 8013688:	691a      	ldr	r2, [r3, #16]
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801368e:	6878      	ldr	r0, [r7, #4]
 8013690:	f000 f808 	bl	80136a4 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8013694:	bf00      	nop
 8013696:	3710      	adds	r7, #16
 8013698:	46bd      	mov	sp, r7
 801369a:	bd80      	pop	{r7, pc}
 801369c:	2000fd54 	.word	0x2000fd54
 80136a0:	2000fd5c 	.word	0x2000fd5c

080136a4 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80136a4:	b5b0      	push	{r4, r5, r7, lr}
 80136a6:	b08a      	sub	sp, #40	; 0x28
 80136a8:	af02      	add	r7, sp, #8
 80136aa:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d109      	bne.n	80136c6 <dhcp_select+0x22>
 80136b2:	4b71      	ldr	r3, [pc, #452]	; (8013878 <dhcp_select+0x1d4>)
 80136b4:	f240 1277 	movw	r2, #375	; 0x177
 80136b8:	4970      	ldr	r1, [pc, #448]	; (801387c <dhcp_select+0x1d8>)
 80136ba:	4871      	ldr	r0, [pc, #452]	; (8013880 <dhcp_select+0x1dc>)
 80136bc:	f006 fab0 	bl	8019c20 <iprintf>
 80136c0:	f06f 030f 	mvn.w	r3, #15
 80136c4:	e0d3      	b.n	801386e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136ca:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80136cc:	69bb      	ldr	r3, [r7, #24]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d109      	bne.n	80136e6 <dhcp_select+0x42>
 80136d2:	4b69      	ldr	r3, [pc, #420]	; (8013878 <dhcp_select+0x1d4>)
 80136d4:	f240 1279 	movw	r2, #377	; 0x179
 80136d8:	496a      	ldr	r1, [pc, #424]	; (8013884 <dhcp_select+0x1e0>)
 80136da:	4869      	ldr	r0, [pc, #420]	; (8013880 <dhcp_select+0x1dc>)
 80136dc:	f006 faa0 	bl	8019c20 <iprintf>
 80136e0:	f06f 0305 	mvn.w	r3, #5
 80136e4:	e0c3      	b.n	801386e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80136e6:	2101      	movs	r1, #1
 80136e8:	69b8      	ldr	r0, [r7, #24]
 80136ea:	f000 ffdb 	bl	80146a4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80136ee:	f107 030c 	add.w	r3, r7, #12
 80136f2:	2203      	movs	r2, #3
 80136f4:	69b9      	ldr	r1, [r7, #24]
 80136f6:	6878      	ldr	r0, [r7, #4]
 80136f8:	f001 fc5e 	bl	8014fb8 <dhcp_create_msg>
 80136fc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80136fe:	697b      	ldr	r3, [r7, #20]
 8013700:	2b00      	cmp	r3, #0
 8013702:	f000 8085 	beq.w	8013810 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013706:	697b      	ldr	r3, [r7, #20]
 8013708:	685b      	ldr	r3, [r3, #4]
 801370a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801370c:	89b8      	ldrh	r0, [r7, #12]
 801370e:	693b      	ldr	r3, [r7, #16]
 8013710:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013714:	2302      	movs	r3, #2
 8013716:	2239      	movs	r2, #57	; 0x39
 8013718:	f000 ffde 	bl	80146d8 <dhcp_option>
 801371c:	4603      	mov	r3, r0
 801371e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013720:	89b8      	ldrh	r0, [r7, #12]
 8013722:	693b      	ldr	r3, [r7, #16]
 8013724:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801372c:	461a      	mov	r2, r3
 801372e:	f001 f82d 	bl	801478c <dhcp_option_short>
 8013732:	4603      	mov	r3, r0
 8013734:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013736:	89b8      	ldrh	r0, [r7, #12]
 8013738:	693b      	ldr	r3, [r7, #16]
 801373a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801373e:	2304      	movs	r3, #4
 8013740:	2232      	movs	r2, #50	; 0x32
 8013742:	f000 ffc9 	bl	80146d8 <dhcp_option>
 8013746:	4603      	mov	r3, r0
 8013748:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801374a:	89bc      	ldrh	r4, [r7, #12]
 801374c:	693b      	ldr	r3, [r7, #16]
 801374e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013752:	69bb      	ldr	r3, [r7, #24]
 8013754:	69db      	ldr	r3, [r3, #28]
 8013756:	4618      	mov	r0, r3
 8013758:	f7f7 f905 	bl	800a966 <lwip_htonl>
 801375c:	4603      	mov	r3, r0
 801375e:	461a      	mov	r2, r3
 8013760:	4629      	mov	r1, r5
 8013762:	4620      	mov	r0, r4
 8013764:	f001 f844 	bl	80147f0 <dhcp_option_long>
 8013768:	4603      	mov	r3, r0
 801376a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801376c:	89b8      	ldrh	r0, [r7, #12]
 801376e:	693b      	ldr	r3, [r7, #16]
 8013770:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013774:	2304      	movs	r3, #4
 8013776:	2236      	movs	r2, #54	; 0x36
 8013778:	f000 ffae 	bl	80146d8 <dhcp_option>
 801377c:	4603      	mov	r3, r0
 801377e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8013780:	89bc      	ldrh	r4, [r7, #12]
 8013782:	693b      	ldr	r3, [r7, #16]
 8013784:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013788:	69bb      	ldr	r3, [r7, #24]
 801378a:	699b      	ldr	r3, [r3, #24]
 801378c:	4618      	mov	r0, r3
 801378e:	f7f7 f8ea 	bl	800a966 <lwip_htonl>
 8013792:	4603      	mov	r3, r0
 8013794:	461a      	mov	r2, r3
 8013796:	4629      	mov	r1, r5
 8013798:	4620      	mov	r0, r4
 801379a:	f001 f829 	bl	80147f0 <dhcp_option_long>
 801379e:	4603      	mov	r3, r0
 80137a0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80137a2:	89b8      	ldrh	r0, [r7, #12]
 80137a4:	693b      	ldr	r3, [r7, #16]
 80137a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80137aa:	2303      	movs	r3, #3
 80137ac:	2237      	movs	r2, #55	; 0x37
 80137ae:	f000 ff93 	bl	80146d8 <dhcp_option>
 80137b2:	4603      	mov	r3, r0
 80137b4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80137b6:	2300      	movs	r3, #0
 80137b8:	77bb      	strb	r3, [r7, #30]
 80137ba:	e00e      	b.n	80137da <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80137bc:	89b8      	ldrh	r0, [r7, #12]
 80137be:	693b      	ldr	r3, [r7, #16]
 80137c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80137c4:	7fbb      	ldrb	r3, [r7, #30]
 80137c6:	4a30      	ldr	r2, [pc, #192]	; (8013888 <dhcp_select+0x1e4>)
 80137c8:	5cd3      	ldrb	r3, [r2, r3]
 80137ca:	461a      	mov	r2, r3
 80137cc:	f000 ffb8 	bl	8014740 <dhcp_option_byte>
 80137d0:	4603      	mov	r3, r0
 80137d2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80137d4:	7fbb      	ldrb	r3, [r7, #30]
 80137d6:	3301      	adds	r3, #1
 80137d8:	77bb      	strb	r3, [r7, #30]
 80137da:	7fbb      	ldrb	r3, [r7, #30]
 80137dc:	2b02      	cmp	r3, #2
 80137de:	d9ed      	bls.n	80137bc <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80137e0:	89b8      	ldrh	r0, [r7, #12]
 80137e2:	693b      	ldr	r3, [r7, #16]
 80137e4:	33f0      	adds	r3, #240	; 0xf0
 80137e6:	697a      	ldr	r2, [r7, #20]
 80137e8:	4619      	mov	r1, r3
 80137ea:	f001 fcbb 	bl	8015164 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80137ee:	4b27      	ldr	r3, [pc, #156]	; (801388c <dhcp_select+0x1e8>)
 80137f0:	6818      	ldr	r0, [r3, #0]
 80137f2:	4b27      	ldr	r3, [pc, #156]	; (8013890 <dhcp_select+0x1ec>)
 80137f4:	9301      	str	r3, [sp, #4]
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	9300      	str	r3, [sp, #0]
 80137fa:	2343      	movs	r3, #67	; 0x43
 80137fc:	4a25      	ldr	r2, [pc, #148]	; (8013894 <dhcp_select+0x1f0>)
 80137fe:	6979      	ldr	r1, [r7, #20]
 8013800:	f7ff fba6 	bl	8012f50 <udp_sendto_if_src>
 8013804:	4603      	mov	r3, r0
 8013806:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013808:	6978      	ldr	r0, [r7, #20]
 801380a:	f7f8 fc7d 	bl	800c108 <pbuf_free>
 801380e:	e001      	b.n	8013814 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013810:	23ff      	movs	r3, #255	; 0xff
 8013812:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013814:	69bb      	ldr	r3, [r7, #24]
 8013816:	799b      	ldrb	r3, [r3, #6]
 8013818:	2bff      	cmp	r3, #255	; 0xff
 801381a:	d005      	beq.n	8013828 <dhcp_select+0x184>
    dhcp->tries++;
 801381c:	69bb      	ldr	r3, [r7, #24]
 801381e:	799b      	ldrb	r3, [r3, #6]
 8013820:	3301      	adds	r3, #1
 8013822:	b2da      	uxtb	r2, r3
 8013824:	69bb      	ldr	r3, [r7, #24]
 8013826:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013828:	69bb      	ldr	r3, [r7, #24]
 801382a:	799b      	ldrb	r3, [r3, #6]
 801382c:	2b05      	cmp	r3, #5
 801382e:	d80d      	bhi.n	801384c <dhcp_select+0x1a8>
 8013830:	69bb      	ldr	r3, [r7, #24]
 8013832:	799b      	ldrb	r3, [r3, #6]
 8013834:	461a      	mov	r2, r3
 8013836:	2301      	movs	r3, #1
 8013838:	4093      	lsls	r3, r2
 801383a:	b29b      	uxth	r3, r3
 801383c:	461a      	mov	r2, r3
 801383e:	0152      	lsls	r2, r2, #5
 8013840:	1ad2      	subs	r2, r2, r3
 8013842:	0092      	lsls	r2, r2, #2
 8013844:	4413      	add	r3, r2
 8013846:	00db      	lsls	r3, r3, #3
 8013848:	b29b      	uxth	r3, r3
 801384a:	e001      	b.n	8013850 <dhcp_select+0x1ac>
 801384c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013850:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013852:	89fb      	ldrh	r3, [r7, #14]
 8013854:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013858:	4a0f      	ldr	r2, [pc, #60]	; (8013898 <dhcp_select+0x1f4>)
 801385a:	fb82 1203 	smull	r1, r2, r2, r3
 801385e:	1152      	asrs	r2, r2, #5
 8013860:	17db      	asrs	r3, r3, #31
 8013862:	1ad3      	subs	r3, r2, r3
 8013864:	b29a      	uxth	r2, r3
 8013866:	69bb      	ldr	r3, [r7, #24]
 8013868:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801386a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801386e:	4618      	mov	r0, r3
 8013870:	3720      	adds	r7, #32
 8013872:	46bd      	mov	sp, r7
 8013874:	bdb0      	pop	{r4, r5, r7, pc}
 8013876:	bf00      	nop
 8013878:	0801dfd0 	.word	0x0801dfd0
 801387c:	0801e07c 	.word	0x0801e07c
 8013880:	0801e030 	.word	0x0801e030
 8013884:	0801e098 	.word	0x0801e098
 8013888:	2000001c 	.word	0x2000001c
 801388c:	20008690 	.word	0x20008690
 8013890:	0801ec8c 	.word	0x0801ec8c
 8013894:	0801ec90 	.word	0x0801ec90
 8013898:	10624dd3 	.word	0x10624dd3

0801389c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801389c:	b580      	push	{r7, lr}
 801389e:	b082      	sub	sp, #8
 80138a0:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80138a2:	4b27      	ldr	r3, [pc, #156]	; (8013940 <dhcp_coarse_tmr+0xa4>)
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	607b      	str	r3, [r7, #4]
 80138a8:	e042      	b.n	8013930 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ae:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80138b0:	683b      	ldr	r3, [r7, #0]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d039      	beq.n	801392a <dhcp_coarse_tmr+0x8e>
 80138b6:	683b      	ldr	r3, [r7, #0]
 80138b8:	795b      	ldrb	r3, [r3, #5]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d035      	beq.n	801392a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80138be:	683b      	ldr	r3, [r7, #0]
 80138c0:	8a9b      	ldrh	r3, [r3, #20]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d012      	beq.n	80138ec <dhcp_coarse_tmr+0x50>
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	8a5b      	ldrh	r3, [r3, #18]
 80138ca:	3301      	adds	r3, #1
 80138cc:	b29a      	uxth	r2, r3
 80138ce:	683b      	ldr	r3, [r7, #0]
 80138d0:	825a      	strh	r2, [r3, #18]
 80138d2:	683b      	ldr	r3, [r7, #0]
 80138d4:	8a5a      	ldrh	r2, [r3, #18]
 80138d6:	683b      	ldr	r3, [r7, #0]
 80138d8:	8a9b      	ldrh	r3, [r3, #20]
 80138da:	429a      	cmp	r2, r3
 80138dc:	d106      	bne.n	80138ec <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80138de:	6878      	ldr	r0, [r7, #4]
 80138e0:	f000 fe46 	bl	8014570 <dhcp_release_and_stop>
        dhcp_start(netif);
 80138e4:	6878      	ldr	r0, [r7, #4]
 80138e6:	f000 f96b 	bl	8013bc0 <dhcp_start>
 80138ea:	e01e      	b.n	801392a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80138ec:	683b      	ldr	r3, [r7, #0]
 80138ee:	8a1b      	ldrh	r3, [r3, #16]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d00b      	beq.n	801390c <dhcp_coarse_tmr+0x70>
 80138f4:	683b      	ldr	r3, [r7, #0]
 80138f6:	8a1b      	ldrh	r3, [r3, #16]
 80138f8:	1e5a      	subs	r2, r3, #1
 80138fa:	b291      	uxth	r1, r2
 80138fc:	683a      	ldr	r2, [r7, #0]
 80138fe:	8211      	strh	r1, [r2, #16]
 8013900:	2b01      	cmp	r3, #1
 8013902:	d103      	bne.n	801390c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8013904:	6878      	ldr	r0, [r7, #4]
 8013906:	f000 f8c7 	bl	8013a98 <dhcp_t2_timeout>
 801390a:	e00e      	b.n	801392a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801390c:	683b      	ldr	r3, [r7, #0]
 801390e:	89db      	ldrh	r3, [r3, #14]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d00a      	beq.n	801392a <dhcp_coarse_tmr+0x8e>
 8013914:	683b      	ldr	r3, [r7, #0]
 8013916:	89db      	ldrh	r3, [r3, #14]
 8013918:	1e5a      	subs	r2, r3, #1
 801391a:	b291      	uxth	r1, r2
 801391c:	683a      	ldr	r2, [r7, #0]
 801391e:	81d1      	strh	r1, [r2, #14]
 8013920:	2b01      	cmp	r3, #1
 8013922:	d102      	bne.n	801392a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8013924:	6878      	ldr	r0, [r7, #4]
 8013926:	f000 f888 	bl	8013a3a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	607b      	str	r3, [r7, #4]
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d1b9      	bne.n	80138aa <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8013936:	bf00      	nop
 8013938:	3708      	adds	r7, #8
 801393a:	46bd      	mov	sp, r7
 801393c:	bd80      	pop	{r7, pc}
 801393e:	bf00      	nop
 8013940:	2000fd28 	.word	0x2000fd28

08013944 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8013944:	b580      	push	{r7, lr}
 8013946:	b082      	sub	sp, #8
 8013948:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801394a:	4b16      	ldr	r3, [pc, #88]	; (80139a4 <dhcp_fine_tmr+0x60>)
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	607b      	str	r3, [r7, #4]
 8013950:	e020      	b.n	8013994 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013956:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8013958:	683b      	ldr	r3, [r7, #0]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d017      	beq.n	801398e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801395e:	683b      	ldr	r3, [r7, #0]
 8013960:	891b      	ldrh	r3, [r3, #8]
 8013962:	2b01      	cmp	r3, #1
 8013964:	d906      	bls.n	8013974 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8013966:	683b      	ldr	r3, [r7, #0]
 8013968:	891b      	ldrh	r3, [r3, #8]
 801396a:	3b01      	subs	r3, #1
 801396c:	b29a      	uxth	r2, r3
 801396e:	683b      	ldr	r3, [r7, #0]
 8013970:	811a      	strh	r2, [r3, #8]
 8013972:	e00c      	b.n	801398e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8013974:	683b      	ldr	r3, [r7, #0]
 8013976:	891b      	ldrh	r3, [r3, #8]
 8013978:	2b01      	cmp	r3, #1
 801397a:	d108      	bne.n	801398e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801397c:	683b      	ldr	r3, [r7, #0]
 801397e:	891b      	ldrh	r3, [r3, #8]
 8013980:	3b01      	subs	r3, #1
 8013982:	b29a      	uxth	r2, r3
 8013984:	683b      	ldr	r3, [r7, #0]
 8013986:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8013988:	6878      	ldr	r0, [r7, #4]
 801398a:	f000 f80d 	bl	80139a8 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	607b      	str	r3, [r7, #4]
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d1db      	bne.n	8013952 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801399a:	bf00      	nop
 801399c:	3708      	adds	r7, #8
 801399e:	46bd      	mov	sp, r7
 80139a0:	bd80      	pop	{r7, pc}
 80139a2:	bf00      	nop
 80139a4:	2000fd28 	.word	0x2000fd28

080139a8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b084      	sub	sp, #16
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139b4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	795b      	ldrb	r3, [r3, #5]
 80139ba:	2b0c      	cmp	r3, #12
 80139bc:	d003      	beq.n	80139c6 <dhcp_timeout+0x1e>
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	795b      	ldrb	r3, [r3, #5]
 80139c2:	2b06      	cmp	r3, #6
 80139c4:	d103      	bne.n	80139ce <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80139c6:	6878      	ldr	r0, [r7, #4]
 80139c8:	f000 fa68 	bl	8013e9c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80139cc:	e031      	b.n	8013a32 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	795b      	ldrb	r3, [r3, #5]
 80139d2:	2b01      	cmp	r3, #1
 80139d4:	d10e      	bne.n	80139f4 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	799b      	ldrb	r3, [r3, #6]
 80139da:	2b05      	cmp	r3, #5
 80139dc:	d803      	bhi.n	80139e6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80139de:	6878      	ldr	r0, [r7, #4]
 80139e0:	f7ff fe60 	bl	80136a4 <dhcp_select>
}
 80139e4:	e025      	b.n	8013a32 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80139e6:	6878      	ldr	r0, [r7, #4]
 80139e8:	f000 fdc2 	bl	8014570 <dhcp_release_and_stop>
      dhcp_start(netif);
 80139ec:	6878      	ldr	r0, [r7, #4]
 80139ee:	f000 f8e7 	bl	8013bc0 <dhcp_start>
}
 80139f2:	e01e      	b.n	8013a32 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	795b      	ldrb	r3, [r3, #5]
 80139f8:	2b08      	cmp	r3, #8
 80139fa:	d10b      	bne.n	8013a14 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	799b      	ldrb	r3, [r3, #6]
 8013a00:	2b01      	cmp	r3, #1
 8013a02:	d803      	bhi.n	8013a0c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8013a04:	6878      	ldr	r0, [r7, #4]
 8013a06:	f7ff fdf3 	bl	80135f0 <dhcp_check>
}
 8013a0a:	e012      	b.n	8013a32 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8013a0c:	6878      	ldr	r0, [r7, #4]
 8013a0e:	f000 fae7 	bl	8013fe0 <dhcp_bind>
}
 8013a12:	e00e      	b.n	8013a32 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	795b      	ldrb	r3, [r3, #5]
 8013a18:	2b03      	cmp	r3, #3
 8013a1a:	d10a      	bne.n	8013a32 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	799b      	ldrb	r3, [r3, #6]
 8013a20:	2b01      	cmp	r3, #1
 8013a22:	d803      	bhi.n	8013a2c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8013a24:	6878      	ldr	r0, [r7, #4]
 8013a26:	f000 fced 	bl	8014404 <dhcp_reboot>
}
 8013a2a:	e002      	b.n	8013a32 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8013a2c:	6878      	ldr	r0, [r7, #4]
 8013a2e:	f000 fa35 	bl	8013e9c <dhcp_discover>
}
 8013a32:	bf00      	nop
 8013a34:	3710      	adds	r7, #16
 8013a36:	46bd      	mov	sp, r7
 8013a38:	bd80      	pop	{r7, pc}

08013a3a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8013a3a:	b580      	push	{r7, lr}
 8013a3c:	b084      	sub	sp, #16
 8013a3e:	af00      	add	r7, sp, #0
 8013a40:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a46:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	795b      	ldrb	r3, [r3, #5]
 8013a4c:	2b01      	cmp	r3, #1
 8013a4e:	d007      	beq.n	8013a60 <dhcp_t1_timeout+0x26>
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	795b      	ldrb	r3, [r3, #5]
 8013a54:	2b0a      	cmp	r3, #10
 8013a56:	d003      	beq.n	8013a60 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013a5c:	2b05      	cmp	r3, #5
 8013a5e:	d117      	bne.n	8013a90 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8013a60:	6878      	ldr	r0, [r7, #4]
 8013a62:	f000 fb97 	bl	8014194 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	899b      	ldrh	r3, [r3, #12]
 8013a6a:	461a      	mov	r2, r3
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	8a5b      	ldrh	r3, [r3, #18]
 8013a70:	1ad3      	subs	r3, r2, r3
 8013a72:	2b01      	cmp	r3, #1
 8013a74:	dd0c      	ble.n	8013a90 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	899b      	ldrh	r3, [r3, #12]
 8013a7a:	461a      	mov	r2, r3
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	8a5b      	ldrh	r3, [r3, #18]
 8013a80:	1ad3      	subs	r3, r2, r3
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	da00      	bge.n	8013a88 <dhcp_t1_timeout+0x4e>
 8013a86:	3301      	adds	r3, #1
 8013a88:	105b      	asrs	r3, r3, #1
 8013a8a:	b29a      	uxth	r2, r3
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8013a90:	bf00      	nop
 8013a92:	3710      	adds	r7, #16
 8013a94:	46bd      	mov	sp, r7
 8013a96:	bd80      	pop	{r7, pc}

08013a98 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b084      	sub	sp, #16
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aa4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	795b      	ldrb	r3, [r3, #5]
 8013aaa:	2b01      	cmp	r3, #1
 8013aac:	d00b      	beq.n	8013ac6 <dhcp_t2_timeout+0x2e>
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	795b      	ldrb	r3, [r3, #5]
 8013ab2:	2b0a      	cmp	r3, #10
 8013ab4:	d007      	beq.n	8013ac6 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013aba:	2b05      	cmp	r3, #5
 8013abc:	d003      	beq.n	8013ac6 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	795b      	ldrb	r3, [r3, #5]
 8013ac2:	2b04      	cmp	r3, #4
 8013ac4:	d117      	bne.n	8013af6 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8013ac6:	6878      	ldr	r0, [r7, #4]
 8013ac8:	f000 fc00 	bl	80142cc <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	8a9b      	ldrh	r3, [r3, #20]
 8013ad0:	461a      	mov	r2, r3
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	8a5b      	ldrh	r3, [r3, #18]
 8013ad6:	1ad3      	subs	r3, r2, r3
 8013ad8:	2b01      	cmp	r3, #1
 8013ada:	dd0c      	ble.n	8013af6 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	8a9b      	ldrh	r3, [r3, #20]
 8013ae0:	461a      	mov	r2, r3
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	8a5b      	ldrh	r3, [r3, #18]
 8013ae6:	1ad3      	subs	r3, r2, r3
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	da00      	bge.n	8013aee <dhcp_t2_timeout+0x56>
 8013aec:	3301      	adds	r3, #1
 8013aee:	105b      	asrs	r3, r3, #1
 8013af0:	b29a      	uxth	r2, r3
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8013af6:	bf00      	nop
 8013af8:	3710      	adds	r7, #16
 8013afa:	46bd      	mov	sp, r7
 8013afc:	bd80      	pop	{r7, pc}
	...

08013b00 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b084      	sub	sp, #16
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	6078      	str	r0, [r7, #4]
 8013b08:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b0e:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	2200      	movs	r2, #0
 8013b14:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	2200      	movs	r2, #0
 8013b1a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8013b1c:	4b26      	ldr	r3, [pc, #152]	; (8013bb8 <dhcp_handle_ack+0xb8>)
 8013b1e:	78db      	ldrb	r3, [r3, #3]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d003      	beq.n	8013b2c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8013b24:	4b25      	ldr	r3, [pc, #148]	; (8013bbc <dhcp_handle_ack+0xbc>)
 8013b26:	68da      	ldr	r2, [r3, #12]
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8013b2c:	4b22      	ldr	r3, [pc, #136]	; (8013bb8 <dhcp_handle_ack+0xb8>)
 8013b2e:	791b      	ldrb	r3, [r3, #4]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d004      	beq.n	8013b3e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8013b34:	4b21      	ldr	r3, [pc, #132]	; (8013bbc <dhcp_handle_ack+0xbc>)
 8013b36:	691a      	ldr	r2, [r3, #16]
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8013b3c:	e004      	b.n	8013b48 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b42:	085a      	lsrs	r2, r3, #1
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8013b48:	4b1b      	ldr	r3, [pc, #108]	; (8013bb8 <dhcp_handle_ack+0xb8>)
 8013b4a:	795b      	ldrb	r3, [r3, #5]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d004      	beq.n	8013b5a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8013b50:	4b1a      	ldr	r3, [pc, #104]	; (8013bbc <dhcp_handle_ack+0xbc>)
 8013b52:	695a      	ldr	r2, [r3, #20]
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	631a      	str	r2, [r3, #48]	; 0x30
 8013b58:	e007      	b.n	8013b6a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013b5e:	4613      	mov	r3, r2
 8013b60:	00db      	lsls	r3, r3, #3
 8013b62:	1a9b      	subs	r3, r3, r2
 8013b64:	08da      	lsrs	r2, r3, #3
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013b6a:	683b      	ldr	r3, [r7, #0]
 8013b6c:	691a      	ldr	r2, [r3, #16]
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8013b72:	4b11      	ldr	r3, [pc, #68]	; (8013bb8 <dhcp_handle_ack+0xb8>)
 8013b74:	799b      	ldrb	r3, [r3, #6]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d00b      	beq.n	8013b92 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8013b7a:	4b10      	ldr	r3, [pc, #64]	; (8013bbc <dhcp_handle_ack+0xbc>)
 8013b7c:	699b      	ldr	r3, [r3, #24]
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f7f6 fef1 	bl	800a966 <lwip_htonl>
 8013b84:	4602      	mov	r2, r0
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	2201      	movs	r2, #1
 8013b8e:	71da      	strb	r2, [r3, #7]
 8013b90:	e002      	b.n	8013b98 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	2200      	movs	r2, #0
 8013b96:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8013b98:	4b07      	ldr	r3, [pc, #28]	; (8013bb8 <dhcp_handle_ack+0xb8>)
 8013b9a:	79db      	ldrb	r3, [r3, #7]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d007      	beq.n	8013bb0 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8013ba0:	4b06      	ldr	r3, [pc, #24]	; (8013bbc <dhcp_handle_ack+0xbc>)
 8013ba2:	69db      	ldr	r3, [r3, #28]
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	f7f6 fede 	bl	800a966 <lwip_htonl>
 8013baa:	4602      	mov	r2, r0
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8013bb0:	bf00      	nop
 8013bb2:	3710      	adds	r7, #16
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	bd80      	pop	{r7, pc}
 8013bb8:	2000fd54 	.word	0x2000fd54
 8013bbc:	2000fd5c 	.word	0x2000fd5c

08013bc0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b084      	sub	sp, #16
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d109      	bne.n	8013be2 <dhcp_start+0x22>
 8013bce:	4b37      	ldr	r3, [pc, #220]	; (8013cac <dhcp_start+0xec>)
 8013bd0:	f240 22e7 	movw	r2, #743	; 0x2e7
 8013bd4:	4936      	ldr	r1, [pc, #216]	; (8013cb0 <dhcp_start+0xf0>)
 8013bd6:	4837      	ldr	r0, [pc, #220]	; (8013cb4 <dhcp_start+0xf4>)
 8013bd8:	f006 f822 	bl	8019c20 <iprintf>
 8013bdc:	f06f 030f 	mvn.w	r3, #15
 8013be0:	e060      	b.n	8013ca4 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013be8:	f003 0301 	and.w	r3, r3, #1
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d109      	bne.n	8013c04 <dhcp_start+0x44>
 8013bf0:	4b2e      	ldr	r3, [pc, #184]	; (8013cac <dhcp_start+0xec>)
 8013bf2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8013bf6:	4930      	ldr	r1, [pc, #192]	; (8013cb8 <dhcp_start+0xf8>)
 8013bf8:	482e      	ldr	r0, [pc, #184]	; (8013cb4 <dhcp_start+0xf4>)
 8013bfa:	f006 f811 	bl	8019c20 <iprintf>
 8013bfe:	f06f 030f 	mvn.w	r3, #15
 8013c02:	e04f      	b.n	8013ca4 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c08:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013c0e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8013c12:	d202      	bcs.n	8013c1a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8013c14:	f04f 33ff 	mov.w	r3, #4294967295
 8013c18:	e044      	b.n	8013ca4 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d10d      	bne.n	8013c3c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8013c20:	2034      	movs	r0, #52	; 0x34
 8013c22:	f7f7 f9bf 	bl	800afa4 <mem_malloc>
 8013c26:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d102      	bne.n	8013c34 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8013c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8013c32:	e037      	b.n	8013ca4 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	68fa      	ldr	r2, [r7, #12]
 8013c38:	625a      	str	r2, [r3, #36]	; 0x24
 8013c3a:	e005      	b.n	8013c48 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	791b      	ldrb	r3, [r3, #4]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d001      	beq.n	8013c48 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013c44:	f7ff fc90 	bl	8013568 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8013c48:	2234      	movs	r2, #52	; 0x34
 8013c4a:	2100      	movs	r1, #0
 8013c4c:	68f8      	ldr	r0, [r7, #12]
 8013c4e:	f005 ffdf 	bl	8019c10 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8013c52:	f7ff fc37 	bl	80134c4 <dhcp_inc_pcb_refcount>
 8013c56:	4603      	mov	r3, r0
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d002      	beq.n	8013c62 <dhcp_start+0xa2>
    return ERR_MEM;
 8013c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8013c60:	e020      	b.n	8013ca4 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	2201      	movs	r2, #1
 8013c66:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013c6e:	f003 0304 	and.w	r3, r3, #4
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d105      	bne.n	8013c82 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8013c76:	2102      	movs	r1, #2
 8013c78:	68f8      	ldr	r0, [r7, #12]
 8013c7a:	f000 fd13 	bl	80146a4 <dhcp_set_state>
    return ERR_OK;
 8013c7e:	2300      	movs	r3, #0
 8013c80:	e010      	b.n	8013ca4 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8013c82:	6878      	ldr	r0, [r7, #4]
 8013c84:	f000 f90a 	bl	8013e9c <dhcp_discover>
 8013c88:	4603      	mov	r3, r0
 8013c8a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8013c8c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d005      	beq.n	8013ca0 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8013c94:	6878      	ldr	r0, [r7, #4]
 8013c96:	f000 fc6b 	bl	8014570 <dhcp_release_and_stop>
    return ERR_MEM;
 8013c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8013c9e:	e001      	b.n	8013ca4 <dhcp_start+0xe4>
  }
  return result;
 8013ca0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	3710      	adds	r7, #16
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	bd80      	pop	{r7, pc}
 8013cac:	0801dfd0 	.word	0x0801dfd0
 8013cb0:	0801e0b4 	.word	0x0801e0b4
 8013cb4:	0801e030 	.word	0x0801e030
 8013cb8:	0801e0f8 	.word	0x0801e0f8

08013cbc <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8013cbc:	b580      	push	{r7, lr}
 8013cbe:	b084      	sub	sp, #16
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cc8:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d037      	beq.n	8013d40 <dhcp_network_changed+0x84>
    return;
  }
  switch (dhcp->state) {
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	795b      	ldrb	r3, [r3, #5]
 8013cd4:	2b0a      	cmp	r3, #10
 8013cd6:	d820      	bhi.n	8013d1a <dhcp_network_changed+0x5e>
 8013cd8:	a201      	add	r2, pc, #4	; (adr r2, 8013ce0 <dhcp_network_changed+0x24>)
 8013cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013cde:	bf00      	nop
 8013ce0:	08013d45 	.word	0x08013d45
 8013ce4:	08013d1b 	.word	0x08013d1b
 8013ce8:	08013d1b 	.word	0x08013d1b
 8013cec:	08013d0d 	.word	0x08013d0d
 8013cf0:	08013d0d 	.word	0x08013d0d
 8013cf4:	08013d0d 	.word	0x08013d0d
 8013cf8:	08013d1b 	.word	0x08013d1b
 8013cfc:	08013d1b 	.word	0x08013d1b
 8013d00:	08013d1b 	.word	0x08013d1b
 8013d04:	08013d1b 	.word	0x08013d1b
 8013d08:	08013d0d 	.word	0x08013d0d
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	2200      	movs	r2, #0
 8013d10:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8013d12:	6878      	ldr	r0, [r7, #4]
 8013d14:	f000 fb76 	bl	8014404 <dhcp_reboot>
      break;
 8013d18:	e015      	b.n	8013d46 <dhcp_network_changed+0x8a>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	795b      	ldrb	r3, [r3, #5]
 8013d1e:	2b0c      	cmp	r3, #12
 8013d20:	d906      	bls.n	8013d30 <dhcp_network_changed+0x74>
 8013d22:	4b0a      	ldr	r3, [pc, #40]	; (8013d4c <dhcp_network_changed+0x90>)
 8013d24:	f240 326d 	movw	r2, #877	; 0x36d
 8013d28:	4909      	ldr	r1, [pc, #36]	; (8013d50 <dhcp_network_changed+0x94>)
 8013d2a:	480a      	ldr	r0, [pc, #40]	; (8013d54 <dhcp_network_changed+0x98>)
 8013d2c:	f005 ff78 	bl	8019c20 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	2200      	movs	r2, #0
 8013d34:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8013d36:	6878      	ldr	r0, [r7, #4]
 8013d38:	f000 f8b0 	bl	8013e9c <dhcp_discover>
      break;
 8013d3c:	bf00      	nop
 8013d3e:	e002      	b.n	8013d46 <dhcp_network_changed+0x8a>
    return;
 8013d40:	bf00      	nop
 8013d42:	e000      	b.n	8013d46 <dhcp_network_changed+0x8a>
      break;
 8013d44:	bf00      	nop
  }
}
 8013d46:	3710      	adds	r7, #16
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd80      	pop	{r7, pc}
 8013d4c:	0801dfd0 	.word	0x0801dfd0
 8013d50:	0801e11c 	.word	0x0801e11c
 8013d54:	0801e030 	.word	0x0801e030

08013d58 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8013d58:	b580      	push	{r7, lr}
 8013d5a:	b084      	sub	sp, #16
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
 8013d60:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d107      	bne.n	8013d78 <dhcp_arp_reply+0x20>
 8013d68:	4b0e      	ldr	r3, [pc, #56]	; (8013da4 <dhcp_arp_reply+0x4c>)
 8013d6a:	f240 328b 	movw	r2, #907	; 0x38b
 8013d6e:	490e      	ldr	r1, [pc, #56]	; (8013da8 <dhcp_arp_reply+0x50>)
 8013d70:	480e      	ldr	r0, [pc, #56]	; (8013dac <dhcp_arp_reply+0x54>)
 8013d72:	f005 ff55 	bl	8019c20 <iprintf>
 8013d76:	e012      	b.n	8013d9e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d7c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d00c      	beq.n	8013d9e <dhcp_arp_reply+0x46>
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	795b      	ldrb	r3, [r3, #5]
 8013d88:	2b08      	cmp	r3, #8
 8013d8a:	d108      	bne.n	8013d9e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8013d8c:	683b      	ldr	r3, [r7, #0]
 8013d8e:	681a      	ldr	r2, [r3, #0]
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	69db      	ldr	r3, [r3, #28]
 8013d94:	429a      	cmp	r2, r3
 8013d96:	d102      	bne.n	8013d9e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8013d98:	6878      	ldr	r0, [r7, #4]
 8013d9a:	f000 f809 	bl	8013db0 <dhcp_decline>
    }
  }
}
 8013d9e:	3710      	adds	r7, #16
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd80      	pop	{r7, pc}
 8013da4:	0801dfd0 	.word	0x0801dfd0
 8013da8:	0801e0b4 	.word	0x0801e0b4
 8013dac:	0801e030 	.word	0x0801e030

08013db0 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8013db0:	b5b0      	push	{r4, r5, r7, lr}
 8013db2:	b08a      	sub	sp, #40	; 0x28
 8013db4:	af02      	add	r7, sp, #8
 8013db6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dbc:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013dbe:	210c      	movs	r1, #12
 8013dc0:	69b8      	ldr	r0, [r7, #24]
 8013dc2:	f000 fc6f 	bl	80146a4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8013dc6:	f107 030c 	add.w	r3, r7, #12
 8013dca:	2204      	movs	r2, #4
 8013dcc:	69b9      	ldr	r1, [r7, #24]
 8013dce:	6878      	ldr	r0, [r7, #4]
 8013dd0:	f001 f8f2 	bl	8014fb8 <dhcp_create_msg>
 8013dd4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013dd6:	697b      	ldr	r3, [r7, #20]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d035      	beq.n	8013e48 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013ddc:	697b      	ldr	r3, [r7, #20]
 8013dde:	685b      	ldr	r3, [r3, #4]
 8013de0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013de2:	89b8      	ldrh	r0, [r7, #12]
 8013de4:	693b      	ldr	r3, [r7, #16]
 8013de6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013dea:	2304      	movs	r3, #4
 8013dec:	2232      	movs	r2, #50	; 0x32
 8013dee:	f000 fc73 	bl	80146d8 <dhcp_option>
 8013df2:	4603      	mov	r3, r0
 8013df4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013df6:	89bc      	ldrh	r4, [r7, #12]
 8013df8:	693b      	ldr	r3, [r7, #16]
 8013dfa:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013dfe:	69bb      	ldr	r3, [r7, #24]
 8013e00:	69db      	ldr	r3, [r3, #28]
 8013e02:	4618      	mov	r0, r3
 8013e04:	f7f6 fdaf 	bl	800a966 <lwip_htonl>
 8013e08:	4603      	mov	r3, r0
 8013e0a:	461a      	mov	r2, r3
 8013e0c:	4629      	mov	r1, r5
 8013e0e:	4620      	mov	r0, r4
 8013e10:	f000 fcee 	bl	80147f0 <dhcp_option_long>
 8013e14:	4603      	mov	r3, r0
 8013e16:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013e18:	89b8      	ldrh	r0, [r7, #12]
 8013e1a:	693b      	ldr	r3, [r7, #16]
 8013e1c:	33f0      	adds	r3, #240	; 0xf0
 8013e1e:	697a      	ldr	r2, [r7, #20]
 8013e20:	4619      	mov	r1, r3
 8013e22:	f001 f99f 	bl	8015164 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013e26:	4b19      	ldr	r3, [pc, #100]	; (8013e8c <dhcp_decline+0xdc>)
 8013e28:	6818      	ldr	r0, [r3, #0]
 8013e2a:	4b19      	ldr	r3, [pc, #100]	; (8013e90 <dhcp_decline+0xe0>)
 8013e2c:	9301      	str	r3, [sp, #4]
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	9300      	str	r3, [sp, #0]
 8013e32:	2343      	movs	r3, #67	; 0x43
 8013e34:	4a17      	ldr	r2, [pc, #92]	; (8013e94 <dhcp_decline+0xe4>)
 8013e36:	6979      	ldr	r1, [r7, #20]
 8013e38:	f7ff f88a 	bl	8012f50 <udp_sendto_if_src>
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013e40:	6978      	ldr	r0, [r7, #20]
 8013e42:	f7f8 f961 	bl	800c108 <pbuf_free>
 8013e46:	e001      	b.n	8013e4c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013e48:	23ff      	movs	r3, #255	; 0xff
 8013e4a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013e4c:	69bb      	ldr	r3, [r7, #24]
 8013e4e:	799b      	ldrb	r3, [r3, #6]
 8013e50:	2bff      	cmp	r3, #255	; 0xff
 8013e52:	d005      	beq.n	8013e60 <dhcp_decline+0xb0>
    dhcp->tries++;
 8013e54:	69bb      	ldr	r3, [r7, #24]
 8013e56:	799b      	ldrb	r3, [r3, #6]
 8013e58:	3301      	adds	r3, #1
 8013e5a:	b2da      	uxtb	r2, r3
 8013e5c:	69bb      	ldr	r3, [r7, #24]
 8013e5e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8013e60:	f242 7310 	movw	r3, #10000	; 0x2710
 8013e64:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013e66:	89fb      	ldrh	r3, [r7, #14]
 8013e68:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013e6c:	4a0a      	ldr	r2, [pc, #40]	; (8013e98 <dhcp_decline+0xe8>)
 8013e6e:	fb82 1203 	smull	r1, r2, r2, r3
 8013e72:	1152      	asrs	r2, r2, #5
 8013e74:	17db      	asrs	r3, r3, #31
 8013e76:	1ad3      	subs	r3, r2, r3
 8013e78:	b29a      	uxth	r2, r3
 8013e7a:	69bb      	ldr	r3, [r7, #24]
 8013e7c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013e7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013e82:	4618      	mov	r0, r3
 8013e84:	3720      	adds	r7, #32
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bdb0      	pop	{r4, r5, r7, pc}
 8013e8a:	bf00      	nop
 8013e8c:	20008690 	.word	0x20008690
 8013e90:	0801ec8c 	.word	0x0801ec8c
 8013e94:	0801ec90 	.word	0x0801ec90
 8013e98:	10624dd3 	.word	0x10624dd3

08013e9c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b08a      	sub	sp, #40	; 0x28
 8013ea0:	af02      	add	r7, sp, #8
 8013ea2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ea8:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8013eaa:	2300      	movs	r3, #0
 8013eac:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8013eae:	69bb      	ldr	r3, [r7, #24]
 8013eb0:	2200      	movs	r2, #0
 8013eb2:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8013eb4:	2106      	movs	r1, #6
 8013eb6:	69b8      	ldr	r0, [r7, #24]
 8013eb8:	f000 fbf4 	bl	80146a4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8013ebc:	f107 0308 	add.w	r3, r7, #8
 8013ec0:	2201      	movs	r2, #1
 8013ec2:	69b9      	ldr	r1, [r7, #24]
 8013ec4:	6878      	ldr	r0, [r7, #4]
 8013ec6:	f001 f877 	bl	8014fb8 <dhcp_create_msg>
 8013eca:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8013ecc:	693b      	ldr	r3, [r7, #16]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d04b      	beq.n	8013f6a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013ed2:	693b      	ldr	r3, [r7, #16]
 8013ed4:	685b      	ldr	r3, [r3, #4]
 8013ed6:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013ed8:	8938      	ldrh	r0, [r7, #8]
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013ee0:	2302      	movs	r3, #2
 8013ee2:	2239      	movs	r2, #57	; 0x39
 8013ee4:	f000 fbf8 	bl	80146d8 <dhcp_option>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013eec:	8938      	ldrh	r0, [r7, #8]
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013ef8:	461a      	mov	r2, r3
 8013efa:	f000 fc47 	bl	801478c <dhcp_option_short>
 8013efe:	4603      	mov	r3, r0
 8013f00:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013f02:	8938      	ldrh	r0, [r7, #8]
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013f0a:	2303      	movs	r3, #3
 8013f0c:	2237      	movs	r2, #55	; 0x37
 8013f0e:	f000 fbe3 	bl	80146d8 <dhcp_option>
 8013f12:	4603      	mov	r3, r0
 8013f14:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013f16:	2300      	movs	r3, #0
 8013f18:	77fb      	strb	r3, [r7, #31]
 8013f1a:	e00e      	b.n	8013f3a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013f1c:	8938      	ldrh	r0, [r7, #8]
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013f24:	7ffb      	ldrb	r3, [r7, #31]
 8013f26:	4a29      	ldr	r2, [pc, #164]	; (8013fcc <dhcp_discover+0x130>)
 8013f28:	5cd3      	ldrb	r3, [r2, r3]
 8013f2a:	461a      	mov	r2, r3
 8013f2c:	f000 fc08 	bl	8014740 <dhcp_option_byte>
 8013f30:	4603      	mov	r3, r0
 8013f32:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013f34:	7ffb      	ldrb	r3, [r7, #31]
 8013f36:	3301      	adds	r3, #1
 8013f38:	77fb      	strb	r3, [r7, #31]
 8013f3a:	7ffb      	ldrb	r3, [r7, #31]
 8013f3c:	2b02      	cmp	r3, #2
 8013f3e:	d9ed      	bls.n	8013f1c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013f40:	8938      	ldrh	r0, [r7, #8]
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	33f0      	adds	r3, #240	; 0xf0
 8013f46:	693a      	ldr	r2, [r7, #16]
 8013f48:	4619      	mov	r1, r3
 8013f4a:	f001 f90b 	bl	8015164 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013f4e:	4b20      	ldr	r3, [pc, #128]	; (8013fd0 <dhcp_discover+0x134>)
 8013f50:	6818      	ldr	r0, [r3, #0]
 8013f52:	4b20      	ldr	r3, [pc, #128]	; (8013fd4 <dhcp_discover+0x138>)
 8013f54:	9301      	str	r3, [sp, #4]
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	9300      	str	r3, [sp, #0]
 8013f5a:	2343      	movs	r3, #67	; 0x43
 8013f5c:	4a1e      	ldr	r2, [pc, #120]	; (8013fd8 <dhcp_discover+0x13c>)
 8013f5e:	6939      	ldr	r1, [r7, #16]
 8013f60:	f7fe fff6 	bl	8012f50 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8013f64:	6938      	ldr	r0, [r7, #16]
 8013f66:	f7f8 f8cf 	bl	800c108 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013f6a:	69bb      	ldr	r3, [r7, #24]
 8013f6c:	799b      	ldrb	r3, [r3, #6]
 8013f6e:	2bff      	cmp	r3, #255	; 0xff
 8013f70:	d005      	beq.n	8013f7e <dhcp_discover+0xe2>
    dhcp->tries++;
 8013f72:	69bb      	ldr	r3, [r7, #24]
 8013f74:	799b      	ldrb	r3, [r3, #6]
 8013f76:	3301      	adds	r3, #1
 8013f78:	b2da      	uxtb	r2, r3
 8013f7a:	69bb      	ldr	r3, [r7, #24]
 8013f7c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013f7e:	69bb      	ldr	r3, [r7, #24]
 8013f80:	799b      	ldrb	r3, [r3, #6]
 8013f82:	2b05      	cmp	r3, #5
 8013f84:	d80d      	bhi.n	8013fa2 <dhcp_discover+0x106>
 8013f86:	69bb      	ldr	r3, [r7, #24]
 8013f88:	799b      	ldrb	r3, [r3, #6]
 8013f8a:	461a      	mov	r2, r3
 8013f8c:	2301      	movs	r3, #1
 8013f8e:	4093      	lsls	r3, r2
 8013f90:	b29b      	uxth	r3, r3
 8013f92:	461a      	mov	r2, r3
 8013f94:	0152      	lsls	r2, r2, #5
 8013f96:	1ad2      	subs	r2, r2, r3
 8013f98:	0092      	lsls	r2, r2, #2
 8013f9a:	4413      	add	r3, r2
 8013f9c:	00db      	lsls	r3, r3, #3
 8013f9e:	b29b      	uxth	r3, r3
 8013fa0:	e001      	b.n	8013fa6 <dhcp_discover+0x10a>
 8013fa2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013fa6:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013fa8:	897b      	ldrh	r3, [r7, #10]
 8013faa:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013fae:	4a0b      	ldr	r2, [pc, #44]	; (8013fdc <dhcp_discover+0x140>)
 8013fb0:	fb82 1203 	smull	r1, r2, r2, r3
 8013fb4:	1152      	asrs	r2, r2, #5
 8013fb6:	17db      	asrs	r3, r3, #31
 8013fb8:	1ad3      	subs	r3, r2, r3
 8013fba:	b29a      	uxth	r2, r3
 8013fbc:	69bb      	ldr	r3, [r7, #24]
 8013fbe:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013fc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	3720      	adds	r7, #32
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	bd80      	pop	{r7, pc}
 8013fcc:	2000001c 	.word	0x2000001c
 8013fd0:	20008690 	.word	0x20008690
 8013fd4:	0801ec8c 	.word	0x0801ec8c
 8013fd8:	0801ec90 	.word	0x0801ec90
 8013fdc:	10624dd3 	.word	0x10624dd3

08013fe0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b088      	sub	sp, #32
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d107      	bne.n	8013ffe <dhcp_bind+0x1e>
 8013fee:	4b64      	ldr	r3, [pc, #400]	; (8014180 <dhcp_bind+0x1a0>)
 8013ff0:	f240 4215 	movw	r2, #1045	; 0x415
 8013ff4:	4963      	ldr	r1, [pc, #396]	; (8014184 <dhcp_bind+0x1a4>)
 8013ff6:	4864      	ldr	r0, [pc, #400]	; (8014188 <dhcp_bind+0x1a8>)
 8013ff8:	f005 fe12 	bl	8019c20 <iprintf>
 8013ffc:	e0bc      	b.n	8014178 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014002:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8014004:	69bb      	ldr	r3, [r7, #24]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d107      	bne.n	801401a <dhcp_bind+0x3a>
 801400a:	4b5d      	ldr	r3, [pc, #372]	; (8014180 <dhcp_bind+0x1a0>)
 801400c:	f240 4217 	movw	r2, #1047	; 0x417
 8014010:	495e      	ldr	r1, [pc, #376]	; (801418c <dhcp_bind+0x1ac>)
 8014012:	485d      	ldr	r0, [pc, #372]	; (8014188 <dhcp_bind+0x1a8>)
 8014014:	f005 fe04 	bl	8019c20 <iprintf>
 8014018:	e0ae      	b.n	8014178 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801401a:	69bb      	ldr	r3, [r7, #24]
 801401c:	2200      	movs	r2, #0
 801401e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8014020:	69bb      	ldr	r3, [r7, #24]
 8014022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014028:	d019      	beq.n	801405e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801402a:	69bb      	ldr	r3, [r7, #24]
 801402c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801402e:	331e      	adds	r3, #30
 8014030:	4a57      	ldr	r2, [pc, #348]	; (8014190 <dhcp_bind+0x1b0>)
 8014032:	fba2 2303 	umull	r2, r3, r2, r3
 8014036:	095b      	lsrs	r3, r3, #5
 8014038:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801403a:	69fb      	ldr	r3, [r7, #28]
 801403c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014040:	d302      	bcc.n	8014048 <dhcp_bind+0x68>
      timeout = 0xffff;
 8014042:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014046:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8014048:	69fb      	ldr	r3, [r7, #28]
 801404a:	b29a      	uxth	r2, r3
 801404c:	69bb      	ldr	r3, [r7, #24]
 801404e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8014050:	69bb      	ldr	r3, [r7, #24]
 8014052:	8a9b      	ldrh	r3, [r3, #20]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d102      	bne.n	801405e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8014058:	69bb      	ldr	r3, [r7, #24]
 801405a:	2201      	movs	r2, #1
 801405c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801405e:	69bb      	ldr	r3, [r7, #24]
 8014060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014066:	d01d      	beq.n	80140a4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014068:	69bb      	ldr	r3, [r7, #24]
 801406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801406c:	331e      	adds	r3, #30
 801406e:	4a48      	ldr	r2, [pc, #288]	; (8014190 <dhcp_bind+0x1b0>)
 8014070:	fba2 2303 	umull	r2, r3, r2, r3
 8014074:	095b      	lsrs	r3, r3, #5
 8014076:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014078:	69fb      	ldr	r3, [r7, #28]
 801407a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801407e:	d302      	bcc.n	8014086 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8014080:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014084:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8014086:	69fb      	ldr	r3, [r7, #28]
 8014088:	b29a      	uxth	r2, r3
 801408a:	69bb      	ldr	r3, [r7, #24]
 801408c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801408e:	69bb      	ldr	r3, [r7, #24]
 8014090:	895b      	ldrh	r3, [r3, #10]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d102      	bne.n	801409c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8014096:	69bb      	ldr	r3, [r7, #24]
 8014098:	2201      	movs	r2, #1
 801409a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801409c:	69bb      	ldr	r3, [r7, #24]
 801409e:	895a      	ldrh	r2, [r3, #10]
 80140a0:	69bb      	ldr	r3, [r7, #24]
 80140a2:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80140a4:	69bb      	ldr	r3, [r7, #24]
 80140a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80140a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140ac:	d01d      	beq.n	80140ea <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80140ae:	69bb      	ldr	r3, [r7, #24]
 80140b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80140b2:	331e      	adds	r3, #30
 80140b4:	4a36      	ldr	r2, [pc, #216]	; (8014190 <dhcp_bind+0x1b0>)
 80140b6:	fba2 2303 	umull	r2, r3, r2, r3
 80140ba:	095b      	lsrs	r3, r3, #5
 80140bc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80140be:	69fb      	ldr	r3, [r7, #28]
 80140c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80140c4:	d302      	bcc.n	80140cc <dhcp_bind+0xec>
      timeout = 0xffff;
 80140c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80140ca:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80140cc:	69fb      	ldr	r3, [r7, #28]
 80140ce:	b29a      	uxth	r2, r3
 80140d0:	69bb      	ldr	r3, [r7, #24]
 80140d2:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80140d4:	69bb      	ldr	r3, [r7, #24]
 80140d6:	899b      	ldrh	r3, [r3, #12]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d102      	bne.n	80140e2 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80140dc:	69bb      	ldr	r3, [r7, #24]
 80140de:	2201      	movs	r2, #1
 80140e0:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80140e2:	69bb      	ldr	r3, [r7, #24]
 80140e4:	899a      	ldrh	r2, [r3, #12]
 80140e6:	69bb      	ldr	r3, [r7, #24]
 80140e8:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80140ea:	69bb      	ldr	r3, [r7, #24]
 80140ec:	895a      	ldrh	r2, [r3, #10]
 80140ee:	69bb      	ldr	r3, [r7, #24]
 80140f0:	899b      	ldrh	r3, [r3, #12]
 80140f2:	429a      	cmp	r2, r3
 80140f4:	d306      	bcc.n	8014104 <dhcp_bind+0x124>
 80140f6:	69bb      	ldr	r3, [r7, #24]
 80140f8:	899b      	ldrh	r3, [r3, #12]
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d002      	beq.n	8014104 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80140fe:	69bb      	ldr	r3, [r7, #24]
 8014100:	2200      	movs	r2, #0
 8014102:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8014104:	69bb      	ldr	r3, [r7, #24]
 8014106:	79db      	ldrb	r3, [r3, #7]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d003      	beq.n	8014114 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801410c:	69bb      	ldr	r3, [r7, #24]
 801410e:	6a1b      	ldr	r3, [r3, #32]
 8014110:	613b      	str	r3, [r7, #16]
 8014112:	e014      	b.n	801413e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8014114:	69bb      	ldr	r3, [r7, #24]
 8014116:	331c      	adds	r3, #28
 8014118:	781b      	ldrb	r3, [r3, #0]
 801411a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801411c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014120:	2b00      	cmp	r3, #0
 8014122:	db02      	blt.n	801412a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8014124:	23ff      	movs	r3, #255	; 0xff
 8014126:	613b      	str	r3, [r7, #16]
 8014128:	e009      	b.n	801413e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801412a:	7dfb      	ldrb	r3, [r7, #23]
 801412c:	2bbf      	cmp	r3, #191	; 0xbf
 801412e:	d903      	bls.n	8014138 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8014130:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8014134:	613b      	str	r3, [r7, #16]
 8014136:	e002      	b.n	801413e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8014138:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801413c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801413e:	69bb      	ldr	r3, [r7, #24]
 8014140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014142:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d108      	bne.n	801415c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801414a:	69bb      	ldr	r3, [r7, #24]
 801414c:	69da      	ldr	r2, [r3, #28]
 801414e:	693b      	ldr	r3, [r7, #16]
 8014150:	4013      	ands	r3, r2
 8014152:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801415a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801415c:	210a      	movs	r1, #10
 801415e:	69b8      	ldr	r0, [r7, #24]
 8014160:	f000 faa0 	bl	80146a4 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8014164:	69bb      	ldr	r3, [r7, #24]
 8014166:	f103 011c 	add.w	r1, r3, #28
 801416a:	f107 030c 	add.w	r3, r7, #12
 801416e:	f107 0210 	add.w	r2, r7, #16
 8014172:	6878      	ldr	r0, [r7, #4]
 8014174:	f7f7 fa8c 	bl	800b690 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8014178:	3720      	adds	r7, #32
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}
 801417e:	bf00      	nop
 8014180:	0801dfd0 	.word	0x0801dfd0
 8014184:	0801e130 	.word	0x0801e130
 8014188:	0801e030 	.word	0x0801e030
 801418c:	0801e14c 	.word	0x0801e14c
 8014190:	88888889 	.word	0x88888889

08014194 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8014194:	b580      	push	{r7, lr}
 8014196:	b08a      	sub	sp, #40	; 0x28
 8014198:	af02      	add	r7, sp, #8
 801419a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141a0:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80141a2:	2105      	movs	r1, #5
 80141a4:	69b8      	ldr	r0, [r7, #24]
 80141a6:	f000 fa7d 	bl	80146a4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80141aa:	f107 030c 	add.w	r3, r7, #12
 80141ae:	2203      	movs	r2, #3
 80141b0:	69b9      	ldr	r1, [r7, #24]
 80141b2:	6878      	ldr	r0, [r7, #4]
 80141b4:	f000 ff00 	bl	8014fb8 <dhcp_create_msg>
 80141b8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80141ba:	697b      	ldr	r3, [r7, #20]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d04e      	beq.n	801425e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80141c0:	697b      	ldr	r3, [r7, #20]
 80141c2:	685b      	ldr	r3, [r3, #4]
 80141c4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80141c6:	89b8      	ldrh	r0, [r7, #12]
 80141c8:	693b      	ldr	r3, [r7, #16]
 80141ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80141ce:	2302      	movs	r3, #2
 80141d0:	2239      	movs	r2, #57	; 0x39
 80141d2:	f000 fa81 	bl	80146d8 <dhcp_option>
 80141d6:	4603      	mov	r3, r0
 80141d8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80141da:	89b8      	ldrh	r0, [r7, #12]
 80141dc:	693b      	ldr	r3, [r7, #16]
 80141de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80141e6:	461a      	mov	r2, r3
 80141e8:	f000 fad0 	bl	801478c <dhcp_option_short>
 80141ec:	4603      	mov	r3, r0
 80141ee:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80141f0:	89b8      	ldrh	r0, [r7, #12]
 80141f2:	693b      	ldr	r3, [r7, #16]
 80141f4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80141f8:	2303      	movs	r3, #3
 80141fa:	2237      	movs	r2, #55	; 0x37
 80141fc:	f000 fa6c 	bl	80146d8 <dhcp_option>
 8014200:	4603      	mov	r3, r0
 8014202:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014204:	2300      	movs	r3, #0
 8014206:	77bb      	strb	r3, [r7, #30]
 8014208:	e00e      	b.n	8014228 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801420a:	89b8      	ldrh	r0, [r7, #12]
 801420c:	693b      	ldr	r3, [r7, #16]
 801420e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014212:	7fbb      	ldrb	r3, [r7, #30]
 8014214:	4a2a      	ldr	r2, [pc, #168]	; (80142c0 <dhcp_renew+0x12c>)
 8014216:	5cd3      	ldrb	r3, [r2, r3]
 8014218:	461a      	mov	r2, r3
 801421a:	f000 fa91 	bl	8014740 <dhcp_option_byte>
 801421e:	4603      	mov	r3, r0
 8014220:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014222:	7fbb      	ldrb	r3, [r7, #30]
 8014224:	3301      	adds	r3, #1
 8014226:	77bb      	strb	r3, [r7, #30]
 8014228:	7fbb      	ldrb	r3, [r7, #30]
 801422a:	2b02      	cmp	r3, #2
 801422c:	d9ed      	bls.n	801420a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801422e:	89b8      	ldrh	r0, [r7, #12]
 8014230:	693b      	ldr	r3, [r7, #16]
 8014232:	33f0      	adds	r3, #240	; 0xf0
 8014234:	697a      	ldr	r2, [r7, #20]
 8014236:	4619      	mov	r1, r3
 8014238:	f000 ff94 	bl	8015164 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801423c:	4b21      	ldr	r3, [pc, #132]	; (80142c4 <dhcp_renew+0x130>)
 801423e:	6818      	ldr	r0, [r3, #0]
 8014240:	69bb      	ldr	r3, [r7, #24]
 8014242:	f103 0218 	add.w	r2, r3, #24
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	9300      	str	r3, [sp, #0]
 801424a:	2343      	movs	r3, #67	; 0x43
 801424c:	6979      	ldr	r1, [r7, #20]
 801424e:	f7fe fe0b 	bl	8012e68 <udp_sendto_if>
 8014252:	4603      	mov	r3, r0
 8014254:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014256:	6978      	ldr	r0, [r7, #20]
 8014258:	f7f7 ff56 	bl	800c108 <pbuf_free>
 801425c:	e001      	b.n	8014262 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801425e:	23ff      	movs	r3, #255	; 0xff
 8014260:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014262:	69bb      	ldr	r3, [r7, #24]
 8014264:	799b      	ldrb	r3, [r3, #6]
 8014266:	2bff      	cmp	r3, #255	; 0xff
 8014268:	d005      	beq.n	8014276 <dhcp_renew+0xe2>
    dhcp->tries++;
 801426a:	69bb      	ldr	r3, [r7, #24]
 801426c:	799b      	ldrb	r3, [r3, #6]
 801426e:	3301      	adds	r3, #1
 8014270:	b2da      	uxtb	r2, r3
 8014272:	69bb      	ldr	r3, [r7, #24]
 8014274:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8014276:	69bb      	ldr	r3, [r7, #24]
 8014278:	799b      	ldrb	r3, [r3, #6]
 801427a:	2b09      	cmp	r3, #9
 801427c:	d80a      	bhi.n	8014294 <dhcp_renew+0x100>
 801427e:	69bb      	ldr	r3, [r7, #24]
 8014280:	799b      	ldrb	r3, [r3, #6]
 8014282:	b29b      	uxth	r3, r3
 8014284:	461a      	mov	r2, r3
 8014286:	0152      	lsls	r2, r2, #5
 8014288:	1ad2      	subs	r2, r2, r3
 801428a:	0092      	lsls	r2, r2, #2
 801428c:	4413      	add	r3, r2
 801428e:	011b      	lsls	r3, r3, #4
 8014290:	b29b      	uxth	r3, r3
 8014292:	e001      	b.n	8014298 <dhcp_renew+0x104>
 8014294:	f644 6320 	movw	r3, #20000	; 0x4e20
 8014298:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801429a:	89fb      	ldrh	r3, [r7, #14]
 801429c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80142a0:	4a09      	ldr	r2, [pc, #36]	; (80142c8 <dhcp_renew+0x134>)
 80142a2:	fb82 1203 	smull	r1, r2, r2, r3
 80142a6:	1152      	asrs	r2, r2, #5
 80142a8:	17db      	asrs	r3, r3, #31
 80142aa:	1ad3      	subs	r3, r2, r3
 80142ac:	b29a      	uxth	r2, r3
 80142ae:	69bb      	ldr	r3, [r7, #24]
 80142b0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80142b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80142b6:	4618      	mov	r0, r3
 80142b8:	3720      	adds	r7, #32
 80142ba:	46bd      	mov	sp, r7
 80142bc:	bd80      	pop	{r7, pc}
 80142be:	bf00      	nop
 80142c0:	2000001c 	.word	0x2000001c
 80142c4:	20008690 	.word	0x20008690
 80142c8:	10624dd3 	.word	0x10624dd3

080142cc <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b08a      	sub	sp, #40	; 0x28
 80142d0:	af02      	add	r7, sp, #8
 80142d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142d8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80142da:	2104      	movs	r1, #4
 80142dc:	69b8      	ldr	r0, [r7, #24]
 80142de:	f000 f9e1 	bl	80146a4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80142e2:	f107 030c 	add.w	r3, r7, #12
 80142e6:	2203      	movs	r2, #3
 80142e8:	69b9      	ldr	r1, [r7, #24]
 80142ea:	6878      	ldr	r0, [r7, #4]
 80142ec:	f000 fe64 	bl	8014fb8 <dhcp_create_msg>
 80142f0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80142f2:	697b      	ldr	r3, [r7, #20]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d04c      	beq.n	8014392 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80142f8:	697b      	ldr	r3, [r7, #20]
 80142fa:	685b      	ldr	r3, [r3, #4]
 80142fc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80142fe:	89b8      	ldrh	r0, [r7, #12]
 8014300:	693b      	ldr	r3, [r7, #16]
 8014302:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014306:	2302      	movs	r3, #2
 8014308:	2239      	movs	r2, #57	; 0x39
 801430a:	f000 f9e5 	bl	80146d8 <dhcp_option>
 801430e:	4603      	mov	r3, r0
 8014310:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014312:	89b8      	ldrh	r0, [r7, #12]
 8014314:	693b      	ldr	r3, [r7, #16]
 8014316:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801431e:	461a      	mov	r2, r3
 8014320:	f000 fa34 	bl	801478c <dhcp_option_short>
 8014324:	4603      	mov	r3, r0
 8014326:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014328:	89b8      	ldrh	r0, [r7, #12]
 801432a:	693b      	ldr	r3, [r7, #16]
 801432c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014330:	2303      	movs	r3, #3
 8014332:	2237      	movs	r2, #55	; 0x37
 8014334:	f000 f9d0 	bl	80146d8 <dhcp_option>
 8014338:	4603      	mov	r3, r0
 801433a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801433c:	2300      	movs	r3, #0
 801433e:	77bb      	strb	r3, [r7, #30]
 8014340:	e00e      	b.n	8014360 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014342:	89b8      	ldrh	r0, [r7, #12]
 8014344:	693b      	ldr	r3, [r7, #16]
 8014346:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801434a:	7fbb      	ldrb	r3, [r7, #30]
 801434c:	4a29      	ldr	r2, [pc, #164]	; (80143f4 <dhcp_rebind+0x128>)
 801434e:	5cd3      	ldrb	r3, [r2, r3]
 8014350:	461a      	mov	r2, r3
 8014352:	f000 f9f5 	bl	8014740 <dhcp_option_byte>
 8014356:	4603      	mov	r3, r0
 8014358:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801435a:	7fbb      	ldrb	r3, [r7, #30]
 801435c:	3301      	adds	r3, #1
 801435e:	77bb      	strb	r3, [r7, #30]
 8014360:	7fbb      	ldrb	r3, [r7, #30]
 8014362:	2b02      	cmp	r3, #2
 8014364:	d9ed      	bls.n	8014342 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014366:	89b8      	ldrh	r0, [r7, #12]
 8014368:	693b      	ldr	r3, [r7, #16]
 801436a:	33f0      	adds	r3, #240	; 0xf0
 801436c:	697a      	ldr	r2, [r7, #20]
 801436e:	4619      	mov	r1, r3
 8014370:	f000 fef8 	bl	8015164 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014374:	4b20      	ldr	r3, [pc, #128]	; (80143f8 <dhcp_rebind+0x12c>)
 8014376:	6818      	ldr	r0, [r3, #0]
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	9300      	str	r3, [sp, #0]
 801437c:	2343      	movs	r3, #67	; 0x43
 801437e:	4a1f      	ldr	r2, [pc, #124]	; (80143fc <dhcp_rebind+0x130>)
 8014380:	6979      	ldr	r1, [r7, #20]
 8014382:	f7fe fd71 	bl	8012e68 <udp_sendto_if>
 8014386:	4603      	mov	r3, r0
 8014388:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801438a:	6978      	ldr	r0, [r7, #20]
 801438c:	f7f7 febc 	bl	800c108 <pbuf_free>
 8014390:	e001      	b.n	8014396 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014392:	23ff      	movs	r3, #255	; 0xff
 8014394:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014396:	69bb      	ldr	r3, [r7, #24]
 8014398:	799b      	ldrb	r3, [r3, #6]
 801439a:	2bff      	cmp	r3, #255	; 0xff
 801439c:	d005      	beq.n	80143aa <dhcp_rebind+0xde>
    dhcp->tries++;
 801439e:	69bb      	ldr	r3, [r7, #24]
 80143a0:	799b      	ldrb	r3, [r3, #6]
 80143a2:	3301      	adds	r3, #1
 80143a4:	b2da      	uxtb	r2, r3
 80143a6:	69bb      	ldr	r3, [r7, #24]
 80143a8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80143aa:	69bb      	ldr	r3, [r7, #24]
 80143ac:	799b      	ldrb	r3, [r3, #6]
 80143ae:	2b09      	cmp	r3, #9
 80143b0:	d80a      	bhi.n	80143c8 <dhcp_rebind+0xfc>
 80143b2:	69bb      	ldr	r3, [r7, #24]
 80143b4:	799b      	ldrb	r3, [r3, #6]
 80143b6:	b29b      	uxth	r3, r3
 80143b8:	461a      	mov	r2, r3
 80143ba:	0152      	lsls	r2, r2, #5
 80143bc:	1ad2      	subs	r2, r2, r3
 80143be:	0092      	lsls	r2, r2, #2
 80143c0:	4413      	add	r3, r2
 80143c2:	00db      	lsls	r3, r3, #3
 80143c4:	b29b      	uxth	r3, r3
 80143c6:	e001      	b.n	80143cc <dhcp_rebind+0x100>
 80143c8:	f242 7310 	movw	r3, #10000	; 0x2710
 80143cc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80143ce:	89fb      	ldrh	r3, [r7, #14]
 80143d0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80143d4:	4a0a      	ldr	r2, [pc, #40]	; (8014400 <dhcp_rebind+0x134>)
 80143d6:	fb82 1203 	smull	r1, r2, r2, r3
 80143da:	1152      	asrs	r2, r2, #5
 80143dc:	17db      	asrs	r3, r3, #31
 80143de:	1ad3      	subs	r3, r2, r3
 80143e0:	b29a      	uxth	r2, r3
 80143e2:	69bb      	ldr	r3, [r7, #24]
 80143e4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80143e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80143ea:	4618      	mov	r0, r3
 80143ec:	3720      	adds	r7, #32
 80143ee:	46bd      	mov	sp, r7
 80143f0:	bd80      	pop	{r7, pc}
 80143f2:	bf00      	nop
 80143f4:	2000001c 	.word	0x2000001c
 80143f8:	20008690 	.word	0x20008690
 80143fc:	0801ec90 	.word	0x0801ec90
 8014400:	10624dd3 	.word	0x10624dd3

08014404 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8014404:	b5b0      	push	{r4, r5, r7, lr}
 8014406:	b08a      	sub	sp, #40	; 0x28
 8014408:	af02      	add	r7, sp, #8
 801440a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014410:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8014412:	2103      	movs	r1, #3
 8014414:	69b8      	ldr	r0, [r7, #24]
 8014416:	f000 f945 	bl	80146a4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801441a:	f107 030c 	add.w	r3, r7, #12
 801441e:	2203      	movs	r2, #3
 8014420:	69b9      	ldr	r1, [r7, #24]
 8014422:	6878      	ldr	r0, [r7, #4]
 8014424:	f000 fdc8 	bl	8014fb8 <dhcp_create_msg>
 8014428:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801442a:	697b      	ldr	r3, [r7, #20]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d066      	beq.n	80144fe <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014430:	697b      	ldr	r3, [r7, #20]
 8014432:	685b      	ldr	r3, [r3, #4]
 8014434:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014436:	89b8      	ldrh	r0, [r7, #12]
 8014438:	693b      	ldr	r3, [r7, #16]
 801443a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801443e:	2302      	movs	r3, #2
 8014440:	2239      	movs	r2, #57	; 0x39
 8014442:	f000 f949 	bl	80146d8 <dhcp_option>
 8014446:	4603      	mov	r3, r0
 8014448:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801444a:	89b8      	ldrh	r0, [r7, #12]
 801444c:	693b      	ldr	r3, [r7, #16]
 801444e:	33f0      	adds	r3, #240	; 0xf0
 8014450:	f44f 7210 	mov.w	r2, #576	; 0x240
 8014454:	4619      	mov	r1, r3
 8014456:	f000 f999 	bl	801478c <dhcp_option_short>
 801445a:	4603      	mov	r3, r0
 801445c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801445e:	89b8      	ldrh	r0, [r7, #12]
 8014460:	693b      	ldr	r3, [r7, #16]
 8014462:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014466:	2304      	movs	r3, #4
 8014468:	2232      	movs	r2, #50	; 0x32
 801446a:	f000 f935 	bl	80146d8 <dhcp_option>
 801446e:	4603      	mov	r3, r0
 8014470:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014472:	89bc      	ldrh	r4, [r7, #12]
 8014474:	693b      	ldr	r3, [r7, #16]
 8014476:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801447a:	69bb      	ldr	r3, [r7, #24]
 801447c:	69db      	ldr	r3, [r3, #28]
 801447e:	4618      	mov	r0, r3
 8014480:	f7f6 fa71 	bl	800a966 <lwip_htonl>
 8014484:	4603      	mov	r3, r0
 8014486:	461a      	mov	r2, r3
 8014488:	4629      	mov	r1, r5
 801448a:	4620      	mov	r0, r4
 801448c:	f000 f9b0 	bl	80147f0 <dhcp_option_long>
 8014490:	4603      	mov	r3, r0
 8014492:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014494:	89b8      	ldrh	r0, [r7, #12]
 8014496:	693b      	ldr	r3, [r7, #16]
 8014498:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801449c:	2303      	movs	r3, #3
 801449e:	2237      	movs	r2, #55	; 0x37
 80144a0:	f000 f91a 	bl	80146d8 <dhcp_option>
 80144a4:	4603      	mov	r3, r0
 80144a6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80144a8:	2300      	movs	r3, #0
 80144aa:	77bb      	strb	r3, [r7, #30]
 80144ac:	e00e      	b.n	80144cc <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80144ae:	89b8      	ldrh	r0, [r7, #12]
 80144b0:	693b      	ldr	r3, [r7, #16]
 80144b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80144b6:	7fbb      	ldrb	r3, [r7, #30]
 80144b8:	4a29      	ldr	r2, [pc, #164]	; (8014560 <dhcp_reboot+0x15c>)
 80144ba:	5cd3      	ldrb	r3, [r2, r3]
 80144bc:	461a      	mov	r2, r3
 80144be:	f000 f93f 	bl	8014740 <dhcp_option_byte>
 80144c2:	4603      	mov	r3, r0
 80144c4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80144c6:	7fbb      	ldrb	r3, [r7, #30]
 80144c8:	3301      	adds	r3, #1
 80144ca:	77bb      	strb	r3, [r7, #30]
 80144cc:	7fbb      	ldrb	r3, [r7, #30]
 80144ce:	2b02      	cmp	r3, #2
 80144d0:	d9ed      	bls.n	80144ae <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80144d2:	89b8      	ldrh	r0, [r7, #12]
 80144d4:	693b      	ldr	r3, [r7, #16]
 80144d6:	33f0      	adds	r3, #240	; 0xf0
 80144d8:	697a      	ldr	r2, [r7, #20]
 80144da:	4619      	mov	r1, r3
 80144dc:	f000 fe42 	bl	8015164 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80144e0:	4b20      	ldr	r3, [pc, #128]	; (8014564 <dhcp_reboot+0x160>)
 80144e2:	6818      	ldr	r0, [r3, #0]
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	9300      	str	r3, [sp, #0]
 80144e8:	2343      	movs	r3, #67	; 0x43
 80144ea:	4a1f      	ldr	r2, [pc, #124]	; (8014568 <dhcp_reboot+0x164>)
 80144ec:	6979      	ldr	r1, [r7, #20]
 80144ee:	f7fe fcbb 	bl	8012e68 <udp_sendto_if>
 80144f2:	4603      	mov	r3, r0
 80144f4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80144f6:	6978      	ldr	r0, [r7, #20]
 80144f8:	f7f7 fe06 	bl	800c108 <pbuf_free>
 80144fc:	e001      	b.n	8014502 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80144fe:	23ff      	movs	r3, #255	; 0xff
 8014500:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014502:	69bb      	ldr	r3, [r7, #24]
 8014504:	799b      	ldrb	r3, [r3, #6]
 8014506:	2bff      	cmp	r3, #255	; 0xff
 8014508:	d005      	beq.n	8014516 <dhcp_reboot+0x112>
    dhcp->tries++;
 801450a:	69bb      	ldr	r3, [r7, #24]
 801450c:	799b      	ldrb	r3, [r3, #6]
 801450e:	3301      	adds	r3, #1
 8014510:	b2da      	uxtb	r2, r3
 8014512:	69bb      	ldr	r3, [r7, #24]
 8014514:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8014516:	69bb      	ldr	r3, [r7, #24]
 8014518:	799b      	ldrb	r3, [r3, #6]
 801451a:	2b09      	cmp	r3, #9
 801451c:	d80a      	bhi.n	8014534 <dhcp_reboot+0x130>
 801451e:	69bb      	ldr	r3, [r7, #24]
 8014520:	799b      	ldrb	r3, [r3, #6]
 8014522:	b29b      	uxth	r3, r3
 8014524:	461a      	mov	r2, r3
 8014526:	0152      	lsls	r2, r2, #5
 8014528:	1ad2      	subs	r2, r2, r3
 801452a:	0092      	lsls	r2, r2, #2
 801452c:	4413      	add	r3, r2
 801452e:	00db      	lsls	r3, r3, #3
 8014530:	b29b      	uxth	r3, r3
 8014532:	e001      	b.n	8014538 <dhcp_reboot+0x134>
 8014534:	f242 7310 	movw	r3, #10000	; 0x2710
 8014538:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801453a:	89fb      	ldrh	r3, [r7, #14]
 801453c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014540:	4a0a      	ldr	r2, [pc, #40]	; (801456c <dhcp_reboot+0x168>)
 8014542:	fb82 1203 	smull	r1, r2, r2, r3
 8014546:	1152      	asrs	r2, r2, #5
 8014548:	17db      	asrs	r3, r3, #31
 801454a:	1ad3      	subs	r3, r2, r3
 801454c:	b29a      	uxth	r2, r3
 801454e:	69bb      	ldr	r3, [r7, #24]
 8014550:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014552:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014556:	4618      	mov	r0, r3
 8014558:	3720      	adds	r7, #32
 801455a:	46bd      	mov	sp, r7
 801455c:	bdb0      	pop	{r4, r5, r7, pc}
 801455e:	bf00      	nop
 8014560:	2000001c 	.word	0x2000001c
 8014564:	20008690 	.word	0x20008690
 8014568:	0801ec90 	.word	0x0801ec90
 801456c:	10624dd3 	.word	0x10624dd3

08014570 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8014570:	b5b0      	push	{r4, r5, r7, lr}
 8014572:	b08a      	sub	sp, #40	; 0x28
 8014574:	af02      	add	r7, sp, #8
 8014576:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801457c:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801457e:	69fb      	ldr	r3, [r7, #28]
 8014580:	2b00      	cmp	r3, #0
 8014582:	f000 8084 	beq.w	801468e <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8014586:	69fb      	ldr	r3, [r7, #28]
 8014588:	795b      	ldrb	r3, [r3, #5]
 801458a:	2b00      	cmp	r3, #0
 801458c:	f000 8081 	beq.w	8014692 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8014590:	69fb      	ldr	r3, [r7, #28]
 8014592:	699b      	ldr	r3, [r3, #24]
 8014594:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8014596:	69fb      	ldr	r3, [r7, #28]
 8014598:	2200      	movs	r2, #0
 801459a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801459c:	69fb      	ldr	r3, [r7, #28]
 801459e:	2200      	movs	r2, #0
 80145a0:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80145a2:	69fb      	ldr	r3, [r7, #28]
 80145a4:	2200      	movs	r2, #0
 80145a6:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80145a8:	69fb      	ldr	r3, [r7, #28]
 80145aa:	2200      	movs	r2, #0
 80145ac:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80145ae:	69fb      	ldr	r3, [r7, #28]
 80145b0:	2200      	movs	r2, #0
 80145b2:	631a      	str	r2, [r3, #48]	; 0x30
 80145b4:	69fb      	ldr	r3, [r7, #28]
 80145b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80145b8:	69fb      	ldr	r3, [r7, #28]
 80145ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80145bc:	69fb      	ldr	r3, [r7, #28]
 80145be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145c0:	69fb      	ldr	r3, [r7, #28]
 80145c2:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80145c4:	69fb      	ldr	r3, [r7, #28]
 80145c6:	2200      	movs	r2, #0
 80145c8:	829a      	strh	r2, [r3, #20]
 80145ca:	69fb      	ldr	r3, [r7, #28]
 80145cc:	8a9a      	ldrh	r2, [r3, #20]
 80145ce:	69fb      	ldr	r3, [r7, #28]
 80145d0:	825a      	strh	r2, [r3, #18]
 80145d2:	69fb      	ldr	r3, [r7, #28]
 80145d4:	8a5a      	ldrh	r2, [r3, #18]
 80145d6:	69fb      	ldr	r3, [r7, #28]
 80145d8:	821a      	strh	r2, [r3, #16]
 80145da:	69fb      	ldr	r3, [r7, #28]
 80145dc:	8a1a      	ldrh	r2, [r3, #16]
 80145de:	69fb      	ldr	r3, [r7, #28]
 80145e0:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f000 fdec 	bl	80151c0 <dhcp_supplied_address>
 80145e8:	4603      	mov	r3, r0
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d03b      	beq.n	8014666 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80145ee:	f107 030e 	add.w	r3, r7, #14
 80145f2:	2207      	movs	r2, #7
 80145f4:	69f9      	ldr	r1, [r7, #28]
 80145f6:	6878      	ldr	r0, [r7, #4]
 80145f8:	f000 fcde 	bl	8014fb8 <dhcp_create_msg>
 80145fc:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80145fe:	69bb      	ldr	r3, [r7, #24]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d030      	beq.n	8014666 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014604:	69bb      	ldr	r3, [r7, #24]
 8014606:	685b      	ldr	r3, [r3, #4]
 8014608:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801460a:	89f8      	ldrh	r0, [r7, #14]
 801460c:	697b      	ldr	r3, [r7, #20]
 801460e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014612:	2304      	movs	r3, #4
 8014614:	2236      	movs	r2, #54	; 0x36
 8014616:	f000 f85f 	bl	80146d8 <dhcp_option>
 801461a:	4603      	mov	r3, r0
 801461c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801461e:	89fc      	ldrh	r4, [r7, #14]
 8014620:	697b      	ldr	r3, [r7, #20]
 8014622:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014626:	693b      	ldr	r3, [r7, #16]
 8014628:	4618      	mov	r0, r3
 801462a:	f7f6 f99c 	bl	800a966 <lwip_htonl>
 801462e:	4603      	mov	r3, r0
 8014630:	461a      	mov	r2, r3
 8014632:	4629      	mov	r1, r5
 8014634:	4620      	mov	r0, r4
 8014636:	f000 f8db 	bl	80147f0 <dhcp_option_long>
 801463a:	4603      	mov	r3, r0
 801463c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801463e:	89f8      	ldrh	r0, [r7, #14]
 8014640:	697b      	ldr	r3, [r7, #20]
 8014642:	33f0      	adds	r3, #240	; 0xf0
 8014644:	69ba      	ldr	r2, [r7, #24]
 8014646:	4619      	mov	r1, r3
 8014648:	f000 fd8c 	bl	8015164 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801464c:	4b13      	ldr	r3, [pc, #76]	; (801469c <dhcp_release_and_stop+0x12c>)
 801464e:	6818      	ldr	r0, [r3, #0]
 8014650:	f107 0210 	add.w	r2, r7, #16
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	9300      	str	r3, [sp, #0]
 8014658:	2343      	movs	r3, #67	; 0x43
 801465a:	69b9      	ldr	r1, [r7, #24]
 801465c:	f7fe fc04 	bl	8012e68 <udp_sendto_if>
      pbuf_free(p_out);
 8014660:	69b8      	ldr	r0, [r7, #24]
 8014662:	f7f7 fd51 	bl	800c108 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014666:	4b0e      	ldr	r3, [pc, #56]	; (80146a0 <dhcp_release_and_stop+0x130>)
 8014668:	4a0d      	ldr	r2, [pc, #52]	; (80146a0 <dhcp_release_and_stop+0x130>)
 801466a:	490d      	ldr	r1, [pc, #52]	; (80146a0 <dhcp_release_and_stop+0x130>)
 801466c:	6878      	ldr	r0, [r7, #4]
 801466e:	f7f7 f80f 	bl	800b690 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8014672:	2100      	movs	r1, #0
 8014674:	69f8      	ldr	r0, [r7, #28]
 8014676:	f000 f815 	bl	80146a4 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801467a:	69fb      	ldr	r3, [r7, #28]
 801467c:	791b      	ldrb	r3, [r3, #4]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d008      	beq.n	8014694 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014682:	f7fe ff71 	bl	8013568 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8014686:	69fb      	ldr	r3, [r7, #28]
 8014688:	2200      	movs	r2, #0
 801468a:	711a      	strb	r2, [r3, #4]
 801468c:	e002      	b.n	8014694 <dhcp_release_and_stop+0x124>
    return;
 801468e:	bf00      	nop
 8014690:	e000      	b.n	8014694 <dhcp_release_and_stop+0x124>
    return;
 8014692:	bf00      	nop
  }
}
 8014694:	3720      	adds	r7, #32
 8014696:	46bd      	mov	sp, r7
 8014698:	bdb0      	pop	{r4, r5, r7, pc}
 801469a:	bf00      	nop
 801469c:	20008690 	.word	0x20008690
 80146a0:	0801ec8c 	.word	0x0801ec8c

080146a4 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80146a4:	b480      	push	{r7}
 80146a6:	b083      	sub	sp, #12
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	6078      	str	r0, [r7, #4]
 80146ac:	460b      	mov	r3, r1
 80146ae:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	795b      	ldrb	r3, [r3, #5]
 80146b4:	78fa      	ldrb	r2, [r7, #3]
 80146b6:	429a      	cmp	r2, r3
 80146b8:	d008      	beq.n	80146cc <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	78fa      	ldrb	r2, [r7, #3]
 80146be:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	2200      	movs	r2, #0
 80146c4:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	2200      	movs	r2, #0
 80146ca:	811a      	strh	r2, [r3, #8]
  }
}
 80146cc:	bf00      	nop
 80146ce:	370c      	adds	r7, #12
 80146d0:	46bd      	mov	sp, r7
 80146d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d6:	4770      	bx	lr

080146d8 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	b082      	sub	sp, #8
 80146dc:	af00      	add	r7, sp, #0
 80146de:	6039      	str	r1, [r7, #0]
 80146e0:	4611      	mov	r1, r2
 80146e2:	461a      	mov	r2, r3
 80146e4:	4603      	mov	r3, r0
 80146e6:	80fb      	strh	r3, [r7, #6]
 80146e8:	460b      	mov	r3, r1
 80146ea:	717b      	strb	r3, [r7, #5]
 80146ec:	4613      	mov	r3, r2
 80146ee:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80146f0:	88fa      	ldrh	r2, [r7, #6]
 80146f2:	793b      	ldrb	r3, [r7, #4]
 80146f4:	4413      	add	r3, r2
 80146f6:	3302      	adds	r3, #2
 80146f8:	2b44      	cmp	r3, #68	; 0x44
 80146fa:	d906      	bls.n	801470a <dhcp_option+0x32>
 80146fc:	4b0d      	ldr	r3, [pc, #52]	; (8014734 <dhcp_option+0x5c>)
 80146fe:	f240 529a 	movw	r2, #1434	; 0x59a
 8014702:	490d      	ldr	r1, [pc, #52]	; (8014738 <dhcp_option+0x60>)
 8014704:	480d      	ldr	r0, [pc, #52]	; (801473c <dhcp_option+0x64>)
 8014706:	f005 fa8b 	bl	8019c20 <iprintf>
  options[options_out_len++] = option_type;
 801470a:	88fb      	ldrh	r3, [r7, #6]
 801470c:	1c5a      	adds	r2, r3, #1
 801470e:	80fa      	strh	r2, [r7, #6]
 8014710:	461a      	mov	r2, r3
 8014712:	683b      	ldr	r3, [r7, #0]
 8014714:	4413      	add	r3, r2
 8014716:	797a      	ldrb	r2, [r7, #5]
 8014718:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801471a:	88fb      	ldrh	r3, [r7, #6]
 801471c:	1c5a      	adds	r2, r3, #1
 801471e:	80fa      	strh	r2, [r7, #6]
 8014720:	461a      	mov	r2, r3
 8014722:	683b      	ldr	r3, [r7, #0]
 8014724:	4413      	add	r3, r2
 8014726:	793a      	ldrb	r2, [r7, #4]
 8014728:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801472a:	88fb      	ldrh	r3, [r7, #6]
}
 801472c:	4618      	mov	r0, r3
 801472e:	3708      	adds	r7, #8
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}
 8014734:	0801dfd0 	.word	0x0801dfd0
 8014738:	0801e164 	.word	0x0801e164
 801473c:	0801e030 	.word	0x0801e030

08014740 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8014740:	b580      	push	{r7, lr}
 8014742:	b082      	sub	sp, #8
 8014744:	af00      	add	r7, sp, #0
 8014746:	4603      	mov	r3, r0
 8014748:	6039      	str	r1, [r7, #0]
 801474a:	80fb      	strh	r3, [r7, #6]
 801474c:	4613      	mov	r3, r2
 801474e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8014750:	88fb      	ldrh	r3, [r7, #6]
 8014752:	2b43      	cmp	r3, #67	; 0x43
 8014754:	d906      	bls.n	8014764 <dhcp_option_byte+0x24>
 8014756:	4b0a      	ldr	r3, [pc, #40]	; (8014780 <dhcp_option_byte+0x40>)
 8014758:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801475c:	4909      	ldr	r1, [pc, #36]	; (8014784 <dhcp_option_byte+0x44>)
 801475e:	480a      	ldr	r0, [pc, #40]	; (8014788 <dhcp_option_byte+0x48>)
 8014760:	f005 fa5e 	bl	8019c20 <iprintf>
  options[options_out_len++] = value;
 8014764:	88fb      	ldrh	r3, [r7, #6]
 8014766:	1c5a      	adds	r2, r3, #1
 8014768:	80fa      	strh	r2, [r7, #6]
 801476a:	461a      	mov	r2, r3
 801476c:	683b      	ldr	r3, [r7, #0]
 801476e:	4413      	add	r3, r2
 8014770:	797a      	ldrb	r2, [r7, #5]
 8014772:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014774:	88fb      	ldrh	r3, [r7, #6]
}
 8014776:	4618      	mov	r0, r3
 8014778:	3708      	adds	r7, #8
 801477a:	46bd      	mov	sp, r7
 801477c:	bd80      	pop	{r7, pc}
 801477e:	bf00      	nop
 8014780:	0801dfd0 	.word	0x0801dfd0
 8014784:	0801e1a8 	.word	0x0801e1a8
 8014788:	0801e030 	.word	0x0801e030

0801478c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801478c:	b580      	push	{r7, lr}
 801478e:	b082      	sub	sp, #8
 8014790:	af00      	add	r7, sp, #0
 8014792:	4603      	mov	r3, r0
 8014794:	6039      	str	r1, [r7, #0]
 8014796:	80fb      	strh	r3, [r7, #6]
 8014798:	4613      	mov	r3, r2
 801479a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801479c:	88fb      	ldrh	r3, [r7, #6]
 801479e:	3302      	adds	r3, #2
 80147a0:	2b44      	cmp	r3, #68	; 0x44
 80147a2:	d906      	bls.n	80147b2 <dhcp_option_short+0x26>
 80147a4:	4b0f      	ldr	r3, [pc, #60]	; (80147e4 <dhcp_option_short+0x58>)
 80147a6:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80147aa:	490f      	ldr	r1, [pc, #60]	; (80147e8 <dhcp_option_short+0x5c>)
 80147ac:	480f      	ldr	r0, [pc, #60]	; (80147ec <dhcp_option_short+0x60>)
 80147ae:	f005 fa37 	bl	8019c20 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80147b2:	88bb      	ldrh	r3, [r7, #4]
 80147b4:	0a1b      	lsrs	r3, r3, #8
 80147b6:	b29a      	uxth	r2, r3
 80147b8:	88fb      	ldrh	r3, [r7, #6]
 80147ba:	1c59      	adds	r1, r3, #1
 80147bc:	80f9      	strh	r1, [r7, #6]
 80147be:	4619      	mov	r1, r3
 80147c0:	683b      	ldr	r3, [r7, #0]
 80147c2:	440b      	add	r3, r1
 80147c4:	b2d2      	uxtb	r2, r2
 80147c6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80147c8:	88fb      	ldrh	r3, [r7, #6]
 80147ca:	1c5a      	adds	r2, r3, #1
 80147cc:	80fa      	strh	r2, [r7, #6]
 80147ce:	461a      	mov	r2, r3
 80147d0:	683b      	ldr	r3, [r7, #0]
 80147d2:	4413      	add	r3, r2
 80147d4:	88ba      	ldrh	r2, [r7, #4]
 80147d6:	b2d2      	uxtb	r2, r2
 80147d8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80147da:	88fb      	ldrh	r3, [r7, #6]
}
 80147dc:	4618      	mov	r0, r3
 80147de:	3708      	adds	r7, #8
 80147e0:	46bd      	mov	sp, r7
 80147e2:	bd80      	pop	{r7, pc}
 80147e4:	0801dfd0 	.word	0x0801dfd0
 80147e8:	0801e1e0 	.word	0x0801e1e0
 80147ec:	0801e030 	.word	0x0801e030

080147f0 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b084      	sub	sp, #16
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	4603      	mov	r3, r0
 80147f8:	60b9      	str	r1, [r7, #8]
 80147fa:	607a      	str	r2, [r7, #4]
 80147fc:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80147fe:	89fb      	ldrh	r3, [r7, #14]
 8014800:	3304      	adds	r3, #4
 8014802:	2b44      	cmp	r3, #68	; 0x44
 8014804:	d906      	bls.n	8014814 <dhcp_option_long+0x24>
 8014806:	4b19      	ldr	r3, [pc, #100]	; (801486c <dhcp_option_long+0x7c>)
 8014808:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801480c:	4918      	ldr	r1, [pc, #96]	; (8014870 <dhcp_option_long+0x80>)
 801480e:	4819      	ldr	r0, [pc, #100]	; (8014874 <dhcp_option_long+0x84>)
 8014810:	f005 fa06 	bl	8019c20 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	0e1a      	lsrs	r2, r3, #24
 8014818:	89fb      	ldrh	r3, [r7, #14]
 801481a:	1c59      	adds	r1, r3, #1
 801481c:	81f9      	strh	r1, [r7, #14]
 801481e:	4619      	mov	r1, r3
 8014820:	68bb      	ldr	r3, [r7, #8]
 8014822:	440b      	add	r3, r1
 8014824:	b2d2      	uxtb	r2, r2
 8014826:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	0c1a      	lsrs	r2, r3, #16
 801482c:	89fb      	ldrh	r3, [r7, #14]
 801482e:	1c59      	adds	r1, r3, #1
 8014830:	81f9      	strh	r1, [r7, #14]
 8014832:	4619      	mov	r1, r3
 8014834:	68bb      	ldr	r3, [r7, #8]
 8014836:	440b      	add	r3, r1
 8014838:	b2d2      	uxtb	r2, r2
 801483a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	0a1a      	lsrs	r2, r3, #8
 8014840:	89fb      	ldrh	r3, [r7, #14]
 8014842:	1c59      	adds	r1, r3, #1
 8014844:	81f9      	strh	r1, [r7, #14]
 8014846:	4619      	mov	r1, r3
 8014848:	68bb      	ldr	r3, [r7, #8]
 801484a:	440b      	add	r3, r1
 801484c:	b2d2      	uxtb	r2, r2
 801484e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8014850:	89fb      	ldrh	r3, [r7, #14]
 8014852:	1c5a      	adds	r2, r3, #1
 8014854:	81fa      	strh	r2, [r7, #14]
 8014856:	461a      	mov	r2, r3
 8014858:	68bb      	ldr	r3, [r7, #8]
 801485a:	4413      	add	r3, r2
 801485c:	687a      	ldr	r2, [r7, #4]
 801485e:	b2d2      	uxtb	r2, r2
 8014860:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014862:	89fb      	ldrh	r3, [r7, #14]
}
 8014864:	4618      	mov	r0, r3
 8014866:	3710      	adds	r7, #16
 8014868:	46bd      	mov	sp, r7
 801486a:	bd80      	pop	{r7, pc}
 801486c:	0801dfd0 	.word	0x0801dfd0
 8014870:	0801e21c 	.word	0x0801e21c
 8014874:	0801e030 	.word	0x0801e030

08014878 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b090      	sub	sp, #64	; 0x40
 801487c:	af00      	add	r7, sp, #0
 801487e:	6078      	str	r0, [r7, #4]
 8014880:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8014882:	2300      	movs	r3, #0
 8014884:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8014886:	2300      	movs	r3, #0
 8014888:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801488a:	2208      	movs	r2, #8
 801488c:	2100      	movs	r1, #0
 801488e:	48be      	ldr	r0, [pc, #760]	; (8014b88 <dhcp_parse_reply+0x310>)
 8014890:	f005 f9be 	bl	8019c10 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	895b      	ldrh	r3, [r3, #10]
 8014898:	2b2b      	cmp	r3, #43	; 0x2b
 801489a:	d802      	bhi.n	80148a2 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801489c:	f06f 0301 	mvn.w	r3, #1
 80148a0:	e2a8      	b.n	8014df4 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	685b      	ldr	r3, [r3, #4]
 80148a6:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80148a8:	23f0      	movs	r3, #240	; 0xf0
 80148aa:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	891b      	ldrh	r3, [r3, #8]
 80148b0:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80148b6:	e00c      	b.n	80148d2 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80148b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148ba:	895b      	ldrh	r3, [r3, #10]
 80148bc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80148be:	1ad3      	subs	r3, r2, r3
 80148c0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80148c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148c4:	895b      	ldrh	r3, [r3, #10]
 80148c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80148c8:	1ad3      	subs	r3, r2, r3
 80148ca:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80148cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80148d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d004      	beq.n	80148e2 <dhcp_parse_reply+0x6a>
 80148d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148da:	895b      	ldrh	r3, [r3, #10]
 80148dc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80148de:	429a      	cmp	r2, r3
 80148e0:	d2ea      	bcs.n	80148b8 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80148e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d102      	bne.n	80148ee <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80148e8:	f06f 0301 	mvn.w	r3, #1
 80148ec:	e282      	b.n	8014df4 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 80148ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80148f0:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80148f2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80148f4:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80148f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148f8:	685b      	ldr	r3, [r3, #4]
 80148fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80148fc:	e23a      	b.n	8014d74 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 80148fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014900:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014902:	4413      	add	r3, r2
 8014904:	781b      	ldrb	r3, [r3, #0]
 8014906:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8014908:	2300      	movs	r3, #0
 801490a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801490e:	f04f 33ff 	mov.w	r3, #4294967295
 8014912:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8014914:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014916:	3302      	adds	r3, #2
 8014918:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801491a:	8bfa      	ldrh	r2, [r7, #30]
 801491c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801491e:	429a      	cmp	r2, r3
 8014920:	d202      	bcs.n	8014928 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8014922:	f06f 0301 	mvn.w	r3, #1
 8014926:	e265      	b.n	8014df4 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8014928:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801492a:	3301      	adds	r3, #1
 801492c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801492e:	8952      	ldrh	r2, [r2, #10]
 8014930:	4293      	cmp	r3, r2
 8014932:	da07      	bge.n	8014944 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8014934:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014936:	3301      	adds	r3, #1
 8014938:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801493a:	4413      	add	r3, r2
 801493c:	781b      	ldrb	r3, [r3, #0]
 801493e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014942:	e00b      	b.n	801495c <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8014944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d004      	beq.n	8014956 <dhcp_parse_reply+0xde>
 801494c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	685b      	ldr	r3, [r3, #4]
 8014952:	781b      	ldrb	r3, [r3, #0]
 8014954:	e000      	b.n	8014958 <dhcp_parse_reply+0xe0>
 8014956:	2300      	movs	r3, #0
 8014958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801495c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014960:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8014964:	7dfb      	ldrb	r3, [r7, #23]
 8014966:	2b3b      	cmp	r3, #59	; 0x3b
 8014968:	f200 812d 	bhi.w	8014bc6 <dhcp_parse_reply+0x34e>
 801496c:	a201      	add	r2, pc, #4	; (adr r2, 8014974 <dhcp_parse_reply+0xfc>)
 801496e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014972:	bf00      	nop
 8014974:	08014a65 	.word	0x08014a65
 8014978:	08014a75 	.word	0x08014a75
 801497c:	08014bc7 	.word	0x08014bc7
 8014980:	08014a97 	.word	0x08014a97
 8014984:	08014bc7 	.word	0x08014bc7
 8014988:	08014bc7 	.word	0x08014bc7
 801498c:	08014bc7 	.word	0x08014bc7
 8014990:	08014bc7 	.word	0x08014bc7
 8014994:	08014bc7 	.word	0x08014bc7
 8014998:	08014bc7 	.word	0x08014bc7
 801499c:	08014bc7 	.word	0x08014bc7
 80149a0:	08014bc7 	.word	0x08014bc7
 80149a4:	08014bc7 	.word	0x08014bc7
 80149a8:	08014bc7 	.word	0x08014bc7
 80149ac:	08014bc7 	.word	0x08014bc7
 80149b0:	08014bc7 	.word	0x08014bc7
 80149b4:	08014bc7 	.word	0x08014bc7
 80149b8:	08014bc7 	.word	0x08014bc7
 80149bc:	08014bc7 	.word	0x08014bc7
 80149c0:	08014bc7 	.word	0x08014bc7
 80149c4:	08014bc7 	.word	0x08014bc7
 80149c8:	08014bc7 	.word	0x08014bc7
 80149cc:	08014bc7 	.word	0x08014bc7
 80149d0:	08014bc7 	.word	0x08014bc7
 80149d4:	08014bc7 	.word	0x08014bc7
 80149d8:	08014bc7 	.word	0x08014bc7
 80149dc:	08014bc7 	.word	0x08014bc7
 80149e0:	08014bc7 	.word	0x08014bc7
 80149e4:	08014bc7 	.word	0x08014bc7
 80149e8:	08014bc7 	.word	0x08014bc7
 80149ec:	08014bc7 	.word	0x08014bc7
 80149f0:	08014bc7 	.word	0x08014bc7
 80149f4:	08014bc7 	.word	0x08014bc7
 80149f8:	08014bc7 	.word	0x08014bc7
 80149fc:	08014bc7 	.word	0x08014bc7
 8014a00:	08014bc7 	.word	0x08014bc7
 8014a04:	08014bc7 	.word	0x08014bc7
 8014a08:	08014bc7 	.word	0x08014bc7
 8014a0c:	08014bc7 	.word	0x08014bc7
 8014a10:	08014bc7 	.word	0x08014bc7
 8014a14:	08014bc7 	.word	0x08014bc7
 8014a18:	08014bc7 	.word	0x08014bc7
 8014a1c:	08014bc7 	.word	0x08014bc7
 8014a20:	08014bc7 	.word	0x08014bc7
 8014a24:	08014bc7 	.word	0x08014bc7
 8014a28:	08014bc7 	.word	0x08014bc7
 8014a2c:	08014bc7 	.word	0x08014bc7
 8014a30:	08014bc7 	.word	0x08014bc7
 8014a34:	08014bc7 	.word	0x08014bc7
 8014a38:	08014bc7 	.word	0x08014bc7
 8014a3c:	08014bc7 	.word	0x08014bc7
 8014a40:	08014ac3 	.word	0x08014ac3
 8014a44:	08014ae5 	.word	0x08014ae5
 8014a48:	08014b21 	.word	0x08014b21
 8014a4c:	08014b43 	.word	0x08014b43
 8014a50:	08014bc7 	.word	0x08014bc7
 8014a54:	08014bc7 	.word	0x08014bc7
 8014a58:	08014bc7 	.word	0x08014bc7
 8014a5c:	08014b65 	.word	0x08014b65
 8014a60:	08014ba5 	.word	0x08014ba5
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8014a64:	2300      	movs	r3, #0
 8014a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8014a72:	e0ac      	b.n	8014bce <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014a74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a78:	2b04      	cmp	r3, #4
 8014a7a:	d009      	beq.n	8014a90 <dhcp_parse_reply+0x218>
 8014a7c:	4b43      	ldr	r3, [pc, #268]	; (8014b8c <dhcp_parse_reply+0x314>)
 8014a7e:	f240 622e 	movw	r2, #1582	; 0x62e
 8014a82:	4943      	ldr	r1, [pc, #268]	; (8014b90 <dhcp_parse_reply+0x318>)
 8014a84:	4843      	ldr	r0, [pc, #268]	; (8014b94 <dhcp_parse_reply+0x31c>)
 8014a86:	f005 f8cb 	bl	8019c20 <iprintf>
 8014a8a:	f06f 0305 	mvn.w	r3, #5
 8014a8e:	e1b1      	b.n	8014df4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8014a90:	2306      	movs	r3, #6
 8014a92:	623b      	str	r3, [r7, #32]
        break;
 8014a94:	e09b      	b.n	8014bce <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8014a96:	2304      	movs	r3, #4
 8014a98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8014a9c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014aa0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014aa4:	429a      	cmp	r2, r3
 8014aa6:	d209      	bcs.n	8014abc <dhcp_parse_reply+0x244>
 8014aa8:	4b38      	ldr	r3, [pc, #224]	; (8014b8c <dhcp_parse_reply+0x314>)
 8014aaa:	f240 6233 	movw	r2, #1587	; 0x633
 8014aae:	493a      	ldr	r1, [pc, #232]	; (8014b98 <dhcp_parse_reply+0x320>)
 8014ab0:	4838      	ldr	r0, [pc, #224]	; (8014b94 <dhcp_parse_reply+0x31c>)
 8014ab2:	f005 f8b5 	bl	8019c20 <iprintf>
 8014ab6:	f06f 0305 	mvn.w	r3, #5
 8014aba:	e19b      	b.n	8014df4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8014abc:	2307      	movs	r3, #7
 8014abe:	623b      	str	r3, [r7, #32]
        break;
 8014ac0:	e085      	b.n	8014bce <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014ac2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ac6:	2b04      	cmp	r3, #4
 8014ac8:	d009      	beq.n	8014ade <dhcp_parse_reply+0x266>
 8014aca:	4b30      	ldr	r3, [pc, #192]	; (8014b8c <dhcp_parse_reply+0x314>)
 8014acc:	f240 6241 	movw	r2, #1601	; 0x641
 8014ad0:	492f      	ldr	r1, [pc, #188]	; (8014b90 <dhcp_parse_reply+0x318>)
 8014ad2:	4830      	ldr	r0, [pc, #192]	; (8014b94 <dhcp_parse_reply+0x31c>)
 8014ad4:	f005 f8a4 	bl	8019c20 <iprintf>
 8014ad8:	f06f 0305 	mvn.w	r3, #5
 8014adc:	e18a      	b.n	8014df4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8014ade:	2303      	movs	r3, #3
 8014ae0:	623b      	str	r3, [r7, #32]
        break;
 8014ae2:	e074      	b.n	8014bce <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ae8:	2b01      	cmp	r3, #1
 8014aea:	d009      	beq.n	8014b00 <dhcp_parse_reply+0x288>
 8014aec:	4b27      	ldr	r3, [pc, #156]	; (8014b8c <dhcp_parse_reply+0x314>)
 8014aee:	f240 624f 	movw	r2, #1615	; 0x64f
 8014af2:	492a      	ldr	r1, [pc, #168]	; (8014b9c <dhcp_parse_reply+0x324>)
 8014af4:	4827      	ldr	r0, [pc, #156]	; (8014b94 <dhcp_parse_reply+0x31c>)
 8014af6:	f005 f893 	bl	8019c20 <iprintf>
 8014afa:	f06f 0305 	mvn.w	r3, #5
 8014afe:	e179      	b.n	8014df4 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8014b00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014b02:	2bf0      	cmp	r3, #240	; 0xf0
 8014b04:	d009      	beq.n	8014b1a <dhcp_parse_reply+0x2a2>
 8014b06:	4b21      	ldr	r3, [pc, #132]	; (8014b8c <dhcp_parse_reply+0x314>)
 8014b08:	f240 6251 	movw	r2, #1617	; 0x651
 8014b0c:	4924      	ldr	r1, [pc, #144]	; (8014ba0 <dhcp_parse_reply+0x328>)
 8014b0e:	4821      	ldr	r0, [pc, #132]	; (8014b94 <dhcp_parse_reply+0x31c>)
 8014b10:	f005 f886 	bl	8019c20 <iprintf>
 8014b14:	f06f 0305 	mvn.w	r3, #5
 8014b18:	e16c      	b.n	8014df4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	623b      	str	r3, [r7, #32]
        break;
 8014b1e:	e056      	b.n	8014bce <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014b20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b24:	2b01      	cmp	r3, #1
 8014b26:	d009      	beq.n	8014b3c <dhcp_parse_reply+0x2c4>
 8014b28:	4b18      	ldr	r3, [pc, #96]	; (8014b8c <dhcp_parse_reply+0x314>)
 8014b2a:	f240 6255 	movw	r2, #1621	; 0x655
 8014b2e:	491b      	ldr	r1, [pc, #108]	; (8014b9c <dhcp_parse_reply+0x324>)
 8014b30:	4818      	ldr	r0, [pc, #96]	; (8014b94 <dhcp_parse_reply+0x31c>)
 8014b32:	f005 f875 	bl	8019c20 <iprintf>
 8014b36:	f06f 0305 	mvn.w	r3, #5
 8014b3a:	e15b      	b.n	8014df4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8014b3c:	2301      	movs	r3, #1
 8014b3e:	623b      	str	r3, [r7, #32]
        break;
 8014b40:	e045      	b.n	8014bce <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014b42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b46:	2b04      	cmp	r3, #4
 8014b48:	d009      	beq.n	8014b5e <dhcp_parse_reply+0x2e6>
 8014b4a:	4b10      	ldr	r3, [pc, #64]	; (8014b8c <dhcp_parse_reply+0x314>)
 8014b4c:	f240 6259 	movw	r2, #1625	; 0x659
 8014b50:	490f      	ldr	r1, [pc, #60]	; (8014b90 <dhcp_parse_reply+0x318>)
 8014b52:	4810      	ldr	r0, [pc, #64]	; (8014b94 <dhcp_parse_reply+0x31c>)
 8014b54:	f005 f864 	bl	8019c20 <iprintf>
 8014b58:	f06f 0305 	mvn.w	r3, #5
 8014b5c:	e14a      	b.n	8014df4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8014b5e:	2302      	movs	r3, #2
 8014b60:	623b      	str	r3, [r7, #32]
        break;
 8014b62:	e034      	b.n	8014bce <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b68:	2b04      	cmp	r3, #4
 8014b6a:	d009      	beq.n	8014b80 <dhcp_parse_reply+0x308>
 8014b6c:	4b07      	ldr	r3, [pc, #28]	; (8014b8c <dhcp_parse_reply+0x314>)
 8014b6e:	f240 625d 	movw	r2, #1629	; 0x65d
 8014b72:	4907      	ldr	r1, [pc, #28]	; (8014b90 <dhcp_parse_reply+0x318>)
 8014b74:	4807      	ldr	r0, [pc, #28]	; (8014b94 <dhcp_parse_reply+0x31c>)
 8014b76:	f005 f853 	bl	8019c20 <iprintf>
 8014b7a:	f06f 0305 	mvn.w	r3, #5
 8014b7e:	e139      	b.n	8014df4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8014b80:	2304      	movs	r3, #4
 8014b82:	623b      	str	r3, [r7, #32]
        break;
 8014b84:	e023      	b.n	8014bce <dhcp_parse_reply+0x356>
 8014b86:	bf00      	nop
 8014b88:	2000fd54 	.word	0x2000fd54
 8014b8c:	0801dfd0 	.word	0x0801dfd0
 8014b90:	0801e258 	.word	0x0801e258
 8014b94:	0801e030 	.word	0x0801e030
 8014b98:	0801e264 	.word	0x0801e264
 8014b9c:	0801e278 	.word	0x0801e278
 8014ba0:	0801e284 	.word	0x0801e284
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ba8:	2b04      	cmp	r3, #4
 8014baa:	d009      	beq.n	8014bc0 <dhcp_parse_reply+0x348>
 8014bac:	4b93      	ldr	r3, [pc, #588]	; (8014dfc <dhcp_parse_reply+0x584>)
 8014bae:	f240 6261 	movw	r2, #1633	; 0x661
 8014bb2:	4993      	ldr	r1, [pc, #588]	; (8014e00 <dhcp_parse_reply+0x588>)
 8014bb4:	4893      	ldr	r0, [pc, #588]	; (8014e04 <dhcp_parse_reply+0x58c>)
 8014bb6:	f005 f833 	bl	8019c20 <iprintf>
 8014bba:	f06f 0305 	mvn.w	r3, #5
 8014bbe:	e119      	b.n	8014df4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8014bc0:	2305      	movs	r3, #5
 8014bc2:	623b      	str	r3, [r7, #32]
        break;
 8014bc4:	e003      	b.n	8014bce <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8014bcc:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8014bce:	7dfb      	ldrb	r3, [r7, #23]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d103      	bne.n	8014bdc <dhcp_parse_reply+0x364>
      offset++;
 8014bd4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014bd6:	3301      	adds	r3, #1
 8014bd8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8014bda:	e0a1      	b.n	8014d20 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8014bdc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014bde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014be2:	4413      	add	r3, r2
 8014be4:	3302      	adds	r3, #2
 8014be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014bea:	db02      	blt.n	8014bf2 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8014bec:	f06f 0301 	mvn.w	r3, #1
 8014bf0:	e100      	b.n	8014df4 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8014bf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014bf6:	b29a      	uxth	r2, r3
 8014bf8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014bfa:	4413      	add	r3, r2
 8014bfc:	b29b      	uxth	r3, r3
 8014bfe:	3302      	adds	r3, #2
 8014c00:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8014c02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	f000 808a 	beq.w	8014d20 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8014c10:	6a3b      	ldr	r3, [r7, #32]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	db02      	blt.n	8014c1c <dhcp_parse_reply+0x3a4>
 8014c16:	6a3b      	ldr	r3, [r7, #32]
 8014c18:	2b07      	cmp	r3, #7
 8014c1a:	dd06      	ble.n	8014c2a <dhcp_parse_reply+0x3b2>
 8014c1c:	4b77      	ldr	r3, [pc, #476]	; (8014dfc <dhcp_parse_reply+0x584>)
 8014c1e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8014c22:	4979      	ldr	r1, [pc, #484]	; (8014e08 <dhcp_parse_reply+0x590>)
 8014c24:	4877      	ldr	r0, [pc, #476]	; (8014e04 <dhcp_parse_reply+0x58c>)
 8014c26:	f004 fffb 	bl	8019c20 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8014c2a:	4a78      	ldr	r2, [pc, #480]	; (8014e0c <dhcp_parse_reply+0x594>)
 8014c2c:	6a3b      	ldr	r3, [r7, #32]
 8014c2e:	4413      	add	r3, r2
 8014c30:	781b      	ldrb	r3, [r3, #0]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d174      	bne.n	8014d20 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8014c36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014c3a:	2b04      	cmp	r3, #4
 8014c3c:	bf28      	it	cs
 8014c3e:	2304      	movcs	r3, #4
 8014c40:	b2db      	uxtb	r3, r3
 8014c42:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8014c44:	8bfb      	ldrh	r3, [r7, #30]
 8014c46:	8aba      	ldrh	r2, [r7, #20]
 8014c48:	f107 0108 	add.w	r1, r7, #8
 8014c4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014c4e:	f7f7 fc61 	bl	800c514 <pbuf_copy_partial>
 8014c52:	4603      	mov	r3, r0
 8014c54:	461a      	mov	r2, r3
 8014c56:	8abb      	ldrh	r3, [r7, #20]
 8014c58:	4293      	cmp	r3, r2
 8014c5a:	d002      	beq.n	8014c62 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8014c5c:	f06f 0301 	mvn.w	r3, #1
 8014c60:	e0c8      	b.n	8014df4 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8014c62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014c66:	2b04      	cmp	r3, #4
 8014c68:	d933      	bls.n	8014cd2 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8014c6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014c6e:	f003 0303 	and.w	r3, r3, #3
 8014c72:	b2db      	uxtb	r3, r3
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d009      	beq.n	8014c8c <dhcp_parse_reply+0x414>
 8014c78:	4b60      	ldr	r3, [pc, #384]	; (8014dfc <dhcp_parse_reply+0x584>)
 8014c7a:	f240 6281 	movw	r2, #1665	; 0x681
 8014c7e:	4964      	ldr	r1, [pc, #400]	; (8014e10 <dhcp_parse_reply+0x598>)
 8014c80:	4860      	ldr	r0, [pc, #384]	; (8014e04 <dhcp_parse_reply+0x58c>)
 8014c82:	f004 ffcd 	bl	8019c20 <iprintf>
 8014c86:	f06f 0305 	mvn.w	r3, #5
 8014c8a:	e0b3      	b.n	8014df4 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8014c8c:	4a5f      	ldr	r2, [pc, #380]	; (8014e0c <dhcp_parse_reply+0x594>)
 8014c8e:	6a3b      	ldr	r3, [r7, #32]
 8014c90:	4413      	add	r3, r2
 8014c92:	2201      	movs	r2, #1
 8014c94:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8014c96:	68bb      	ldr	r3, [r7, #8]
 8014c98:	4618      	mov	r0, r3
 8014c9a:	f7f5 fe64 	bl	800a966 <lwip_htonl>
 8014c9e:	4601      	mov	r1, r0
 8014ca0:	4a5c      	ldr	r2, [pc, #368]	; (8014e14 <dhcp_parse_reply+0x59c>)
 8014ca2:	6a3b      	ldr	r3, [r7, #32]
 8014ca4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8014ca8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014cac:	3b04      	subs	r3, #4
 8014cae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8014cb2:	8bfb      	ldrh	r3, [r7, #30]
 8014cb4:	3304      	adds	r3, #4
 8014cb6:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8014cb8:	8a7a      	ldrh	r2, [r7, #18]
 8014cba:	8bfb      	ldrh	r3, [r7, #30]
 8014cbc:	429a      	cmp	r2, r3
 8014cbe:	d202      	bcs.n	8014cc6 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8014cc0:	f06f 0301 	mvn.w	r3, #1
 8014cc4:	e096      	b.n	8014df4 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8014cc6:	8a7b      	ldrh	r3, [r7, #18]
 8014cc8:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8014cca:	6a3b      	ldr	r3, [r7, #32]
 8014ccc:	3301      	adds	r3, #1
 8014cce:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8014cd0:	e79e      	b.n	8014c10 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8014cd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014cd6:	2b04      	cmp	r3, #4
 8014cd8:	d106      	bne.n	8014ce8 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8014cda:	68bb      	ldr	r3, [r7, #8]
 8014cdc:	4618      	mov	r0, r3
 8014cde:	f7f5 fe42 	bl	800a966 <lwip_htonl>
 8014ce2:	4603      	mov	r3, r0
 8014ce4:	60bb      	str	r3, [r7, #8]
 8014ce6:	e011      	b.n	8014d0c <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8014ce8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014cec:	2b01      	cmp	r3, #1
 8014cee:	d009      	beq.n	8014d04 <dhcp_parse_reply+0x48c>
 8014cf0:	4b42      	ldr	r3, [pc, #264]	; (8014dfc <dhcp_parse_reply+0x584>)
 8014cf2:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8014cf6:	4948      	ldr	r1, [pc, #288]	; (8014e18 <dhcp_parse_reply+0x5a0>)
 8014cf8:	4842      	ldr	r0, [pc, #264]	; (8014e04 <dhcp_parse_reply+0x58c>)
 8014cfa:	f004 ff91 	bl	8019c20 <iprintf>
 8014cfe:	f06f 0305 	mvn.w	r3, #5
 8014d02:	e077      	b.n	8014df4 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8014d04:	f107 0308 	add.w	r3, r7, #8
 8014d08:	781b      	ldrb	r3, [r3, #0]
 8014d0a:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8014d0c:	4a3f      	ldr	r2, [pc, #252]	; (8014e0c <dhcp_parse_reply+0x594>)
 8014d0e:	6a3b      	ldr	r3, [r7, #32]
 8014d10:	4413      	add	r3, r2
 8014d12:	2201      	movs	r2, #1
 8014d14:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8014d16:	68ba      	ldr	r2, [r7, #8]
 8014d18:	493e      	ldr	r1, [pc, #248]	; (8014e14 <dhcp_parse_reply+0x59c>)
 8014d1a:	6a3b      	ldr	r3, [r7, #32]
 8014d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8014d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d22:	895b      	ldrh	r3, [r3, #10]
 8014d24:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014d26:	429a      	cmp	r2, r3
 8014d28:	d324      	bcc.n	8014d74 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8014d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d2c:	895b      	ldrh	r3, [r3, #10]
 8014d2e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014d30:	1ad3      	subs	r3, r2, r3
 8014d32:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8014d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d36:	895b      	ldrh	r3, [r3, #10]
 8014d38:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8014d3a:	1ad3      	subs	r3, r2, r3
 8014d3c:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8014d3e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014d40:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014d42:	429a      	cmp	r2, r3
 8014d44:	d213      	bcs.n	8014d6e <dhcp_parse_reply+0x4f6>
        q = q->next;
 8014d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8014d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d109      	bne.n	8014d66 <dhcp_parse_reply+0x4ee>
 8014d52:	4b2a      	ldr	r3, [pc, #168]	; (8014dfc <dhcp_parse_reply+0x584>)
 8014d54:	f240 629d 	movw	r2, #1693	; 0x69d
 8014d58:	4930      	ldr	r1, [pc, #192]	; (8014e1c <dhcp_parse_reply+0x5a4>)
 8014d5a:	482a      	ldr	r0, [pc, #168]	; (8014e04 <dhcp_parse_reply+0x58c>)
 8014d5c:	f004 ff60 	bl	8019c20 <iprintf>
 8014d60:	f06f 0305 	mvn.w	r3, #5
 8014d64:	e046      	b.n	8014df4 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8014d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d68:	685b      	ldr	r3, [r3, #4]
 8014d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014d6c:	e002      	b.n	8014d74 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8014d6e:	f06f 0301 	mvn.w	r3, #1
 8014d72:	e03f      	b.n	8014df4 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d00a      	beq.n	8014d90 <dhcp_parse_reply+0x518>
 8014d7a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014d7c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014d7e:	429a      	cmp	r2, r3
 8014d80:	d206      	bcs.n	8014d90 <dhcp_parse_reply+0x518>
 8014d82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014d84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014d86:	4413      	add	r3, r2
 8014d88:	781b      	ldrb	r3, [r3, #0]
 8014d8a:	2bff      	cmp	r3, #255	; 0xff
 8014d8c:	f47f adb7 	bne.w	80148fe <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8014d90:	4b1e      	ldr	r3, [pc, #120]	; (8014e0c <dhcp_parse_reply+0x594>)
 8014d92:	781b      	ldrb	r3, [r3, #0]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d018      	beq.n	8014dca <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014d98:	4b1e      	ldr	r3, [pc, #120]	; (8014e14 <dhcp_parse_reply+0x59c>)
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014d9e:	4b1b      	ldr	r3, [pc, #108]	; (8014e0c <dhcp_parse_reply+0x594>)
 8014da0:	2200      	movs	r2, #0
 8014da2:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	2b01      	cmp	r3, #1
 8014da8:	d102      	bne.n	8014db0 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8014daa:	2301      	movs	r3, #1
 8014dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014dae:	e00c      	b.n	8014dca <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	2b02      	cmp	r3, #2
 8014db4:	d102      	bne.n	8014dbc <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8014db6:	2301      	movs	r3, #1
 8014db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8014dba:	e006      	b.n	8014dca <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	2b03      	cmp	r3, #3
 8014dc0:	d103      	bne.n	8014dca <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8014dc2:	2301      	movs	r3, #1
 8014dc4:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8014dc6:	2301      	movs	r3, #1
 8014dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8014dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d006      	beq.n	8014dde <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8014dd4:	236c      	movs	r3, #108	; 0x6c
 8014dd6:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8014dd8:	23ec      	movs	r3, #236	; 0xec
 8014dda:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8014ddc:	e569      	b.n	80148b2 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8014dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d006      	beq.n	8014df2 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8014de4:	2300      	movs	r3, #0
 8014de6:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8014de8:	232c      	movs	r3, #44	; 0x2c
 8014dea:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8014dec:	236c      	movs	r3, #108	; 0x6c
 8014dee:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8014df0:	e55f      	b.n	80148b2 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8014df2:	2300      	movs	r3, #0
}
 8014df4:	4618      	mov	r0, r3
 8014df6:	3740      	adds	r7, #64	; 0x40
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	bd80      	pop	{r7, pc}
 8014dfc:	0801dfd0 	.word	0x0801dfd0
 8014e00:	0801e258 	.word	0x0801e258
 8014e04:	0801e030 	.word	0x0801e030
 8014e08:	0801e29c 	.word	0x0801e29c
 8014e0c:	2000fd54 	.word	0x2000fd54
 8014e10:	0801e2b0 	.word	0x0801e2b0
 8014e14:	2000fd5c 	.word	0x2000fd5c
 8014e18:	0801e2c8 	.word	0x0801e2c8
 8014e1c:	0801e2dc 	.word	0x0801e2dc

08014e20 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b08a      	sub	sp, #40	; 0x28
 8014e24:	af00      	add	r7, sp, #0
 8014e26:	60f8      	str	r0, [r7, #12]
 8014e28:	60b9      	str	r1, [r7, #8]
 8014e2a:	607a      	str	r2, [r7, #4]
 8014e2c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8014e2e:	4b5f      	ldr	r3, [pc, #380]	; (8014fac <dhcp_recv+0x18c>)
 8014e30:	685b      	ldr	r3, [r3, #4]
 8014e32:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014e34:	6a3b      	ldr	r3, [r7, #32]
 8014e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e38:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	685b      	ldr	r3, [r3, #4]
 8014e3e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8014e40:	69fb      	ldr	r3, [r7, #28]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	f000 809d 	beq.w	8014f82 <dhcp_recv+0x162>
 8014e48:	69fb      	ldr	r3, [r7, #28]
 8014e4a:	791b      	ldrb	r3, [r3, #4]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	f000 8098 	beq.w	8014f82 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	895b      	ldrh	r3, [r3, #10]
 8014e56:	2b2b      	cmp	r3, #43	; 0x2b
 8014e58:	f240 8095 	bls.w	8014f86 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8014e5c:	69bb      	ldr	r3, [r7, #24]
 8014e5e:	781b      	ldrb	r3, [r3, #0]
 8014e60:	2b02      	cmp	r3, #2
 8014e62:	f040 8092 	bne.w	8014f8a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014e66:	2300      	movs	r3, #0
 8014e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014e6c:	e012      	b.n	8014e94 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8014e6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e72:	6a3a      	ldr	r2, [r7, #32]
 8014e74:	4413      	add	r3, r2
 8014e76:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8014e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e7e:	69b9      	ldr	r1, [r7, #24]
 8014e80:	440b      	add	r3, r1
 8014e82:	7f1b      	ldrb	r3, [r3, #28]
 8014e84:	429a      	cmp	r2, r3
 8014e86:	f040 8082 	bne.w	8014f8e <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014e8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e8e:	3301      	adds	r3, #1
 8014e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014e94:	6a3b      	ldr	r3, [r7, #32]
 8014e96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014e9a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014e9e:	429a      	cmp	r2, r3
 8014ea0:	d203      	bcs.n	8014eaa <dhcp_recv+0x8a>
 8014ea2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ea6:	2b05      	cmp	r3, #5
 8014ea8:	d9e1      	bls.n	8014e6e <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8014eaa:	69bb      	ldr	r3, [r7, #24]
 8014eac:	685b      	ldr	r3, [r3, #4]
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f7f5 fd59 	bl	800a966 <lwip_htonl>
 8014eb4:	4602      	mov	r2, r0
 8014eb6:	69fb      	ldr	r3, [r7, #28]
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	429a      	cmp	r2, r3
 8014ebc:	d169      	bne.n	8014f92 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8014ebe:	69f9      	ldr	r1, [r7, #28]
 8014ec0:	6878      	ldr	r0, [r7, #4]
 8014ec2:	f7ff fcd9 	bl	8014878 <dhcp_parse_reply>
 8014ec6:	4603      	mov	r3, r0
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d164      	bne.n	8014f96 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8014ecc:	4b38      	ldr	r3, [pc, #224]	; (8014fb0 <dhcp_recv+0x190>)
 8014ece:	785b      	ldrb	r3, [r3, #1]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d062      	beq.n	8014f9a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	685b      	ldr	r3, [r3, #4]
 8014ed8:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8014eda:	4b36      	ldr	r3, [pc, #216]	; (8014fb4 <dhcp_recv+0x194>)
 8014edc:	685b      	ldr	r3, [r3, #4]
 8014ede:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8014ee0:	7cfb      	ldrb	r3, [r7, #19]
 8014ee2:	2b05      	cmp	r3, #5
 8014ee4:	d12a      	bne.n	8014f3c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014ee6:	69fb      	ldr	r3, [r7, #28]
 8014ee8:	795b      	ldrb	r3, [r3, #5]
 8014eea:	2b01      	cmp	r3, #1
 8014eec:	d112      	bne.n	8014f14 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8014eee:	6979      	ldr	r1, [r7, #20]
 8014ef0:	6a38      	ldr	r0, [r7, #32]
 8014ef2:	f7fe fe05 	bl	8013b00 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8014ef6:	6a3b      	ldr	r3, [r7, #32]
 8014ef8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014efc:	f003 0308 	and.w	r3, r3, #8
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d003      	beq.n	8014f0c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8014f04:	6a38      	ldr	r0, [r7, #32]
 8014f06:	f7fe fb73 	bl	80135f0 <dhcp_check>
 8014f0a:	e047      	b.n	8014f9c <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8014f0c:	6a38      	ldr	r0, [r7, #32]
 8014f0e:	f7ff f867 	bl	8013fe0 <dhcp_bind>
 8014f12:	e043      	b.n	8014f9c <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014f14:	69fb      	ldr	r3, [r7, #28]
 8014f16:	795b      	ldrb	r3, [r3, #5]
 8014f18:	2b03      	cmp	r3, #3
 8014f1a:	d007      	beq.n	8014f2c <dhcp_recv+0x10c>
 8014f1c:	69fb      	ldr	r3, [r7, #28]
 8014f1e:	795b      	ldrb	r3, [r3, #5]
 8014f20:	2b04      	cmp	r3, #4
 8014f22:	d003      	beq.n	8014f2c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8014f24:	69fb      	ldr	r3, [r7, #28]
 8014f26:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014f28:	2b05      	cmp	r3, #5
 8014f2a:	d137      	bne.n	8014f9c <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 8014f2c:	6979      	ldr	r1, [r7, #20]
 8014f2e:	6a38      	ldr	r0, [r7, #32]
 8014f30:	f7fe fde6 	bl	8013b00 <dhcp_handle_ack>
      dhcp_bind(netif);
 8014f34:	6a38      	ldr	r0, [r7, #32]
 8014f36:	f7ff f853 	bl	8013fe0 <dhcp_bind>
 8014f3a:	e02f      	b.n	8014f9c <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8014f3c:	7cfb      	ldrb	r3, [r7, #19]
 8014f3e:	2b06      	cmp	r3, #6
 8014f40:	d113      	bne.n	8014f6a <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014f42:	69fb      	ldr	r3, [r7, #28]
 8014f44:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8014f46:	2b03      	cmp	r3, #3
 8014f48:	d00b      	beq.n	8014f62 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014f4a:	69fb      	ldr	r3, [r7, #28]
 8014f4c:	795b      	ldrb	r3, [r3, #5]
 8014f4e:	2b01      	cmp	r3, #1
 8014f50:	d007      	beq.n	8014f62 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014f52:	69fb      	ldr	r3, [r7, #28]
 8014f54:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014f56:	2b04      	cmp	r3, #4
 8014f58:	d003      	beq.n	8014f62 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014f5a:	69fb      	ldr	r3, [r7, #28]
 8014f5c:	795b      	ldrb	r3, [r3, #5]
 8014f5e:	2b05      	cmp	r3, #5
 8014f60:	d103      	bne.n	8014f6a <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8014f62:	6a38      	ldr	r0, [r7, #32]
 8014f64:	f7fe fb2a 	bl	80135bc <dhcp_handle_nak>
 8014f68:	e018      	b.n	8014f9c <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8014f6a:	7cfb      	ldrb	r3, [r7, #19]
 8014f6c:	2b02      	cmp	r3, #2
 8014f6e:	d108      	bne.n	8014f82 <dhcp_recv+0x162>
 8014f70:	69fb      	ldr	r3, [r7, #28]
 8014f72:	795b      	ldrb	r3, [r3, #5]
 8014f74:	2b06      	cmp	r3, #6
 8014f76:	d104      	bne.n	8014f82 <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8014f78:	6979      	ldr	r1, [r7, #20]
 8014f7a:	6a38      	ldr	r0, [r7, #32]
 8014f7c:	f7fe fb6c 	bl	8013658 <dhcp_handle_offer>
 8014f80:	e00c      	b.n	8014f9c <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 8014f82:	bf00      	nop
 8014f84:	e00a      	b.n	8014f9c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8014f86:	bf00      	nop
 8014f88:	e008      	b.n	8014f9c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8014f8a:	bf00      	nop
 8014f8c:	e006      	b.n	8014f9c <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 8014f8e:	bf00      	nop
 8014f90:	e004      	b.n	8014f9c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8014f92:	bf00      	nop
 8014f94:	e002      	b.n	8014f9c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8014f96:	bf00      	nop
 8014f98:	e000      	b.n	8014f9c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8014f9a:	bf00      	nop
  pbuf_free(p);
 8014f9c:	6878      	ldr	r0, [r7, #4]
 8014f9e:	f7f7 f8b3 	bl	800c108 <pbuf_free>
}
 8014fa2:	bf00      	nop
 8014fa4:	3728      	adds	r7, #40	; 0x28
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	bd80      	pop	{r7, pc}
 8014faa:	bf00      	nop
 8014fac:	2000c5e4 	.word	0x2000c5e4
 8014fb0:	2000fd54 	.word	0x2000fd54
 8014fb4:	2000fd5c 	.word	0x2000fd5c

08014fb8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b088      	sub	sp, #32
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	60f8      	str	r0, [r7, #12]
 8014fc0:	60b9      	str	r1, [r7, #8]
 8014fc2:	603b      	str	r3, [r7, #0]
 8014fc4:	4613      	mov	r3, r2
 8014fc6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d108      	bne.n	8014fe0 <dhcp_create_msg+0x28>
 8014fce:	4b5f      	ldr	r3, [pc, #380]	; (801514c <dhcp_create_msg+0x194>)
 8014fd0:	f240 7269 	movw	r2, #1897	; 0x769
 8014fd4:	495e      	ldr	r1, [pc, #376]	; (8015150 <dhcp_create_msg+0x198>)
 8014fd6:	485f      	ldr	r0, [pc, #380]	; (8015154 <dhcp_create_msg+0x19c>)
 8014fd8:	f004 fe22 	bl	8019c20 <iprintf>
 8014fdc:	2300      	movs	r3, #0
 8014fde:	e0b1      	b.n	8015144 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8014fe0:	68bb      	ldr	r3, [r7, #8]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d108      	bne.n	8014ff8 <dhcp_create_msg+0x40>
 8014fe6:	4b59      	ldr	r3, [pc, #356]	; (801514c <dhcp_create_msg+0x194>)
 8014fe8:	f240 726a 	movw	r2, #1898	; 0x76a
 8014fec:	495a      	ldr	r1, [pc, #360]	; (8015158 <dhcp_create_msg+0x1a0>)
 8014fee:	4859      	ldr	r0, [pc, #356]	; (8015154 <dhcp_create_msg+0x19c>)
 8014ff0:	f004 fe16 	bl	8019c20 <iprintf>
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	e0a5      	b.n	8015144 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8014ff8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014ffc:	f44f 719a 	mov.w	r1, #308	; 0x134
 8015000:	2036      	movs	r0, #54	; 0x36
 8015002:	f7f6 fd6f 	bl	800bae4 <pbuf_alloc>
 8015006:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8015008:	69bb      	ldr	r3, [r7, #24]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d101      	bne.n	8015012 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801500e:	2300      	movs	r3, #0
 8015010:	e098      	b.n	8015144 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8015012:	69bb      	ldr	r3, [r7, #24]
 8015014:	895b      	ldrh	r3, [r3, #10]
 8015016:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801501a:	d206      	bcs.n	801502a <dhcp_create_msg+0x72>
 801501c:	4b4b      	ldr	r3, [pc, #300]	; (801514c <dhcp_create_msg+0x194>)
 801501e:	f240 7272 	movw	r2, #1906	; 0x772
 8015022:	494e      	ldr	r1, [pc, #312]	; (801515c <dhcp_create_msg+0x1a4>)
 8015024:	484b      	ldr	r0, [pc, #300]	; (8015154 <dhcp_create_msg+0x19c>)
 8015026:	f004 fdfb 	bl	8019c20 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801502a:	79fb      	ldrb	r3, [r7, #7]
 801502c:	2b03      	cmp	r3, #3
 801502e:	d103      	bne.n	8015038 <dhcp_create_msg+0x80>
 8015030:	68bb      	ldr	r3, [r7, #8]
 8015032:	795b      	ldrb	r3, [r3, #5]
 8015034:	2b03      	cmp	r3, #3
 8015036:	d10d      	bne.n	8015054 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8015038:	68bb      	ldr	r3, [r7, #8]
 801503a:	799b      	ldrb	r3, [r3, #6]
 801503c:	2b00      	cmp	r3, #0
 801503e:	d105      	bne.n	801504c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8015040:	f004 fe6a 	bl	8019d18 <rand>
 8015044:	4603      	mov	r3, r0
 8015046:	461a      	mov	r2, r3
 8015048:	4b45      	ldr	r3, [pc, #276]	; (8015160 <dhcp_create_msg+0x1a8>)
 801504a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801504c:	4b44      	ldr	r3, [pc, #272]	; (8015160 <dhcp_create_msg+0x1a8>)
 801504e:	681a      	ldr	r2, [r3, #0]
 8015050:	68bb      	ldr	r3, [r7, #8]
 8015052:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8015054:	69bb      	ldr	r3, [r7, #24]
 8015056:	685b      	ldr	r3, [r3, #4]
 8015058:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801505a:	f44f 729a 	mov.w	r2, #308	; 0x134
 801505e:	2100      	movs	r1, #0
 8015060:	6978      	ldr	r0, [r7, #20]
 8015062:	f004 fdd5 	bl	8019c10 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8015066:	697b      	ldr	r3, [r7, #20]
 8015068:	2201      	movs	r2, #1
 801506a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801506c:	697b      	ldr	r3, [r7, #20]
 801506e:	2201      	movs	r2, #1
 8015070:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8015078:	697b      	ldr	r3, [r7, #20]
 801507a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801507c:	68bb      	ldr	r3, [r7, #8]
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	4618      	mov	r0, r3
 8015082:	f7f5 fc70 	bl	800a966 <lwip_htonl>
 8015086:	4602      	mov	r2, r0
 8015088:	697b      	ldr	r3, [r7, #20]
 801508a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801508c:	79fb      	ldrb	r3, [r7, #7]
 801508e:	2b08      	cmp	r3, #8
 8015090:	d010      	beq.n	80150b4 <dhcp_create_msg+0xfc>
 8015092:	79fb      	ldrb	r3, [r7, #7]
 8015094:	2b04      	cmp	r3, #4
 8015096:	d00d      	beq.n	80150b4 <dhcp_create_msg+0xfc>
 8015098:	79fb      	ldrb	r3, [r7, #7]
 801509a:	2b07      	cmp	r3, #7
 801509c:	d00a      	beq.n	80150b4 <dhcp_create_msg+0xfc>
 801509e:	79fb      	ldrb	r3, [r7, #7]
 80150a0:	2b03      	cmp	r3, #3
 80150a2:	d10c      	bne.n	80150be <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80150a4:	68bb      	ldr	r3, [r7, #8]
 80150a6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80150a8:	2b05      	cmp	r3, #5
 80150aa:	d003      	beq.n	80150b4 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80150ac:	68bb      	ldr	r3, [r7, #8]
 80150ae:	795b      	ldrb	r3, [r3, #5]
 80150b0:	2b04      	cmp	r3, #4
 80150b2:	d104      	bne.n	80150be <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	3304      	adds	r3, #4
 80150b8:	681a      	ldr	r2, [r3, #0]
 80150ba:	697b      	ldr	r3, [r7, #20]
 80150bc:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80150be:	2300      	movs	r3, #0
 80150c0:	83fb      	strh	r3, [r7, #30]
 80150c2:	e00c      	b.n	80150de <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80150c4:	8bfa      	ldrh	r2, [r7, #30]
 80150c6:	8bfb      	ldrh	r3, [r7, #30]
 80150c8:	68f9      	ldr	r1, [r7, #12]
 80150ca:	440a      	add	r2, r1
 80150cc:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80150d0:	697a      	ldr	r2, [r7, #20]
 80150d2:	4413      	add	r3, r2
 80150d4:	460a      	mov	r2, r1
 80150d6:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80150d8:	8bfb      	ldrh	r3, [r7, #30]
 80150da:	3301      	adds	r3, #1
 80150dc:	83fb      	strh	r3, [r7, #30]
 80150de:	8bfb      	ldrh	r3, [r7, #30]
 80150e0:	2b05      	cmp	r3, #5
 80150e2:	d9ef      	bls.n	80150c4 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80150e4:	697b      	ldr	r3, [r7, #20]
 80150e6:	2200      	movs	r2, #0
 80150e8:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80150ec:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80150f0:	2200      	movs	r2, #0
 80150f2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80150f6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80150fa:	2200      	movs	r2, #0
 80150fc:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8015100:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8015104:	2200      	movs	r2, #0
 8015106:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801510a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801510e:	697b      	ldr	r3, [r7, #20]
 8015110:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015114:	2301      	movs	r3, #1
 8015116:	2235      	movs	r2, #53	; 0x35
 8015118:	2000      	movs	r0, #0
 801511a:	f7ff fadd 	bl	80146d8 <dhcp_option>
 801511e:	4603      	mov	r3, r0
 8015120:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8015122:	697b      	ldr	r3, [r7, #20]
 8015124:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015128:	79fa      	ldrb	r2, [r7, #7]
 801512a:	8a7b      	ldrh	r3, [r7, #18]
 801512c:	4618      	mov	r0, r3
 801512e:	f7ff fb07 	bl	8014740 <dhcp_option_byte>
 8015132:	4603      	mov	r3, r0
 8015134:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8015136:	683b      	ldr	r3, [r7, #0]
 8015138:	2b00      	cmp	r3, #0
 801513a:	d002      	beq.n	8015142 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801513c:	683b      	ldr	r3, [r7, #0]
 801513e:	8a7a      	ldrh	r2, [r7, #18]
 8015140:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8015142:	69bb      	ldr	r3, [r7, #24]
}
 8015144:	4618      	mov	r0, r3
 8015146:	3720      	adds	r7, #32
 8015148:	46bd      	mov	sp, r7
 801514a:	bd80      	pop	{r7, pc}
 801514c:	0801dfd0 	.word	0x0801dfd0
 8015150:	0801e2f0 	.word	0x0801e2f0
 8015154:	0801e030 	.word	0x0801e030
 8015158:	0801e310 	.word	0x0801e310
 801515c:	0801e330 	.word	0x0801e330
 8015160:	20008698 	.word	0x20008698

08015164 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b084      	sub	sp, #16
 8015168:	af00      	add	r7, sp, #0
 801516a:	4603      	mov	r3, r0
 801516c:	60b9      	str	r1, [r7, #8]
 801516e:	607a      	str	r2, [r7, #4]
 8015170:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8015172:	89fb      	ldrh	r3, [r7, #14]
 8015174:	1c5a      	adds	r2, r3, #1
 8015176:	81fa      	strh	r2, [r7, #14]
 8015178:	461a      	mov	r2, r3
 801517a:	68bb      	ldr	r3, [r7, #8]
 801517c:	4413      	add	r3, r2
 801517e:	22ff      	movs	r2, #255	; 0xff
 8015180:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015182:	e007      	b.n	8015194 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8015184:	89fb      	ldrh	r3, [r7, #14]
 8015186:	1c5a      	adds	r2, r3, #1
 8015188:	81fa      	strh	r2, [r7, #14]
 801518a:	461a      	mov	r2, r3
 801518c:	68bb      	ldr	r3, [r7, #8]
 801518e:	4413      	add	r3, r2
 8015190:	2200      	movs	r2, #0
 8015192:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015194:	89fb      	ldrh	r3, [r7, #14]
 8015196:	2b43      	cmp	r3, #67	; 0x43
 8015198:	d904      	bls.n	80151a4 <dhcp_option_trailer+0x40>
 801519a:	89fb      	ldrh	r3, [r7, #14]
 801519c:	f003 0303 	and.w	r3, r3, #3
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d002      	beq.n	80151aa <dhcp_option_trailer+0x46>
 80151a4:	89fb      	ldrh	r3, [r7, #14]
 80151a6:	2b43      	cmp	r3, #67	; 0x43
 80151a8:	d9ec      	bls.n	8015184 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80151aa:	89fb      	ldrh	r3, [r7, #14]
 80151ac:	33f0      	adds	r3, #240	; 0xf0
 80151ae:	b29b      	uxth	r3, r3
 80151b0:	4619      	mov	r1, r3
 80151b2:	6878      	ldr	r0, [r7, #4]
 80151b4:	f7f6 fdf0 	bl	800bd98 <pbuf_realloc>
}
 80151b8:	bf00      	nop
 80151ba:	3710      	adds	r7, #16
 80151bc:	46bd      	mov	sp, r7
 80151be:	bd80      	pop	{r7, pc}

080151c0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80151c0:	b480      	push	{r7}
 80151c2:	b085      	sub	sp, #20
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d017      	beq.n	80151fe <dhcp_supplied_address+0x3e>
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d013      	beq.n	80151fe <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151da:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	795b      	ldrb	r3, [r3, #5]
 80151e0:	2b0a      	cmp	r3, #10
 80151e2:	d007      	beq.n	80151f4 <dhcp_supplied_address+0x34>
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	795b      	ldrb	r3, [r3, #5]
 80151e8:	2b05      	cmp	r3, #5
 80151ea:	d003      	beq.n	80151f4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80151f0:	2b04      	cmp	r3, #4
 80151f2:	d101      	bne.n	80151f8 <dhcp_supplied_address+0x38>
 80151f4:	2301      	movs	r3, #1
 80151f6:	e000      	b.n	80151fa <dhcp_supplied_address+0x3a>
 80151f8:	2300      	movs	r3, #0
 80151fa:	b2db      	uxtb	r3, r3
 80151fc:	e000      	b.n	8015200 <dhcp_supplied_address+0x40>
  }
  return 0;
 80151fe:	2300      	movs	r3, #0
}
 8015200:	4618      	mov	r0, r3
 8015202:	3714      	adds	r7, #20
 8015204:	46bd      	mov	sp, r7
 8015206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801520a:	4770      	bx	lr

0801520c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801520c:	b580      	push	{r7, lr}
 801520e:	b082      	sub	sp, #8
 8015210:	af00      	add	r7, sp, #0
 8015212:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015214:	4915      	ldr	r1, [pc, #84]	; (801526c <etharp_free_entry+0x60>)
 8015216:	687a      	ldr	r2, [r7, #4]
 8015218:	4613      	mov	r3, r2
 801521a:	005b      	lsls	r3, r3, #1
 801521c:	4413      	add	r3, r2
 801521e:	00db      	lsls	r3, r3, #3
 8015220:	440b      	add	r3, r1
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	2b00      	cmp	r3, #0
 8015226:	d013      	beq.n	8015250 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015228:	4910      	ldr	r1, [pc, #64]	; (801526c <etharp_free_entry+0x60>)
 801522a:	687a      	ldr	r2, [r7, #4]
 801522c:	4613      	mov	r3, r2
 801522e:	005b      	lsls	r3, r3, #1
 8015230:	4413      	add	r3, r2
 8015232:	00db      	lsls	r3, r3, #3
 8015234:	440b      	add	r3, r1
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	4618      	mov	r0, r3
 801523a:	f7f6 ff65 	bl	800c108 <pbuf_free>
    arp_table[i].q = NULL;
 801523e:	490b      	ldr	r1, [pc, #44]	; (801526c <etharp_free_entry+0x60>)
 8015240:	687a      	ldr	r2, [r7, #4]
 8015242:	4613      	mov	r3, r2
 8015244:	005b      	lsls	r3, r3, #1
 8015246:	4413      	add	r3, r2
 8015248:	00db      	lsls	r3, r3, #3
 801524a:	440b      	add	r3, r1
 801524c:	2200      	movs	r2, #0
 801524e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015250:	4906      	ldr	r1, [pc, #24]	; (801526c <etharp_free_entry+0x60>)
 8015252:	687a      	ldr	r2, [r7, #4]
 8015254:	4613      	mov	r3, r2
 8015256:	005b      	lsls	r3, r3, #1
 8015258:	4413      	add	r3, r2
 801525a:	00db      	lsls	r3, r3, #3
 801525c:	440b      	add	r3, r1
 801525e:	3314      	adds	r3, #20
 8015260:	2200      	movs	r2, #0
 8015262:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015264:	bf00      	nop
 8015266:	3708      	adds	r7, #8
 8015268:	46bd      	mov	sp, r7
 801526a:	bd80      	pop	{r7, pc}
 801526c:	2000869c 	.word	0x2000869c

08015270 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015270:	b580      	push	{r7, lr}
 8015272:	b082      	sub	sp, #8
 8015274:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015276:	2300      	movs	r3, #0
 8015278:	607b      	str	r3, [r7, #4]
 801527a:	e096      	b.n	80153aa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801527c:	494f      	ldr	r1, [pc, #316]	; (80153bc <etharp_tmr+0x14c>)
 801527e:	687a      	ldr	r2, [r7, #4]
 8015280:	4613      	mov	r3, r2
 8015282:	005b      	lsls	r3, r3, #1
 8015284:	4413      	add	r3, r2
 8015286:	00db      	lsls	r3, r3, #3
 8015288:	440b      	add	r3, r1
 801528a:	3314      	adds	r3, #20
 801528c:	781b      	ldrb	r3, [r3, #0]
 801528e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015290:	78fb      	ldrb	r3, [r7, #3]
 8015292:	2b00      	cmp	r3, #0
 8015294:	f000 8086 	beq.w	80153a4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015298:	4948      	ldr	r1, [pc, #288]	; (80153bc <etharp_tmr+0x14c>)
 801529a:	687a      	ldr	r2, [r7, #4]
 801529c:	4613      	mov	r3, r2
 801529e:	005b      	lsls	r3, r3, #1
 80152a0:	4413      	add	r3, r2
 80152a2:	00db      	lsls	r3, r3, #3
 80152a4:	440b      	add	r3, r1
 80152a6:	3312      	adds	r3, #18
 80152a8:	881b      	ldrh	r3, [r3, #0]
 80152aa:	3301      	adds	r3, #1
 80152ac:	b298      	uxth	r0, r3
 80152ae:	4943      	ldr	r1, [pc, #268]	; (80153bc <etharp_tmr+0x14c>)
 80152b0:	687a      	ldr	r2, [r7, #4]
 80152b2:	4613      	mov	r3, r2
 80152b4:	005b      	lsls	r3, r3, #1
 80152b6:	4413      	add	r3, r2
 80152b8:	00db      	lsls	r3, r3, #3
 80152ba:	440b      	add	r3, r1
 80152bc:	3312      	adds	r3, #18
 80152be:	4602      	mov	r2, r0
 80152c0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80152c2:	493e      	ldr	r1, [pc, #248]	; (80153bc <etharp_tmr+0x14c>)
 80152c4:	687a      	ldr	r2, [r7, #4]
 80152c6:	4613      	mov	r3, r2
 80152c8:	005b      	lsls	r3, r3, #1
 80152ca:	4413      	add	r3, r2
 80152cc:	00db      	lsls	r3, r3, #3
 80152ce:	440b      	add	r3, r1
 80152d0:	3312      	adds	r3, #18
 80152d2:	881b      	ldrh	r3, [r3, #0]
 80152d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80152d8:	d215      	bcs.n	8015306 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80152da:	4938      	ldr	r1, [pc, #224]	; (80153bc <etharp_tmr+0x14c>)
 80152dc:	687a      	ldr	r2, [r7, #4]
 80152de:	4613      	mov	r3, r2
 80152e0:	005b      	lsls	r3, r3, #1
 80152e2:	4413      	add	r3, r2
 80152e4:	00db      	lsls	r3, r3, #3
 80152e6:	440b      	add	r3, r1
 80152e8:	3314      	adds	r3, #20
 80152ea:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80152ec:	2b01      	cmp	r3, #1
 80152ee:	d10e      	bne.n	801530e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80152f0:	4932      	ldr	r1, [pc, #200]	; (80153bc <etharp_tmr+0x14c>)
 80152f2:	687a      	ldr	r2, [r7, #4]
 80152f4:	4613      	mov	r3, r2
 80152f6:	005b      	lsls	r3, r3, #1
 80152f8:	4413      	add	r3, r2
 80152fa:	00db      	lsls	r3, r3, #3
 80152fc:	440b      	add	r3, r1
 80152fe:	3312      	adds	r3, #18
 8015300:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015302:	2b04      	cmp	r3, #4
 8015304:	d903      	bls.n	801530e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015306:	6878      	ldr	r0, [r7, #4]
 8015308:	f7ff ff80 	bl	801520c <etharp_free_entry>
 801530c:	e04a      	b.n	80153a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801530e:	492b      	ldr	r1, [pc, #172]	; (80153bc <etharp_tmr+0x14c>)
 8015310:	687a      	ldr	r2, [r7, #4]
 8015312:	4613      	mov	r3, r2
 8015314:	005b      	lsls	r3, r3, #1
 8015316:	4413      	add	r3, r2
 8015318:	00db      	lsls	r3, r3, #3
 801531a:	440b      	add	r3, r1
 801531c:	3314      	adds	r3, #20
 801531e:	781b      	ldrb	r3, [r3, #0]
 8015320:	2b03      	cmp	r3, #3
 8015322:	d10a      	bne.n	801533a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015324:	4925      	ldr	r1, [pc, #148]	; (80153bc <etharp_tmr+0x14c>)
 8015326:	687a      	ldr	r2, [r7, #4]
 8015328:	4613      	mov	r3, r2
 801532a:	005b      	lsls	r3, r3, #1
 801532c:	4413      	add	r3, r2
 801532e:	00db      	lsls	r3, r3, #3
 8015330:	440b      	add	r3, r1
 8015332:	3314      	adds	r3, #20
 8015334:	2204      	movs	r2, #4
 8015336:	701a      	strb	r2, [r3, #0]
 8015338:	e034      	b.n	80153a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801533a:	4920      	ldr	r1, [pc, #128]	; (80153bc <etharp_tmr+0x14c>)
 801533c:	687a      	ldr	r2, [r7, #4]
 801533e:	4613      	mov	r3, r2
 8015340:	005b      	lsls	r3, r3, #1
 8015342:	4413      	add	r3, r2
 8015344:	00db      	lsls	r3, r3, #3
 8015346:	440b      	add	r3, r1
 8015348:	3314      	adds	r3, #20
 801534a:	781b      	ldrb	r3, [r3, #0]
 801534c:	2b04      	cmp	r3, #4
 801534e:	d10a      	bne.n	8015366 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015350:	491a      	ldr	r1, [pc, #104]	; (80153bc <etharp_tmr+0x14c>)
 8015352:	687a      	ldr	r2, [r7, #4]
 8015354:	4613      	mov	r3, r2
 8015356:	005b      	lsls	r3, r3, #1
 8015358:	4413      	add	r3, r2
 801535a:	00db      	lsls	r3, r3, #3
 801535c:	440b      	add	r3, r1
 801535e:	3314      	adds	r3, #20
 8015360:	2202      	movs	r2, #2
 8015362:	701a      	strb	r2, [r3, #0]
 8015364:	e01e      	b.n	80153a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015366:	4915      	ldr	r1, [pc, #84]	; (80153bc <etharp_tmr+0x14c>)
 8015368:	687a      	ldr	r2, [r7, #4]
 801536a:	4613      	mov	r3, r2
 801536c:	005b      	lsls	r3, r3, #1
 801536e:	4413      	add	r3, r2
 8015370:	00db      	lsls	r3, r3, #3
 8015372:	440b      	add	r3, r1
 8015374:	3314      	adds	r3, #20
 8015376:	781b      	ldrb	r3, [r3, #0]
 8015378:	2b01      	cmp	r3, #1
 801537a:	d113      	bne.n	80153a4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801537c:	490f      	ldr	r1, [pc, #60]	; (80153bc <etharp_tmr+0x14c>)
 801537e:	687a      	ldr	r2, [r7, #4]
 8015380:	4613      	mov	r3, r2
 8015382:	005b      	lsls	r3, r3, #1
 8015384:	4413      	add	r3, r2
 8015386:	00db      	lsls	r3, r3, #3
 8015388:	440b      	add	r3, r1
 801538a:	3308      	adds	r3, #8
 801538c:	6818      	ldr	r0, [r3, #0]
 801538e:	687a      	ldr	r2, [r7, #4]
 8015390:	4613      	mov	r3, r2
 8015392:	005b      	lsls	r3, r3, #1
 8015394:	4413      	add	r3, r2
 8015396:	00db      	lsls	r3, r3, #3
 8015398:	4a08      	ldr	r2, [pc, #32]	; (80153bc <etharp_tmr+0x14c>)
 801539a:	4413      	add	r3, r2
 801539c:	3304      	adds	r3, #4
 801539e:	4619      	mov	r1, r3
 80153a0:	f000 fe72 	bl	8016088 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	3301      	adds	r3, #1
 80153a8:	607b      	str	r3, [r7, #4]
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	2b09      	cmp	r3, #9
 80153ae:	f77f af65 	ble.w	801527c <etharp_tmr+0xc>
      }
    }
  }
}
 80153b2:	bf00      	nop
 80153b4:	3708      	adds	r7, #8
 80153b6:	46bd      	mov	sp, r7
 80153b8:	bd80      	pop	{r7, pc}
 80153ba:	bf00      	nop
 80153bc:	2000869c 	.word	0x2000869c

080153c0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b08a      	sub	sp, #40	; 0x28
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	60f8      	str	r0, [r7, #12]
 80153c8:	460b      	mov	r3, r1
 80153ca:	607a      	str	r2, [r7, #4]
 80153cc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80153ce:	230a      	movs	r3, #10
 80153d0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80153d2:	230a      	movs	r3, #10
 80153d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80153d6:	230a      	movs	r3, #10
 80153d8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80153da:	2300      	movs	r3, #0
 80153dc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80153de:	230a      	movs	r3, #10
 80153e0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80153e2:	2300      	movs	r3, #0
 80153e4:	83bb      	strh	r3, [r7, #28]
 80153e6:	2300      	movs	r3, #0
 80153e8:	837b      	strh	r3, [r7, #26]
 80153ea:	2300      	movs	r3, #0
 80153ec:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80153ee:	2300      	movs	r3, #0
 80153f0:	843b      	strh	r3, [r7, #32]
 80153f2:	e0ae      	b.n	8015552 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80153f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80153f8:	49a6      	ldr	r1, [pc, #664]	; (8015694 <etharp_find_entry+0x2d4>)
 80153fa:	4613      	mov	r3, r2
 80153fc:	005b      	lsls	r3, r3, #1
 80153fe:	4413      	add	r3, r2
 8015400:	00db      	lsls	r3, r3, #3
 8015402:	440b      	add	r3, r1
 8015404:	3314      	adds	r3, #20
 8015406:	781b      	ldrb	r3, [r3, #0]
 8015408:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801540a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801540e:	2b0a      	cmp	r3, #10
 8015410:	d105      	bne.n	801541e <etharp_find_entry+0x5e>
 8015412:	7dfb      	ldrb	r3, [r7, #23]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d102      	bne.n	801541e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015418:	8c3b      	ldrh	r3, [r7, #32]
 801541a:	847b      	strh	r3, [r7, #34]	; 0x22
 801541c:	e095      	b.n	801554a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801541e:	7dfb      	ldrb	r3, [r7, #23]
 8015420:	2b00      	cmp	r3, #0
 8015422:	f000 8092 	beq.w	801554a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015426:	7dfb      	ldrb	r3, [r7, #23]
 8015428:	2b01      	cmp	r3, #1
 801542a:	d009      	beq.n	8015440 <etharp_find_entry+0x80>
 801542c:	7dfb      	ldrb	r3, [r7, #23]
 801542e:	2b01      	cmp	r3, #1
 8015430:	d806      	bhi.n	8015440 <etharp_find_entry+0x80>
 8015432:	4b99      	ldr	r3, [pc, #612]	; (8015698 <etharp_find_entry+0x2d8>)
 8015434:	f44f 7292 	mov.w	r2, #292	; 0x124
 8015438:	4998      	ldr	r1, [pc, #608]	; (801569c <etharp_find_entry+0x2dc>)
 801543a:	4899      	ldr	r0, [pc, #612]	; (80156a0 <etharp_find_entry+0x2e0>)
 801543c:	f004 fbf0 	bl	8019c20 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d020      	beq.n	8015488 <etharp_find_entry+0xc8>
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	6819      	ldr	r1, [r3, #0]
 801544a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801544e:	4891      	ldr	r0, [pc, #580]	; (8015694 <etharp_find_entry+0x2d4>)
 8015450:	4613      	mov	r3, r2
 8015452:	005b      	lsls	r3, r3, #1
 8015454:	4413      	add	r3, r2
 8015456:	00db      	lsls	r3, r3, #3
 8015458:	4403      	add	r3, r0
 801545a:	3304      	adds	r3, #4
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	4299      	cmp	r1, r3
 8015460:	d112      	bne.n	8015488 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	2b00      	cmp	r3, #0
 8015466:	d00c      	beq.n	8015482 <etharp_find_entry+0xc2>
 8015468:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801546c:	4989      	ldr	r1, [pc, #548]	; (8015694 <etharp_find_entry+0x2d4>)
 801546e:	4613      	mov	r3, r2
 8015470:	005b      	lsls	r3, r3, #1
 8015472:	4413      	add	r3, r2
 8015474:	00db      	lsls	r3, r3, #3
 8015476:	440b      	add	r3, r1
 8015478:	3308      	adds	r3, #8
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	687a      	ldr	r2, [r7, #4]
 801547e:	429a      	cmp	r2, r3
 8015480:	d102      	bne.n	8015488 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015482:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015486:	e100      	b.n	801568a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015488:	7dfb      	ldrb	r3, [r7, #23]
 801548a:	2b01      	cmp	r3, #1
 801548c:	d140      	bne.n	8015510 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801548e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015492:	4980      	ldr	r1, [pc, #512]	; (8015694 <etharp_find_entry+0x2d4>)
 8015494:	4613      	mov	r3, r2
 8015496:	005b      	lsls	r3, r3, #1
 8015498:	4413      	add	r3, r2
 801549a:	00db      	lsls	r3, r3, #3
 801549c:	440b      	add	r3, r1
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d01a      	beq.n	80154da <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80154a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154a8:	497a      	ldr	r1, [pc, #488]	; (8015694 <etharp_find_entry+0x2d4>)
 80154aa:	4613      	mov	r3, r2
 80154ac:	005b      	lsls	r3, r3, #1
 80154ae:	4413      	add	r3, r2
 80154b0:	00db      	lsls	r3, r3, #3
 80154b2:	440b      	add	r3, r1
 80154b4:	3312      	adds	r3, #18
 80154b6:	881b      	ldrh	r3, [r3, #0]
 80154b8:	8bba      	ldrh	r2, [r7, #28]
 80154ba:	429a      	cmp	r2, r3
 80154bc:	d845      	bhi.n	801554a <etharp_find_entry+0x18a>
            old_queue = i;
 80154be:	8c3b      	ldrh	r3, [r7, #32]
 80154c0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80154c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154c6:	4973      	ldr	r1, [pc, #460]	; (8015694 <etharp_find_entry+0x2d4>)
 80154c8:	4613      	mov	r3, r2
 80154ca:	005b      	lsls	r3, r3, #1
 80154cc:	4413      	add	r3, r2
 80154ce:	00db      	lsls	r3, r3, #3
 80154d0:	440b      	add	r3, r1
 80154d2:	3312      	adds	r3, #18
 80154d4:	881b      	ldrh	r3, [r3, #0]
 80154d6:	83bb      	strh	r3, [r7, #28]
 80154d8:	e037      	b.n	801554a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80154da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154de:	496d      	ldr	r1, [pc, #436]	; (8015694 <etharp_find_entry+0x2d4>)
 80154e0:	4613      	mov	r3, r2
 80154e2:	005b      	lsls	r3, r3, #1
 80154e4:	4413      	add	r3, r2
 80154e6:	00db      	lsls	r3, r3, #3
 80154e8:	440b      	add	r3, r1
 80154ea:	3312      	adds	r3, #18
 80154ec:	881b      	ldrh	r3, [r3, #0]
 80154ee:	8b7a      	ldrh	r2, [r7, #26]
 80154f0:	429a      	cmp	r2, r3
 80154f2:	d82a      	bhi.n	801554a <etharp_find_entry+0x18a>
            old_pending = i;
 80154f4:	8c3b      	ldrh	r3, [r7, #32]
 80154f6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80154f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154fc:	4965      	ldr	r1, [pc, #404]	; (8015694 <etharp_find_entry+0x2d4>)
 80154fe:	4613      	mov	r3, r2
 8015500:	005b      	lsls	r3, r3, #1
 8015502:	4413      	add	r3, r2
 8015504:	00db      	lsls	r3, r3, #3
 8015506:	440b      	add	r3, r1
 8015508:	3312      	adds	r3, #18
 801550a:	881b      	ldrh	r3, [r3, #0]
 801550c:	837b      	strh	r3, [r7, #26]
 801550e:	e01c      	b.n	801554a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015510:	7dfb      	ldrb	r3, [r7, #23]
 8015512:	2b01      	cmp	r3, #1
 8015514:	d919      	bls.n	801554a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015516:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801551a:	495e      	ldr	r1, [pc, #376]	; (8015694 <etharp_find_entry+0x2d4>)
 801551c:	4613      	mov	r3, r2
 801551e:	005b      	lsls	r3, r3, #1
 8015520:	4413      	add	r3, r2
 8015522:	00db      	lsls	r3, r3, #3
 8015524:	440b      	add	r3, r1
 8015526:	3312      	adds	r3, #18
 8015528:	881b      	ldrh	r3, [r3, #0]
 801552a:	8b3a      	ldrh	r2, [r7, #24]
 801552c:	429a      	cmp	r2, r3
 801552e:	d80c      	bhi.n	801554a <etharp_find_entry+0x18a>
            old_stable = i;
 8015530:	8c3b      	ldrh	r3, [r7, #32]
 8015532:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015534:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015538:	4956      	ldr	r1, [pc, #344]	; (8015694 <etharp_find_entry+0x2d4>)
 801553a:	4613      	mov	r3, r2
 801553c:	005b      	lsls	r3, r3, #1
 801553e:	4413      	add	r3, r2
 8015540:	00db      	lsls	r3, r3, #3
 8015542:	440b      	add	r3, r1
 8015544:	3312      	adds	r3, #18
 8015546:	881b      	ldrh	r3, [r3, #0]
 8015548:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801554a:	8c3b      	ldrh	r3, [r7, #32]
 801554c:	3301      	adds	r3, #1
 801554e:	b29b      	uxth	r3, r3
 8015550:	843b      	strh	r3, [r7, #32]
 8015552:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015556:	2b09      	cmp	r3, #9
 8015558:	f77f af4c 	ble.w	80153f4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801555c:	7afb      	ldrb	r3, [r7, #11]
 801555e:	f003 0302 	and.w	r3, r3, #2
 8015562:	2b00      	cmp	r3, #0
 8015564:	d108      	bne.n	8015578 <etharp_find_entry+0x1b8>
 8015566:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801556a:	2b0a      	cmp	r3, #10
 801556c:	d107      	bne.n	801557e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801556e:	7afb      	ldrb	r3, [r7, #11]
 8015570:	f003 0301 	and.w	r3, r3, #1
 8015574:	2b00      	cmp	r3, #0
 8015576:	d102      	bne.n	801557e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015578:	f04f 33ff 	mov.w	r3, #4294967295
 801557c:	e085      	b.n	801568a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801557e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015582:	2b09      	cmp	r3, #9
 8015584:	dc02      	bgt.n	801558c <etharp_find_entry+0x1cc>
    i = empty;
 8015586:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015588:	843b      	strh	r3, [r7, #32]
 801558a:	e039      	b.n	8015600 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801558c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015590:	2b09      	cmp	r3, #9
 8015592:	dc14      	bgt.n	80155be <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015594:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015596:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015598:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801559c:	493d      	ldr	r1, [pc, #244]	; (8015694 <etharp_find_entry+0x2d4>)
 801559e:	4613      	mov	r3, r2
 80155a0:	005b      	lsls	r3, r3, #1
 80155a2:	4413      	add	r3, r2
 80155a4:	00db      	lsls	r3, r3, #3
 80155a6:	440b      	add	r3, r1
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d018      	beq.n	80155e0 <etharp_find_entry+0x220>
 80155ae:	4b3a      	ldr	r3, [pc, #232]	; (8015698 <etharp_find_entry+0x2d8>)
 80155b0:	f240 126d 	movw	r2, #365	; 0x16d
 80155b4:	493b      	ldr	r1, [pc, #236]	; (80156a4 <etharp_find_entry+0x2e4>)
 80155b6:	483a      	ldr	r0, [pc, #232]	; (80156a0 <etharp_find_entry+0x2e0>)
 80155b8:	f004 fb32 	bl	8019c20 <iprintf>
 80155bc:	e010      	b.n	80155e0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80155be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80155c2:	2b09      	cmp	r3, #9
 80155c4:	dc02      	bgt.n	80155cc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80155c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80155c8:	843b      	strh	r3, [r7, #32]
 80155ca:	e009      	b.n	80155e0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80155cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80155d0:	2b09      	cmp	r3, #9
 80155d2:	dc02      	bgt.n	80155da <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80155d4:	8bfb      	ldrh	r3, [r7, #30]
 80155d6:	843b      	strh	r3, [r7, #32]
 80155d8:	e002      	b.n	80155e0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80155da:	f04f 33ff 	mov.w	r3, #4294967295
 80155de:	e054      	b.n	801568a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80155e0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80155e4:	2b09      	cmp	r3, #9
 80155e6:	dd06      	ble.n	80155f6 <etharp_find_entry+0x236>
 80155e8:	4b2b      	ldr	r3, [pc, #172]	; (8015698 <etharp_find_entry+0x2d8>)
 80155ea:	f240 127f 	movw	r2, #383	; 0x17f
 80155ee:	492e      	ldr	r1, [pc, #184]	; (80156a8 <etharp_find_entry+0x2e8>)
 80155f0:	482b      	ldr	r0, [pc, #172]	; (80156a0 <etharp_find_entry+0x2e0>)
 80155f2:	f004 fb15 	bl	8019c20 <iprintf>
    etharp_free_entry(i);
 80155f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80155fa:	4618      	mov	r0, r3
 80155fc:	f7ff fe06 	bl	801520c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015600:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015604:	2b09      	cmp	r3, #9
 8015606:	dd06      	ble.n	8015616 <etharp_find_entry+0x256>
 8015608:	4b23      	ldr	r3, [pc, #140]	; (8015698 <etharp_find_entry+0x2d8>)
 801560a:	f240 1283 	movw	r2, #387	; 0x183
 801560e:	4926      	ldr	r1, [pc, #152]	; (80156a8 <etharp_find_entry+0x2e8>)
 8015610:	4823      	ldr	r0, [pc, #140]	; (80156a0 <etharp_find_entry+0x2e0>)
 8015612:	f004 fb05 	bl	8019c20 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015616:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801561a:	491e      	ldr	r1, [pc, #120]	; (8015694 <etharp_find_entry+0x2d4>)
 801561c:	4613      	mov	r3, r2
 801561e:	005b      	lsls	r3, r3, #1
 8015620:	4413      	add	r3, r2
 8015622:	00db      	lsls	r3, r3, #3
 8015624:	440b      	add	r3, r1
 8015626:	3314      	adds	r3, #20
 8015628:	781b      	ldrb	r3, [r3, #0]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d006      	beq.n	801563c <etharp_find_entry+0x27c>
 801562e:	4b1a      	ldr	r3, [pc, #104]	; (8015698 <etharp_find_entry+0x2d8>)
 8015630:	f240 1285 	movw	r2, #389	; 0x185
 8015634:	491d      	ldr	r1, [pc, #116]	; (80156ac <etharp_find_entry+0x2ec>)
 8015636:	481a      	ldr	r0, [pc, #104]	; (80156a0 <etharp_find_entry+0x2e0>)
 8015638:	f004 faf2 	bl	8019c20 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d00b      	beq.n	801565a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015642:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	6819      	ldr	r1, [r3, #0]
 801564a:	4812      	ldr	r0, [pc, #72]	; (8015694 <etharp_find_entry+0x2d4>)
 801564c:	4613      	mov	r3, r2
 801564e:	005b      	lsls	r3, r3, #1
 8015650:	4413      	add	r3, r2
 8015652:	00db      	lsls	r3, r3, #3
 8015654:	4403      	add	r3, r0
 8015656:	3304      	adds	r3, #4
 8015658:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801565a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801565e:	490d      	ldr	r1, [pc, #52]	; (8015694 <etharp_find_entry+0x2d4>)
 8015660:	4613      	mov	r3, r2
 8015662:	005b      	lsls	r3, r3, #1
 8015664:	4413      	add	r3, r2
 8015666:	00db      	lsls	r3, r3, #3
 8015668:	440b      	add	r3, r1
 801566a:	3312      	adds	r3, #18
 801566c:	2200      	movs	r2, #0
 801566e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015670:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015674:	4907      	ldr	r1, [pc, #28]	; (8015694 <etharp_find_entry+0x2d4>)
 8015676:	4613      	mov	r3, r2
 8015678:	005b      	lsls	r3, r3, #1
 801567a:	4413      	add	r3, r2
 801567c:	00db      	lsls	r3, r3, #3
 801567e:	440b      	add	r3, r1
 8015680:	3308      	adds	r3, #8
 8015682:	687a      	ldr	r2, [r7, #4]
 8015684:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015686:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801568a:	4618      	mov	r0, r3
 801568c:	3728      	adds	r7, #40	; 0x28
 801568e:	46bd      	mov	sp, r7
 8015690:	bd80      	pop	{r7, pc}
 8015692:	bf00      	nop
 8015694:	2000869c 	.word	0x2000869c
 8015698:	0801e370 	.word	0x0801e370
 801569c:	0801e3a8 	.word	0x0801e3a8
 80156a0:	0801e3e8 	.word	0x0801e3e8
 80156a4:	0801e410 	.word	0x0801e410
 80156a8:	0801e428 	.word	0x0801e428
 80156ac:	0801e43c 	.word	0x0801e43c

080156b0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80156b0:	b580      	push	{r7, lr}
 80156b2:	b088      	sub	sp, #32
 80156b4:	af02      	add	r7, sp, #8
 80156b6:	60f8      	str	r0, [r7, #12]
 80156b8:	60b9      	str	r1, [r7, #8]
 80156ba:	607a      	str	r2, [r7, #4]
 80156bc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80156c4:	2b06      	cmp	r3, #6
 80156c6:	d006      	beq.n	80156d6 <etharp_update_arp_entry+0x26>
 80156c8:	4b48      	ldr	r3, [pc, #288]	; (80157ec <etharp_update_arp_entry+0x13c>)
 80156ca:	f240 12a9 	movw	r2, #425	; 0x1a9
 80156ce:	4948      	ldr	r1, [pc, #288]	; (80157f0 <etharp_update_arp_entry+0x140>)
 80156d0:	4848      	ldr	r0, [pc, #288]	; (80157f4 <etharp_update_arp_entry+0x144>)
 80156d2:	f004 faa5 	bl	8019c20 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80156d6:	68bb      	ldr	r3, [r7, #8]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d012      	beq.n	8015702 <etharp_update_arp_entry+0x52>
 80156dc:	68bb      	ldr	r3, [r7, #8]
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d00e      	beq.n	8015702 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80156e4:	68bb      	ldr	r3, [r7, #8]
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	68f9      	ldr	r1, [r7, #12]
 80156ea:	4618      	mov	r0, r3
 80156ec:	f001 f91e 	bl	801692c <ip4_addr_isbroadcast_u32>
 80156f0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d105      	bne.n	8015702 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80156f6:	68bb      	ldr	r3, [r7, #8]
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80156fe:	2be0      	cmp	r3, #224	; 0xe0
 8015700:	d102      	bne.n	8015708 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015702:	f06f 030f 	mvn.w	r3, #15
 8015706:	e06c      	b.n	80157e2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015708:	78fb      	ldrb	r3, [r7, #3]
 801570a:	68fa      	ldr	r2, [r7, #12]
 801570c:	4619      	mov	r1, r3
 801570e:	68b8      	ldr	r0, [r7, #8]
 8015710:	f7ff fe56 	bl	80153c0 <etharp_find_entry>
 8015714:	4603      	mov	r3, r0
 8015716:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015718:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801571c:	2b00      	cmp	r3, #0
 801571e:	da02      	bge.n	8015726 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015720:	8afb      	ldrh	r3, [r7, #22]
 8015722:	b25b      	sxtb	r3, r3
 8015724:	e05d      	b.n	80157e2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015726:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801572a:	4933      	ldr	r1, [pc, #204]	; (80157f8 <etharp_update_arp_entry+0x148>)
 801572c:	4613      	mov	r3, r2
 801572e:	005b      	lsls	r3, r3, #1
 8015730:	4413      	add	r3, r2
 8015732:	00db      	lsls	r3, r3, #3
 8015734:	440b      	add	r3, r1
 8015736:	3314      	adds	r3, #20
 8015738:	2202      	movs	r2, #2
 801573a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801573c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015740:	492d      	ldr	r1, [pc, #180]	; (80157f8 <etharp_update_arp_entry+0x148>)
 8015742:	4613      	mov	r3, r2
 8015744:	005b      	lsls	r3, r3, #1
 8015746:	4413      	add	r3, r2
 8015748:	00db      	lsls	r3, r3, #3
 801574a:	440b      	add	r3, r1
 801574c:	3308      	adds	r3, #8
 801574e:	68fa      	ldr	r2, [r7, #12]
 8015750:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015752:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015756:	4613      	mov	r3, r2
 8015758:	005b      	lsls	r3, r3, #1
 801575a:	4413      	add	r3, r2
 801575c:	00db      	lsls	r3, r3, #3
 801575e:	3308      	adds	r3, #8
 8015760:	4a25      	ldr	r2, [pc, #148]	; (80157f8 <etharp_update_arp_entry+0x148>)
 8015762:	4413      	add	r3, r2
 8015764:	3304      	adds	r3, #4
 8015766:	2206      	movs	r2, #6
 8015768:	6879      	ldr	r1, [r7, #4]
 801576a:	4618      	mov	r0, r3
 801576c:	f004 fa45 	bl	8019bfa <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015770:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015774:	4920      	ldr	r1, [pc, #128]	; (80157f8 <etharp_update_arp_entry+0x148>)
 8015776:	4613      	mov	r3, r2
 8015778:	005b      	lsls	r3, r3, #1
 801577a:	4413      	add	r3, r2
 801577c:	00db      	lsls	r3, r3, #3
 801577e:	440b      	add	r3, r1
 8015780:	3312      	adds	r3, #18
 8015782:	2200      	movs	r2, #0
 8015784:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015786:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801578a:	491b      	ldr	r1, [pc, #108]	; (80157f8 <etharp_update_arp_entry+0x148>)
 801578c:	4613      	mov	r3, r2
 801578e:	005b      	lsls	r3, r3, #1
 8015790:	4413      	add	r3, r2
 8015792:	00db      	lsls	r3, r3, #3
 8015794:	440b      	add	r3, r1
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d021      	beq.n	80157e0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801579c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80157a0:	4915      	ldr	r1, [pc, #84]	; (80157f8 <etharp_update_arp_entry+0x148>)
 80157a2:	4613      	mov	r3, r2
 80157a4:	005b      	lsls	r3, r3, #1
 80157a6:	4413      	add	r3, r2
 80157a8:	00db      	lsls	r3, r3, #3
 80157aa:	440b      	add	r3, r1
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80157b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80157b4:	4910      	ldr	r1, [pc, #64]	; (80157f8 <etharp_update_arp_entry+0x148>)
 80157b6:	4613      	mov	r3, r2
 80157b8:	005b      	lsls	r3, r3, #1
 80157ba:	4413      	add	r3, r2
 80157bc:	00db      	lsls	r3, r3, #3
 80157be:	440b      	add	r3, r1
 80157c0:	2200      	movs	r2, #0
 80157c2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80157ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80157ce:	9300      	str	r3, [sp, #0]
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	6939      	ldr	r1, [r7, #16]
 80157d4:	68f8      	ldr	r0, [r7, #12]
 80157d6:	f002 f8f3 	bl	80179c0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80157da:	6938      	ldr	r0, [r7, #16]
 80157dc:	f7f6 fc94 	bl	800c108 <pbuf_free>
  }
  return ERR_OK;
 80157e0:	2300      	movs	r3, #0
}
 80157e2:	4618      	mov	r0, r3
 80157e4:	3718      	adds	r7, #24
 80157e6:	46bd      	mov	sp, r7
 80157e8:	bd80      	pop	{r7, pc}
 80157ea:	bf00      	nop
 80157ec:	0801e370 	.word	0x0801e370
 80157f0:	0801e468 	.word	0x0801e468
 80157f4:	0801e3e8 	.word	0x0801e3e8
 80157f8:	2000869c 	.word	0x2000869c

080157fc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80157fc:	b580      	push	{r7, lr}
 80157fe:	b084      	sub	sp, #16
 8015800:	af00      	add	r7, sp, #0
 8015802:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015804:	2300      	movs	r3, #0
 8015806:	60fb      	str	r3, [r7, #12]
 8015808:	e01e      	b.n	8015848 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801580a:	4913      	ldr	r1, [pc, #76]	; (8015858 <etharp_cleanup_netif+0x5c>)
 801580c:	68fa      	ldr	r2, [r7, #12]
 801580e:	4613      	mov	r3, r2
 8015810:	005b      	lsls	r3, r3, #1
 8015812:	4413      	add	r3, r2
 8015814:	00db      	lsls	r3, r3, #3
 8015816:	440b      	add	r3, r1
 8015818:	3314      	adds	r3, #20
 801581a:	781b      	ldrb	r3, [r3, #0]
 801581c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801581e:	7afb      	ldrb	r3, [r7, #11]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d00e      	beq.n	8015842 <etharp_cleanup_netif+0x46>
 8015824:	490c      	ldr	r1, [pc, #48]	; (8015858 <etharp_cleanup_netif+0x5c>)
 8015826:	68fa      	ldr	r2, [r7, #12]
 8015828:	4613      	mov	r3, r2
 801582a:	005b      	lsls	r3, r3, #1
 801582c:	4413      	add	r3, r2
 801582e:	00db      	lsls	r3, r3, #3
 8015830:	440b      	add	r3, r1
 8015832:	3308      	adds	r3, #8
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	687a      	ldr	r2, [r7, #4]
 8015838:	429a      	cmp	r2, r3
 801583a:	d102      	bne.n	8015842 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801583c:	68f8      	ldr	r0, [r7, #12]
 801583e:	f7ff fce5 	bl	801520c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	3301      	adds	r3, #1
 8015846:	60fb      	str	r3, [r7, #12]
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	2b09      	cmp	r3, #9
 801584c:	dddd      	ble.n	801580a <etharp_cleanup_netif+0xe>
    }
  }
}
 801584e:	bf00      	nop
 8015850:	3710      	adds	r7, #16
 8015852:	46bd      	mov	sp, r7
 8015854:	bd80      	pop	{r7, pc}
 8015856:	bf00      	nop
 8015858:	2000869c 	.word	0x2000869c

0801585c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801585c:	b5b0      	push	{r4, r5, r7, lr}
 801585e:	b08a      	sub	sp, #40	; 0x28
 8015860:	af04      	add	r7, sp, #16
 8015862:	6078      	str	r0, [r7, #4]
 8015864:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015866:	683b      	ldr	r3, [r7, #0]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d107      	bne.n	801587c <etharp_input+0x20>
 801586c:	4b3f      	ldr	r3, [pc, #252]	; (801596c <etharp_input+0x110>)
 801586e:	f240 228a 	movw	r2, #650	; 0x28a
 8015872:	493f      	ldr	r1, [pc, #252]	; (8015970 <etharp_input+0x114>)
 8015874:	483f      	ldr	r0, [pc, #252]	; (8015974 <etharp_input+0x118>)
 8015876:	f004 f9d3 	bl	8019c20 <iprintf>
 801587a:	e074      	b.n	8015966 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	685b      	ldr	r3, [r3, #4]
 8015880:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015882:	693b      	ldr	r3, [r7, #16]
 8015884:	881b      	ldrh	r3, [r3, #0]
 8015886:	b29b      	uxth	r3, r3
 8015888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801588c:	d10c      	bne.n	80158a8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801588e:	693b      	ldr	r3, [r7, #16]
 8015890:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015892:	2b06      	cmp	r3, #6
 8015894:	d108      	bne.n	80158a8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015896:	693b      	ldr	r3, [r7, #16]
 8015898:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801589a:	2b04      	cmp	r3, #4
 801589c:	d104      	bne.n	80158a8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801589e:	693b      	ldr	r3, [r7, #16]
 80158a0:	885b      	ldrh	r3, [r3, #2]
 80158a2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80158a4:	2b08      	cmp	r3, #8
 80158a6:	d003      	beq.n	80158b0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80158a8:	6878      	ldr	r0, [r7, #4]
 80158aa:	f7f6 fc2d 	bl	800c108 <pbuf_free>
    return;
 80158ae:	e05a      	b.n	8015966 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80158b0:	693b      	ldr	r3, [r7, #16]
 80158b2:	330e      	adds	r3, #14
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80158b8:	693b      	ldr	r3, [r7, #16]
 80158ba:	3318      	adds	r3, #24
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80158c0:	683b      	ldr	r3, [r7, #0]
 80158c2:	3304      	adds	r3, #4
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d102      	bne.n	80158d0 <etharp_input+0x74>
    for_us = 0;
 80158ca:	2300      	movs	r3, #0
 80158cc:	75fb      	strb	r3, [r7, #23]
 80158ce:	e009      	b.n	80158e4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80158d0:	68ba      	ldr	r2, [r7, #8]
 80158d2:	683b      	ldr	r3, [r7, #0]
 80158d4:	3304      	adds	r3, #4
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	429a      	cmp	r2, r3
 80158da:	bf0c      	ite	eq
 80158dc:	2301      	moveq	r3, #1
 80158de:	2300      	movne	r3, #0
 80158e0:	b2db      	uxtb	r3, r3
 80158e2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80158e4:	693b      	ldr	r3, [r7, #16]
 80158e6:	f103 0208 	add.w	r2, r3, #8
 80158ea:	7dfb      	ldrb	r3, [r7, #23]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d001      	beq.n	80158f4 <etharp_input+0x98>
 80158f0:	2301      	movs	r3, #1
 80158f2:	e000      	b.n	80158f6 <etharp_input+0x9a>
 80158f4:	2302      	movs	r3, #2
 80158f6:	f107 010c 	add.w	r1, r7, #12
 80158fa:	6838      	ldr	r0, [r7, #0]
 80158fc:	f7ff fed8 	bl	80156b0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015900:	693b      	ldr	r3, [r7, #16]
 8015902:	88db      	ldrh	r3, [r3, #6]
 8015904:	b29b      	uxth	r3, r3
 8015906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801590a:	d003      	beq.n	8015914 <etharp_input+0xb8>
 801590c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015910:	d01e      	beq.n	8015950 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015912:	e025      	b.n	8015960 <etharp_input+0x104>
      if (for_us) {
 8015914:	7dfb      	ldrb	r3, [r7, #23]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d021      	beq.n	801595e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801591a:	683b      	ldr	r3, [r7, #0]
 801591c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8015920:	693b      	ldr	r3, [r7, #16]
 8015922:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015926:	683b      	ldr	r3, [r7, #0]
 8015928:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801592c:	683b      	ldr	r3, [r7, #0]
 801592e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015930:	693a      	ldr	r2, [r7, #16]
 8015932:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015934:	2102      	movs	r1, #2
 8015936:	9103      	str	r1, [sp, #12]
 8015938:	f107 010c 	add.w	r1, r7, #12
 801593c:	9102      	str	r1, [sp, #8]
 801593e:	9201      	str	r2, [sp, #4]
 8015940:	9300      	str	r3, [sp, #0]
 8015942:	462b      	mov	r3, r5
 8015944:	4622      	mov	r2, r4
 8015946:	4601      	mov	r1, r0
 8015948:	6838      	ldr	r0, [r7, #0]
 801594a:	f000 faef 	bl	8015f2c <etharp_raw>
      break;
 801594e:	e006      	b.n	801595e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8015950:	f107 030c 	add.w	r3, r7, #12
 8015954:	4619      	mov	r1, r3
 8015956:	6838      	ldr	r0, [r7, #0]
 8015958:	f7fe f9fe 	bl	8013d58 <dhcp_arp_reply>
      break;
 801595c:	e000      	b.n	8015960 <etharp_input+0x104>
      break;
 801595e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015960:	6878      	ldr	r0, [r7, #4]
 8015962:	f7f6 fbd1 	bl	800c108 <pbuf_free>
}
 8015966:	3718      	adds	r7, #24
 8015968:	46bd      	mov	sp, r7
 801596a:	bdb0      	pop	{r4, r5, r7, pc}
 801596c:	0801e370 	.word	0x0801e370
 8015970:	0801e4c0 	.word	0x0801e4c0
 8015974:	0801e3e8 	.word	0x0801e3e8

08015978 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015978:	b580      	push	{r7, lr}
 801597a:	b086      	sub	sp, #24
 801597c:	af02      	add	r7, sp, #8
 801597e:	60f8      	str	r0, [r7, #12]
 8015980:	60b9      	str	r1, [r7, #8]
 8015982:	4613      	mov	r3, r2
 8015984:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015986:	79fa      	ldrb	r2, [r7, #7]
 8015988:	4944      	ldr	r1, [pc, #272]	; (8015a9c <etharp_output_to_arp_index+0x124>)
 801598a:	4613      	mov	r3, r2
 801598c:	005b      	lsls	r3, r3, #1
 801598e:	4413      	add	r3, r2
 8015990:	00db      	lsls	r3, r3, #3
 8015992:	440b      	add	r3, r1
 8015994:	3314      	adds	r3, #20
 8015996:	781b      	ldrb	r3, [r3, #0]
 8015998:	2b01      	cmp	r3, #1
 801599a:	d806      	bhi.n	80159aa <etharp_output_to_arp_index+0x32>
 801599c:	4b40      	ldr	r3, [pc, #256]	; (8015aa0 <etharp_output_to_arp_index+0x128>)
 801599e:	f240 22ef 	movw	r2, #751	; 0x2ef
 80159a2:	4940      	ldr	r1, [pc, #256]	; (8015aa4 <etharp_output_to_arp_index+0x12c>)
 80159a4:	4840      	ldr	r0, [pc, #256]	; (8015aa8 <etharp_output_to_arp_index+0x130>)
 80159a6:	f004 f93b 	bl	8019c20 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80159aa:	79fa      	ldrb	r2, [r7, #7]
 80159ac:	493b      	ldr	r1, [pc, #236]	; (8015a9c <etharp_output_to_arp_index+0x124>)
 80159ae:	4613      	mov	r3, r2
 80159b0:	005b      	lsls	r3, r3, #1
 80159b2:	4413      	add	r3, r2
 80159b4:	00db      	lsls	r3, r3, #3
 80159b6:	440b      	add	r3, r1
 80159b8:	3314      	adds	r3, #20
 80159ba:	781b      	ldrb	r3, [r3, #0]
 80159bc:	2b02      	cmp	r3, #2
 80159be:	d153      	bne.n	8015a68 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80159c0:	79fa      	ldrb	r2, [r7, #7]
 80159c2:	4936      	ldr	r1, [pc, #216]	; (8015a9c <etharp_output_to_arp_index+0x124>)
 80159c4:	4613      	mov	r3, r2
 80159c6:	005b      	lsls	r3, r3, #1
 80159c8:	4413      	add	r3, r2
 80159ca:	00db      	lsls	r3, r3, #3
 80159cc:	440b      	add	r3, r1
 80159ce:	3312      	adds	r3, #18
 80159d0:	881b      	ldrh	r3, [r3, #0]
 80159d2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80159d6:	d919      	bls.n	8015a0c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80159d8:	79fa      	ldrb	r2, [r7, #7]
 80159da:	4613      	mov	r3, r2
 80159dc:	005b      	lsls	r3, r3, #1
 80159de:	4413      	add	r3, r2
 80159e0:	00db      	lsls	r3, r3, #3
 80159e2:	4a2e      	ldr	r2, [pc, #184]	; (8015a9c <etharp_output_to_arp_index+0x124>)
 80159e4:	4413      	add	r3, r2
 80159e6:	3304      	adds	r3, #4
 80159e8:	4619      	mov	r1, r3
 80159ea:	68f8      	ldr	r0, [r7, #12]
 80159ec:	f000 fb4c 	bl	8016088 <etharp_request>
 80159f0:	4603      	mov	r3, r0
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d138      	bne.n	8015a68 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80159f6:	79fa      	ldrb	r2, [r7, #7]
 80159f8:	4928      	ldr	r1, [pc, #160]	; (8015a9c <etharp_output_to_arp_index+0x124>)
 80159fa:	4613      	mov	r3, r2
 80159fc:	005b      	lsls	r3, r3, #1
 80159fe:	4413      	add	r3, r2
 8015a00:	00db      	lsls	r3, r3, #3
 8015a02:	440b      	add	r3, r1
 8015a04:	3314      	adds	r3, #20
 8015a06:	2203      	movs	r2, #3
 8015a08:	701a      	strb	r2, [r3, #0]
 8015a0a:	e02d      	b.n	8015a68 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015a0c:	79fa      	ldrb	r2, [r7, #7]
 8015a0e:	4923      	ldr	r1, [pc, #140]	; (8015a9c <etharp_output_to_arp_index+0x124>)
 8015a10:	4613      	mov	r3, r2
 8015a12:	005b      	lsls	r3, r3, #1
 8015a14:	4413      	add	r3, r2
 8015a16:	00db      	lsls	r3, r3, #3
 8015a18:	440b      	add	r3, r1
 8015a1a:	3312      	adds	r3, #18
 8015a1c:	881b      	ldrh	r3, [r3, #0]
 8015a1e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015a22:	d321      	bcc.n	8015a68 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015a24:	79fa      	ldrb	r2, [r7, #7]
 8015a26:	4613      	mov	r3, r2
 8015a28:	005b      	lsls	r3, r3, #1
 8015a2a:	4413      	add	r3, r2
 8015a2c:	00db      	lsls	r3, r3, #3
 8015a2e:	4a1b      	ldr	r2, [pc, #108]	; (8015a9c <etharp_output_to_arp_index+0x124>)
 8015a30:	4413      	add	r3, r2
 8015a32:	1d19      	adds	r1, r3, #4
 8015a34:	79fa      	ldrb	r2, [r7, #7]
 8015a36:	4613      	mov	r3, r2
 8015a38:	005b      	lsls	r3, r3, #1
 8015a3a:	4413      	add	r3, r2
 8015a3c:	00db      	lsls	r3, r3, #3
 8015a3e:	3308      	adds	r3, #8
 8015a40:	4a16      	ldr	r2, [pc, #88]	; (8015a9c <etharp_output_to_arp_index+0x124>)
 8015a42:	4413      	add	r3, r2
 8015a44:	3304      	adds	r3, #4
 8015a46:	461a      	mov	r2, r3
 8015a48:	68f8      	ldr	r0, [r7, #12]
 8015a4a:	f000 fafb 	bl	8016044 <etharp_request_dst>
 8015a4e:	4603      	mov	r3, r0
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d109      	bne.n	8015a68 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015a54:	79fa      	ldrb	r2, [r7, #7]
 8015a56:	4911      	ldr	r1, [pc, #68]	; (8015a9c <etharp_output_to_arp_index+0x124>)
 8015a58:	4613      	mov	r3, r2
 8015a5a:	005b      	lsls	r3, r3, #1
 8015a5c:	4413      	add	r3, r2
 8015a5e:	00db      	lsls	r3, r3, #3
 8015a60:	440b      	add	r3, r1
 8015a62:	3314      	adds	r3, #20
 8015a64:	2203      	movs	r2, #3
 8015a66:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8015a6e:	79fa      	ldrb	r2, [r7, #7]
 8015a70:	4613      	mov	r3, r2
 8015a72:	005b      	lsls	r3, r3, #1
 8015a74:	4413      	add	r3, r2
 8015a76:	00db      	lsls	r3, r3, #3
 8015a78:	3308      	adds	r3, #8
 8015a7a:	4a08      	ldr	r2, [pc, #32]	; (8015a9c <etharp_output_to_arp_index+0x124>)
 8015a7c:	4413      	add	r3, r2
 8015a7e:	1d1a      	adds	r2, r3, #4
 8015a80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015a84:	9300      	str	r3, [sp, #0]
 8015a86:	4613      	mov	r3, r2
 8015a88:	460a      	mov	r2, r1
 8015a8a:	68b9      	ldr	r1, [r7, #8]
 8015a8c:	68f8      	ldr	r0, [r7, #12]
 8015a8e:	f001 ff97 	bl	80179c0 <ethernet_output>
 8015a92:	4603      	mov	r3, r0
}
 8015a94:	4618      	mov	r0, r3
 8015a96:	3710      	adds	r7, #16
 8015a98:	46bd      	mov	sp, r7
 8015a9a:	bd80      	pop	{r7, pc}
 8015a9c:	2000869c 	.word	0x2000869c
 8015aa0:	0801e370 	.word	0x0801e370
 8015aa4:	0801e4e0 	.word	0x0801e4e0
 8015aa8:	0801e3e8 	.word	0x0801e3e8

08015aac <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015aac:	b580      	push	{r7, lr}
 8015aae:	b08a      	sub	sp, #40	; 0x28
 8015ab0:	af02      	add	r7, sp, #8
 8015ab2:	60f8      	str	r0, [r7, #12]
 8015ab4:	60b9      	str	r1, [r7, #8]
 8015ab6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d106      	bne.n	8015ad0 <etharp_output+0x24>
 8015ac2:	4b73      	ldr	r3, [pc, #460]	; (8015c90 <etharp_output+0x1e4>)
 8015ac4:	f240 321e 	movw	r2, #798	; 0x31e
 8015ac8:	4972      	ldr	r1, [pc, #456]	; (8015c94 <etharp_output+0x1e8>)
 8015aca:	4873      	ldr	r0, [pc, #460]	; (8015c98 <etharp_output+0x1ec>)
 8015acc:	f004 f8a8 	bl	8019c20 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015ad0:	68bb      	ldr	r3, [r7, #8]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d106      	bne.n	8015ae4 <etharp_output+0x38>
 8015ad6:	4b6e      	ldr	r3, [pc, #440]	; (8015c90 <etharp_output+0x1e4>)
 8015ad8:	f240 321f 	movw	r2, #799	; 0x31f
 8015adc:	496f      	ldr	r1, [pc, #444]	; (8015c9c <etharp_output+0x1f0>)
 8015ade:	486e      	ldr	r0, [pc, #440]	; (8015c98 <etharp_output+0x1ec>)
 8015ae0:	f004 f89e 	bl	8019c20 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d106      	bne.n	8015af8 <etharp_output+0x4c>
 8015aea:	4b69      	ldr	r3, [pc, #420]	; (8015c90 <etharp_output+0x1e4>)
 8015aec:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015af0:	496b      	ldr	r1, [pc, #428]	; (8015ca0 <etharp_output+0x1f4>)
 8015af2:	4869      	ldr	r0, [pc, #420]	; (8015c98 <etharp_output+0x1ec>)
 8015af4:	f004 f894 	bl	8019c20 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	68f9      	ldr	r1, [r7, #12]
 8015afe:	4618      	mov	r0, r3
 8015b00:	f000 ff14 	bl	801692c <ip4_addr_isbroadcast_u32>
 8015b04:	4603      	mov	r3, r0
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d002      	beq.n	8015b10 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015b0a:	4b66      	ldr	r3, [pc, #408]	; (8015ca4 <etharp_output+0x1f8>)
 8015b0c:	61fb      	str	r3, [r7, #28]
 8015b0e:	e0af      	b.n	8015c70 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015b18:	2be0      	cmp	r3, #224	; 0xe0
 8015b1a:	d118      	bne.n	8015b4e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015b1c:	2301      	movs	r3, #1
 8015b1e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015b20:	2300      	movs	r3, #0
 8015b22:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015b24:	235e      	movs	r3, #94	; 0x5e
 8015b26:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	3301      	adds	r3, #1
 8015b2c:	781b      	ldrb	r3, [r3, #0]
 8015b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b32:	b2db      	uxtb	r3, r3
 8015b34:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	3302      	adds	r3, #2
 8015b3a:	781b      	ldrb	r3, [r3, #0]
 8015b3c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	3303      	adds	r3, #3
 8015b42:	781b      	ldrb	r3, [r3, #0]
 8015b44:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015b46:	f107 0310 	add.w	r3, r7, #16
 8015b4a:	61fb      	str	r3, [r7, #28]
 8015b4c:	e090      	b.n	8015c70 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	681a      	ldr	r2, [r3, #0]
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	3304      	adds	r3, #4
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	405a      	eors	r2, r3
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	3308      	adds	r3, #8
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	4013      	ands	r3, r2
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d012      	beq.n	8015b8c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015b6c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015b70:	4293      	cmp	r3, r2
 8015b72:	d00b      	beq.n	8015b8c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	330c      	adds	r3, #12
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d003      	beq.n	8015b86 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	330c      	adds	r3, #12
 8015b82:	61bb      	str	r3, [r7, #24]
 8015b84:	e002      	b.n	8015b8c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015b86:	f06f 0303 	mvn.w	r3, #3
 8015b8a:	e07d      	b.n	8015c88 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015b8c:	4b46      	ldr	r3, [pc, #280]	; (8015ca8 <etharp_output+0x1fc>)
 8015b8e:	781b      	ldrb	r3, [r3, #0]
 8015b90:	4619      	mov	r1, r3
 8015b92:	4a46      	ldr	r2, [pc, #280]	; (8015cac <etharp_output+0x200>)
 8015b94:	460b      	mov	r3, r1
 8015b96:	005b      	lsls	r3, r3, #1
 8015b98:	440b      	add	r3, r1
 8015b9a:	00db      	lsls	r3, r3, #3
 8015b9c:	4413      	add	r3, r2
 8015b9e:	3314      	adds	r3, #20
 8015ba0:	781b      	ldrb	r3, [r3, #0]
 8015ba2:	2b01      	cmp	r3, #1
 8015ba4:	d925      	bls.n	8015bf2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015ba6:	4b40      	ldr	r3, [pc, #256]	; (8015ca8 <etharp_output+0x1fc>)
 8015ba8:	781b      	ldrb	r3, [r3, #0]
 8015baa:	4619      	mov	r1, r3
 8015bac:	4a3f      	ldr	r2, [pc, #252]	; (8015cac <etharp_output+0x200>)
 8015bae:	460b      	mov	r3, r1
 8015bb0:	005b      	lsls	r3, r3, #1
 8015bb2:	440b      	add	r3, r1
 8015bb4:	00db      	lsls	r3, r3, #3
 8015bb6:	4413      	add	r3, r2
 8015bb8:	3308      	adds	r3, #8
 8015bba:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015bbc:	68fa      	ldr	r2, [r7, #12]
 8015bbe:	429a      	cmp	r2, r3
 8015bc0:	d117      	bne.n	8015bf2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015bc2:	69bb      	ldr	r3, [r7, #24]
 8015bc4:	681a      	ldr	r2, [r3, #0]
 8015bc6:	4b38      	ldr	r3, [pc, #224]	; (8015ca8 <etharp_output+0x1fc>)
 8015bc8:	781b      	ldrb	r3, [r3, #0]
 8015bca:	4618      	mov	r0, r3
 8015bcc:	4937      	ldr	r1, [pc, #220]	; (8015cac <etharp_output+0x200>)
 8015bce:	4603      	mov	r3, r0
 8015bd0:	005b      	lsls	r3, r3, #1
 8015bd2:	4403      	add	r3, r0
 8015bd4:	00db      	lsls	r3, r3, #3
 8015bd6:	440b      	add	r3, r1
 8015bd8:	3304      	adds	r3, #4
 8015bda:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015bdc:	429a      	cmp	r2, r3
 8015bde:	d108      	bne.n	8015bf2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015be0:	4b31      	ldr	r3, [pc, #196]	; (8015ca8 <etharp_output+0x1fc>)
 8015be2:	781b      	ldrb	r3, [r3, #0]
 8015be4:	461a      	mov	r2, r3
 8015be6:	68b9      	ldr	r1, [r7, #8]
 8015be8:	68f8      	ldr	r0, [r7, #12]
 8015bea:	f7ff fec5 	bl	8015978 <etharp_output_to_arp_index>
 8015bee:	4603      	mov	r3, r0
 8015bf0:	e04a      	b.n	8015c88 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	75fb      	strb	r3, [r7, #23]
 8015bf6:	e031      	b.n	8015c5c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015bf8:	7dfa      	ldrb	r2, [r7, #23]
 8015bfa:	492c      	ldr	r1, [pc, #176]	; (8015cac <etharp_output+0x200>)
 8015bfc:	4613      	mov	r3, r2
 8015bfe:	005b      	lsls	r3, r3, #1
 8015c00:	4413      	add	r3, r2
 8015c02:	00db      	lsls	r3, r3, #3
 8015c04:	440b      	add	r3, r1
 8015c06:	3314      	adds	r3, #20
 8015c08:	781b      	ldrb	r3, [r3, #0]
 8015c0a:	2b01      	cmp	r3, #1
 8015c0c:	d923      	bls.n	8015c56 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015c0e:	7dfa      	ldrb	r2, [r7, #23]
 8015c10:	4926      	ldr	r1, [pc, #152]	; (8015cac <etharp_output+0x200>)
 8015c12:	4613      	mov	r3, r2
 8015c14:	005b      	lsls	r3, r3, #1
 8015c16:	4413      	add	r3, r2
 8015c18:	00db      	lsls	r3, r3, #3
 8015c1a:	440b      	add	r3, r1
 8015c1c:	3308      	adds	r3, #8
 8015c1e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015c20:	68fa      	ldr	r2, [r7, #12]
 8015c22:	429a      	cmp	r2, r3
 8015c24:	d117      	bne.n	8015c56 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015c26:	69bb      	ldr	r3, [r7, #24]
 8015c28:	6819      	ldr	r1, [r3, #0]
 8015c2a:	7dfa      	ldrb	r2, [r7, #23]
 8015c2c:	481f      	ldr	r0, [pc, #124]	; (8015cac <etharp_output+0x200>)
 8015c2e:	4613      	mov	r3, r2
 8015c30:	005b      	lsls	r3, r3, #1
 8015c32:	4413      	add	r3, r2
 8015c34:	00db      	lsls	r3, r3, #3
 8015c36:	4403      	add	r3, r0
 8015c38:	3304      	adds	r3, #4
 8015c3a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015c3c:	4299      	cmp	r1, r3
 8015c3e:	d10a      	bne.n	8015c56 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015c40:	4a19      	ldr	r2, [pc, #100]	; (8015ca8 <etharp_output+0x1fc>)
 8015c42:	7dfb      	ldrb	r3, [r7, #23]
 8015c44:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015c46:	7dfb      	ldrb	r3, [r7, #23]
 8015c48:	461a      	mov	r2, r3
 8015c4a:	68b9      	ldr	r1, [r7, #8]
 8015c4c:	68f8      	ldr	r0, [r7, #12]
 8015c4e:	f7ff fe93 	bl	8015978 <etharp_output_to_arp_index>
 8015c52:	4603      	mov	r3, r0
 8015c54:	e018      	b.n	8015c88 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015c56:	7dfb      	ldrb	r3, [r7, #23]
 8015c58:	3301      	adds	r3, #1
 8015c5a:	75fb      	strb	r3, [r7, #23]
 8015c5c:	7dfb      	ldrb	r3, [r7, #23]
 8015c5e:	2b09      	cmp	r3, #9
 8015c60:	d9ca      	bls.n	8015bf8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015c62:	68ba      	ldr	r2, [r7, #8]
 8015c64:	69b9      	ldr	r1, [r7, #24]
 8015c66:	68f8      	ldr	r0, [r7, #12]
 8015c68:	f000 f822 	bl	8015cb0 <etharp_query>
 8015c6c:	4603      	mov	r3, r0
 8015c6e:	e00b      	b.n	8015c88 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8015c76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015c7a:	9300      	str	r3, [sp, #0]
 8015c7c:	69fb      	ldr	r3, [r7, #28]
 8015c7e:	68b9      	ldr	r1, [r7, #8]
 8015c80:	68f8      	ldr	r0, [r7, #12]
 8015c82:	f001 fe9d 	bl	80179c0 <ethernet_output>
 8015c86:	4603      	mov	r3, r0
}
 8015c88:	4618      	mov	r0, r3
 8015c8a:	3720      	adds	r7, #32
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	bd80      	pop	{r7, pc}
 8015c90:	0801e370 	.word	0x0801e370
 8015c94:	0801e4c0 	.word	0x0801e4c0
 8015c98:	0801e3e8 	.word	0x0801e3e8
 8015c9c:	0801e510 	.word	0x0801e510
 8015ca0:	0801e4b0 	.word	0x0801e4b0
 8015ca4:	0801ec94 	.word	0x0801ec94
 8015ca8:	2000878c 	.word	0x2000878c
 8015cac:	2000869c 	.word	0x2000869c

08015cb0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015cb0:	b580      	push	{r7, lr}
 8015cb2:	b08c      	sub	sp, #48	; 0x30
 8015cb4:	af02      	add	r7, sp, #8
 8015cb6:	60f8      	str	r0, [r7, #12]
 8015cb8:	60b9      	str	r1, [r7, #8]
 8015cba:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	332a      	adds	r3, #42	; 0x2a
 8015cc0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015cc2:	23ff      	movs	r3, #255	; 0xff
 8015cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015cc8:	2300      	movs	r3, #0
 8015cca:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015ccc:	68bb      	ldr	r3, [r7, #8]
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	68f9      	ldr	r1, [r7, #12]
 8015cd2:	4618      	mov	r0, r3
 8015cd4:	f000 fe2a 	bl	801692c <ip4_addr_isbroadcast_u32>
 8015cd8:	4603      	mov	r3, r0
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d10c      	bne.n	8015cf8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015cde:	68bb      	ldr	r3, [r7, #8]
 8015ce0:	681b      	ldr	r3, [r3, #0]
 8015ce2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015ce6:	2be0      	cmp	r3, #224	; 0xe0
 8015ce8:	d006      	beq.n	8015cf8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015cea:	68bb      	ldr	r3, [r7, #8]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d003      	beq.n	8015cf8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015cf0:	68bb      	ldr	r3, [r7, #8]
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d102      	bne.n	8015cfe <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015cf8:	f06f 030f 	mvn.w	r3, #15
 8015cfc:	e102      	b.n	8015f04 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015cfe:	68fa      	ldr	r2, [r7, #12]
 8015d00:	2101      	movs	r1, #1
 8015d02:	68b8      	ldr	r0, [r7, #8]
 8015d04:	f7ff fb5c 	bl	80153c0 <etharp_find_entry>
 8015d08:	4603      	mov	r3, r0
 8015d0a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015d0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	da02      	bge.n	8015d1a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015d14:	8a7b      	ldrh	r3, [r7, #18]
 8015d16:	b25b      	sxtb	r3, r3
 8015d18:	e0f4      	b.n	8015f04 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015d1a:	8a7b      	ldrh	r3, [r7, #18]
 8015d1c:	2b7e      	cmp	r3, #126	; 0x7e
 8015d1e:	d906      	bls.n	8015d2e <etharp_query+0x7e>
 8015d20:	4b7a      	ldr	r3, [pc, #488]	; (8015f0c <etharp_query+0x25c>)
 8015d22:	f240 32c1 	movw	r2, #961	; 0x3c1
 8015d26:	497a      	ldr	r1, [pc, #488]	; (8015f10 <etharp_query+0x260>)
 8015d28:	487a      	ldr	r0, [pc, #488]	; (8015f14 <etharp_query+0x264>)
 8015d2a:	f003 ff79 	bl	8019c20 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015d2e:	8a7b      	ldrh	r3, [r7, #18]
 8015d30:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015d32:	7c7a      	ldrb	r2, [r7, #17]
 8015d34:	4978      	ldr	r1, [pc, #480]	; (8015f18 <etharp_query+0x268>)
 8015d36:	4613      	mov	r3, r2
 8015d38:	005b      	lsls	r3, r3, #1
 8015d3a:	4413      	add	r3, r2
 8015d3c:	00db      	lsls	r3, r3, #3
 8015d3e:	440b      	add	r3, r1
 8015d40:	3314      	adds	r3, #20
 8015d42:	781b      	ldrb	r3, [r3, #0]
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d115      	bne.n	8015d74 <etharp_query+0xc4>
    is_new_entry = 1;
 8015d48:	2301      	movs	r3, #1
 8015d4a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015d4c:	7c7a      	ldrb	r2, [r7, #17]
 8015d4e:	4972      	ldr	r1, [pc, #456]	; (8015f18 <etharp_query+0x268>)
 8015d50:	4613      	mov	r3, r2
 8015d52:	005b      	lsls	r3, r3, #1
 8015d54:	4413      	add	r3, r2
 8015d56:	00db      	lsls	r3, r3, #3
 8015d58:	440b      	add	r3, r1
 8015d5a:	3314      	adds	r3, #20
 8015d5c:	2201      	movs	r2, #1
 8015d5e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015d60:	7c7a      	ldrb	r2, [r7, #17]
 8015d62:	496d      	ldr	r1, [pc, #436]	; (8015f18 <etharp_query+0x268>)
 8015d64:	4613      	mov	r3, r2
 8015d66:	005b      	lsls	r3, r3, #1
 8015d68:	4413      	add	r3, r2
 8015d6a:	00db      	lsls	r3, r3, #3
 8015d6c:	440b      	add	r3, r1
 8015d6e:	3308      	adds	r3, #8
 8015d70:	68fa      	ldr	r2, [r7, #12]
 8015d72:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015d74:	7c7a      	ldrb	r2, [r7, #17]
 8015d76:	4968      	ldr	r1, [pc, #416]	; (8015f18 <etharp_query+0x268>)
 8015d78:	4613      	mov	r3, r2
 8015d7a:	005b      	lsls	r3, r3, #1
 8015d7c:	4413      	add	r3, r2
 8015d7e:	00db      	lsls	r3, r3, #3
 8015d80:	440b      	add	r3, r1
 8015d82:	3314      	adds	r3, #20
 8015d84:	781b      	ldrb	r3, [r3, #0]
 8015d86:	2b01      	cmp	r3, #1
 8015d88:	d011      	beq.n	8015dae <etharp_query+0xfe>
 8015d8a:	7c7a      	ldrb	r2, [r7, #17]
 8015d8c:	4962      	ldr	r1, [pc, #392]	; (8015f18 <etharp_query+0x268>)
 8015d8e:	4613      	mov	r3, r2
 8015d90:	005b      	lsls	r3, r3, #1
 8015d92:	4413      	add	r3, r2
 8015d94:	00db      	lsls	r3, r3, #3
 8015d96:	440b      	add	r3, r1
 8015d98:	3314      	adds	r3, #20
 8015d9a:	781b      	ldrb	r3, [r3, #0]
 8015d9c:	2b01      	cmp	r3, #1
 8015d9e:	d806      	bhi.n	8015dae <etharp_query+0xfe>
 8015da0:	4b5a      	ldr	r3, [pc, #360]	; (8015f0c <etharp_query+0x25c>)
 8015da2:	f240 32cf 	movw	r2, #975	; 0x3cf
 8015da6:	495d      	ldr	r1, [pc, #372]	; (8015f1c <etharp_query+0x26c>)
 8015da8:	485a      	ldr	r0, [pc, #360]	; (8015f14 <etharp_query+0x264>)
 8015daa:	f003 ff39 	bl	8019c20 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015dae:	6a3b      	ldr	r3, [r7, #32]
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d102      	bne.n	8015dba <etharp_query+0x10a>
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d10c      	bne.n	8015dd4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015dba:	68b9      	ldr	r1, [r7, #8]
 8015dbc:	68f8      	ldr	r0, [r7, #12]
 8015dbe:	f000 f963 	bl	8016088 <etharp_request>
 8015dc2:	4603      	mov	r3, r0
 8015dc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d102      	bne.n	8015dd4 <etharp_query+0x124>
      return result;
 8015dce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015dd2:	e097      	b.n	8015f04 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d106      	bne.n	8015de8 <etharp_query+0x138>
 8015dda:	4b4c      	ldr	r3, [pc, #304]	; (8015f0c <etharp_query+0x25c>)
 8015ddc:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015de0:	494f      	ldr	r1, [pc, #316]	; (8015f20 <etharp_query+0x270>)
 8015de2:	484c      	ldr	r0, [pc, #304]	; (8015f14 <etharp_query+0x264>)
 8015de4:	f003 ff1c 	bl	8019c20 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015de8:	7c7a      	ldrb	r2, [r7, #17]
 8015dea:	494b      	ldr	r1, [pc, #300]	; (8015f18 <etharp_query+0x268>)
 8015dec:	4613      	mov	r3, r2
 8015dee:	005b      	lsls	r3, r3, #1
 8015df0:	4413      	add	r3, r2
 8015df2:	00db      	lsls	r3, r3, #3
 8015df4:	440b      	add	r3, r1
 8015df6:	3314      	adds	r3, #20
 8015df8:	781b      	ldrb	r3, [r3, #0]
 8015dfa:	2b01      	cmp	r3, #1
 8015dfc:	d918      	bls.n	8015e30 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015dfe:	4a49      	ldr	r2, [pc, #292]	; (8015f24 <etharp_query+0x274>)
 8015e00:	7c7b      	ldrb	r3, [r7, #17]
 8015e02:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015e04:	7c7a      	ldrb	r2, [r7, #17]
 8015e06:	4613      	mov	r3, r2
 8015e08:	005b      	lsls	r3, r3, #1
 8015e0a:	4413      	add	r3, r2
 8015e0c:	00db      	lsls	r3, r3, #3
 8015e0e:	3308      	adds	r3, #8
 8015e10:	4a41      	ldr	r2, [pc, #260]	; (8015f18 <etharp_query+0x268>)
 8015e12:	4413      	add	r3, r2
 8015e14:	1d1a      	adds	r2, r3, #4
 8015e16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015e1a:	9300      	str	r3, [sp, #0]
 8015e1c:	4613      	mov	r3, r2
 8015e1e:	697a      	ldr	r2, [r7, #20]
 8015e20:	6879      	ldr	r1, [r7, #4]
 8015e22:	68f8      	ldr	r0, [r7, #12]
 8015e24:	f001 fdcc 	bl	80179c0 <ethernet_output>
 8015e28:	4603      	mov	r3, r0
 8015e2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015e2e:	e067      	b.n	8015f00 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015e30:	7c7a      	ldrb	r2, [r7, #17]
 8015e32:	4939      	ldr	r1, [pc, #228]	; (8015f18 <etharp_query+0x268>)
 8015e34:	4613      	mov	r3, r2
 8015e36:	005b      	lsls	r3, r3, #1
 8015e38:	4413      	add	r3, r2
 8015e3a:	00db      	lsls	r3, r3, #3
 8015e3c:	440b      	add	r3, r1
 8015e3e:	3314      	adds	r3, #20
 8015e40:	781b      	ldrb	r3, [r3, #0]
 8015e42:	2b01      	cmp	r3, #1
 8015e44:	d15c      	bne.n	8015f00 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015e46:	2300      	movs	r3, #0
 8015e48:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015e4e:	e01c      	b.n	8015e8a <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015e50:	69fb      	ldr	r3, [r7, #28]
 8015e52:	895a      	ldrh	r2, [r3, #10]
 8015e54:	69fb      	ldr	r3, [r7, #28]
 8015e56:	891b      	ldrh	r3, [r3, #8]
 8015e58:	429a      	cmp	r2, r3
 8015e5a:	d10a      	bne.n	8015e72 <etharp_query+0x1c2>
 8015e5c:	69fb      	ldr	r3, [r7, #28]
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d006      	beq.n	8015e72 <etharp_query+0x1c2>
 8015e64:	4b29      	ldr	r3, [pc, #164]	; (8015f0c <etharp_query+0x25c>)
 8015e66:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015e6a:	492f      	ldr	r1, [pc, #188]	; (8015f28 <etharp_query+0x278>)
 8015e6c:	4829      	ldr	r0, [pc, #164]	; (8015f14 <etharp_query+0x264>)
 8015e6e:	f003 fed7 	bl	8019c20 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015e72:	69fb      	ldr	r3, [r7, #28]
 8015e74:	7b1b      	ldrb	r3, [r3, #12]
 8015e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d002      	beq.n	8015e84 <etharp_query+0x1d4>
        copy_needed = 1;
 8015e7e:	2301      	movs	r3, #1
 8015e80:	61bb      	str	r3, [r7, #24]
        break;
 8015e82:	e005      	b.n	8015e90 <etharp_query+0x1e0>
      }
      p = p->next;
 8015e84:	69fb      	ldr	r3, [r7, #28]
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015e8a:	69fb      	ldr	r3, [r7, #28]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d1df      	bne.n	8015e50 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8015e90:	69bb      	ldr	r3, [r7, #24]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d007      	beq.n	8015ea6 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015e96:	687a      	ldr	r2, [r7, #4]
 8015e98:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015e9c:	200e      	movs	r0, #14
 8015e9e:	f7f6 fbab 	bl	800c5f8 <pbuf_clone>
 8015ea2:	61f8      	str	r0, [r7, #28]
 8015ea4:	e004      	b.n	8015eb0 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015eaa:	69f8      	ldr	r0, [r7, #28]
 8015eac:	f7f6 f9d2 	bl	800c254 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015eb0:	69fb      	ldr	r3, [r7, #28]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d021      	beq.n	8015efa <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015eb6:	7c7a      	ldrb	r2, [r7, #17]
 8015eb8:	4917      	ldr	r1, [pc, #92]	; (8015f18 <etharp_query+0x268>)
 8015eba:	4613      	mov	r3, r2
 8015ebc:	005b      	lsls	r3, r3, #1
 8015ebe:	4413      	add	r3, r2
 8015ec0:	00db      	lsls	r3, r3, #3
 8015ec2:	440b      	add	r3, r1
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d00a      	beq.n	8015ee0 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015eca:	7c7a      	ldrb	r2, [r7, #17]
 8015ecc:	4912      	ldr	r1, [pc, #72]	; (8015f18 <etharp_query+0x268>)
 8015ece:	4613      	mov	r3, r2
 8015ed0:	005b      	lsls	r3, r3, #1
 8015ed2:	4413      	add	r3, r2
 8015ed4:	00db      	lsls	r3, r3, #3
 8015ed6:	440b      	add	r3, r1
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	4618      	mov	r0, r3
 8015edc:	f7f6 f914 	bl	800c108 <pbuf_free>
      }
      arp_table[i].q = p;
 8015ee0:	7c7a      	ldrb	r2, [r7, #17]
 8015ee2:	490d      	ldr	r1, [pc, #52]	; (8015f18 <etharp_query+0x268>)
 8015ee4:	4613      	mov	r3, r2
 8015ee6:	005b      	lsls	r3, r3, #1
 8015ee8:	4413      	add	r3, r2
 8015eea:	00db      	lsls	r3, r3, #3
 8015eec:	440b      	add	r3, r1
 8015eee:	69fa      	ldr	r2, [r7, #28]
 8015ef0:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015ef2:	2300      	movs	r3, #0
 8015ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015ef8:	e002      	b.n	8015f00 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015efa:	23ff      	movs	r3, #255	; 0xff
 8015efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015f00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015f04:	4618      	mov	r0, r3
 8015f06:	3728      	adds	r7, #40	; 0x28
 8015f08:	46bd      	mov	sp, r7
 8015f0a:	bd80      	pop	{r7, pc}
 8015f0c:	0801e370 	.word	0x0801e370
 8015f10:	0801e51c 	.word	0x0801e51c
 8015f14:	0801e3e8 	.word	0x0801e3e8
 8015f18:	2000869c 	.word	0x2000869c
 8015f1c:	0801e52c 	.word	0x0801e52c
 8015f20:	0801e510 	.word	0x0801e510
 8015f24:	2000878c 	.word	0x2000878c
 8015f28:	0801e554 	.word	0x0801e554

08015f2c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b08a      	sub	sp, #40	; 0x28
 8015f30:	af02      	add	r7, sp, #8
 8015f32:	60f8      	str	r0, [r7, #12]
 8015f34:	60b9      	str	r1, [r7, #8]
 8015f36:	607a      	str	r2, [r7, #4]
 8015f38:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d106      	bne.n	8015f52 <etharp_raw+0x26>
 8015f44:	4b3a      	ldr	r3, [pc, #232]	; (8016030 <etharp_raw+0x104>)
 8015f46:	f240 4257 	movw	r2, #1111	; 0x457
 8015f4a:	493a      	ldr	r1, [pc, #232]	; (8016034 <etharp_raw+0x108>)
 8015f4c:	483a      	ldr	r0, [pc, #232]	; (8016038 <etharp_raw+0x10c>)
 8015f4e:	f003 fe67 	bl	8019c20 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015f52:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015f56:	211c      	movs	r1, #28
 8015f58:	200e      	movs	r0, #14
 8015f5a:	f7f5 fdc3 	bl	800bae4 <pbuf_alloc>
 8015f5e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015f60:	69bb      	ldr	r3, [r7, #24]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d102      	bne.n	8015f6c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015f66:	f04f 33ff 	mov.w	r3, #4294967295
 8015f6a:	e05d      	b.n	8016028 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015f6c:	69bb      	ldr	r3, [r7, #24]
 8015f6e:	895b      	ldrh	r3, [r3, #10]
 8015f70:	2b1b      	cmp	r3, #27
 8015f72:	d806      	bhi.n	8015f82 <etharp_raw+0x56>
 8015f74:	4b2e      	ldr	r3, [pc, #184]	; (8016030 <etharp_raw+0x104>)
 8015f76:	f240 4263 	movw	r2, #1123	; 0x463
 8015f7a:	4930      	ldr	r1, [pc, #192]	; (801603c <etharp_raw+0x110>)
 8015f7c:	482e      	ldr	r0, [pc, #184]	; (8016038 <etharp_raw+0x10c>)
 8015f7e:	f003 fe4f 	bl	8019c20 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015f82:	69bb      	ldr	r3, [r7, #24]
 8015f84:	685b      	ldr	r3, [r3, #4]
 8015f86:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015f88:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	f7f4 fcd6 	bl	800a93c <lwip_htons>
 8015f90:	4603      	mov	r3, r0
 8015f92:	461a      	mov	r2, r3
 8015f94:	697b      	ldr	r3, [r7, #20]
 8015f96:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015f9e:	2b06      	cmp	r3, #6
 8015fa0:	d006      	beq.n	8015fb0 <etharp_raw+0x84>
 8015fa2:	4b23      	ldr	r3, [pc, #140]	; (8016030 <etharp_raw+0x104>)
 8015fa4:	f240 426a 	movw	r2, #1130	; 0x46a
 8015fa8:	4925      	ldr	r1, [pc, #148]	; (8016040 <etharp_raw+0x114>)
 8015faa:	4823      	ldr	r0, [pc, #140]	; (8016038 <etharp_raw+0x10c>)
 8015fac:	f003 fe38 	bl	8019c20 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015fb0:	697b      	ldr	r3, [r7, #20]
 8015fb2:	3308      	adds	r3, #8
 8015fb4:	2206      	movs	r2, #6
 8015fb6:	6839      	ldr	r1, [r7, #0]
 8015fb8:	4618      	mov	r0, r3
 8015fba:	f003 fe1e 	bl	8019bfa <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015fbe:	697b      	ldr	r3, [r7, #20]
 8015fc0:	3312      	adds	r3, #18
 8015fc2:	2206      	movs	r2, #6
 8015fc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	f003 fe17 	bl	8019bfa <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015fcc:	697b      	ldr	r3, [r7, #20]
 8015fce:	330e      	adds	r3, #14
 8015fd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015fd2:	6812      	ldr	r2, [r2, #0]
 8015fd4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015fd6:	697b      	ldr	r3, [r7, #20]
 8015fd8:	3318      	adds	r3, #24
 8015fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015fdc:	6812      	ldr	r2, [r2, #0]
 8015fde:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015fe0:	697b      	ldr	r3, [r7, #20]
 8015fe2:	2200      	movs	r2, #0
 8015fe4:	701a      	strb	r2, [r3, #0]
 8015fe6:	2200      	movs	r2, #0
 8015fe8:	f042 0201 	orr.w	r2, r2, #1
 8015fec:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015fee:	697b      	ldr	r3, [r7, #20]
 8015ff0:	2200      	movs	r2, #0
 8015ff2:	f042 0208 	orr.w	r2, r2, #8
 8015ff6:	709a      	strb	r2, [r3, #2]
 8015ff8:	2200      	movs	r2, #0
 8015ffa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015ffc:	697b      	ldr	r3, [r7, #20]
 8015ffe:	2206      	movs	r2, #6
 8016000:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016002:	697b      	ldr	r3, [r7, #20]
 8016004:	2204      	movs	r2, #4
 8016006:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016008:	f640 0306 	movw	r3, #2054	; 0x806
 801600c:	9300      	str	r3, [sp, #0]
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	68ba      	ldr	r2, [r7, #8]
 8016012:	69b9      	ldr	r1, [r7, #24]
 8016014:	68f8      	ldr	r0, [r7, #12]
 8016016:	f001 fcd3 	bl	80179c0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801601a:	69b8      	ldr	r0, [r7, #24]
 801601c:	f7f6 f874 	bl	800c108 <pbuf_free>
  p = NULL;
 8016020:	2300      	movs	r3, #0
 8016022:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016024:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016028:	4618      	mov	r0, r3
 801602a:	3720      	adds	r7, #32
 801602c:	46bd      	mov	sp, r7
 801602e:	bd80      	pop	{r7, pc}
 8016030:	0801e370 	.word	0x0801e370
 8016034:	0801e4c0 	.word	0x0801e4c0
 8016038:	0801e3e8 	.word	0x0801e3e8
 801603c:	0801e570 	.word	0x0801e570
 8016040:	0801e5a4 	.word	0x0801e5a4

08016044 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016044:	b580      	push	{r7, lr}
 8016046:	b088      	sub	sp, #32
 8016048:	af04      	add	r7, sp, #16
 801604a:	60f8      	str	r0, [r7, #12]
 801604c:	60b9      	str	r1, [r7, #8]
 801604e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016060:	2201      	movs	r2, #1
 8016062:	9203      	str	r2, [sp, #12]
 8016064:	68ba      	ldr	r2, [r7, #8]
 8016066:	9202      	str	r2, [sp, #8]
 8016068:	4a06      	ldr	r2, [pc, #24]	; (8016084 <etharp_request_dst+0x40>)
 801606a:	9201      	str	r2, [sp, #4]
 801606c:	9300      	str	r3, [sp, #0]
 801606e:	4603      	mov	r3, r0
 8016070:	687a      	ldr	r2, [r7, #4]
 8016072:	68f8      	ldr	r0, [r7, #12]
 8016074:	f7ff ff5a 	bl	8015f2c <etharp_raw>
 8016078:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801607a:	4618      	mov	r0, r3
 801607c:	3710      	adds	r7, #16
 801607e:	46bd      	mov	sp, r7
 8016080:	bd80      	pop	{r7, pc}
 8016082:	bf00      	nop
 8016084:	0801ec9c 	.word	0x0801ec9c

08016088 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b082      	sub	sp, #8
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
 8016090:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016092:	4a05      	ldr	r2, [pc, #20]	; (80160a8 <etharp_request+0x20>)
 8016094:	6839      	ldr	r1, [r7, #0]
 8016096:	6878      	ldr	r0, [r7, #4]
 8016098:	f7ff ffd4 	bl	8016044 <etharp_request_dst>
 801609c:	4603      	mov	r3, r0
}
 801609e:	4618      	mov	r0, r3
 80160a0:	3708      	adds	r7, #8
 80160a2:	46bd      	mov	sp, r7
 80160a4:	bd80      	pop	{r7, pc}
 80160a6:	bf00      	nop
 80160a8:	0801ec94 	.word	0x0801ec94

080160ac <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b08e      	sub	sp, #56	; 0x38
 80160b0:	af04      	add	r7, sp, #16
 80160b2:	6078      	str	r0, [r7, #4]
 80160b4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80160b6:	4b79      	ldr	r3, [pc, #484]	; (801629c <icmp_input+0x1f0>)
 80160b8:	689b      	ldr	r3, [r3, #8]
 80160ba:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80160bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160be:	781b      	ldrb	r3, [r3, #0]
 80160c0:	f003 030f 	and.w	r3, r3, #15
 80160c4:	b2db      	uxtb	r3, r3
 80160c6:	009b      	lsls	r3, r3, #2
 80160c8:	b2db      	uxtb	r3, r3
 80160ca:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80160cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80160ce:	2b13      	cmp	r3, #19
 80160d0:	f240 80cd 	bls.w	801626e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	895b      	ldrh	r3, [r3, #10]
 80160d8:	2b03      	cmp	r3, #3
 80160da:	f240 80ca 	bls.w	8016272 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	685b      	ldr	r3, [r3, #4]
 80160e2:	781b      	ldrb	r3, [r3, #0]
 80160e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80160e8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	f000 80b7 	beq.w	8016260 <icmp_input+0x1b4>
 80160f2:	2b08      	cmp	r3, #8
 80160f4:	f040 80b7 	bne.w	8016266 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80160f8:	4b69      	ldr	r3, [pc, #420]	; (80162a0 <icmp_input+0x1f4>)
 80160fa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80160fc:	4b67      	ldr	r3, [pc, #412]	; (801629c <icmp_input+0x1f0>)
 80160fe:	695b      	ldr	r3, [r3, #20]
 8016100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016104:	2be0      	cmp	r3, #224	; 0xe0
 8016106:	f000 80bb 	beq.w	8016280 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801610a:	4b64      	ldr	r3, [pc, #400]	; (801629c <icmp_input+0x1f0>)
 801610c:	695a      	ldr	r2, [r3, #20]
 801610e:	4b63      	ldr	r3, [pc, #396]	; (801629c <icmp_input+0x1f0>)
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	4619      	mov	r1, r3
 8016114:	4610      	mov	r0, r2
 8016116:	f000 fc09 	bl	801692c <ip4_addr_isbroadcast_u32>
 801611a:	4603      	mov	r3, r0
 801611c:	2b00      	cmp	r3, #0
 801611e:	f040 80b1 	bne.w	8016284 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	891b      	ldrh	r3, [r3, #8]
 8016126:	2b07      	cmp	r3, #7
 8016128:	f240 80a5 	bls.w	8016276 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801612c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801612e:	330e      	adds	r3, #14
 8016130:	4619      	mov	r1, r3
 8016132:	6878      	ldr	r0, [r7, #4]
 8016134:	f7f5 ff20 	bl	800bf78 <pbuf_add_header>
 8016138:	4603      	mov	r3, r0
 801613a:	2b00      	cmp	r3, #0
 801613c:	d04b      	beq.n	80161d6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	891a      	ldrh	r2, [r3, #8]
 8016142:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016144:	4413      	add	r3, r2
 8016146:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	891b      	ldrh	r3, [r3, #8]
 801614c:	8b7a      	ldrh	r2, [r7, #26]
 801614e:	429a      	cmp	r2, r3
 8016150:	f0c0 809a 	bcc.w	8016288 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016154:	8b7b      	ldrh	r3, [r7, #26]
 8016156:	f44f 7220 	mov.w	r2, #640	; 0x280
 801615a:	4619      	mov	r1, r3
 801615c:	200e      	movs	r0, #14
 801615e:	f7f5 fcc1 	bl	800bae4 <pbuf_alloc>
 8016162:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016164:	697b      	ldr	r3, [r7, #20]
 8016166:	2b00      	cmp	r3, #0
 8016168:	f000 8090 	beq.w	801628c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801616c:	697b      	ldr	r3, [r7, #20]
 801616e:	895b      	ldrh	r3, [r3, #10]
 8016170:	461a      	mov	r2, r3
 8016172:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016174:	3308      	adds	r3, #8
 8016176:	429a      	cmp	r2, r3
 8016178:	d203      	bcs.n	8016182 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801617a:	6978      	ldr	r0, [r7, #20]
 801617c:	f7f5 ffc4 	bl	800c108 <pbuf_free>
          goto icmperr;
 8016180:	e085      	b.n	801628e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8016182:	697b      	ldr	r3, [r7, #20]
 8016184:	685b      	ldr	r3, [r3, #4]
 8016186:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016188:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801618a:	4618      	mov	r0, r3
 801618c:	f003 fd35 	bl	8019bfa <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016190:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016192:	4619      	mov	r1, r3
 8016194:	6978      	ldr	r0, [r7, #20]
 8016196:	f7f5 feff 	bl	800bf98 <pbuf_remove_header>
 801619a:	4603      	mov	r3, r0
 801619c:	2b00      	cmp	r3, #0
 801619e:	d009      	beq.n	80161b4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80161a0:	4b40      	ldr	r3, [pc, #256]	; (80162a4 <icmp_input+0x1f8>)
 80161a2:	22b6      	movs	r2, #182	; 0xb6
 80161a4:	4940      	ldr	r1, [pc, #256]	; (80162a8 <icmp_input+0x1fc>)
 80161a6:	4841      	ldr	r0, [pc, #260]	; (80162ac <icmp_input+0x200>)
 80161a8:	f003 fd3a 	bl	8019c20 <iprintf>
          pbuf_free(r);
 80161ac:	6978      	ldr	r0, [r7, #20]
 80161ae:	f7f5 ffab 	bl	800c108 <pbuf_free>
          goto icmperr;
 80161b2:	e06c      	b.n	801628e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80161b4:	6879      	ldr	r1, [r7, #4]
 80161b6:	6978      	ldr	r0, [r7, #20]
 80161b8:	f7f6 f8da 	bl	800c370 <pbuf_copy>
 80161bc:	4603      	mov	r3, r0
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d003      	beq.n	80161ca <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80161c2:	6978      	ldr	r0, [r7, #20]
 80161c4:	f7f5 ffa0 	bl	800c108 <pbuf_free>
          goto icmperr;
 80161c8:	e061      	b.n	801628e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80161ca:	6878      	ldr	r0, [r7, #4]
 80161cc:	f7f5 ff9c 	bl	800c108 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80161d0:	697b      	ldr	r3, [r7, #20]
 80161d2:	607b      	str	r3, [r7, #4]
 80161d4:	e00f      	b.n	80161f6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80161d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80161d8:	330e      	adds	r3, #14
 80161da:	4619      	mov	r1, r3
 80161dc:	6878      	ldr	r0, [r7, #4]
 80161de:	f7f5 fedb 	bl	800bf98 <pbuf_remove_header>
 80161e2:	4603      	mov	r3, r0
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d006      	beq.n	80161f6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80161e8:	4b2e      	ldr	r3, [pc, #184]	; (80162a4 <icmp_input+0x1f8>)
 80161ea:	22c7      	movs	r2, #199	; 0xc7
 80161ec:	4930      	ldr	r1, [pc, #192]	; (80162b0 <icmp_input+0x204>)
 80161ee:	482f      	ldr	r0, [pc, #188]	; (80162ac <icmp_input+0x200>)
 80161f0:	f003 fd16 	bl	8019c20 <iprintf>
          goto icmperr;
 80161f4:	e04b      	b.n	801628e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	685b      	ldr	r3, [r3, #4]
 80161fa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80161fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80161fe:	4619      	mov	r1, r3
 8016200:	6878      	ldr	r0, [r7, #4]
 8016202:	f7f5 feb9 	bl	800bf78 <pbuf_add_header>
 8016206:	4603      	mov	r3, r0
 8016208:	2b00      	cmp	r3, #0
 801620a:	d12b      	bne.n	8016264 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	685b      	ldr	r3, [r3, #4]
 8016210:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016212:	69fb      	ldr	r3, [r7, #28]
 8016214:	681a      	ldr	r2, [r3, #0]
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801621a:	4b20      	ldr	r3, [pc, #128]	; (801629c <icmp_input+0x1f0>)
 801621c:	691a      	ldr	r2, [r3, #16]
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016222:	693b      	ldr	r3, [r7, #16]
 8016224:	2200      	movs	r2, #0
 8016226:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016228:	693b      	ldr	r3, [r7, #16]
 801622a:	2200      	movs	r2, #0
 801622c:	709a      	strb	r2, [r3, #2]
 801622e:	2200      	movs	r2, #0
 8016230:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	22ff      	movs	r2, #255	; 0xff
 8016236:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	2200      	movs	r2, #0
 801623c:	729a      	strb	r2, [r3, #10]
 801623e:	2200      	movs	r2, #0
 8016240:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016242:	683b      	ldr	r3, [r7, #0]
 8016244:	9302      	str	r3, [sp, #8]
 8016246:	2301      	movs	r3, #1
 8016248:	9301      	str	r3, [sp, #4]
 801624a:	2300      	movs	r3, #0
 801624c:	9300      	str	r3, [sp, #0]
 801624e:	23ff      	movs	r3, #255	; 0xff
 8016250:	2200      	movs	r2, #0
 8016252:	69f9      	ldr	r1, [r7, #28]
 8016254:	6878      	ldr	r0, [r7, #4]
 8016256:	f000 fa91 	bl	801677c <ip4_output_if>
 801625a:	4603      	mov	r3, r0
 801625c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801625e:	e001      	b.n	8016264 <icmp_input+0x1b8>
      break;
 8016260:	bf00      	nop
 8016262:	e000      	b.n	8016266 <icmp_input+0x1ba>
      break;
 8016264:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016266:	6878      	ldr	r0, [r7, #4]
 8016268:	f7f5 ff4e 	bl	800c108 <pbuf_free>
  return;
 801626c:	e013      	b.n	8016296 <icmp_input+0x1ea>
    goto lenerr;
 801626e:	bf00      	nop
 8016270:	e002      	b.n	8016278 <icmp_input+0x1cc>
    goto lenerr;
 8016272:	bf00      	nop
 8016274:	e000      	b.n	8016278 <icmp_input+0x1cc>
        goto lenerr;
 8016276:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016278:	6878      	ldr	r0, [r7, #4]
 801627a:	f7f5 ff45 	bl	800c108 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801627e:	e00a      	b.n	8016296 <icmp_input+0x1ea>
        goto icmperr;
 8016280:	bf00      	nop
 8016282:	e004      	b.n	801628e <icmp_input+0x1e2>
        goto icmperr;
 8016284:	bf00      	nop
 8016286:	e002      	b.n	801628e <icmp_input+0x1e2>
          goto icmperr;
 8016288:	bf00      	nop
 801628a:	e000      	b.n	801628e <icmp_input+0x1e2>
          goto icmperr;
 801628c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801628e:	6878      	ldr	r0, [r7, #4]
 8016290:	f7f5 ff3a 	bl	800c108 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016294:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016296:	3728      	adds	r7, #40	; 0x28
 8016298:	46bd      	mov	sp, r7
 801629a:	bd80      	pop	{r7, pc}
 801629c:	2000c5e4 	.word	0x2000c5e4
 80162a0:	2000c5f8 	.word	0x2000c5f8
 80162a4:	0801e5e8 	.word	0x0801e5e8
 80162a8:	0801e620 	.word	0x0801e620
 80162ac:	0801e658 	.word	0x0801e658
 80162b0:	0801e680 	.word	0x0801e680

080162b4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b082      	sub	sp, #8
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	6078      	str	r0, [r7, #4]
 80162bc:	460b      	mov	r3, r1
 80162be:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80162c0:	78fb      	ldrb	r3, [r7, #3]
 80162c2:	461a      	mov	r2, r3
 80162c4:	2103      	movs	r1, #3
 80162c6:	6878      	ldr	r0, [r7, #4]
 80162c8:	f000 f814 	bl	80162f4 <icmp_send_response>
}
 80162cc:	bf00      	nop
 80162ce:	3708      	adds	r7, #8
 80162d0:	46bd      	mov	sp, r7
 80162d2:	bd80      	pop	{r7, pc}

080162d4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80162d4:	b580      	push	{r7, lr}
 80162d6:	b082      	sub	sp, #8
 80162d8:	af00      	add	r7, sp, #0
 80162da:	6078      	str	r0, [r7, #4]
 80162dc:	460b      	mov	r3, r1
 80162de:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80162e0:	78fb      	ldrb	r3, [r7, #3]
 80162e2:	461a      	mov	r2, r3
 80162e4:	210b      	movs	r1, #11
 80162e6:	6878      	ldr	r0, [r7, #4]
 80162e8:	f000 f804 	bl	80162f4 <icmp_send_response>
}
 80162ec:	bf00      	nop
 80162ee:	3708      	adds	r7, #8
 80162f0:	46bd      	mov	sp, r7
 80162f2:	bd80      	pop	{r7, pc}

080162f4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80162f4:	b580      	push	{r7, lr}
 80162f6:	b08c      	sub	sp, #48	; 0x30
 80162f8:	af04      	add	r7, sp, #16
 80162fa:	6078      	str	r0, [r7, #4]
 80162fc:	460b      	mov	r3, r1
 80162fe:	70fb      	strb	r3, [r7, #3]
 8016300:	4613      	mov	r3, r2
 8016302:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016304:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016308:	2124      	movs	r1, #36	; 0x24
 801630a:	2022      	movs	r0, #34	; 0x22
 801630c:	f7f5 fbea 	bl	800bae4 <pbuf_alloc>
 8016310:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016312:	69fb      	ldr	r3, [r7, #28]
 8016314:	2b00      	cmp	r3, #0
 8016316:	d04c      	beq.n	80163b2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016318:	69fb      	ldr	r3, [r7, #28]
 801631a:	895b      	ldrh	r3, [r3, #10]
 801631c:	2b23      	cmp	r3, #35	; 0x23
 801631e:	d806      	bhi.n	801632e <icmp_send_response+0x3a>
 8016320:	4b26      	ldr	r3, [pc, #152]	; (80163bc <icmp_send_response+0xc8>)
 8016322:	f240 1269 	movw	r2, #361	; 0x169
 8016326:	4926      	ldr	r1, [pc, #152]	; (80163c0 <icmp_send_response+0xcc>)
 8016328:	4826      	ldr	r0, [pc, #152]	; (80163c4 <icmp_send_response+0xd0>)
 801632a:	f003 fc79 	bl	8019c20 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	685b      	ldr	r3, [r3, #4]
 8016332:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016334:	69fb      	ldr	r3, [r7, #28]
 8016336:	685b      	ldr	r3, [r3, #4]
 8016338:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801633a:	697b      	ldr	r3, [r7, #20]
 801633c:	78fa      	ldrb	r2, [r7, #3]
 801633e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016340:	697b      	ldr	r3, [r7, #20]
 8016342:	78ba      	ldrb	r2, [r7, #2]
 8016344:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016346:	697b      	ldr	r3, [r7, #20]
 8016348:	2200      	movs	r2, #0
 801634a:	711a      	strb	r2, [r3, #4]
 801634c:	2200      	movs	r2, #0
 801634e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016350:	697b      	ldr	r3, [r7, #20]
 8016352:	2200      	movs	r2, #0
 8016354:	719a      	strb	r2, [r3, #6]
 8016356:	2200      	movs	r2, #0
 8016358:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801635a:	69fb      	ldr	r3, [r7, #28]
 801635c:	685b      	ldr	r3, [r3, #4]
 801635e:	f103 0008 	add.w	r0, r3, #8
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	685b      	ldr	r3, [r3, #4]
 8016366:	221c      	movs	r2, #28
 8016368:	4619      	mov	r1, r3
 801636a:	f003 fc46 	bl	8019bfa <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801636e:	69bb      	ldr	r3, [r7, #24]
 8016370:	68db      	ldr	r3, [r3, #12]
 8016372:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016374:	f107 030c 	add.w	r3, r7, #12
 8016378:	4618      	mov	r0, r3
 801637a:	f000 f825 	bl	80163c8 <ip4_route>
 801637e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016380:	693b      	ldr	r3, [r7, #16]
 8016382:	2b00      	cmp	r3, #0
 8016384:	d011      	beq.n	80163aa <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016386:	697b      	ldr	r3, [r7, #20]
 8016388:	2200      	movs	r2, #0
 801638a:	709a      	strb	r2, [r3, #2]
 801638c:	2200      	movs	r2, #0
 801638e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016390:	f107 020c 	add.w	r2, r7, #12
 8016394:	693b      	ldr	r3, [r7, #16]
 8016396:	9302      	str	r3, [sp, #8]
 8016398:	2301      	movs	r3, #1
 801639a:	9301      	str	r3, [sp, #4]
 801639c:	2300      	movs	r3, #0
 801639e:	9300      	str	r3, [sp, #0]
 80163a0:	23ff      	movs	r3, #255	; 0xff
 80163a2:	2100      	movs	r1, #0
 80163a4:	69f8      	ldr	r0, [r7, #28]
 80163a6:	f000 f9e9 	bl	801677c <ip4_output_if>
  }
  pbuf_free(q);
 80163aa:	69f8      	ldr	r0, [r7, #28]
 80163ac:	f7f5 feac 	bl	800c108 <pbuf_free>
 80163b0:	e000      	b.n	80163b4 <icmp_send_response+0xc0>
    return;
 80163b2:	bf00      	nop
}
 80163b4:	3720      	adds	r7, #32
 80163b6:	46bd      	mov	sp, r7
 80163b8:	bd80      	pop	{r7, pc}
 80163ba:	bf00      	nop
 80163bc:	0801e5e8 	.word	0x0801e5e8
 80163c0:	0801e6b4 	.word	0x0801e6b4
 80163c4:	0801e658 	.word	0x0801e658

080163c8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80163c8:	b480      	push	{r7}
 80163ca:	b085      	sub	sp, #20
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80163d0:	4b33      	ldr	r3, [pc, #204]	; (80164a0 <ip4_route+0xd8>)
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	60fb      	str	r3, [r7, #12]
 80163d6:	e036      	b.n	8016446 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80163de:	f003 0301 	and.w	r3, r3, #1
 80163e2:	b2db      	uxtb	r3, r3
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d02b      	beq.n	8016440 <ip4_route+0x78>
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80163ee:	089b      	lsrs	r3, r3, #2
 80163f0:	f003 0301 	and.w	r3, r3, #1
 80163f4:	b2db      	uxtb	r3, r3
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d022      	beq.n	8016440 <ip4_route+0x78>
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	3304      	adds	r3, #4
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d01d      	beq.n	8016440 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	681a      	ldr	r2, [r3, #0]
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	3304      	adds	r3, #4
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	405a      	eors	r2, r3
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	3308      	adds	r3, #8
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	4013      	ands	r3, r2
 8016418:	2b00      	cmp	r3, #0
 801641a:	d101      	bne.n	8016420 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	e038      	b.n	8016492 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016426:	f003 0302 	and.w	r3, r3, #2
 801642a:	2b00      	cmp	r3, #0
 801642c:	d108      	bne.n	8016440 <ip4_route+0x78>
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	681a      	ldr	r2, [r3, #0]
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	330c      	adds	r3, #12
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	429a      	cmp	r2, r3
 801643a:	d101      	bne.n	8016440 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	e028      	b.n	8016492 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	60fb      	str	r3, [r7, #12]
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	2b00      	cmp	r3, #0
 801644a:	d1c5      	bne.n	80163d8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801644c:	4b15      	ldr	r3, [pc, #84]	; (80164a4 <ip4_route+0xdc>)
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	2b00      	cmp	r3, #0
 8016452:	d01a      	beq.n	801648a <ip4_route+0xc2>
 8016454:	4b13      	ldr	r3, [pc, #76]	; (80164a4 <ip4_route+0xdc>)
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801645c:	f003 0301 	and.w	r3, r3, #1
 8016460:	2b00      	cmp	r3, #0
 8016462:	d012      	beq.n	801648a <ip4_route+0xc2>
 8016464:	4b0f      	ldr	r3, [pc, #60]	; (80164a4 <ip4_route+0xdc>)
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801646c:	f003 0304 	and.w	r3, r3, #4
 8016470:	2b00      	cmp	r3, #0
 8016472:	d00a      	beq.n	801648a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016474:	4b0b      	ldr	r3, [pc, #44]	; (80164a4 <ip4_route+0xdc>)
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	3304      	adds	r3, #4
 801647a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801647c:	2b00      	cmp	r3, #0
 801647e:	d004      	beq.n	801648a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	b2db      	uxtb	r3, r3
 8016486:	2b7f      	cmp	r3, #127	; 0x7f
 8016488:	d101      	bne.n	801648e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801648a:	2300      	movs	r3, #0
 801648c:	e001      	b.n	8016492 <ip4_route+0xca>
  }

  return netif_default;
 801648e:	4b05      	ldr	r3, [pc, #20]	; (80164a4 <ip4_route+0xdc>)
 8016490:	681b      	ldr	r3, [r3, #0]
}
 8016492:	4618      	mov	r0, r3
 8016494:	3714      	adds	r7, #20
 8016496:	46bd      	mov	sp, r7
 8016498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801649c:	4770      	bx	lr
 801649e:	bf00      	nop
 80164a0:	2000fd28 	.word	0x2000fd28
 80164a4:	2000fd2c 	.word	0x2000fd2c

080164a8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80164a8:	b580      	push	{r7, lr}
 80164aa:	b082      	sub	sp, #8
 80164ac:	af00      	add	r7, sp, #0
 80164ae:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80164b6:	f003 0301 	and.w	r3, r3, #1
 80164ba:	b2db      	uxtb	r3, r3
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d016      	beq.n	80164ee <ip4_input_accept+0x46>
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	3304      	adds	r3, #4
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d011      	beq.n	80164ee <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80164ca:	4b0b      	ldr	r3, [pc, #44]	; (80164f8 <ip4_input_accept+0x50>)
 80164cc:	695a      	ldr	r2, [r3, #20]
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	3304      	adds	r3, #4
 80164d2:	681b      	ldr	r3, [r3, #0]
 80164d4:	429a      	cmp	r2, r3
 80164d6:	d008      	beq.n	80164ea <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80164d8:	4b07      	ldr	r3, [pc, #28]	; (80164f8 <ip4_input_accept+0x50>)
 80164da:	695b      	ldr	r3, [r3, #20]
 80164dc:	6879      	ldr	r1, [r7, #4]
 80164de:	4618      	mov	r0, r3
 80164e0:	f000 fa24 	bl	801692c <ip4_addr_isbroadcast_u32>
 80164e4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d001      	beq.n	80164ee <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80164ea:	2301      	movs	r3, #1
 80164ec:	e000      	b.n	80164f0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80164ee:	2300      	movs	r3, #0
}
 80164f0:	4618      	mov	r0, r3
 80164f2:	3708      	adds	r7, #8
 80164f4:	46bd      	mov	sp, r7
 80164f6:	bd80      	pop	{r7, pc}
 80164f8:	2000c5e4 	.word	0x2000c5e4

080164fc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80164fc:	b580      	push	{r7, lr}
 80164fe:	b088      	sub	sp, #32
 8016500:	af00      	add	r7, sp, #0
 8016502:	6078      	str	r0, [r7, #4]
 8016504:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8016506:	2301      	movs	r3, #1
 8016508:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	685b      	ldr	r3, [r3, #4]
 801650e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8016510:	69fb      	ldr	r3, [r7, #28]
 8016512:	781b      	ldrb	r3, [r3, #0]
 8016514:	091b      	lsrs	r3, r3, #4
 8016516:	b2db      	uxtb	r3, r3
 8016518:	2b04      	cmp	r3, #4
 801651a:	d004      	beq.n	8016526 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801651c:	6878      	ldr	r0, [r7, #4]
 801651e:	f7f5 fdf3 	bl	800c108 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016522:	2300      	movs	r3, #0
 8016524:	e121      	b.n	801676a <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016526:	69fb      	ldr	r3, [r7, #28]
 8016528:	781b      	ldrb	r3, [r3, #0]
 801652a:	f003 030f 	and.w	r3, r3, #15
 801652e:	b2db      	uxtb	r3, r3
 8016530:	009b      	lsls	r3, r3, #2
 8016532:	b2db      	uxtb	r3, r3
 8016534:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016536:	69fb      	ldr	r3, [r7, #28]
 8016538:	885b      	ldrh	r3, [r3, #2]
 801653a:	b29b      	uxth	r3, r3
 801653c:	4618      	mov	r0, r3
 801653e:	f7f4 f9fd 	bl	800a93c <lwip_htons>
 8016542:	4603      	mov	r3, r0
 8016544:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	891b      	ldrh	r3, [r3, #8]
 801654a:	8a3a      	ldrh	r2, [r7, #16]
 801654c:	429a      	cmp	r2, r3
 801654e:	d204      	bcs.n	801655a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8016550:	8a3b      	ldrh	r3, [r7, #16]
 8016552:	4619      	mov	r1, r3
 8016554:	6878      	ldr	r0, [r7, #4]
 8016556:	f7f5 fc1f 	bl	800bd98 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	895b      	ldrh	r3, [r3, #10]
 801655e:	8a7a      	ldrh	r2, [r7, #18]
 8016560:	429a      	cmp	r2, r3
 8016562:	d807      	bhi.n	8016574 <ip4_input+0x78>
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	891b      	ldrh	r3, [r3, #8]
 8016568:	8a3a      	ldrh	r2, [r7, #16]
 801656a:	429a      	cmp	r2, r3
 801656c:	d802      	bhi.n	8016574 <ip4_input+0x78>
 801656e:	8a7b      	ldrh	r3, [r7, #18]
 8016570:	2b13      	cmp	r3, #19
 8016572:	d804      	bhi.n	801657e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016574:	6878      	ldr	r0, [r7, #4]
 8016576:	f7f5 fdc7 	bl	800c108 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801657a:	2300      	movs	r3, #0
 801657c:	e0f5      	b.n	801676a <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801657e:	69fb      	ldr	r3, [r7, #28]
 8016580:	691b      	ldr	r3, [r3, #16]
 8016582:	4a7c      	ldr	r2, [pc, #496]	; (8016774 <ip4_input+0x278>)
 8016584:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016586:	69fb      	ldr	r3, [r7, #28]
 8016588:	68db      	ldr	r3, [r3, #12]
 801658a:	4a7a      	ldr	r2, [pc, #488]	; (8016774 <ip4_input+0x278>)
 801658c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801658e:	4b79      	ldr	r3, [pc, #484]	; (8016774 <ip4_input+0x278>)
 8016590:	695b      	ldr	r3, [r3, #20]
 8016592:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016596:	2be0      	cmp	r3, #224	; 0xe0
 8016598:	d112      	bne.n	80165c0 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801659a:	683b      	ldr	r3, [r7, #0]
 801659c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80165a0:	f003 0301 	and.w	r3, r3, #1
 80165a4:	b2db      	uxtb	r3, r3
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d007      	beq.n	80165ba <ip4_input+0xbe>
 80165aa:	683b      	ldr	r3, [r7, #0]
 80165ac:	3304      	adds	r3, #4
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d002      	beq.n	80165ba <ip4_input+0xbe>
      netif = inp;
 80165b4:	683b      	ldr	r3, [r7, #0]
 80165b6:	61bb      	str	r3, [r7, #24]
 80165b8:	e02a      	b.n	8016610 <ip4_input+0x114>
    } else {
      netif = NULL;
 80165ba:	2300      	movs	r3, #0
 80165bc:	61bb      	str	r3, [r7, #24]
 80165be:	e027      	b.n	8016610 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80165c0:	6838      	ldr	r0, [r7, #0]
 80165c2:	f7ff ff71 	bl	80164a8 <ip4_input_accept>
 80165c6:	4603      	mov	r3, r0
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d002      	beq.n	80165d2 <ip4_input+0xd6>
      netif = inp;
 80165cc:	683b      	ldr	r3, [r7, #0]
 80165ce:	61bb      	str	r3, [r7, #24]
 80165d0:	e01e      	b.n	8016610 <ip4_input+0x114>
    } else {
      netif = NULL;
 80165d2:	2300      	movs	r3, #0
 80165d4:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80165d6:	4b67      	ldr	r3, [pc, #412]	; (8016774 <ip4_input+0x278>)
 80165d8:	695b      	ldr	r3, [r3, #20]
 80165da:	b2db      	uxtb	r3, r3
 80165dc:	2b7f      	cmp	r3, #127	; 0x7f
 80165de:	d017      	beq.n	8016610 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80165e0:	4b65      	ldr	r3, [pc, #404]	; (8016778 <ip4_input+0x27c>)
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	61bb      	str	r3, [r7, #24]
 80165e6:	e00e      	b.n	8016606 <ip4_input+0x10a>
          if (netif == inp) {
 80165e8:	69ba      	ldr	r2, [r7, #24]
 80165ea:	683b      	ldr	r3, [r7, #0]
 80165ec:	429a      	cmp	r2, r3
 80165ee:	d006      	beq.n	80165fe <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80165f0:	69b8      	ldr	r0, [r7, #24]
 80165f2:	f7ff ff59 	bl	80164a8 <ip4_input_accept>
 80165f6:	4603      	mov	r3, r0
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d108      	bne.n	801660e <ip4_input+0x112>
 80165fc:	e000      	b.n	8016600 <ip4_input+0x104>
            continue;
 80165fe:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016600:	69bb      	ldr	r3, [r7, #24]
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	61bb      	str	r3, [r7, #24]
 8016606:	69bb      	ldr	r3, [r7, #24]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d1ed      	bne.n	80165e8 <ip4_input+0xec>
 801660c:	e000      	b.n	8016610 <ip4_input+0x114>
            break;
 801660e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8016610:	69bb      	ldr	r3, [r7, #24]
 8016612:	2b00      	cmp	r3, #0
 8016614:	d111      	bne.n	801663a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8016616:	69fb      	ldr	r3, [r7, #28]
 8016618:	7a5b      	ldrb	r3, [r3, #9]
 801661a:	2b11      	cmp	r3, #17
 801661c:	d10d      	bne.n	801663a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801661e:	8a7b      	ldrh	r3, [r7, #18]
 8016620:	69fa      	ldr	r2, [r7, #28]
 8016622:	4413      	add	r3, r2
 8016624:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	885b      	ldrh	r3, [r3, #2]
 801662a:	b29b      	uxth	r3, r3
 801662c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8016630:	d103      	bne.n	801663a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8016632:	683b      	ldr	r3, [r7, #0]
 8016634:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8016636:	2300      	movs	r3, #0
 8016638:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801663a:	697b      	ldr	r3, [r7, #20]
 801663c:	2b00      	cmp	r3, #0
 801663e:	d017      	beq.n	8016670 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8016640:	4b4c      	ldr	r3, [pc, #304]	; (8016774 <ip4_input+0x278>)
 8016642:	691b      	ldr	r3, [r3, #16]
 8016644:	2b00      	cmp	r3, #0
 8016646:	d013      	beq.n	8016670 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016648:	4b4a      	ldr	r3, [pc, #296]	; (8016774 <ip4_input+0x278>)
 801664a:	691b      	ldr	r3, [r3, #16]
 801664c:	6839      	ldr	r1, [r7, #0]
 801664e:	4618      	mov	r0, r3
 8016650:	f000 f96c 	bl	801692c <ip4_addr_isbroadcast_u32>
 8016654:	4603      	mov	r3, r0
 8016656:	2b00      	cmp	r3, #0
 8016658:	d105      	bne.n	8016666 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801665a:	4b46      	ldr	r3, [pc, #280]	; (8016774 <ip4_input+0x278>)
 801665c:	691b      	ldr	r3, [r3, #16]
 801665e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016662:	2be0      	cmp	r3, #224	; 0xe0
 8016664:	d104      	bne.n	8016670 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016666:	6878      	ldr	r0, [r7, #4]
 8016668:	f7f5 fd4e 	bl	800c108 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801666c:	2300      	movs	r3, #0
 801666e:	e07c      	b.n	801676a <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016670:	69bb      	ldr	r3, [r7, #24]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d104      	bne.n	8016680 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016676:	6878      	ldr	r0, [r7, #4]
 8016678:	f7f5 fd46 	bl	800c108 <pbuf_free>
    return ERR_OK;
 801667c:	2300      	movs	r3, #0
 801667e:	e074      	b.n	801676a <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016680:	69fb      	ldr	r3, [r7, #28]
 8016682:	88db      	ldrh	r3, [r3, #6]
 8016684:	b29b      	uxth	r3, r3
 8016686:	461a      	mov	r2, r3
 8016688:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801668c:	4013      	ands	r3, r2
 801668e:	2b00      	cmp	r3, #0
 8016690:	d00b      	beq.n	80166aa <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016692:	6878      	ldr	r0, [r7, #4]
 8016694:	f000 fdd6 	bl	8017244 <ip4_reass>
 8016698:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	2b00      	cmp	r3, #0
 801669e:	d101      	bne.n	80166a4 <ip4_input+0x1a8>
      return ERR_OK;
 80166a0:	2300      	movs	r3, #0
 80166a2:	e062      	b.n	801676a <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	685b      	ldr	r3, [r3, #4]
 80166a8:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80166aa:	4a32      	ldr	r2, [pc, #200]	; (8016774 <ip4_input+0x278>)
 80166ac:	69bb      	ldr	r3, [r7, #24]
 80166ae:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80166b0:	4a30      	ldr	r2, [pc, #192]	; (8016774 <ip4_input+0x278>)
 80166b2:	683b      	ldr	r3, [r7, #0]
 80166b4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80166b6:	4a2f      	ldr	r2, [pc, #188]	; (8016774 <ip4_input+0x278>)
 80166b8:	69fb      	ldr	r3, [r7, #28]
 80166ba:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80166bc:	69fb      	ldr	r3, [r7, #28]
 80166be:	781b      	ldrb	r3, [r3, #0]
 80166c0:	f003 030f 	and.w	r3, r3, #15
 80166c4:	b2db      	uxtb	r3, r3
 80166c6:	009b      	lsls	r3, r3, #2
 80166c8:	b2db      	uxtb	r3, r3
 80166ca:	b29a      	uxth	r2, r3
 80166cc:	4b29      	ldr	r3, [pc, #164]	; (8016774 <ip4_input+0x278>)
 80166ce:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80166d0:	8a7b      	ldrh	r3, [r7, #18]
 80166d2:	4619      	mov	r1, r3
 80166d4:	6878      	ldr	r0, [r7, #4]
 80166d6:	f7f5 fc5f 	bl	800bf98 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80166da:	69fb      	ldr	r3, [r7, #28]
 80166dc:	7a5b      	ldrb	r3, [r3, #9]
 80166de:	2b06      	cmp	r3, #6
 80166e0:	d009      	beq.n	80166f6 <ip4_input+0x1fa>
 80166e2:	2b11      	cmp	r3, #17
 80166e4:	d002      	beq.n	80166ec <ip4_input+0x1f0>
 80166e6:	2b01      	cmp	r3, #1
 80166e8:	d00a      	beq.n	8016700 <ip4_input+0x204>
 80166ea:	e00e      	b.n	801670a <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80166ec:	6839      	ldr	r1, [r7, #0]
 80166ee:	6878      	ldr	r0, [r7, #4]
 80166f0:	f7fc fa16 	bl	8012b20 <udp_input>
        break;
 80166f4:	e026      	b.n	8016744 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80166f6:	6839      	ldr	r1, [r7, #0]
 80166f8:	6878      	ldr	r0, [r7, #4]
 80166fa:	f7f7 fdc3 	bl	800e284 <tcp_input>
        break;
 80166fe:	e021      	b.n	8016744 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016700:	6839      	ldr	r1, [r7, #0]
 8016702:	6878      	ldr	r0, [r7, #4]
 8016704:	f7ff fcd2 	bl	80160ac <icmp_input>
        break;
 8016708:	e01c      	b.n	8016744 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801670a:	4b1a      	ldr	r3, [pc, #104]	; (8016774 <ip4_input+0x278>)
 801670c:	695b      	ldr	r3, [r3, #20]
 801670e:	69b9      	ldr	r1, [r7, #24]
 8016710:	4618      	mov	r0, r3
 8016712:	f000 f90b 	bl	801692c <ip4_addr_isbroadcast_u32>
 8016716:	4603      	mov	r3, r0
 8016718:	2b00      	cmp	r3, #0
 801671a:	d10f      	bne.n	801673c <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801671c:	4b15      	ldr	r3, [pc, #84]	; (8016774 <ip4_input+0x278>)
 801671e:	695b      	ldr	r3, [r3, #20]
 8016720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016724:	2be0      	cmp	r3, #224	; 0xe0
 8016726:	d009      	beq.n	801673c <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016728:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801672c:	4619      	mov	r1, r3
 801672e:	6878      	ldr	r0, [r7, #4]
 8016730:	f7f5 fca5 	bl	800c07e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016734:	2102      	movs	r1, #2
 8016736:	6878      	ldr	r0, [r7, #4]
 8016738:	f7ff fdbc 	bl	80162b4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801673c:	6878      	ldr	r0, [r7, #4]
 801673e:	f7f5 fce3 	bl	800c108 <pbuf_free>
        break;
 8016742:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016744:	4b0b      	ldr	r3, [pc, #44]	; (8016774 <ip4_input+0x278>)
 8016746:	2200      	movs	r2, #0
 8016748:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801674a:	4b0a      	ldr	r3, [pc, #40]	; (8016774 <ip4_input+0x278>)
 801674c:	2200      	movs	r2, #0
 801674e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016750:	4b08      	ldr	r3, [pc, #32]	; (8016774 <ip4_input+0x278>)
 8016752:	2200      	movs	r2, #0
 8016754:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016756:	4b07      	ldr	r3, [pc, #28]	; (8016774 <ip4_input+0x278>)
 8016758:	2200      	movs	r2, #0
 801675a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801675c:	4b05      	ldr	r3, [pc, #20]	; (8016774 <ip4_input+0x278>)
 801675e:	2200      	movs	r2, #0
 8016760:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016762:	4b04      	ldr	r3, [pc, #16]	; (8016774 <ip4_input+0x278>)
 8016764:	2200      	movs	r2, #0
 8016766:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016768:	2300      	movs	r3, #0
}
 801676a:	4618      	mov	r0, r3
 801676c:	3720      	adds	r7, #32
 801676e:	46bd      	mov	sp, r7
 8016770:	bd80      	pop	{r7, pc}
 8016772:	bf00      	nop
 8016774:	2000c5e4 	.word	0x2000c5e4
 8016778:	2000fd28 	.word	0x2000fd28

0801677c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801677c:	b580      	push	{r7, lr}
 801677e:	b08a      	sub	sp, #40	; 0x28
 8016780:	af04      	add	r7, sp, #16
 8016782:	60f8      	str	r0, [r7, #12]
 8016784:	60b9      	str	r1, [r7, #8]
 8016786:	607a      	str	r2, [r7, #4]
 8016788:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801678a:	68bb      	ldr	r3, [r7, #8]
 801678c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d009      	beq.n	80167a8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016794:	68bb      	ldr	r3, [r7, #8]
 8016796:	2b00      	cmp	r3, #0
 8016798:	d003      	beq.n	80167a2 <ip4_output_if+0x26>
 801679a:	68bb      	ldr	r3, [r7, #8]
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d102      	bne.n	80167a8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80167a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167a4:	3304      	adds	r3, #4
 80167a6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80167a8:	78fa      	ldrb	r2, [r7, #3]
 80167aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167ac:	9302      	str	r3, [sp, #8]
 80167ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80167b2:	9301      	str	r3, [sp, #4]
 80167b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80167b8:	9300      	str	r3, [sp, #0]
 80167ba:	4613      	mov	r3, r2
 80167bc:	687a      	ldr	r2, [r7, #4]
 80167be:	6979      	ldr	r1, [r7, #20]
 80167c0:	68f8      	ldr	r0, [r7, #12]
 80167c2:	f000 f805 	bl	80167d0 <ip4_output_if_src>
 80167c6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80167c8:	4618      	mov	r0, r3
 80167ca:	3718      	adds	r7, #24
 80167cc:	46bd      	mov	sp, r7
 80167ce:	bd80      	pop	{r7, pc}

080167d0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b088      	sub	sp, #32
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	60f8      	str	r0, [r7, #12]
 80167d8:	60b9      	str	r1, [r7, #8]
 80167da:	607a      	str	r2, [r7, #4]
 80167dc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80167de:	68fb      	ldr	r3, [r7, #12]
 80167e0:	7b9b      	ldrb	r3, [r3, #14]
 80167e2:	2b01      	cmp	r3, #1
 80167e4:	d006      	beq.n	80167f4 <ip4_output_if_src+0x24>
 80167e6:	4b4b      	ldr	r3, [pc, #300]	; (8016914 <ip4_output_if_src+0x144>)
 80167e8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80167ec:	494a      	ldr	r1, [pc, #296]	; (8016918 <ip4_output_if_src+0x148>)
 80167ee:	484b      	ldr	r0, [pc, #300]	; (801691c <ip4_output_if_src+0x14c>)
 80167f0:	f003 fa16 	bl	8019c20 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d060      	beq.n	80168bc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80167fa:	2314      	movs	r3, #20
 80167fc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80167fe:	2114      	movs	r1, #20
 8016800:	68f8      	ldr	r0, [r7, #12]
 8016802:	f7f5 fbb9 	bl	800bf78 <pbuf_add_header>
 8016806:	4603      	mov	r3, r0
 8016808:	2b00      	cmp	r3, #0
 801680a:	d002      	beq.n	8016812 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801680c:	f06f 0301 	mvn.w	r3, #1
 8016810:	e07c      	b.n	801690c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	685b      	ldr	r3, [r3, #4]
 8016816:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	895b      	ldrh	r3, [r3, #10]
 801681c:	2b13      	cmp	r3, #19
 801681e:	d806      	bhi.n	801682e <ip4_output_if_src+0x5e>
 8016820:	4b3c      	ldr	r3, [pc, #240]	; (8016914 <ip4_output_if_src+0x144>)
 8016822:	f240 3289 	movw	r2, #905	; 0x389
 8016826:	493e      	ldr	r1, [pc, #248]	; (8016920 <ip4_output_if_src+0x150>)
 8016828:	483c      	ldr	r0, [pc, #240]	; (801691c <ip4_output_if_src+0x14c>)
 801682a:	f003 f9f9 	bl	8019c20 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801682e:	69fb      	ldr	r3, [r7, #28]
 8016830:	78fa      	ldrb	r2, [r7, #3]
 8016832:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016834:	69fb      	ldr	r3, [r7, #28]
 8016836:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801683a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	681a      	ldr	r2, [r3, #0]
 8016840:	69fb      	ldr	r3, [r7, #28]
 8016842:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016844:	8b7b      	ldrh	r3, [r7, #26]
 8016846:	089b      	lsrs	r3, r3, #2
 8016848:	b29b      	uxth	r3, r3
 801684a:	b2db      	uxtb	r3, r3
 801684c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016850:	b2da      	uxtb	r2, r3
 8016852:	69fb      	ldr	r3, [r7, #28]
 8016854:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016856:	69fb      	ldr	r3, [r7, #28]
 8016858:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801685c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	891b      	ldrh	r3, [r3, #8]
 8016862:	4618      	mov	r0, r3
 8016864:	f7f4 f86a 	bl	800a93c <lwip_htons>
 8016868:	4603      	mov	r3, r0
 801686a:	461a      	mov	r2, r3
 801686c:	69fb      	ldr	r3, [r7, #28]
 801686e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016870:	69fb      	ldr	r3, [r7, #28]
 8016872:	2200      	movs	r2, #0
 8016874:	719a      	strb	r2, [r3, #6]
 8016876:	2200      	movs	r2, #0
 8016878:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801687a:	4b2a      	ldr	r3, [pc, #168]	; (8016924 <ip4_output_if_src+0x154>)
 801687c:	881b      	ldrh	r3, [r3, #0]
 801687e:	4618      	mov	r0, r3
 8016880:	f7f4 f85c 	bl	800a93c <lwip_htons>
 8016884:	4603      	mov	r3, r0
 8016886:	461a      	mov	r2, r3
 8016888:	69fb      	ldr	r3, [r7, #28]
 801688a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801688c:	4b25      	ldr	r3, [pc, #148]	; (8016924 <ip4_output_if_src+0x154>)
 801688e:	881b      	ldrh	r3, [r3, #0]
 8016890:	3301      	adds	r3, #1
 8016892:	b29a      	uxth	r2, r3
 8016894:	4b23      	ldr	r3, [pc, #140]	; (8016924 <ip4_output_if_src+0x154>)
 8016896:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016898:	68bb      	ldr	r3, [r7, #8]
 801689a:	2b00      	cmp	r3, #0
 801689c:	d104      	bne.n	80168a8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801689e:	4b22      	ldr	r3, [pc, #136]	; (8016928 <ip4_output_if_src+0x158>)
 80168a0:	681a      	ldr	r2, [r3, #0]
 80168a2:	69fb      	ldr	r3, [r7, #28]
 80168a4:	60da      	str	r2, [r3, #12]
 80168a6:	e003      	b.n	80168b0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80168a8:	68bb      	ldr	r3, [r7, #8]
 80168aa:	681a      	ldr	r2, [r3, #0]
 80168ac:	69fb      	ldr	r3, [r7, #28]
 80168ae:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80168b0:	69fb      	ldr	r3, [r7, #28]
 80168b2:	2200      	movs	r2, #0
 80168b4:	729a      	strb	r2, [r3, #10]
 80168b6:	2200      	movs	r2, #0
 80168b8:	72da      	strb	r2, [r3, #11]
 80168ba:	e00f      	b.n	80168dc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	895b      	ldrh	r3, [r3, #10]
 80168c0:	2b13      	cmp	r3, #19
 80168c2:	d802      	bhi.n	80168ca <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80168c4:	f06f 0301 	mvn.w	r3, #1
 80168c8:	e020      	b.n	801690c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	685b      	ldr	r3, [r3, #4]
 80168ce:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80168d0:	69fb      	ldr	r3, [r7, #28]
 80168d2:	691b      	ldr	r3, [r3, #16]
 80168d4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80168d6:	f107 0314 	add.w	r3, r7, #20
 80168da:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80168dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d00c      	beq.n	80168fe <ip4_output_if_src+0x12e>
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	891a      	ldrh	r2, [r3, #8]
 80168e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80168ec:	429a      	cmp	r2, r3
 80168ee:	d906      	bls.n	80168fe <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80168f0:	687a      	ldr	r2, [r7, #4]
 80168f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80168f4:	68f8      	ldr	r0, [r7, #12]
 80168f6:	f000 fe91 	bl	801761c <ip4_frag>
 80168fa:	4603      	mov	r3, r0
 80168fc:	e006      	b.n	801690c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80168fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016900:	695b      	ldr	r3, [r3, #20]
 8016902:	687a      	ldr	r2, [r7, #4]
 8016904:	68f9      	ldr	r1, [r7, #12]
 8016906:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016908:	4798      	blx	r3
 801690a:	4603      	mov	r3, r0
}
 801690c:	4618      	mov	r0, r3
 801690e:	3720      	adds	r7, #32
 8016910:	46bd      	mov	sp, r7
 8016912:	bd80      	pop	{r7, pc}
 8016914:	0801e6e0 	.word	0x0801e6e0
 8016918:	0801e714 	.word	0x0801e714
 801691c:	0801e720 	.word	0x0801e720
 8016920:	0801e748 	.word	0x0801e748
 8016924:	2000878e 	.word	0x2000878e
 8016928:	0801ec8c 	.word	0x0801ec8c

0801692c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801692c:	b480      	push	{r7}
 801692e:	b085      	sub	sp, #20
 8016930:	af00      	add	r7, sp, #0
 8016932:	6078      	str	r0, [r7, #4]
 8016934:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016940:	d002      	beq.n	8016948 <ip4_addr_isbroadcast_u32+0x1c>
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	2b00      	cmp	r3, #0
 8016946:	d101      	bne.n	801694c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016948:	2301      	movs	r3, #1
 801694a:	e02a      	b.n	80169a2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801694c:	683b      	ldr	r3, [r7, #0]
 801694e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016952:	f003 0302 	and.w	r3, r3, #2
 8016956:	2b00      	cmp	r3, #0
 8016958:	d101      	bne.n	801695e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801695a:	2300      	movs	r3, #0
 801695c:	e021      	b.n	80169a2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801695e:	683b      	ldr	r3, [r7, #0]
 8016960:	3304      	adds	r3, #4
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	687a      	ldr	r2, [r7, #4]
 8016966:	429a      	cmp	r2, r3
 8016968:	d101      	bne.n	801696e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801696a:	2300      	movs	r3, #0
 801696c:	e019      	b.n	80169a2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801696e:	68fa      	ldr	r2, [r7, #12]
 8016970:	683b      	ldr	r3, [r7, #0]
 8016972:	3304      	adds	r3, #4
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	405a      	eors	r2, r3
 8016978:	683b      	ldr	r3, [r7, #0]
 801697a:	3308      	adds	r3, #8
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	4013      	ands	r3, r2
 8016980:	2b00      	cmp	r3, #0
 8016982:	d10d      	bne.n	80169a0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016984:	683b      	ldr	r3, [r7, #0]
 8016986:	3308      	adds	r3, #8
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	43da      	mvns	r2, r3
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016990:	683b      	ldr	r3, [r7, #0]
 8016992:	3308      	adds	r3, #8
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016998:	429a      	cmp	r2, r3
 801699a:	d101      	bne.n	80169a0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801699c:	2301      	movs	r3, #1
 801699e:	e000      	b.n	80169a2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80169a0:	2300      	movs	r3, #0
  }
}
 80169a2:	4618      	mov	r0, r3
 80169a4:	3714      	adds	r7, #20
 80169a6:	46bd      	mov	sp, r7
 80169a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ac:	4770      	bx	lr

080169ae <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 80169ae:	b580      	push	{r7, lr}
 80169b0:	b084      	sub	sp, #16
 80169b2:	af00      	add	r7, sp, #0
 80169b4:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 80169b6:	f107 030c 	add.w	r3, r7, #12
 80169ba:	4619      	mov	r1, r3
 80169bc:	6878      	ldr	r0, [r7, #4]
 80169be:	f000 f80b 	bl	80169d8 <ip4addr_aton>
 80169c2:	4603      	mov	r3, r0
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d001      	beq.n	80169cc <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	e001      	b.n	80169d0 <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 80169cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80169d0:	4618      	mov	r0, r3
 80169d2:	3710      	adds	r7, #16
 80169d4:	46bd      	mov	sp, r7
 80169d6:	bd80      	pop	{r7, pc}

080169d8 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 80169d8:	b5b0      	push	{r4, r5, r7, lr}
 80169da:	b08a      	sub	sp, #40	; 0x28
 80169dc:	af00      	add	r7, sp, #0
 80169de:	6078      	str	r0, [r7, #4]
 80169e0:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 80169e2:	f107 030c 	add.w	r3, r7, #12
 80169e6:	61fb      	str	r3, [r7, #28]

  c = *cp;
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	781b      	ldrb	r3, [r3, #0]
 80169ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 80169f0:	f003 f8d4 	bl	8019b9c <__locale_ctype_ptr>
 80169f4:	4602      	mov	r2, r0
 80169f6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80169fa:	3301      	adds	r3, #1
 80169fc:	4413      	add	r3, r2
 80169fe:	781b      	ldrb	r3, [r3, #0]
 8016a00:	f003 0304 	and.w	r3, r3, #4
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d101      	bne.n	8016a0c <ip4addr_aton+0x34>
      return 0;
 8016a08:	2300      	movs	r3, #0
 8016a0a:	e10d      	b.n	8016c28 <ip4addr_aton+0x250>
    }
    val = 0;
 8016a0c:	2300      	movs	r3, #0
 8016a0e:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8016a10:	230a      	movs	r3, #10
 8016a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8016a16:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016a1a:	2b30      	cmp	r3, #48	; 0x30
 8016a1c:	d11c      	bne.n	8016a58 <ip4addr_aton+0x80>
      c = *++cp;
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	3301      	adds	r3, #1
 8016a22:	607b      	str	r3, [r7, #4]
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	781b      	ldrb	r3, [r3, #0]
 8016a28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8016a2c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016a30:	2b78      	cmp	r3, #120	; 0x78
 8016a32:	d003      	beq.n	8016a3c <ip4addr_aton+0x64>
 8016a34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016a38:	2b58      	cmp	r3, #88	; 0x58
 8016a3a:	d10a      	bne.n	8016a52 <ip4addr_aton+0x7a>
        base = 16;
 8016a3c:	2310      	movs	r3, #16
 8016a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	3301      	adds	r3, #1
 8016a46:	607b      	str	r3, [r7, #4]
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	781b      	ldrb	r3, [r3, #0]
 8016a4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8016a50:	e002      	b.n	8016a58 <ip4addr_aton+0x80>
      } else {
        base = 8;
 8016a52:	2308      	movs	r3, #8
 8016a54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8016a58:	f003 f8a0 	bl	8019b9c <__locale_ctype_ptr>
 8016a5c:	4602      	mov	r2, r0
 8016a5e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016a62:	3301      	adds	r3, #1
 8016a64:	4413      	add	r3, r2
 8016a66:	781b      	ldrb	r3, [r3, #0]
 8016a68:	f003 0304 	and.w	r3, r3, #4
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d011      	beq.n	8016a94 <ip4addr_aton+0xbc>
        val = (val * base) + (u32_t)(c - '0');
 8016a70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a76:	fb02 f203 	mul.w	r2, r2, r3
 8016a7a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016a7e:	4413      	add	r3, r2
 8016a80:	3b30      	subs	r3, #48	; 0x30
 8016a82:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	3301      	adds	r3, #1
 8016a88:	607b      	str	r3, [r7, #4]
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	781b      	ldrb	r3, [r3, #0]
 8016a8e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8016a92:	e7e1      	b.n	8016a58 <ip4addr_aton+0x80>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8016a94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016a98:	2b10      	cmp	r3, #16
 8016a9a:	d12b      	bne.n	8016af4 <ip4addr_aton+0x11c>
 8016a9c:	f003 f87e 	bl	8019b9c <__locale_ctype_ptr>
 8016aa0:	4602      	mov	r2, r0
 8016aa2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016aa6:	3301      	adds	r3, #1
 8016aa8:	4413      	add	r3, r2
 8016aaa:	781b      	ldrb	r3, [r3, #0]
 8016aac:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d01f      	beq.n	8016af4 <ip4addr_aton+0x11c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8016ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ab6:	011c      	lsls	r4, r3, #4
 8016ab8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016abc:	f103 050a 	add.w	r5, r3, #10
 8016ac0:	f003 f86c 	bl	8019b9c <__locale_ctype_ptr>
 8016ac4:	4602      	mov	r2, r0
 8016ac6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016aca:	3301      	adds	r3, #1
 8016acc:	4413      	add	r3, r2
 8016ace:	781b      	ldrb	r3, [r3, #0]
 8016ad0:	f003 0303 	and.w	r3, r3, #3
 8016ad4:	2b02      	cmp	r3, #2
 8016ad6:	d101      	bne.n	8016adc <ip4addr_aton+0x104>
 8016ad8:	2361      	movs	r3, #97	; 0x61
 8016ada:	e000      	b.n	8016ade <ip4addr_aton+0x106>
 8016adc:	2341      	movs	r3, #65	; 0x41
 8016ade:	1aeb      	subs	r3, r5, r3
 8016ae0:	4323      	orrs	r3, r4
 8016ae2:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	3301      	adds	r3, #1
 8016ae8:	607b      	str	r3, [r7, #4]
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	781b      	ldrb	r3, [r3, #0]
 8016aee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8016af2:	e7b1      	b.n	8016a58 <ip4addr_aton+0x80>
      } else {
        break;
      }
    }
    if (c == '.') {
 8016af4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016af8:	2b2e      	cmp	r3, #46	; 0x2e
 8016afa:	d114      	bne.n	8016b26 <ip4addr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8016afc:	f107 030c 	add.w	r3, r7, #12
 8016b00:	330c      	adds	r3, #12
 8016b02:	69fa      	ldr	r2, [r7, #28]
 8016b04:	429a      	cmp	r2, r3
 8016b06:	d301      	bcc.n	8016b0c <ip4addr_aton+0x134>
        return 0;
 8016b08:	2300      	movs	r3, #0
 8016b0a:	e08d      	b.n	8016c28 <ip4addr_aton+0x250>
      }
      *pp++ = val;
 8016b0c:	69fb      	ldr	r3, [r7, #28]
 8016b0e:	1d1a      	adds	r2, r3, #4
 8016b10:	61fa      	str	r2, [r7, #28]
 8016b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016b14:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	3301      	adds	r3, #1
 8016b1a:	607b      	str	r3, [r7, #4]
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	781b      	ldrb	r3, [r3, #0]
 8016b20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8016b24:	e764      	b.n	80169f0 <ip4addr_aton+0x18>
    } else {
      break;
 8016b26:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8016b28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d00d      	beq.n	8016b4c <ip4addr_aton+0x174>
 8016b30:	f003 f834 	bl	8019b9c <__locale_ctype_ptr>
 8016b34:	4602      	mov	r2, r0
 8016b36:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016b3a:	3301      	adds	r3, #1
 8016b3c:	4413      	add	r3, r2
 8016b3e:	781b      	ldrb	r3, [r3, #0]
 8016b40:	f003 0308 	and.w	r3, r3, #8
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d101      	bne.n	8016b4c <ip4addr_aton+0x174>
    return 0;
 8016b48:	2300      	movs	r3, #0
 8016b4a:	e06d      	b.n	8016c28 <ip4addr_aton+0x250>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8016b4c:	69fa      	ldr	r2, [r7, #28]
 8016b4e:	f107 030c 	add.w	r3, r7, #12
 8016b52:	1ad3      	subs	r3, r2, r3
 8016b54:	109b      	asrs	r3, r3, #2
 8016b56:	3301      	adds	r3, #1
 8016b58:	2b04      	cmp	r3, #4
 8016b5a:	d853      	bhi.n	8016c04 <ip4addr_aton+0x22c>
 8016b5c:	a201      	add	r2, pc, #4	; (adr r2, 8016b64 <ip4addr_aton+0x18c>)
 8016b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b62:	bf00      	nop
 8016b64:	08016b79 	.word	0x08016b79
 8016b68:	08016c13 	.word	0x08016c13
 8016b6c:	08016b7d 	.word	0x08016b7d
 8016b70:	08016b9f 	.word	0x08016b9f
 8016b74:	08016bcd 	.word	0x08016bcd

    case 0:
      return 0;       /* initial nondigit */
 8016b78:	2300      	movs	r3, #0
 8016b7a:	e055      	b.n	8016c28 <ip4addr_aton+0x250>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8016b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8016b82:	d301      	bcc.n	8016b88 <ip4addr_aton+0x1b0>
        return 0;
 8016b84:	2300      	movs	r3, #0
 8016b86:	e04f      	b.n	8016c28 <ip4addr_aton+0x250>
      }
      if (parts[0] > 0xff) {
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	2bff      	cmp	r3, #255	; 0xff
 8016b8c:	d901      	bls.n	8016b92 <ip4addr_aton+0x1ba>
        return 0;
 8016b8e:	2300      	movs	r3, #0
 8016b90:	e04a      	b.n	8016c28 <ip4addr_aton+0x250>
      }
      val |= parts[0] << 24;
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	061b      	lsls	r3, r3, #24
 8016b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016b98:	4313      	orrs	r3, r2
 8016b9a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8016b9c:	e03a      	b.n	8016c14 <ip4addr_aton+0x23c>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8016b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016ba4:	d301      	bcc.n	8016baa <ip4addr_aton+0x1d2>
        return 0;
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	e03e      	b.n	8016c28 <ip4addr_aton+0x250>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	2bff      	cmp	r3, #255	; 0xff
 8016bae:	d802      	bhi.n	8016bb6 <ip4addr_aton+0x1de>
 8016bb0:	693b      	ldr	r3, [r7, #16]
 8016bb2:	2bff      	cmp	r3, #255	; 0xff
 8016bb4:	d901      	bls.n	8016bba <ip4addr_aton+0x1e2>
        return 0;
 8016bb6:	2300      	movs	r3, #0
 8016bb8:	e036      	b.n	8016c28 <ip4addr_aton+0x250>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	061a      	lsls	r2, r3, #24
 8016bbe:	693b      	ldr	r3, [r7, #16]
 8016bc0:	041b      	lsls	r3, r3, #16
 8016bc2:	4313      	orrs	r3, r2
 8016bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016bc6:	4313      	orrs	r3, r2
 8016bc8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8016bca:	e023      	b.n	8016c14 <ip4addr_aton+0x23c>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8016bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bce:	2bff      	cmp	r3, #255	; 0xff
 8016bd0:	d901      	bls.n	8016bd6 <ip4addr_aton+0x1fe>
        return 0;
 8016bd2:	2300      	movs	r3, #0
 8016bd4:	e028      	b.n	8016c28 <ip4addr_aton+0x250>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	2bff      	cmp	r3, #255	; 0xff
 8016bda:	d805      	bhi.n	8016be8 <ip4addr_aton+0x210>
 8016bdc:	693b      	ldr	r3, [r7, #16]
 8016bde:	2bff      	cmp	r3, #255	; 0xff
 8016be0:	d802      	bhi.n	8016be8 <ip4addr_aton+0x210>
 8016be2:	697b      	ldr	r3, [r7, #20]
 8016be4:	2bff      	cmp	r3, #255	; 0xff
 8016be6:	d901      	bls.n	8016bec <ip4addr_aton+0x214>
        return 0;
 8016be8:	2300      	movs	r3, #0
 8016bea:	e01d      	b.n	8016c28 <ip4addr_aton+0x250>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	061a      	lsls	r2, r3, #24
 8016bf0:	693b      	ldr	r3, [r7, #16]
 8016bf2:	041b      	lsls	r3, r3, #16
 8016bf4:	431a      	orrs	r2, r3
 8016bf6:	697b      	ldr	r3, [r7, #20]
 8016bf8:	021b      	lsls	r3, r3, #8
 8016bfa:	4313      	orrs	r3, r2
 8016bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016bfe:	4313      	orrs	r3, r2
 8016c00:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8016c02:	e007      	b.n	8016c14 <ip4addr_aton+0x23c>
    default:
      LWIP_ASSERT("unhandled", 0);
 8016c04:	4b0a      	ldr	r3, [pc, #40]	; (8016c30 <ip4addr_aton+0x258>)
 8016c06:	22f9      	movs	r2, #249	; 0xf9
 8016c08:	490a      	ldr	r1, [pc, #40]	; (8016c34 <ip4addr_aton+0x25c>)
 8016c0a:	480b      	ldr	r0, [pc, #44]	; (8016c38 <ip4addr_aton+0x260>)
 8016c0c:	f003 f808 	bl	8019c20 <iprintf>
      break;
 8016c10:	e000      	b.n	8016c14 <ip4addr_aton+0x23c>
      break;
 8016c12:	bf00      	nop
  }
  if (addr) {
 8016c14:	683b      	ldr	r3, [r7, #0]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d005      	beq.n	8016c26 <ip4addr_aton+0x24e>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8016c1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c1c:	f7f3 fea3 	bl	800a966 <lwip_htonl>
 8016c20:	4602      	mov	r2, r0
 8016c22:	683b      	ldr	r3, [r7, #0]
 8016c24:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8016c26:	2301      	movs	r3, #1
}
 8016c28:	4618      	mov	r0, r3
 8016c2a:	3728      	adds	r7, #40	; 0x28
 8016c2c:	46bd      	mov	sp, r7
 8016c2e:	bdb0      	pop	{r4, r5, r7, pc}
 8016c30:	0801e778 	.word	0x0801e778
 8016c34:	0801e7b4 	.word	0x0801e7b4
 8016c38:	0801e7c0 	.word	0x0801e7c0

08016c3c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016c3c:	b580      	push	{r7, lr}
 8016c3e:	b084      	sub	sp, #16
 8016c40:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016c42:	2300      	movs	r3, #0
 8016c44:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016c46:	4b12      	ldr	r3, [pc, #72]	; (8016c90 <ip_reass_tmr+0x54>)
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016c4c:	e018      	b.n	8016c80 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016c4e:	68fb      	ldr	r3, [r7, #12]
 8016c50:	7fdb      	ldrb	r3, [r3, #31]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d00b      	beq.n	8016c6e <ip_reass_tmr+0x32>
      r->timer--;
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	7fdb      	ldrb	r3, [r3, #31]
 8016c5a:	3b01      	subs	r3, #1
 8016c5c:	b2da      	uxtb	r2, r3
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	60fb      	str	r3, [r7, #12]
 8016c6c:	e008      	b.n	8016c80 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016c72:	68fb      	ldr	r3, [r7, #12]
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016c78:	68b9      	ldr	r1, [r7, #8]
 8016c7a:	6878      	ldr	r0, [r7, #4]
 8016c7c:	f000 f80a 	bl	8016c94 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d1e3      	bne.n	8016c4e <ip_reass_tmr+0x12>
    }
  }
}
 8016c86:	bf00      	nop
 8016c88:	3710      	adds	r7, #16
 8016c8a:	46bd      	mov	sp, r7
 8016c8c:	bd80      	pop	{r7, pc}
 8016c8e:	bf00      	nop
 8016c90:	20008790 	.word	0x20008790

08016c94 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016c94:	b580      	push	{r7, lr}
 8016c96:	b088      	sub	sp, #32
 8016c98:	af00      	add	r7, sp, #0
 8016c9a:	6078      	str	r0, [r7, #4]
 8016c9c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016ca2:	683a      	ldr	r2, [r7, #0]
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	429a      	cmp	r2, r3
 8016ca8:	d105      	bne.n	8016cb6 <ip_reass_free_complete_datagram+0x22>
 8016caa:	4b45      	ldr	r3, [pc, #276]	; (8016dc0 <ip_reass_free_complete_datagram+0x12c>)
 8016cac:	22ab      	movs	r2, #171	; 0xab
 8016cae:	4945      	ldr	r1, [pc, #276]	; (8016dc4 <ip_reass_free_complete_datagram+0x130>)
 8016cb0:	4845      	ldr	r0, [pc, #276]	; (8016dc8 <ip_reass_free_complete_datagram+0x134>)
 8016cb2:	f002 ffb5 	bl	8019c20 <iprintf>
  if (prev != NULL) {
 8016cb6:	683b      	ldr	r3, [r7, #0]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d00a      	beq.n	8016cd2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016cbc:	683b      	ldr	r3, [r7, #0]
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	687a      	ldr	r2, [r7, #4]
 8016cc2:	429a      	cmp	r2, r3
 8016cc4:	d005      	beq.n	8016cd2 <ip_reass_free_complete_datagram+0x3e>
 8016cc6:	4b3e      	ldr	r3, [pc, #248]	; (8016dc0 <ip_reass_free_complete_datagram+0x12c>)
 8016cc8:	22ad      	movs	r2, #173	; 0xad
 8016cca:	4940      	ldr	r1, [pc, #256]	; (8016dcc <ip_reass_free_complete_datagram+0x138>)
 8016ccc:	483e      	ldr	r0, [pc, #248]	; (8016dc8 <ip_reass_free_complete_datagram+0x134>)
 8016cce:	f002 ffa7 	bl	8019c20 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	685b      	ldr	r3, [r3, #4]
 8016cd6:	685b      	ldr	r3, [r3, #4]
 8016cd8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016cda:	697b      	ldr	r3, [r7, #20]
 8016cdc:	889b      	ldrh	r3, [r3, #4]
 8016cde:	b29b      	uxth	r3, r3
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d12a      	bne.n	8016d3a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	685b      	ldr	r3, [r3, #4]
 8016ce8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016cea:	697b      	ldr	r3, [r7, #20]
 8016cec:	681a      	ldr	r2, [r3, #0]
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016cf2:	69bb      	ldr	r3, [r7, #24]
 8016cf4:	6858      	ldr	r0, [r3, #4]
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	3308      	adds	r3, #8
 8016cfa:	2214      	movs	r2, #20
 8016cfc:	4619      	mov	r1, r3
 8016cfe:	f002 ff7c 	bl	8019bfa <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016d02:	2101      	movs	r1, #1
 8016d04:	69b8      	ldr	r0, [r7, #24]
 8016d06:	f7ff fae5 	bl	80162d4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016d0a:	69b8      	ldr	r0, [r7, #24]
 8016d0c:	f7f5 fa8a 	bl	800c224 <pbuf_clen>
 8016d10:	4603      	mov	r3, r0
 8016d12:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016d14:	8bfa      	ldrh	r2, [r7, #30]
 8016d16:	8a7b      	ldrh	r3, [r7, #18]
 8016d18:	4413      	add	r3, r2
 8016d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016d1e:	db05      	blt.n	8016d2c <ip_reass_free_complete_datagram+0x98>
 8016d20:	4b27      	ldr	r3, [pc, #156]	; (8016dc0 <ip_reass_free_complete_datagram+0x12c>)
 8016d22:	22bc      	movs	r2, #188	; 0xbc
 8016d24:	492a      	ldr	r1, [pc, #168]	; (8016dd0 <ip_reass_free_complete_datagram+0x13c>)
 8016d26:	4828      	ldr	r0, [pc, #160]	; (8016dc8 <ip_reass_free_complete_datagram+0x134>)
 8016d28:	f002 ff7a 	bl	8019c20 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016d2c:	8bfa      	ldrh	r2, [r7, #30]
 8016d2e:	8a7b      	ldrh	r3, [r7, #18]
 8016d30:	4413      	add	r3, r2
 8016d32:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016d34:	69b8      	ldr	r0, [r7, #24]
 8016d36:	f7f5 f9e7 	bl	800c108 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	685b      	ldr	r3, [r3, #4]
 8016d3e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016d40:	e01f      	b.n	8016d82 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016d42:	69bb      	ldr	r3, [r7, #24]
 8016d44:	685b      	ldr	r3, [r3, #4]
 8016d46:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016d48:	69bb      	ldr	r3, [r7, #24]
 8016d4a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016d4c:	697b      	ldr	r3, [r7, #20]
 8016d4e:	681b      	ldr	r3, [r3, #0]
 8016d50:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016d52:	68f8      	ldr	r0, [r7, #12]
 8016d54:	f7f5 fa66 	bl	800c224 <pbuf_clen>
 8016d58:	4603      	mov	r3, r0
 8016d5a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016d5c:	8bfa      	ldrh	r2, [r7, #30]
 8016d5e:	8a7b      	ldrh	r3, [r7, #18]
 8016d60:	4413      	add	r3, r2
 8016d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016d66:	db05      	blt.n	8016d74 <ip_reass_free_complete_datagram+0xe0>
 8016d68:	4b15      	ldr	r3, [pc, #84]	; (8016dc0 <ip_reass_free_complete_datagram+0x12c>)
 8016d6a:	22cc      	movs	r2, #204	; 0xcc
 8016d6c:	4918      	ldr	r1, [pc, #96]	; (8016dd0 <ip_reass_free_complete_datagram+0x13c>)
 8016d6e:	4816      	ldr	r0, [pc, #88]	; (8016dc8 <ip_reass_free_complete_datagram+0x134>)
 8016d70:	f002 ff56 	bl	8019c20 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016d74:	8bfa      	ldrh	r2, [r7, #30]
 8016d76:	8a7b      	ldrh	r3, [r7, #18]
 8016d78:	4413      	add	r3, r2
 8016d7a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016d7c:	68f8      	ldr	r0, [r7, #12]
 8016d7e:	f7f5 f9c3 	bl	800c108 <pbuf_free>
  while (p != NULL) {
 8016d82:	69bb      	ldr	r3, [r7, #24]
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d1dc      	bne.n	8016d42 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016d88:	6839      	ldr	r1, [r7, #0]
 8016d8a:	6878      	ldr	r0, [r7, #4]
 8016d8c:	f000 f8c2 	bl	8016f14 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016d90:	4b10      	ldr	r3, [pc, #64]	; (8016dd4 <ip_reass_free_complete_datagram+0x140>)
 8016d92:	881b      	ldrh	r3, [r3, #0]
 8016d94:	8bfa      	ldrh	r2, [r7, #30]
 8016d96:	429a      	cmp	r2, r3
 8016d98:	d905      	bls.n	8016da6 <ip_reass_free_complete_datagram+0x112>
 8016d9a:	4b09      	ldr	r3, [pc, #36]	; (8016dc0 <ip_reass_free_complete_datagram+0x12c>)
 8016d9c:	22d2      	movs	r2, #210	; 0xd2
 8016d9e:	490e      	ldr	r1, [pc, #56]	; (8016dd8 <ip_reass_free_complete_datagram+0x144>)
 8016da0:	4809      	ldr	r0, [pc, #36]	; (8016dc8 <ip_reass_free_complete_datagram+0x134>)
 8016da2:	f002 ff3d 	bl	8019c20 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016da6:	4b0b      	ldr	r3, [pc, #44]	; (8016dd4 <ip_reass_free_complete_datagram+0x140>)
 8016da8:	881a      	ldrh	r2, [r3, #0]
 8016daa:	8bfb      	ldrh	r3, [r7, #30]
 8016dac:	1ad3      	subs	r3, r2, r3
 8016dae:	b29a      	uxth	r2, r3
 8016db0:	4b08      	ldr	r3, [pc, #32]	; (8016dd4 <ip_reass_free_complete_datagram+0x140>)
 8016db2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016db4:	8bfb      	ldrh	r3, [r7, #30]
}
 8016db6:	4618      	mov	r0, r3
 8016db8:	3720      	adds	r7, #32
 8016dba:	46bd      	mov	sp, r7
 8016dbc:	bd80      	pop	{r7, pc}
 8016dbe:	bf00      	nop
 8016dc0:	0801e7e8 	.word	0x0801e7e8
 8016dc4:	0801e824 	.word	0x0801e824
 8016dc8:	0801e830 	.word	0x0801e830
 8016dcc:	0801e858 	.word	0x0801e858
 8016dd0:	0801e86c 	.word	0x0801e86c
 8016dd4:	20008794 	.word	0x20008794
 8016dd8:	0801e88c 	.word	0x0801e88c

08016ddc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016ddc:	b580      	push	{r7, lr}
 8016dde:	b08a      	sub	sp, #40	; 0x28
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	6078      	str	r0, [r7, #4]
 8016de4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016de6:	2300      	movs	r3, #0
 8016de8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016dea:	2300      	movs	r3, #0
 8016dec:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016dee:	2300      	movs	r3, #0
 8016df0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016df2:	2300      	movs	r3, #0
 8016df4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016df6:	2300      	movs	r3, #0
 8016df8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016dfa:	4b28      	ldr	r3, [pc, #160]	; (8016e9c <ip_reass_remove_oldest_datagram+0xc0>)
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016e00:	e030      	b.n	8016e64 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e04:	695a      	ldr	r2, [r3, #20]
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	68db      	ldr	r3, [r3, #12]
 8016e0a:	429a      	cmp	r2, r3
 8016e0c:	d10c      	bne.n	8016e28 <ip_reass_remove_oldest_datagram+0x4c>
 8016e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e10:	699a      	ldr	r2, [r3, #24]
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	691b      	ldr	r3, [r3, #16]
 8016e16:	429a      	cmp	r2, r3
 8016e18:	d106      	bne.n	8016e28 <ip_reass_remove_oldest_datagram+0x4c>
 8016e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e1c:	899a      	ldrh	r2, [r3, #12]
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	889b      	ldrh	r3, [r3, #4]
 8016e22:	b29b      	uxth	r3, r3
 8016e24:	429a      	cmp	r2, r3
 8016e26:	d014      	beq.n	8016e52 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016e28:	693b      	ldr	r3, [r7, #16]
 8016e2a:	3301      	adds	r3, #1
 8016e2c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016e2e:	6a3b      	ldr	r3, [r7, #32]
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d104      	bne.n	8016e3e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e36:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016e38:	69fb      	ldr	r3, [r7, #28]
 8016e3a:	61bb      	str	r3, [r7, #24]
 8016e3c:	e009      	b.n	8016e52 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e40:	7fda      	ldrb	r2, [r3, #31]
 8016e42:	6a3b      	ldr	r3, [r7, #32]
 8016e44:	7fdb      	ldrb	r3, [r3, #31]
 8016e46:	429a      	cmp	r2, r3
 8016e48:	d803      	bhi.n	8016e52 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e4c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016e4e:	69fb      	ldr	r3, [r7, #28]
 8016e50:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e54:	681b      	ldr	r3, [r3, #0]
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d001      	beq.n	8016e5e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e5c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d1cb      	bne.n	8016e02 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016e6a:	6a3b      	ldr	r3, [r7, #32]
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d008      	beq.n	8016e82 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016e70:	69b9      	ldr	r1, [r7, #24]
 8016e72:	6a38      	ldr	r0, [r7, #32]
 8016e74:	f7ff ff0e 	bl	8016c94 <ip_reass_free_complete_datagram>
 8016e78:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016e7a:	697a      	ldr	r2, [r7, #20]
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	4413      	add	r3, r2
 8016e80:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016e82:	697a      	ldr	r2, [r7, #20]
 8016e84:	683b      	ldr	r3, [r7, #0]
 8016e86:	429a      	cmp	r2, r3
 8016e88:	da02      	bge.n	8016e90 <ip_reass_remove_oldest_datagram+0xb4>
 8016e8a:	693b      	ldr	r3, [r7, #16]
 8016e8c:	2b01      	cmp	r3, #1
 8016e8e:	dcac      	bgt.n	8016dea <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016e90:	697b      	ldr	r3, [r7, #20]
}
 8016e92:	4618      	mov	r0, r3
 8016e94:	3728      	adds	r7, #40	; 0x28
 8016e96:	46bd      	mov	sp, r7
 8016e98:	bd80      	pop	{r7, pc}
 8016e9a:	bf00      	nop
 8016e9c:	20008790 	.word	0x20008790

08016ea0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b084      	sub	sp, #16
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	6078      	str	r0, [r7, #4]
 8016ea8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016eaa:	2004      	movs	r0, #4
 8016eac:	f7f4 f9fc 	bl	800b2a8 <memp_malloc>
 8016eb0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d110      	bne.n	8016eda <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016eb8:	6839      	ldr	r1, [r7, #0]
 8016eba:	6878      	ldr	r0, [r7, #4]
 8016ebc:	f7ff ff8e 	bl	8016ddc <ip_reass_remove_oldest_datagram>
 8016ec0:	4602      	mov	r2, r0
 8016ec2:	683b      	ldr	r3, [r7, #0]
 8016ec4:	4293      	cmp	r3, r2
 8016ec6:	dc03      	bgt.n	8016ed0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016ec8:	2004      	movs	r0, #4
 8016eca:	f7f4 f9ed 	bl	800b2a8 <memp_malloc>
 8016ece:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d101      	bne.n	8016eda <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016ed6:	2300      	movs	r3, #0
 8016ed8:	e016      	b.n	8016f08 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016eda:	2220      	movs	r2, #32
 8016edc:	2100      	movs	r1, #0
 8016ede:	68f8      	ldr	r0, [r7, #12]
 8016ee0:	f002 fe96 	bl	8019c10 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	220f      	movs	r2, #15
 8016ee8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016eea:	4b09      	ldr	r3, [pc, #36]	; (8016f10 <ip_reass_enqueue_new_datagram+0x70>)
 8016eec:	681a      	ldr	r2, [r3, #0]
 8016eee:	68fb      	ldr	r3, [r7, #12]
 8016ef0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016ef2:	4a07      	ldr	r2, [pc, #28]	; (8016f10 <ip_reass_enqueue_new_datagram+0x70>)
 8016ef4:	68fb      	ldr	r3, [r7, #12]
 8016ef6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	3308      	adds	r3, #8
 8016efc:	2214      	movs	r2, #20
 8016efe:	6879      	ldr	r1, [r7, #4]
 8016f00:	4618      	mov	r0, r3
 8016f02:	f002 fe7a 	bl	8019bfa <memcpy>
  return ipr;
 8016f06:	68fb      	ldr	r3, [r7, #12]
}
 8016f08:	4618      	mov	r0, r3
 8016f0a:	3710      	adds	r7, #16
 8016f0c:	46bd      	mov	sp, r7
 8016f0e:	bd80      	pop	{r7, pc}
 8016f10:	20008790 	.word	0x20008790

08016f14 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016f14:	b580      	push	{r7, lr}
 8016f16:	b082      	sub	sp, #8
 8016f18:	af00      	add	r7, sp, #0
 8016f1a:	6078      	str	r0, [r7, #4]
 8016f1c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016f1e:	4b10      	ldr	r3, [pc, #64]	; (8016f60 <ip_reass_dequeue_datagram+0x4c>)
 8016f20:	681b      	ldr	r3, [r3, #0]
 8016f22:	687a      	ldr	r2, [r7, #4]
 8016f24:	429a      	cmp	r2, r3
 8016f26:	d104      	bne.n	8016f32 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	4a0c      	ldr	r2, [pc, #48]	; (8016f60 <ip_reass_dequeue_datagram+0x4c>)
 8016f2e:	6013      	str	r3, [r2, #0]
 8016f30:	e00d      	b.n	8016f4e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016f32:	683b      	ldr	r3, [r7, #0]
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d106      	bne.n	8016f46 <ip_reass_dequeue_datagram+0x32>
 8016f38:	4b0a      	ldr	r3, [pc, #40]	; (8016f64 <ip_reass_dequeue_datagram+0x50>)
 8016f3a:	f240 1245 	movw	r2, #325	; 0x145
 8016f3e:	490a      	ldr	r1, [pc, #40]	; (8016f68 <ip_reass_dequeue_datagram+0x54>)
 8016f40:	480a      	ldr	r0, [pc, #40]	; (8016f6c <ip_reass_dequeue_datagram+0x58>)
 8016f42:	f002 fe6d 	bl	8019c20 <iprintf>
    prev->next = ipr->next;
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	681a      	ldr	r2, [r3, #0]
 8016f4a:	683b      	ldr	r3, [r7, #0]
 8016f4c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016f4e:	6879      	ldr	r1, [r7, #4]
 8016f50:	2004      	movs	r0, #4
 8016f52:	f7f4 f9fb 	bl	800b34c <memp_free>
}
 8016f56:	bf00      	nop
 8016f58:	3708      	adds	r7, #8
 8016f5a:	46bd      	mov	sp, r7
 8016f5c:	bd80      	pop	{r7, pc}
 8016f5e:	bf00      	nop
 8016f60:	20008790 	.word	0x20008790
 8016f64:	0801e7e8 	.word	0x0801e7e8
 8016f68:	0801e8b0 	.word	0x0801e8b0
 8016f6c:	0801e830 	.word	0x0801e830

08016f70 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016f70:	b580      	push	{r7, lr}
 8016f72:	b08c      	sub	sp, #48	; 0x30
 8016f74:	af00      	add	r7, sp, #0
 8016f76:	60f8      	str	r0, [r7, #12]
 8016f78:	60b9      	str	r1, [r7, #8]
 8016f7a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016f7c:	2300      	movs	r3, #0
 8016f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016f80:	2301      	movs	r3, #1
 8016f82:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016f84:	68bb      	ldr	r3, [r7, #8]
 8016f86:	685b      	ldr	r3, [r3, #4]
 8016f88:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016f8a:	69fb      	ldr	r3, [r7, #28]
 8016f8c:	885b      	ldrh	r3, [r3, #2]
 8016f8e:	b29b      	uxth	r3, r3
 8016f90:	4618      	mov	r0, r3
 8016f92:	f7f3 fcd3 	bl	800a93c <lwip_htons>
 8016f96:	4603      	mov	r3, r0
 8016f98:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016f9a:	69fb      	ldr	r3, [r7, #28]
 8016f9c:	781b      	ldrb	r3, [r3, #0]
 8016f9e:	f003 030f 	and.w	r3, r3, #15
 8016fa2:	b2db      	uxtb	r3, r3
 8016fa4:	009b      	lsls	r3, r3, #2
 8016fa6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016fa8:	7e7b      	ldrb	r3, [r7, #25]
 8016faa:	b29b      	uxth	r3, r3
 8016fac:	8b7a      	ldrh	r2, [r7, #26]
 8016fae:	429a      	cmp	r2, r3
 8016fb0:	d202      	bcs.n	8016fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8016fb6:	e135      	b.n	8017224 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016fb8:	7e7b      	ldrb	r3, [r7, #25]
 8016fba:	b29b      	uxth	r3, r3
 8016fbc:	8b7a      	ldrh	r2, [r7, #26]
 8016fbe:	1ad3      	subs	r3, r2, r3
 8016fc0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016fc2:	69fb      	ldr	r3, [r7, #28]
 8016fc4:	88db      	ldrh	r3, [r3, #6]
 8016fc6:	b29b      	uxth	r3, r3
 8016fc8:	4618      	mov	r0, r3
 8016fca:	f7f3 fcb7 	bl	800a93c <lwip_htons>
 8016fce:	4603      	mov	r3, r0
 8016fd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016fd4:	b29b      	uxth	r3, r3
 8016fd6:	00db      	lsls	r3, r3, #3
 8016fd8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016fda:	68bb      	ldr	r3, [r7, #8]
 8016fdc:	685b      	ldr	r3, [r3, #4]
 8016fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fe2:	2200      	movs	r2, #0
 8016fe4:	701a      	strb	r2, [r3, #0]
 8016fe6:	2200      	movs	r2, #0
 8016fe8:	705a      	strb	r2, [r3, #1]
 8016fea:	2200      	movs	r2, #0
 8016fec:	709a      	strb	r2, [r3, #2]
 8016fee:	2200      	movs	r2, #0
 8016ff0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ff4:	8afa      	ldrh	r2, [r7, #22]
 8016ff6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016ff8:	8afa      	ldrh	r2, [r7, #22]
 8016ffa:	8b7b      	ldrh	r3, [r7, #26]
 8016ffc:	4413      	add	r3, r2
 8016ffe:	b29a      	uxth	r2, r3
 8017000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017002:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017006:	88db      	ldrh	r3, [r3, #6]
 8017008:	b29b      	uxth	r3, r3
 801700a:	8afa      	ldrh	r2, [r7, #22]
 801700c:	429a      	cmp	r2, r3
 801700e:	d902      	bls.n	8017016 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017010:	f04f 33ff 	mov.w	r3, #4294967295
 8017014:	e106      	b.n	8017224 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	685b      	ldr	r3, [r3, #4]
 801701a:	627b      	str	r3, [r7, #36]	; 0x24
 801701c:	e068      	b.n	80170f0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801701e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017020:	685b      	ldr	r3, [r3, #4]
 8017022:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017026:	889b      	ldrh	r3, [r3, #4]
 8017028:	b29a      	uxth	r2, r3
 801702a:	693b      	ldr	r3, [r7, #16]
 801702c:	889b      	ldrh	r3, [r3, #4]
 801702e:	b29b      	uxth	r3, r3
 8017030:	429a      	cmp	r2, r3
 8017032:	d235      	bcs.n	80170a0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017038:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801703a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801703c:	2b00      	cmp	r3, #0
 801703e:	d020      	beq.n	8017082 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017042:	889b      	ldrh	r3, [r3, #4]
 8017044:	b29a      	uxth	r2, r3
 8017046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017048:	88db      	ldrh	r3, [r3, #6]
 801704a:	b29b      	uxth	r3, r3
 801704c:	429a      	cmp	r2, r3
 801704e:	d307      	bcc.n	8017060 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017052:	88db      	ldrh	r3, [r3, #6]
 8017054:	b29a      	uxth	r2, r3
 8017056:	693b      	ldr	r3, [r7, #16]
 8017058:	889b      	ldrh	r3, [r3, #4]
 801705a:	b29b      	uxth	r3, r3
 801705c:	429a      	cmp	r2, r3
 801705e:	d902      	bls.n	8017066 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017060:	f04f 33ff 	mov.w	r3, #4294967295
 8017064:	e0de      	b.n	8017224 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017068:	68ba      	ldr	r2, [r7, #8]
 801706a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801706c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801706e:	88db      	ldrh	r3, [r3, #6]
 8017070:	b29a      	uxth	r2, r3
 8017072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017074:	889b      	ldrh	r3, [r3, #4]
 8017076:	b29b      	uxth	r3, r3
 8017078:	429a      	cmp	r2, r3
 801707a:	d03d      	beq.n	80170f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801707c:	2300      	movs	r3, #0
 801707e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017080:	e03a      	b.n	80170f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017084:	88db      	ldrh	r3, [r3, #6]
 8017086:	b29a      	uxth	r2, r3
 8017088:	693b      	ldr	r3, [r7, #16]
 801708a:	889b      	ldrh	r3, [r3, #4]
 801708c:	b29b      	uxth	r3, r3
 801708e:	429a      	cmp	r2, r3
 8017090:	d902      	bls.n	8017098 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017092:	f04f 33ff 	mov.w	r3, #4294967295
 8017096:	e0c5      	b.n	8017224 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	68ba      	ldr	r2, [r7, #8]
 801709c:	605a      	str	r2, [r3, #4]
      break;
 801709e:	e02b      	b.n	80170f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80170a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170a2:	889b      	ldrh	r3, [r3, #4]
 80170a4:	b29a      	uxth	r2, r3
 80170a6:	693b      	ldr	r3, [r7, #16]
 80170a8:	889b      	ldrh	r3, [r3, #4]
 80170aa:	b29b      	uxth	r3, r3
 80170ac:	429a      	cmp	r2, r3
 80170ae:	d102      	bne.n	80170b6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80170b0:	f04f 33ff 	mov.w	r3, #4294967295
 80170b4:	e0b6      	b.n	8017224 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80170b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170b8:	889b      	ldrh	r3, [r3, #4]
 80170ba:	b29a      	uxth	r2, r3
 80170bc:	693b      	ldr	r3, [r7, #16]
 80170be:	88db      	ldrh	r3, [r3, #6]
 80170c0:	b29b      	uxth	r3, r3
 80170c2:	429a      	cmp	r2, r3
 80170c4:	d202      	bcs.n	80170cc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80170c6:	f04f 33ff 	mov.w	r3, #4294967295
 80170ca:	e0ab      	b.n	8017224 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80170cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d009      	beq.n	80170e6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80170d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170d4:	88db      	ldrh	r3, [r3, #6]
 80170d6:	b29a      	uxth	r2, r3
 80170d8:	693b      	ldr	r3, [r7, #16]
 80170da:	889b      	ldrh	r3, [r3, #4]
 80170dc:	b29b      	uxth	r3, r3
 80170de:	429a      	cmp	r2, r3
 80170e0:	d001      	beq.n	80170e6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80170e2:	2300      	movs	r3, #0
 80170e4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80170e6:	693b      	ldr	r3, [r7, #16]
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80170ec:	693b      	ldr	r3, [r7, #16]
 80170ee:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80170f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d193      	bne.n	801701e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80170f6:	e000      	b.n	80170fa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80170f8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80170fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d12d      	bne.n	801715c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017102:	2b00      	cmp	r3, #0
 8017104:	d01c      	beq.n	8017140 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017108:	88db      	ldrh	r3, [r3, #6]
 801710a:	b29a      	uxth	r2, r3
 801710c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801710e:	889b      	ldrh	r3, [r3, #4]
 8017110:	b29b      	uxth	r3, r3
 8017112:	429a      	cmp	r2, r3
 8017114:	d906      	bls.n	8017124 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017116:	4b45      	ldr	r3, [pc, #276]	; (801722c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017118:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801711c:	4944      	ldr	r1, [pc, #272]	; (8017230 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801711e:	4845      	ldr	r0, [pc, #276]	; (8017234 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017120:	f002 fd7e 	bl	8019c20 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017126:	68ba      	ldr	r2, [r7, #8]
 8017128:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801712a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801712c:	88db      	ldrh	r3, [r3, #6]
 801712e:	b29a      	uxth	r2, r3
 8017130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017132:	889b      	ldrh	r3, [r3, #4]
 8017134:	b29b      	uxth	r3, r3
 8017136:	429a      	cmp	r2, r3
 8017138:	d010      	beq.n	801715c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801713a:	2300      	movs	r3, #0
 801713c:	623b      	str	r3, [r7, #32]
 801713e:	e00d      	b.n	801715c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	685b      	ldr	r3, [r3, #4]
 8017144:	2b00      	cmp	r3, #0
 8017146:	d006      	beq.n	8017156 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017148:	4b38      	ldr	r3, [pc, #224]	; (801722c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801714a:	f240 12bf 	movw	r2, #447	; 0x1bf
 801714e:	493a      	ldr	r1, [pc, #232]	; (8017238 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017150:	4838      	ldr	r0, [pc, #224]	; (8017234 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017152:	f002 fd65 	bl	8019c20 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	68ba      	ldr	r2, [r7, #8]
 801715a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	2b00      	cmp	r3, #0
 8017160:	d105      	bne.n	801716e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017162:	68fb      	ldr	r3, [r7, #12]
 8017164:	7f9b      	ldrb	r3, [r3, #30]
 8017166:	f003 0301 	and.w	r3, r3, #1
 801716a:	2b00      	cmp	r3, #0
 801716c:	d059      	beq.n	8017222 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801716e:	6a3b      	ldr	r3, [r7, #32]
 8017170:	2b00      	cmp	r3, #0
 8017172:	d04f      	beq.n	8017214 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	685b      	ldr	r3, [r3, #4]
 8017178:	2b00      	cmp	r3, #0
 801717a:	d006      	beq.n	801718a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	685b      	ldr	r3, [r3, #4]
 8017180:	685b      	ldr	r3, [r3, #4]
 8017182:	889b      	ldrh	r3, [r3, #4]
 8017184:	b29b      	uxth	r3, r3
 8017186:	2b00      	cmp	r3, #0
 8017188:	d002      	beq.n	8017190 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801718a:	2300      	movs	r3, #0
 801718c:	623b      	str	r3, [r7, #32]
 801718e:	e041      	b.n	8017214 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017192:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801719a:	e012      	b.n	80171c2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801719e:	685b      	ldr	r3, [r3, #4]
 80171a0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80171a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171a4:	88db      	ldrh	r3, [r3, #6]
 80171a6:	b29a      	uxth	r2, r3
 80171a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171aa:	889b      	ldrh	r3, [r3, #4]
 80171ac:	b29b      	uxth	r3, r3
 80171ae:	429a      	cmp	r2, r3
 80171b0:	d002      	beq.n	80171b8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80171b2:	2300      	movs	r3, #0
 80171b4:	623b      	str	r3, [r7, #32]
            break;
 80171b6:	e007      	b.n	80171c8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80171b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ba:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80171bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80171c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d1e9      	bne.n	801719c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80171c8:	6a3b      	ldr	r3, [r7, #32]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d022      	beq.n	8017214 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	685b      	ldr	r3, [r3, #4]
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	d106      	bne.n	80171e4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80171d6:	4b15      	ldr	r3, [pc, #84]	; (801722c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80171d8:	f240 12df 	movw	r2, #479	; 0x1df
 80171dc:	4917      	ldr	r1, [pc, #92]	; (801723c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80171de:	4815      	ldr	r0, [pc, #84]	; (8017234 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80171e0:	f002 fd1e 	bl	8019c20 <iprintf>
          LWIP_ASSERT("sanity check",
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	685b      	ldr	r3, [r3, #4]
 80171e8:	685b      	ldr	r3, [r3, #4]
 80171ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80171ec:	429a      	cmp	r2, r3
 80171ee:	d106      	bne.n	80171fe <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80171f0:	4b0e      	ldr	r3, [pc, #56]	; (801722c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80171f2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80171f6:	4911      	ldr	r1, [pc, #68]	; (801723c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80171f8:	480e      	ldr	r0, [pc, #56]	; (8017234 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80171fa:	f002 fd11 	bl	8019c20 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80171fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	2b00      	cmp	r3, #0
 8017204:	d006      	beq.n	8017214 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017206:	4b09      	ldr	r3, [pc, #36]	; (801722c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017208:	f240 12e3 	movw	r2, #483	; 0x1e3
 801720c:	490c      	ldr	r1, [pc, #48]	; (8017240 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801720e:	4809      	ldr	r0, [pc, #36]	; (8017234 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017210:	f002 fd06 	bl	8019c20 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017214:	6a3b      	ldr	r3, [r7, #32]
 8017216:	2b00      	cmp	r3, #0
 8017218:	bf14      	ite	ne
 801721a:	2301      	movne	r3, #1
 801721c:	2300      	moveq	r3, #0
 801721e:	b2db      	uxtb	r3, r3
 8017220:	e000      	b.n	8017224 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017222:	2300      	movs	r3, #0
}
 8017224:	4618      	mov	r0, r3
 8017226:	3730      	adds	r7, #48	; 0x30
 8017228:	46bd      	mov	sp, r7
 801722a:	bd80      	pop	{r7, pc}
 801722c:	0801e7e8 	.word	0x0801e7e8
 8017230:	0801e8cc 	.word	0x0801e8cc
 8017234:	0801e830 	.word	0x0801e830
 8017238:	0801e8ec 	.word	0x0801e8ec
 801723c:	0801e924 	.word	0x0801e924
 8017240:	0801e934 	.word	0x0801e934

08017244 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017244:	b580      	push	{r7, lr}
 8017246:	b08e      	sub	sp, #56	; 0x38
 8017248:	af00      	add	r7, sp, #0
 801724a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	685b      	ldr	r3, [r3, #4]
 8017250:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017254:	781b      	ldrb	r3, [r3, #0]
 8017256:	f003 030f 	and.w	r3, r3, #15
 801725a:	b2db      	uxtb	r3, r3
 801725c:	009b      	lsls	r3, r3, #2
 801725e:	b2db      	uxtb	r3, r3
 8017260:	2b14      	cmp	r3, #20
 8017262:	f040 8167 	bne.w	8017534 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017268:	88db      	ldrh	r3, [r3, #6]
 801726a:	b29b      	uxth	r3, r3
 801726c:	4618      	mov	r0, r3
 801726e:	f7f3 fb65 	bl	800a93c <lwip_htons>
 8017272:	4603      	mov	r3, r0
 8017274:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017278:	b29b      	uxth	r3, r3
 801727a:	00db      	lsls	r3, r3, #3
 801727c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801727e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017280:	885b      	ldrh	r3, [r3, #2]
 8017282:	b29b      	uxth	r3, r3
 8017284:	4618      	mov	r0, r3
 8017286:	f7f3 fb59 	bl	800a93c <lwip_htons>
 801728a:	4603      	mov	r3, r0
 801728c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801728e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017290:	781b      	ldrb	r3, [r3, #0]
 8017292:	f003 030f 	and.w	r3, r3, #15
 8017296:	b2db      	uxtb	r3, r3
 8017298:	009b      	lsls	r3, r3, #2
 801729a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801729e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80172a2:	b29b      	uxth	r3, r3
 80172a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80172a6:	429a      	cmp	r2, r3
 80172a8:	f0c0 8146 	bcc.w	8017538 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80172ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80172b0:	b29b      	uxth	r3, r3
 80172b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80172b4:	1ad3      	subs	r3, r2, r3
 80172b6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80172b8:	6878      	ldr	r0, [r7, #4]
 80172ba:	f7f4 ffb3 	bl	800c224 <pbuf_clen>
 80172be:	4603      	mov	r3, r0
 80172c0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80172c2:	4ba3      	ldr	r3, [pc, #652]	; (8017550 <ip4_reass+0x30c>)
 80172c4:	881b      	ldrh	r3, [r3, #0]
 80172c6:	461a      	mov	r2, r3
 80172c8:	8c3b      	ldrh	r3, [r7, #32]
 80172ca:	4413      	add	r3, r2
 80172cc:	2b0a      	cmp	r3, #10
 80172ce:	dd10      	ble.n	80172f2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80172d0:	8c3b      	ldrh	r3, [r7, #32]
 80172d2:	4619      	mov	r1, r3
 80172d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80172d6:	f7ff fd81 	bl	8016ddc <ip_reass_remove_oldest_datagram>
 80172da:	4603      	mov	r3, r0
 80172dc:	2b00      	cmp	r3, #0
 80172de:	f000 812d 	beq.w	801753c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80172e2:	4b9b      	ldr	r3, [pc, #620]	; (8017550 <ip4_reass+0x30c>)
 80172e4:	881b      	ldrh	r3, [r3, #0]
 80172e6:	461a      	mov	r2, r3
 80172e8:	8c3b      	ldrh	r3, [r7, #32]
 80172ea:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80172ec:	2b0a      	cmp	r3, #10
 80172ee:	f300 8125 	bgt.w	801753c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80172f2:	4b98      	ldr	r3, [pc, #608]	; (8017554 <ip4_reass+0x310>)
 80172f4:	681b      	ldr	r3, [r3, #0]
 80172f6:	633b      	str	r3, [r7, #48]	; 0x30
 80172f8:	e015      	b.n	8017326 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80172fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172fc:	695a      	ldr	r2, [r3, #20]
 80172fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017300:	68db      	ldr	r3, [r3, #12]
 8017302:	429a      	cmp	r2, r3
 8017304:	d10c      	bne.n	8017320 <ip4_reass+0xdc>
 8017306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017308:	699a      	ldr	r2, [r3, #24]
 801730a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801730c:	691b      	ldr	r3, [r3, #16]
 801730e:	429a      	cmp	r2, r3
 8017310:	d106      	bne.n	8017320 <ip4_reass+0xdc>
 8017312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017314:	899a      	ldrh	r2, [r3, #12]
 8017316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017318:	889b      	ldrh	r3, [r3, #4]
 801731a:	b29b      	uxth	r3, r3
 801731c:	429a      	cmp	r2, r3
 801731e:	d006      	beq.n	801732e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	633b      	str	r3, [r7, #48]	; 0x30
 8017326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017328:	2b00      	cmp	r3, #0
 801732a:	d1e6      	bne.n	80172fa <ip4_reass+0xb6>
 801732c:	e000      	b.n	8017330 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801732e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017332:	2b00      	cmp	r3, #0
 8017334:	d109      	bne.n	801734a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017336:	8c3b      	ldrh	r3, [r7, #32]
 8017338:	4619      	mov	r1, r3
 801733a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801733c:	f7ff fdb0 	bl	8016ea0 <ip_reass_enqueue_new_datagram>
 8017340:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017344:	2b00      	cmp	r3, #0
 8017346:	d11c      	bne.n	8017382 <ip4_reass+0x13e>
      goto nullreturn;
 8017348:	e0f9      	b.n	801753e <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801734c:	88db      	ldrh	r3, [r3, #6]
 801734e:	b29b      	uxth	r3, r3
 8017350:	4618      	mov	r0, r3
 8017352:	f7f3 faf3 	bl	800a93c <lwip_htons>
 8017356:	4603      	mov	r3, r0
 8017358:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801735c:	2b00      	cmp	r3, #0
 801735e:	d110      	bne.n	8017382 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017362:	89db      	ldrh	r3, [r3, #14]
 8017364:	4618      	mov	r0, r3
 8017366:	f7f3 fae9 	bl	800a93c <lwip_htons>
 801736a:	4603      	mov	r3, r0
 801736c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017370:	2b00      	cmp	r3, #0
 8017372:	d006      	beq.n	8017382 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017376:	3308      	adds	r3, #8
 8017378:	2214      	movs	r2, #20
 801737a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801737c:	4618      	mov	r0, r3
 801737e:	f002 fc3c 	bl	8019bfa <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017384:	88db      	ldrh	r3, [r3, #6]
 8017386:	b29b      	uxth	r3, r3
 8017388:	f003 0320 	and.w	r3, r3, #32
 801738c:	2b00      	cmp	r3, #0
 801738e:	bf0c      	ite	eq
 8017390:	2301      	moveq	r3, #1
 8017392:	2300      	movne	r3, #0
 8017394:	b2db      	uxtb	r3, r3
 8017396:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017398:	69fb      	ldr	r3, [r7, #28]
 801739a:	2b00      	cmp	r3, #0
 801739c:	d00e      	beq.n	80173bc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801739e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80173a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80173a2:	4413      	add	r3, r2
 80173a4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80173a6:	8b7a      	ldrh	r2, [r7, #26]
 80173a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80173aa:	429a      	cmp	r2, r3
 80173ac:	f0c0 80a0 	bcc.w	80174f0 <ip4_reass+0x2ac>
 80173b0:	8b7b      	ldrh	r3, [r7, #26]
 80173b2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80173b6:	4293      	cmp	r3, r2
 80173b8:	f200 809a 	bhi.w	80174f0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80173bc:	69fa      	ldr	r2, [r7, #28]
 80173be:	6879      	ldr	r1, [r7, #4]
 80173c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80173c2:	f7ff fdd5 	bl	8016f70 <ip_reass_chain_frag_into_datagram_and_validate>
 80173c6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80173c8:	697b      	ldr	r3, [r7, #20]
 80173ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173ce:	f000 8091 	beq.w	80174f4 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80173d2:	4b5f      	ldr	r3, [pc, #380]	; (8017550 <ip4_reass+0x30c>)
 80173d4:	881a      	ldrh	r2, [r3, #0]
 80173d6:	8c3b      	ldrh	r3, [r7, #32]
 80173d8:	4413      	add	r3, r2
 80173da:	b29a      	uxth	r2, r3
 80173dc:	4b5c      	ldr	r3, [pc, #368]	; (8017550 <ip4_reass+0x30c>)
 80173de:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80173e0:	69fb      	ldr	r3, [r7, #28]
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d00d      	beq.n	8017402 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80173e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80173e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80173ea:	4413      	add	r3, r2
 80173ec:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80173ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173f0:	8a7a      	ldrh	r2, [r7, #18]
 80173f2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80173f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173f6:	7f9b      	ldrb	r3, [r3, #30]
 80173f8:	f043 0301 	orr.w	r3, r3, #1
 80173fc:	b2da      	uxtb	r2, r3
 80173fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017400:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017402:	697b      	ldr	r3, [r7, #20]
 8017404:	2b01      	cmp	r3, #1
 8017406:	d171      	bne.n	80174ec <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801740a:	8b9b      	ldrh	r3, [r3, #28]
 801740c:	3314      	adds	r3, #20
 801740e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017412:	685b      	ldr	r3, [r3, #4]
 8017414:	685b      	ldr	r3, [r3, #4]
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801741c:	685b      	ldr	r3, [r3, #4]
 801741e:	685b      	ldr	r3, [r3, #4]
 8017420:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017424:	3308      	adds	r3, #8
 8017426:	2214      	movs	r2, #20
 8017428:	4619      	mov	r1, r3
 801742a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801742c:	f002 fbe5 	bl	8019bfa <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017430:	8a3b      	ldrh	r3, [r7, #16]
 8017432:	4618      	mov	r0, r3
 8017434:	f7f3 fa82 	bl	800a93c <lwip_htons>
 8017438:	4603      	mov	r3, r0
 801743a:	461a      	mov	r2, r3
 801743c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801743e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017442:	2200      	movs	r2, #0
 8017444:	719a      	strb	r2, [r3, #6]
 8017446:	2200      	movs	r2, #0
 8017448:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801744a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801744c:	2200      	movs	r2, #0
 801744e:	729a      	strb	r2, [r3, #10]
 8017450:	2200      	movs	r2, #0
 8017452:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017456:	685b      	ldr	r3, [r3, #4]
 8017458:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801745a:	e00d      	b.n	8017478 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801745c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801745e:	685b      	ldr	r3, [r3, #4]
 8017460:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017462:	2114      	movs	r1, #20
 8017464:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017466:	f7f4 fd97 	bl	800bf98 <pbuf_remove_header>
      pbuf_cat(p, r);
 801746a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801746c:	6878      	ldr	r0, [r7, #4]
 801746e:	f7f4 ff19 	bl	800c2a4 <pbuf_cat>
      r = iprh->next_pbuf;
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	681b      	ldr	r3, [r3, #0]
 8017476:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801747a:	2b00      	cmp	r3, #0
 801747c:	d1ee      	bne.n	801745c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801747e:	4b35      	ldr	r3, [pc, #212]	; (8017554 <ip4_reass+0x310>)
 8017480:	681b      	ldr	r3, [r3, #0]
 8017482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017484:	429a      	cmp	r2, r3
 8017486:	d102      	bne.n	801748e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017488:	2300      	movs	r3, #0
 801748a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801748c:	e010      	b.n	80174b0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801748e:	4b31      	ldr	r3, [pc, #196]	; (8017554 <ip4_reass+0x310>)
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017494:	e007      	b.n	80174a6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8017496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801749c:	429a      	cmp	r2, r3
 801749e:	d006      	beq.n	80174ae <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80174a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174a2:	681b      	ldr	r3, [r3, #0]
 80174a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80174a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d1f4      	bne.n	8017496 <ip4_reass+0x252>
 80174ac:	e000      	b.n	80174b0 <ip4_reass+0x26c>
          break;
 80174ae:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80174b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80174b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80174b4:	f7ff fd2e 	bl	8016f14 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80174b8:	6878      	ldr	r0, [r7, #4]
 80174ba:	f7f4 feb3 	bl	800c224 <pbuf_clen>
 80174be:	4603      	mov	r3, r0
 80174c0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80174c2:	4b23      	ldr	r3, [pc, #140]	; (8017550 <ip4_reass+0x30c>)
 80174c4:	881b      	ldrh	r3, [r3, #0]
 80174c6:	8c3a      	ldrh	r2, [r7, #32]
 80174c8:	429a      	cmp	r2, r3
 80174ca:	d906      	bls.n	80174da <ip4_reass+0x296>
 80174cc:	4b22      	ldr	r3, [pc, #136]	; (8017558 <ip4_reass+0x314>)
 80174ce:	f240 229b 	movw	r2, #667	; 0x29b
 80174d2:	4922      	ldr	r1, [pc, #136]	; (801755c <ip4_reass+0x318>)
 80174d4:	4822      	ldr	r0, [pc, #136]	; (8017560 <ip4_reass+0x31c>)
 80174d6:	f002 fba3 	bl	8019c20 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80174da:	4b1d      	ldr	r3, [pc, #116]	; (8017550 <ip4_reass+0x30c>)
 80174dc:	881a      	ldrh	r2, [r3, #0]
 80174de:	8c3b      	ldrh	r3, [r7, #32]
 80174e0:	1ad3      	subs	r3, r2, r3
 80174e2:	b29a      	uxth	r2, r3
 80174e4:	4b1a      	ldr	r3, [pc, #104]	; (8017550 <ip4_reass+0x30c>)
 80174e6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	e02c      	b.n	8017546 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80174ec:	2300      	movs	r3, #0
 80174ee:	e02a      	b.n	8017546 <ip4_reass+0x302>

nullreturn_ipr:
 80174f0:	bf00      	nop
 80174f2:	e000      	b.n	80174f6 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80174f4:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80174f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d106      	bne.n	801750a <ip4_reass+0x2c6>
 80174fc:	4b16      	ldr	r3, [pc, #88]	; (8017558 <ip4_reass+0x314>)
 80174fe:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8017502:	4918      	ldr	r1, [pc, #96]	; (8017564 <ip4_reass+0x320>)
 8017504:	4816      	ldr	r0, [pc, #88]	; (8017560 <ip4_reass+0x31c>)
 8017506:	f002 fb8b 	bl	8019c20 <iprintf>
  if (ipr->p == NULL) {
 801750a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801750c:	685b      	ldr	r3, [r3, #4]
 801750e:	2b00      	cmp	r3, #0
 8017510:	d114      	bne.n	801753c <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017512:	4b10      	ldr	r3, [pc, #64]	; (8017554 <ip4_reass+0x310>)
 8017514:	681b      	ldr	r3, [r3, #0]
 8017516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017518:	429a      	cmp	r2, r3
 801751a:	d006      	beq.n	801752a <ip4_reass+0x2e6>
 801751c:	4b0e      	ldr	r3, [pc, #56]	; (8017558 <ip4_reass+0x314>)
 801751e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017522:	4911      	ldr	r1, [pc, #68]	; (8017568 <ip4_reass+0x324>)
 8017524:	480e      	ldr	r0, [pc, #56]	; (8017560 <ip4_reass+0x31c>)
 8017526:	f002 fb7b 	bl	8019c20 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801752a:	2100      	movs	r1, #0
 801752c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801752e:	f7ff fcf1 	bl	8016f14 <ip_reass_dequeue_datagram>
 8017532:	e004      	b.n	801753e <ip4_reass+0x2fa>
    goto nullreturn;
 8017534:	bf00      	nop
 8017536:	e002      	b.n	801753e <ip4_reass+0x2fa>
    goto nullreturn;
 8017538:	bf00      	nop
 801753a:	e000      	b.n	801753e <ip4_reass+0x2fa>
  }

nullreturn:
 801753c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801753e:	6878      	ldr	r0, [r7, #4]
 8017540:	f7f4 fde2 	bl	800c108 <pbuf_free>
  return NULL;
 8017544:	2300      	movs	r3, #0
}
 8017546:	4618      	mov	r0, r3
 8017548:	3738      	adds	r7, #56	; 0x38
 801754a:	46bd      	mov	sp, r7
 801754c:	bd80      	pop	{r7, pc}
 801754e:	bf00      	nop
 8017550:	20008794 	.word	0x20008794
 8017554:	20008790 	.word	0x20008790
 8017558:	0801e7e8 	.word	0x0801e7e8
 801755c:	0801e958 	.word	0x0801e958
 8017560:	0801e830 	.word	0x0801e830
 8017564:	0801e974 	.word	0x0801e974
 8017568:	0801e980 	.word	0x0801e980

0801756c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801756c:	b580      	push	{r7, lr}
 801756e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017570:	2005      	movs	r0, #5
 8017572:	f7f3 fe99 	bl	800b2a8 <memp_malloc>
 8017576:	4603      	mov	r3, r0
}
 8017578:	4618      	mov	r0, r3
 801757a:	bd80      	pop	{r7, pc}

0801757c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801757c:	b580      	push	{r7, lr}
 801757e:	b082      	sub	sp, #8
 8017580:	af00      	add	r7, sp, #0
 8017582:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	2b00      	cmp	r3, #0
 8017588:	d106      	bne.n	8017598 <ip_frag_free_pbuf_custom_ref+0x1c>
 801758a:	4b07      	ldr	r3, [pc, #28]	; (80175a8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801758c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8017590:	4906      	ldr	r1, [pc, #24]	; (80175ac <ip_frag_free_pbuf_custom_ref+0x30>)
 8017592:	4807      	ldr	r0, [pc, #28]	; (80175b0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8017594:	f002 fb44 	bl	8019c20 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017598:	6879      	ldr	r1, [r7, #4]
 801759a:	2005      	movs	r0, #5
 801759c:	f7f3 fed6 	bl	800b34c <memp_free>
}
 80175a0:	bf00      	nop
 80175a2:	3708      	adds	r7, #8
 80175a4:	46bd      	mov	sp, r7
 80175a6:	bd80      	pop	{r7, pc}
 80175a8:	0801e7e8 	.word	0x0801e7e8
 80175ac:	0801e9a0 	.word	0x0801e9a0
 80175b0:	0801e830 	.word	0x0801e830

080175b4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80175b4:	b580      	push	{r7, lr}
 80175b6:	b084      	sub	sp, #16
 80175b8:	af00      	add	r7, sp, #0
 80175ba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d106      	bne.n	80175d4 <ipfrag_free_pbuf_custom+0x20>
 80175c6:	4b11      	ldr	r3, [pc, #68]	; (801760c <ipfrag_free_pbuf_custom+0x58>)
 80175c8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80175cc:	4910      	ldr	r1, [pc, #64]	; (8017610 <ipfrag_free_pbuf_custom+0x5c>)
 80175ce:	4811      	ldr	r0, [pc, #68]	; (8017614 <ipfrag_free_pbuf_custom+0x60>)
 80175d0:	f002 fb26 	bl	8019c20 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80175d4:	68fa      	ldr	r2, [r7, #12]
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	429a      	cmp	r2, r3
 80175da:	d006      	beq.n	80175ea <ipfrag_free_pbuf_custom+0x36>
 80175dc:	4b0b      	ldr	r3, [pc, #44]	; (801760c <ipfrag_free_pbuf_custom+0x58>)
 80175de:	f240 22cf 	movw	r2, #719	; 0x2cf
 80175e2:	490d      	ldr	r1, [pc, #52]	; (8017618 <ipfrag_free_pbuf_custom+0x64>)
 80175e4:	480b      	ldr	r0, [pc, #44]	; (8017614 <ipfrag_free_pbuf_custom+0x60>)
 80175e6:	f002 fb1b 	bl	8019c20 <iprintf>
  if (pcr->original != NULL) {
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	695b      	ldr	r3, [r3, #20]
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d004      	beq.n	80175fc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80175f2:	68fb      	ldr	r3, [r7, #12]
 80175f4:	695b      	ldr	r3, [r3, #20]
 80175f6:	4618      	mov	r0, r3
 80175f8:	f7f4 fd86 	bl	800c108 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80175fc:	68f8      	ldr	r0, [r7, #12]
 80175fe:	f7ff ffbd 	bl	801757c <ip_frag_free_pbuf_custom_ref>
}
 8017602:	bf00      	nop
 8017604:	3710      	adds	r7, #16
 8017606:	46bd      	mov	sp, r7
 8017608:	bd80      	pop	{r7, pc}
 801760a:	bf00      	nop
 801760c:	0801e7e8 	.word	0x0801e7e8
 8017610:	0801e9ac 	.word	0x0801e9ac
 8017614:	0801e830 	.word	0x0801e830
 8017618:	0801e9b8 	.word	0x0801e9b8

0801761c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801761c:	b580      	push	{r7, lr}
 801761e:	b094      	sub	sp, #80	; 0x50
 8017620:	af02      	add	r7, sp, #8
 8017622:	60f8      	str	r0, [r7, #12]
 8017624:	60b9      	str	r1, [r7, #8]
 8017626:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017628:	2300      	movs	r3, #0
 801762a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801762e:	68bb      	ldr	r3, [r7, #8]
 8017630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017632:	3b14      	subs	r3, #20
 8017634:	2b00      	cmp	r3, #0
 8017636:	da00      	bge.n	801763a <ip4_frag+0x1e>
 8017638:	3307      	adds	r3, #7
 801763a:	10db      	asrs	r3, r3, #3
 801763c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801763e:	2314      	movs	r3, #20
 8017640:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	685b      	ldr	r3, [r3, #4]
 8017646:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801764a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801764e:	781b      	ldrb	r3, [r3, #0]
 8017650:	f003 030f 	and.w	r3, r3, #15
 8017654:	b2db      	uxtb	r3, r3
 8017656:	009b      	lsls	r3, r3, #2
 8017658:	b2db      	uxtb	r3, r3
 801765a:	2b14      	cmp	r3, #20
 801765c:	d002      	beq.n	8017664 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801765e:	f06f 0305 	mvn.w	r3, #5
 8017662:	e10f      	b.n	8017884 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	895b      	ldrh	r3, [r3, #10]
 8017668:	2b13      	cmp	r3, #19
 801766a:	d809      	bhi.n	8017680 <ip4_frag+0x64>
 801766c:	4b87      	ldr	r3, [pc, #540]	; (801788c <ip4_frag+0x270>)
 801766e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8017672:	4987      	ldr	r1, [pc, #540]	; (8017890 <ip4_frag+0x274>)
 8017674:	4887      	ldr	r0, [pc, #540]	; (8017894 <ip4_frag+0x278>)
 8017676:	f002 fad3 	bl	8019c20 <iprintf>
 801767a:	f06f 0305 	mvn.w	r3, #5
 801767e:	e101      	b.n	8017884 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017682:	88db      	ldrh	r3, [r3, #6]
 8017684:	b29b      	uxth	r3, r3
 8017686:	4618      	mov	r0, r3
 8017688:	f7f3 f958 	bl	800a93c <lwip_htons>
 801768c:	4603      	mov	r3, r0
 801768e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017690:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017692:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017696:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801769a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801769c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80176a0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80176a2:	68fb      	ldr	r3, [r7, #12]
 80176a4:	891b      	ldrh	r3, [r3, #8]
 80176a6:	3b14      	subs	r3, #20
 80176a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80176ac:	e0e0      	b.n	8017870 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80176ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80176b0:	00db      	lsls	r3, r3, #3
 80176b2:	b29b      	uxth	r3, r3
 80176b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80176b8:	4293      	cmp	r3, r2
 80176ba:	bf28      	it	cs
 80176bc:	4613      	movcs	r3, r2
 80176be:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80176c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80176c4:	2114      	movs	r1, #20
 80176c6:	200e      	movs	r0, #14
 80176c8:	f7f4 fa0c 	bl	800bae4 <pbuf_alloc>
 80176cc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80176ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	f000 80d4 	beq.w	801787e <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80176d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176d8:	895b      	ldrh	r3, [r3, #10]
 80176da:	2b13      	cmp	r3, #19
 80176dc:	d806      	bhi.n	80176ec <ip4_frag+0xd0>
 80176de:	4b6b      	ldr	r3, [pc, #428]	; (801788c <ip4_frag+0x270>)
 80176e0:	f240 3225 	movw	r2, #805	; 0x325
 80176e4:	496c      	ldr	r1, [pc, #432]	; (8017898 <ip4_frag+0x27c>)
 80176e6:	486b      	ldr	r0, [pc, #428]	; (8017894 <ip4_frag+0x278>)
 80176e8:	f002 fa9a 	bl	8019c20 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80176ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176ee:	685b      	ldr	r3, [r3, #4]
 80176f0:	2214      	movs	r2, #20
 80176f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80176f4:	4618      	mov	r0, r3
 80176f6:	f002 fa80 	bl	8019bfa <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80176fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176fc:	685b      	ldr	r3, [r3, #4]
 80176fe:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017700:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017702:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017706:	e064      	b.n	80177d2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	895a      	ldrh	r2, [r3, #10]
 801770c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801770e:	1ad3      	subs	r3, r2, r3
 8017710:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	895b      	ldrh	r3, [r3, #10]
 8017716:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017718:	429a      	cmp	r2, r3
 801771a:	d906      	bls.n	801772a <ip4_frag+0x10e>
 801771c:	4b5b      	ldr	r3, [pc, #364]	; (801788c <ip4_frag+0x270>)
 801771e:	f240 322d 	movw	r2, #813	; 0x32d
 8017722:	495e      	ldr	r1, [pc, #376]	; (801789c <ip4_frag+0x280>)
 8017724:	485b      	ldr	r0, [pc, #364]	; (8017894 <ip4_frag+0x278>)
 8017726:	f002 fa7b 	bl	8019c20 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801772a:	8bfa      	ldrh	r2, [r7, #30]
 801772c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017730:	4293      	cmp	r3, r2
 8017732:	bf28      	it	cs
 8017734:	4613      	movcs	r3, r2
 8017736:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801773a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801773e:	2b00      	cmp	r3, #0
 8017740:	d105      	bne.n	801774e <ip4_frag+0x132>
        poff = 0;
 8017742:	2300      	movs	r3, #0
 8017744:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	60fb      	str	r3, [r7, #12]
        continue;
 801774c:	e041      	b.n	80177d2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801774e:	f7ff ff0d 	bl	801756c <ip_frag_alloc_pbuf_custom_ref>
 8017752:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017754:	69bb      	ldr	r3, [r7, #24]
 8017756:	2b00      	cmp	r3, #0
 8017758:	d103      	bne.n	8017762 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801775a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801775c:	f7f4 fcd4 	bl	800c108 <pbuf_free>
        goto memerr;
 8017760:	e08e      	b.n	8017880 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017762:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017768:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801776a:	4413      	add	r3, r2
 801776c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017770:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017774:	9201      	str	r2, [sp, #4]
 8017776:	9300      	str	r3, [sp, #0]
 8017778:	4603      	mov	r3, r0
 801777a:	2241      	movs	r2, #65	; 0x41
 801777c:	2000      	movs	r0, #0
 801777e:	f7f4 fad7 	bl	800bd30 <pbuf_alloced_custom>
 8017782:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017784:	697b      	ldr	r3, [r7, #20]
 8017786:	2b00      	cmp	r3, #0
 8017788:	d106      	bne.n	8017798 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801778a:	69b8      	ldr	r0, [r7, #24]
 801778c:	f7ff fef6 	bl	801757c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017790:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017792:	f7f4 fcb9 	bl	800c108 <pbuf_free>
        goto memerr;
 8017796:	e073      	b.n	8017880 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8017798:	68f8      	ldr	r0, [r7, #12]
 801779a:	f7f4 fd5b 	bl	800c254 <pbuf_ref>
      pcr->original = p;
 801779e:	69bb      	ldr	r3, [r7, #24]
 80177a0:	68fa      	ldr	r2, [r7, #12]
 80177a2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80177a4:	69bb      	ldr	r3, [r7, #24]
 80177a6:	4a3e      	ldr	r2, [pc, #248]	; (80178a0 <ip4_frag+0x284>)
 80177a8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80177aa:	6979      	ldr	r1, [r7, #20]
 80177ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80177ae:	f7f4 fd79 	bl	800c2a4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80177b2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80177b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80177ba:	1ad3      	subs	r3, r2, r3
 80177bc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80177c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d004      	beq.n	80177d2 <ip4_frag+0x1b6>
        poff = 0;
 80177c8:	2300      	movs	r3, #0
 80177ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80177d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d196      	bne.n	8017708 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80177da:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80177dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80177e0:	4413      	add	r3, r2
 80177e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80177e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80177e8:	68bb      	ldr	r3, [r7, #8]
 80177ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80177ec:	3b14      	subs	r3, #20
 80177ee:	429a      	cmp	r2, r3
 80177f0:	bfd4      	ite	le
 80177f2:	2301      	movle	r3, #1
 80177f4:	2300      	movgt	r3, #0
 80177f6:	b2db      	uxtb	r3, r3
 80177f8:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80177fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80177fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017802:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017804:	6a3b      	ldr	r3, [r7, #32]
 8017806:	2b00      	cmp	r3, #0
 8017808:	d002      	beq.n	8017810 <ip4_frag+0x1f4>
 801780a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801780c:	2b00      	cmp	r3, #0
 801780e:	d003      	beq.n	8017818 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017810:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017812:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017816:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017818:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801781a:	4618      	mov	r0, r3
 801781c:	f7f3 f88e 	bl	800a93c <lwip_htons>
 8017820:	4603      	mov	r3, r0
 8017822:	461a      	mov	r2, r3
 8017824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017826:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017828:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801782a:	3314      	adds	r3, #20
 801782c:	b29b      	uxth	r3, r3
 801782e:	4618      	mov	r0, r3
 8017830:	f7f3 f884 	bl	800a93c <lwip_htons>
 8017834:	4603      	mov	r3, r0
 8017836:	461a      	mov	r2, r3
 8017838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801783a:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801783e:	2200      	movs	r2, #0
 8017840:	729a      	strb	r2, [r3, #10]
 8017842:	2200      	movs	r2, #0
 8017844:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017846:	68bb      	ldr	r3, [r7, #8]
 8017848:	695b      	ldr	r3, [r3, #20]
 801784a:	687a      	ldr	r2, [r7, #4]
 801784c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801784e:	68b8      	ldr	r0, [r7, #8]
 8017850:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017852:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017854:	f7f4 fc58 	bl	800c108 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017858:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801785c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801785e:	1ad3      	subs	r3, r2, r3
 8017860:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017864:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017868:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801786a:	4413      	add	r3, r2
 801786c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017870:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017874:	2b00      	cmp	r3, #0
 8017876:	f47f af1a 	bne.w	80176ae <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801787a:	2300      	movs	r3, #0
 801787c:	e002      	b.n	8017884 <ip4_frag+0x268>
      goto memerr;
 801787e:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017880:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017884:	4618      	mov	r0, r3
 8017886:	3748      	adds	r7, #72	; 0x48
 8017888:	46bd      	mov	sp, r7
 801788a:	bd80      	pop	{r7, pc}
 801788c:	0801e7e8 	.word	0x0801e7e8
 8017890:	0801e9c4 	.word	0x0801e9c4
 8017894:	0801e830 	.word	0x0801e830
 8017898:	0801e9e0 	.word	0x0801e9e0
 801789c:	0801ea00 	.word	0x0801ea00
 80178a0:	080175b5 	.word	0x080175b5

080178a4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80178a4:	b580      	push	{r7, lr}
 80178a6:	b086      	sub	sp, #24
 80178a8:	af00      	add	r7, sp, #0
 80178aa:	6078      	str	r0, [r7, #4]
 80178ac:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80178ae:	230e      	movs	r3, #14
 80178b0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	895b      	ldrh	r3, [r3, #10]
 80178b6:	2b0e      	cmp	r3, #14
 80178b8:	d96e      	bls.n	8017998 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	7bdb      	ldrb	r3, [r3, #15]
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d106      	bne.n	80178d0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80178c2:	683b      	ldr	r3, [r7, #0]
 80178c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80178c8:	3301      	adds	r3, #1
 80178ca:	b2da      	uxtb	r2, r3
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	685b      	ldr	r3, [r3, #4]
 80178d4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80178d6:	693b      	ldr	r3, [r7, #16]
 80178d8:	7b1a      	ldrb	r2, [r3, #12]
 80178da:	7b5b      	ldrb	r3, [r3, #13]
 80178dc:	021b      	lsls	r3, r3, #8
 80178de:	4313      	orrs	r3, r2
 80178e0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80178e2:	693b      	ldr	r3, [r7, #16]
 80178e4:	781b      	ldrb	r3, [r3, #0]
 80178e6:	f003 0301 	and.w	r3, r3, #1
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d023      	beq.n	8017936 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80178ee:	693b      	ldr	r3, [r7, #16]
 80178f0:	781b      	ldrb	r3, [r3, #0]
 80178f2:	2b01      	cmp	r3, #1
 80178f4:	d10f      	bne.n	8017916 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80178f6:	693b      	ldr	r3, [r7, #16]
 80178f8:	785b      	ldrb	r3, [r3, #1]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d11b      	bne.n	8017936 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80178fe:	693b      	ldr	r3, [r7, #16]
 8017900:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017902:	2b5e      	cmp	r3, #94	; 0x5e
 8017904:	d117      	bne.n	8017936 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	7b5b      	ldrb	r3, [r3, #13]
 801790a:	f043 0310 	orr.w	r3, r3, #16
 801790e:	b2da      	uxtb	r2, r3
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	735a      	strb	r2, [r3, #13]
 8017914:	e00f      	b.n	8017936 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017916:	693b      	ldr	r3, [r7, #16]
 8017918:	2206      	movs	r2, #6
 801791a:	4928      	ldr	r1, [pc, #160]	; (80179bc <ethernet_input+0x118>)
 801791c:	4618      	mov	r0, r3
 801791e:	f002 f95d 	bl	8019bdc <memcmp>
 8017922:	4603      	mov	r3, r0
 8017924:	2b00      	cmp	r3, #0
 8017926:	d106      	bne.n	8017936 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	7b5b      	ldrb	r3, [r3, #13]
 801792c:	f043 0308 	orr.w	r3, r3, #8
 8017930:	b2da      	uxtb	r2, r3
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017936:	89fb      	ldrh	r3, [r7, #14]
 8017938:	2b08      	cmp	r3, #8
 801793a:	d003      	beq.n	8017944 <ethernet_input+0xa0>
 801793c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017940:	d014      	beq.n	801796c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017942:	e032      	b.n	80179aa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017944:	683b      	ldr	r3, [r7, #0]
 8017946:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801794a:	f003 0308 	and.w	r3, r3, #8
 801794e:	2b00      	cmp	r3, #0
 8017950:	d024      	beq.n	801799c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017952:	8afb      	ldrh	r3, [r7, #22]
 8017954:	4619      	mov	r1, r3
 8017956:	6878      	ldr	r0, [r7, #4]
 8017958:	f7f4 fb1e 	bl	800bf98 <pbuf_remove_header>
 801795c:	4603      	mov	r3, r0
 801795e:	2b00      	cmp	r3, #0
 8017960:	d11e      	bne.n	80179a0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017962:	6839      	ldr	r1, [r7, #0]
 8017964:	6878      	ldr	r0, [r7, #4]
 8017966:	f7fe fdc9 	bl	80164fc <ip4_input>
      break;
 801796a:	e013      	b.n	8017994 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801796c:	683b      	ldr	r3, [r7, #0]
 801796e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017972:	f003 0308 	and.w	r3, r3, #8
 8017976:	2b00      	cmp	r3, #0
 8017978:	d014      	beq.n	80179a4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801797a:	8afb      	ldrh	r3, [r7, #22]
 801797c:	4619      	mov	r1, r3
 801797e:	6878      	ldr	r0, [r7, #4]
 8017980:	f7f4 fb0a 	bl	800bf98 <pbuf_remove_header>
 8017984:	4603      	mov	r3, r0
 8017986:	2b00      	cmp	r3, #0
 8017988:	d10e      	bne.n	80179a8 <ethernet_input+0x104>
        etharp_input(p, netif);
 801798a:	6839      	ldr	r1, [r7, #0]
 801798c:	6878      	ldr	r0, [r7, #4]
 801798e:	f7fd ff65 	bl	801585c <etharp_input>
      break;
 8017992:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017994:	2300      	movs	r3, #0
 8017996:	e00c      	b.n	80179b2 <ethernet_input+0x10e>
    goto free_and_return;
 8017998:	bf00      	nop
 801799a:	e006      	b.n	80179aa <ethernet_input+0x106>
        goto free_and_return;
 801799c:	bf00      	nop
 801799e:	e004      	b.n	80179aa <ethernet_input+0x106>
        goto free_and_return;
 80179a0:	bf00      	nop
 80179a2:	e002      	b.n	80179aa <ethernet_input+0x106>
        goto free_and_return;
 80179a4:	bf00      	nop
 80179a6:	e000      	b.n	80179aa <ethernet_input+0x106>
        goto free_and_return;
 80179a8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80179aa:	6878      	ldr	r0, [r7, #4]
 80179ac:	f7f4 fbac 	bl	800c108 <pbuf_free>
  return ERR_OK;
 80179b0:	2300      	movs	r3, #0
}
 80179b2:	4618      	mov	r0, r3
 80179b4:	3718      	adds	r7, #24
 80179b6:	46bd      	mov	sp, r7
 80179b8:	bd80      	pop	{r7, pc}
 80179ba:	bf00      	nop
 80179bc:	0801ec94 	.word	0x0801ec94

080179c0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80179c0:	b580      	push	{r7, lr}
 80179c2:	b086      	sub	sp, #24
 80179c4:	af00      	add	r7, sp, #0
 80179c6:	60f8      	str	r0, [r7, #12]
 80179c8:	60b9      	str	r1, [r7, #8]
 80179ca:	607a      	str	r2, [r7, #4]
 80179cc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80179ce:	8c3b      	ldrh	r3, [r7, #32]
 80179d0:	4618      	mov	r0, r3
 80179d2:	f7f2 ffb3 	bl	800a93c <lwip_htons>
 80179d6:	4603      	mov	r3, r0
 80179d8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80179da:	210e      	movs	r1, #14
 80179dc:	68b8      	ldr	r0, [r7, #8]
 80179de:	f7f4 facb 	bl	800bf78 <pbuf_add_header>
 80179e2:	4603      	mov	r3, r0
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d125      	bne.n	8017a34 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80179e8:	68bb      	ldr	r3, [r7, #8]
 80179ea:	685b      	ldr	r3, [r3, #4]
 80179ec:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80179ee:	693b      	ldr	r3, [r7, #16]
 80179f0:	8afa      	ldrh	r2, [r7, #22]
 80179f2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80179f4:	693b      	ldr	r3, [r7, #16]
 80179f6:	2206      	movs	r2, #6
 80179f8:	6839      	ldr	r1, [r7, #0]
 80179fa:	4618      	mov	r0, r3
 80179fc:	f002 f8fd 	bl	8019bfa <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017a00:	693b      	ldr	r3, [r7, #16]
 8017a02:	3306      	adds	r3, #6
 8017a04:	2206      	movs	r2, #6
 8017a06:	6879      	ldr	r1, [r7, #4]
 8017a08:	4618      	mov	r0, r3
 8017a0a:	f002 f8f6 	bl	8019bfa <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017a14:	2b06      	cmp	r3, #6
 8017a16:	d006      	beq.n	8017a26 <ethernet_output+0x66>
 8017a18:	4b0a      	ldr	r3, [pc, #40]	; (8017a44 <ethernet_output+0x84>)
 8017a1a:	f240 1233 	movw	r2, #307	; 0x133
 8017a1e:	490a      	ldr	r1, [pc, #40]	; (8017a48 <ethernet_output+0x88>)
 8017a20:	480a      	ldr	r0, [pc, #40]	; (8017a4c <ethernet_output+0x8c>)
 8017a22:	f002 f8fd 	bl	8019c20 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	699b      	ldr	r3, [r3, #24]
 8017a2a:	68b9      	ldr	r1, [r7, #8]
 8017a2c:	68f8      	ldr	r0, [r7, #12]
 8017a2e:	4798      	blx	r3
 8017a30:	4603      	mov	r3, r0
 8017a32:	e002      	b.n	8017a3a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017a34:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017a36:	f06f 0301 	mvn.w	r3, #1
}
 8017a3a:	4618      	mov	r0, r3
 8017a3c:	3718      	adds	r7, #24
 8017a3e:	46bd      	mov	sp, r7
 8017a40:	bd80      	pop	{r7, pc}
 8017a42:	bf00      	nop
 8017a44:	0801ea10 	.word	0x0801ea10
 8017a48:	0801ea48 	.word	0x0801ea48
 8017a4c:	0801ea7c 	.word	0x0801ea7c

08017a50 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017a50:	b580      	push	{r7, lr}
 8017a52:	b086      	sub	sp, #24
 8017a54:	af00      	add	r7, sp, #0
 8017a56:	6078      	str	r0, [r7, #4]
 8017a58:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8017a5a:	683b      	ldr	r3, [r7, #0]
 8017a5c:	60bb      	str	r3, [r7, #8]
 8017a5e:	2304      	movs	r3, #4
 8017a60:	60fb      	str	r3, [r7, #12]
 8017a62:	2300      	movs	r3, #0
 8017a64:	613b      	str	r3, [r7, #16]
 8017a66:	2300      	movs	r3, #0
 8017a68:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017a6a:	f107 0308 	add.w	r3, r7, #8
 8017a6e:	2100      	movs	r1, #0
 8017a70:	4618      	mov	r0, r3
 8017a72:	f7ec fc72 	bl	800435a <osMessageCreate>
 8017a76:	4602      	mov	r2, r0
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	681b      	ldr	r3, [r3, #0]
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d102      	bne.n	8017a8a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017a84:	f04f 33ff 	mov.w	r3, #4294967295
 8017a88:	e000      	b.n	8017a8c <sys_mbox_new+0x3c>

  return ERR_OK;
 8017a8a:	2300      	movs	r3, #0
}
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	3718      	adds	r7, #24
 8017a90:	46bd      	mov	sp, r7
 8017a92:	bd80      	pop	{r7, pc}

08017a94 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8017a94:	b580      	push	{r7, lr}
 8017a96:	b082      	sub	sp, #8
 8017a98:	af00      	add	r7, sp, #0
 8017a9a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	4618      	mov	r0, r3
 8017aa2:	f7ec fd37 	bl	8004514 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	4618      	mov	r0, r3
 8017aac:	f7ec fd48 	bl	8004540 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017ab0:	bf00      	nop
 8017ab2:	3708      	adds	r7, #8
 8017ab4:	46bd      	mov	sp, r7
 8017ab6:	bd80      	pop	{r7, pc}

08017ab8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017ab8:	b580      	push	{r7, lr}
 8017aba:	b084      	sub	sp, #16
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	6078      	str	r0, [r7, #4]
 8017ac0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	681b      	ldr	r3, [r3, #0]
 8017ac6:	6839      	ldr	r1, [r7, #0]
 8017ac8:	2200      	movs	r2, #0
 8017aca:	4618      	mov	r0, r3
 8017acc:	f7ec fc6e 	bl	80043ac <osMessagePut>
 8017ad0:	4603      	mov	r3, r0
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d102      	bne.n	8017adc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	73fb      	strb	r3, [r7, #15]
 8017ada:	e001      	b.n	8017ae0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017adc:	23ff      	movs	r3, #255	; 0xff
 8017ade:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017ae4:	4618      	mov	r0, r3
 8017ae6:	3710      	adds	r7, #16
 8017ae8:	46bd      	mov	sp, r7
 8017aea:	bd80      	pop	{r7, pc}

08017aec <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017aec:	b580      	push	{r7, lr}
 8017aee:	b08c      	sub	sp, #48	; 0x30
 8017af0:	af00      	add	r7, sp, #0
 8017af2:	61f8      	str	r0, [r7, #28]
 8017af4:	61b9      	str	r1, [r7, #24]
 8017af6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8017af8:	f7ec fa57 	bl	8003faa <osKernelSysTick>
 8017afc:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017afe:	697b      	ldr	r3, [r7, #20]
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d017      	beq.n	8017b34 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8017b04:	69fb      	ldr	r3, [r7, #28]
 8017b06:	6819      	ldr	r1, [r3, #0]
 8017b08:	f107 0320 	add.w	r3, r7, #32
 8017b0c:	697a      	ldr	r2, [r7, #20]
 8017b0e:	4618      	mov	r0, r3
 8017b10:	f7ec fc8c 	bl	800442c <osMessageGet>

    if(event.status == osEventMessage)
 8017b14:	6a3b      	ldr	r3, [r7, #32]
 8017b16:	2b10      	cmp	r3, #16
 8017b18:	d109      	bne.n	8017b2e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b1c:	461a      	mov	r2, r3
 8017b1e:	69bb      	ldr	r3, [r7, #24]
 8017b20:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8017b22:	f7ec fa42 	bl	8003faa <osKernelSysTick>
 8017b26:	4602      	mov	r2, r0
 8017b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b2a:	1ad3      	subs	r3, r2, r3
 8017b2c:	e019      	b.n	8017b62 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8017b32:	e016      	b.n	8017b62 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8017b34:	69fb      	ldr	r3, [r7, #28]
 8017b36:	6819      	ldr	r1, [r3, #0]
 8017b38:	463b      	mov	r3, r7
 8017b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8017b3e:	4618      	mov	r0, r3
 8017b40:	f7ec fc74 	bl	800442c <osMessageGet>
 8017b44:	f107 0320 	add.w	r3, r7, #32
 8017b48:	463a      	mov	r2, r7
 8017b4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8017b4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b52:	461a      	mov	r2, r3
 8017b54:	69bb      	ldr	r3, [r7, #24]
 8017b56:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017b58:	f7ec fa27 	bl	8003faa <osKernelSysTick>
 8017b5c:	4602      	mov	r2, r0
 8017b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b60:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017b62:	4618      	mov	r0, r3
 8017b64:	3730      	adds	r7, #48	; 0x30
 8017b66:	46bd      	mov	sp, r7
 8017b68:	bd80      	pop	{r7, pc}

08017b6a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8017b6a:	b580      	push	{r7, lr}
 8017b6c:	b086      	sub	sp, #24
 8017b6e:	af00      	add	r7, sp, #0
 8017b70:	6078      	str	r0, [r7, #4]
 8017b72:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	6819      	ldr	r1, [r3, #0]
 8017b78:	f107 030c 	add.w	r3, r7, #12
 8017b7c:	2200      	movs	r2, #0
 8017b7e:	4618      	mov	r0, r3
 8017b80:	f7ec fc54 	bl	800442c <osMessageGet>

  if(event.status == osEventMessage)
 8017b84:	68fb      	ldr	r3, [r7, #12]
 8017b86:	2b10      	cmp	r3, #16
 8017b88:	d105      	bne.n	8017b96 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8017b8a:	693b      	ldr	r3, [r7, #16]
 8017b8c:	461a      	mov	r2, r3
 8017b8e:	683b      	ldr	r3, [r7, #0]
 8017b90:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8017b92:	2300      	movs	r3, #0
 8017b94:	e001      	b.n	8017b9a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8017b96:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8017b9a:	4618      	mov	r0, r3
 8017b9c:	3718      	adds	r7, #24
 8017b9e:	46bd      	mov	sp, r7
 8017ba0:	bd80      	pop	{r7, pc}

08017ba2 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017ba2:	b480      	push	{r7}
 8017ba4:	b083      	sub	sp, #12
 8017ba6:	af00      	add	r7, sp, #0
 8017ba8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d101      	bne.n	8017bb6 <sys_mbox_valid+0x14>
    return 0;
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	e000      	b.n	8017bb8 <sys_mbox_valid+0x16>
  else
    return 1;
 8017bb6:	2301      	movs	r3, #1
}
 8017bb8:	4618      	mov	r0, r3
 8017bba:	370c      	adds	r7, #12
 8017bbc:	46bd      	mov	sp, r7
 8017bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bc2:	4770      	bx	lr

08017bc4 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8017bc4:	b480      	push	{r7}
 8017bc6:	b083      	sub	sp, #12
 8017bc8:	af00      	add	r7, sp, #0
 8017bca:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	2200      	movs	r2, #0
 8017bd0:	601a      	str	r2, [r3, #0]
}
 8017bd2:	bf00      	nop
 8017bd4:	370c      	adds	r7, #12
 8017bd6:	46bd      	mov	sp, r7
 8017bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bdc:	4770      	bx	lr

08017bde <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8017bde:	b580      	push	{r7, lr}
 8017be0:	b084      	sub	sp, #16
 8017be2:	af00      	add	r7, sp, #0
 8017be4:	6078      	str	r0, [r7, #4]
 8017be6:	460b      	mov	r3, r1
 8017be8:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8017bea:	2300      	movs	r3, #0
 8017bec:	60bb      	str	r3, [r7, #8]
 8017bee:	2300      	movs	r3, #0
 8017bf0:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8017bf2:	f107 0308 	add.w	r3, r7, #8
 8017bf6:	2101      	movs	r1, #1
 8017bf8:	4618      	mov	r0, r3
 8017bfa:	f7ec fae3 	bl	80041c4 <osSemaphoreCreate>
 8017bfe:	4602      	mov	r2, r0
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	681b      	ldr	r3, [r3, #0]
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d102      	bne.n	8017c12 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8017c10:	e009      	b.n	8017c26 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8017c12:	78fb      	ldrb	r3, [r7, #3]
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d105      	bne.n	8017c24 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	2100      	movs	r1, #0
 8017c1e:	4618      	mov	r0, r3
 8017c20:	f7ec fb04 	bl	800422c <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8017c24:	2300      	movs	r3, #0
}
 8017c26:	4618      	mov	r0, r3
 8017c28:	3710      	adds	r7, #16
 8017c2a:	46bd      	mov	sp, r7
 8017c2c:	bd80      	pop	{r7, pc}

08017c2e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8017c2e:	b580      	push	{r7, lr}
 8017c30:	b084      	sub	sp, #16
 8017c32:	af00      	add	r7, sp, #0
 8017c34:	6078      	str	r0, [r7, #4]
 8017c36:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8017c38:	f7ec f9b7 	bl	8003faa <osKernelSysTick>
 8017c3c:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017c3e:	683b      	ldr	r3, [r7, #0]
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d011      	beq.n	8017c68 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	6839      	ldr	r1, [r7, #0]
 8017c4a:	4618      	mov	r0, r3
 8017c4c:	f7ec faee 	bl	800422c <osSemaphoreWait>
 8017c50:	4603      	mov	r3, r0
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	d105      	bne.n	8017c62 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8017c56:	f7ec f9a8 	bl	8003faa <osKernelSysTick>
 8017c5a:	4602      	mov	r2, r0
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	1ad3      	subs	r3, r2, r3
 8017c60:	e012      	b.n	8017c88 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017c62:	f04f 33ff 	mov.w	r3, #4294967295
 8017c66:	e00f      	b.n	8017c88 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8017c68:	bf00      	nop
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	f04f 31ff 	mov.w	r1, #4294967295
 8017c72:	4618      	mov	r0, r3
 8017c74:	f7ec fada 	bl	800422c <osSemaphoreWait>
 8017c78:	4603      	mov	r3, r0
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d1f5      	bne.n	8017c6a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8017c7e:	f7ec f994 	bl	8003faa <osKernelSysTick>
 8017c82:	4602      	mov	r2, r0
 8017c84:	68fb      	ldr	r3, [r7, #12]
 8017c86:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017c88:	4618      	mov	r0, r3
 8017c8a:	3710      	adds	r7, #16
 8017c8c:	46bd      	mov	sp, r7
 8017c8e:	bd80      	pop	{r7, pc}

08017c90 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8017c90:	b580      	push	{r7, lr}
 8017c92:	b082      	sub	sp, #8
 8017c94:	af00      	add	r7, sp, #0
 8017c96:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	4618      	mov	r0, r3
 8017c9e:	f7ec fb13 	bl	80042c8 <osSemaphoreRelease>
}
 8017ca2:	bf00      	nop
 8017ca4:	3708      	adds	r7, #8
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	bd80      	pop	{r7, pc}

08017caa <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8017caa:	b580      	push	{r7, lr}
 8017cac:	b082      	sub	sp, #8
 8017cae:	af00      	add	r7, sp, #0
 8017cb0:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	681b      	ldr	r3, [r3, #0]
 8017cb6:	4618      	mov	r0, r3
 8017cb8:	f7ec fb3c 	bl	8004334 <osSemaphoreDelete>
}
 8017cbc:	bf00      	nop
 8017cbe:	3708      	adds	r7, #8
 8017cc0:	46bd      	mov	sp, r7
 8017cc2:	bd80      	pop	{r7, pc}

08017cc4 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8017cc4:	b480      	push	{r7}
 8017cc6:	b083      	sub	sp, #12
 8017cc8:	af00      	add	r7, sp, #0
 8017cca:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	681b      	ldr	r3, [r3, #0]
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d101      	bne.n	8017cd8 <sys_sem_valid+0x14>
    return 0;
 8017cd4:	2300      	movs	r3, #0
 8017cd6:	e000      	b.n	8017cda <sys_sem_valid+0x16>
  else
    return 1;
 8017cd8:	2301      	movs	r3, #1
}
 8017cda:	4618      	mov	r0, r3
 8017cdc:	370c      	adds	r7, #12
 8017cde:	46bd      	mov	sp, r7
 8017ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ce4:	4770      	bx	lr

08017ce6 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8017ce6:	b480      	push	{r7}
 8017ce8:	b083      	sub	sp, #12
 8017cea:	af00      	add	r7, sp, #0
 8017cec:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	2200      	movs	r2, #0
 8017cf2:	601a      	str	r2, [r3, #0]
}
 8017cf4:	bf00      	nop
 8017cf6:	370c      	adds	r7, #12
 8017cf8:	46bd      	mov	sp, r7
 8017cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cfe:	4770      	bx	lr

08017d00 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017d00:	b580      	push	{r7, lr}
 8017d02:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8017d04:	4803      	ldr	r0, [pc, #12]	; (8017d14 <sys_init+0x14>)
 8017d06:	f7ec f9c0 	bl	800408a <osMutexCreate>
 8017d0a:	4602      	mov	r2, r0
 8017d0c:	4b02      	ldr	r3, [pc, #8]	; (8017d18 <sys_init+0x18>)
 8017d0e:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017d10:	bf00      	nop
 8017d12:	bd80      	pop	{r7, pc}
 8017d14:	0801eca4 	.word	0x0801eca4
 8017d18:	2000fd80 	.word	0x2000fd80

08017d1c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017d1c:	b580      	push	{r7, lr}
 8017d1e:	b084      	sub	sp, #16
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8017d24:	2300      	movs	r3, #0
 8017d26:	60bb      	str	r3, [r7, #8]
 8017d28:	2300      	movs	r3, #0
 8017d2a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8017d2c:	f107 0308 	add.w	r3, r7, #8
 8017d30:	4618      	mov	r0, r3
 8017d32:	f7ec f9aa 	bl	800408a <osMutexCreate>
 8017d36:	4602      	mov	r2, r0
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d102      	bne.n	8017d4a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017d44:	f04f 33ff 	mov.w	r3, #4294967295
 8017d48:	e000      	b.n	8017d4c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017d4a:	2300      	movs	r3, #0
}
 8017d4c:	4618      	mov	r0, r3
 8017d4e:	3710      	adds	r7, #16
 8017d50:	46bd      	mov	sp, r7
 8017d52:	bd80      	pop	{r7, pc}

08017d54 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017d54:	b580      	push	{r7, lr}
 8017d56:	b082      	sub	sp, #8
 8017d58:	af00      	add	r7, sp, #0
 8017d5a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	f04f 31ff 	mov.w	r1, #4294967295
 8017d64:	4618      	mov	r0, r3
 8017d66:	f7ec f9a9 	bl	80040bc <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8017d6a:	bf00      	nop
 8017d6c:	3708      	adds	r7, #8
 8017d6e:	46bd      	mov	sp, r7
 8017d70:	bd80      	pop	{r7, pc}

08017d72 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017d72:	b580      	push	{r7, lr}
 8017d74:	b082      	sub	sp, #8
 8017d76:	af00      	add	r7, sp, #0
 8017d78:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	681b      	ldr	r3, [r3, #0]
 8017d7e:	4618      	mov	r0, r3
 8017d80:	f7ec f9ea 	bl	8004158 <osMutexRelease>
}
 8017d84:	bf00      	nop
 8017d86:	3708      	adds	r7, #8
 8017d88:	46bd      	mov	sp, r7
 8017d8a:	bd80      	pop	{r7, pc}

08017d8c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017d8c:	b580      	push	{r7, lr}
 8017d8e:	b08c      	sub	sp, #48	; 0x30
 8017d90:	af00      	add	r7, sp, #0
 8017d92:	60f8      	str	r0, [r7, #12]
 8017d94:	60b9      	str	r1, [r7, #8]
 8017d96:	607a      	str	r2, [r7, #4]
 8017d98:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8017d9a:	f107 0314 	add.w	r3, r7, #20
 8017d9e:	2200      	movs	r2, #0
 8017da0:	601a      	str	r2, [r3, #0]
 8017da2:	605a      	str	r2, [r3, #4]
 8017da4:	609a      	str	r2, [r3, #8]
 8017da6:	60da      	str	r2, [r3, #12]
 8017da8:	611a      	str	r2, [r3, #16]
 8017daa:	615a      	str	r2, [r3, #20]
 8017dac:	619a      	str	r2, [r3, #24]
 8017dae:	68fb      	ldr	r3, [r7, #12]
 8017db0:	617b      	str	r3, [r7, #20]
 8017db2:	68bb      	ldr	r3, [r7, #8]
 8017db4:	61bb      	str	r3, [r7, #24]
 8017db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017db8:	b21b      	sxth	r3, r3
 8017dba:	83bb      	strh	r3, [r7, #28]
 8017dbc:	683b      	ldr	r3, [r7, #0]
 8017dbe:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8017dc0:	f107 0314 	add.w	r3, r7, #20
 8017dc4:	6879      	ldr	r1, [r7, #4]
 8017dc6:	4618      	mov	r0, r3
 8017dc8:	f7ec f8ff 	bl	8003fca <osThreadCreate>
 8017dcc:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8017dce:	4618      	mov	r0, r3
 8017dd0:	3730      	adds	r7, #48	; 0x30
 8017dd2:	46bd      	mov	sp, r7
 8017dd4:	bd80      	pop	{r7, pc}
	...

08017dd8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017dd8:	b580      	push	{r7, lr}
 8017dda:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8017ddc:	4b04      	ldr	r3, [pc, #16]	; (8017df0 <sys_arch_protect+0x18>)
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	f04f 31ff 	mov.w	r1, #4294967295
 8017de4:	4618      	mov	r0, r3
 8017de6:	f7ec f969 	bl	80040bc <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8017dea:	2301      	movs	r3, #1
}
 8017dec:	4618      	mov	r0, r3
 8017dee:	bd80      	pop	{r7, pc}
 8017df0:	2000fd80 	.word	0x2000fd80

08017df4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017df4:	b580      	push	{r7, lr}
 8017df6:	b082      	sub	sp, #8
 8017df8:	af00      	add	r7, sp, #0
 8017dfa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017dfc:	4b04      	ldr	r3, [pc, #16]	; (8017e10 <sys_arch_unprotect+0x1c>)
 8017dfe:	681b      	ldr	r3, [r3, #0]
 8017e00:	4618      	mov	r0, r3
 8017e02:	f7ec f9a9 	bl	8004158 <osMutexRelease>
}
 8017e06:	bf00      	nop
 8017e08:	3708      	adds	r7, #8
 8017e0a:	46bd      	mov	sp, r7
 8017e0c:	bd80      	pop	{r7, pc}
 8017e0e:	bf00      	nop
 8017e10:	2000fd80 	.word	0x2000fd80

08017e14 <NewMessageData>:
 *******************************************************************************/
#include <MQTTClient.h>
#include <stdio.h>
#include <string.h>

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 8017e14:	b480      	push	{r7}
 8017e16:	b085      	sub	sp, #20
 8017e18:	af00      	add	r7, sp, #0
 8017e1a:	60f8      	str	r0, [r7, #12]
 8017e1c:	60b9      	str	r1, [r7, #8]
 8017e1e:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	68ba      	ldr	r2, [r7, #8]
 8017e24:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	687a      	ldr	r2, [r7, #4]
 8017e2a:	601a      	str	r2, [r3, #0]
}
 8017e2c:	bf00      	nop
 8017e2e:	3714      	adds	r7, #20
 8017e30:	46bd      	mov	sp, r7
 8017e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e36:	4770      	bx	lr

08017e38 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 8017e38:	b480      	push	{r7}
 8017e3a:	b083      	sub	sp, #12
 8017e3c:	af00      	add	r7, sp, #0
 8017e3e:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017e48:	4293      	cmp	r3, r2
 8017e4a:	d003      	beq.n	8017e54 <getNextPacketId+0x1c>
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	681b      	ldr	r3, [r3, #0]
 8017e50:	3301      	adds	r3, #1
 8017e52:	e000      	b.n	8017e56 <getNextPacketId+0x1e>
 8017e54:	2301      	movs	r3, #1
 8017e56:	687a      	ldr	r2, [r7, #4]
 8017e58:	6013      	str	r3, [r2, #0]
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	681b      	ldr	r3, [r3, #0]
}
 8017e5e:	4618      	mov	r0, r3
 8017e60:	370c      	adds	r7, #12
 8017e62:	46bd      	mov	sp, r7
 8017e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e68:	4770      	bx	lr

08017e6a <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 8017e6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e6c:	b087      	sub	sp, #28
 8017e6e:	af00      	add	r7, sp, #0
 8017e70:	60f8      	str	r0, [r7, #12]
 8017e72:	60b9      	str	r1, [r7, #8]
 8017e74:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 8017e76:	f04f 33ff 	mov.w	r3, #4294967295
 8017e7a:	617b      	str	r3, [r7, #20]
        sent = 0;
 8017e7c:	2300      	movs	r3, #0
 8017e7e:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 8017e80:	e018      	b.n	8017eb4 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017e86:	689c      	ldr	r4, [r3, #8]
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8017e8c:	68fb      	ldr	r3, [r7, #12]
 8017e8e:	691a      	ldr	r2, [r3, #16]
 8017e90:	693b      	ldr	r3, [r7, #16]
 8017e92:	18d6      	adds	r6, r2, r3
 8017e94:	6878      	ldr	r0, [r7, #4]
 8017e96:	f000 fecd 	bl	8018c34 <TimerLeftMS>
 8017e9a:	4603      	mov	r3, r0
 8017e9c:	68ba      	ldr	r2, [r7, #8]
 8017e9e:	4631      	mov	r1, r6
 8017ea0:	4628      	mov	r0, r5
 8017ea2:	47a0      	blx	r4
 8017ea4:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 8017ea6:	697b      	ldr	r3, [r7, #20]
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	db0e      	blt.n	8017eca <sendPacket+0x60>
            break;
        sent += rc;
 8017eac:	693a      	ldr	r2, [r7, #16]
 8017eae:	697b      	ldr	r3, [r7, #20]
 8017eb0:	4413      	add	r3, r2
 8017eb2:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 8017eb4:	693a      	ldr	r2, [r7, #16]
 8017eb6:	68bb      	ldr	r3, [r7, #8]
 8017eb8:	429a      	cmp	r2, r3
 8017eba:	da07      	bge.n	8017ecc <sendPacket+0x62>
 8017ebc:	6878      	ldr	r0, [r7, #4]
 8017ebe:	f000 fe77 	bl	8018bb0 <TimerIsExpired>
 8017ec2:	4603      	mov	r3, r0
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d0dc      	beq.n	8017e82 <sendPacket+0x18>
 8017ec8:	e000      	b.n	8017ecc <sendPacket+0x62>
            break;
 8017eca:	bf00      	nop
    }
    if (sent == length)
 8017ecc:	693a      	ldr	r2, [r7, #16]
 8017ece:	68bb      	ldr	r3, [r7, #8]
 8017ed0:	429a      	cmp	r2, r3
 8017ed2:	d10b      	bne.n	8017eec <sendPacket+0x82>
    {
        TimerCountdown(&c->last_sent, c->keepAliveInterval); // record the fact that we have MQTT_SUCCESSfully sent the packet
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	699b      	ldr	r3, [r3, #24]
 8017ede:	4619      	mov	r1, r3
 8017ee0:	4610      	mov	r0, r2
 8017ee2:	f000 fe8f 	bl	8018c04 <TimerCountdown>
        rc = MQTT_SUCCESS;
 8017ee6:	2300      	movs	r3, #0
 8017ee8:	617b      	str	r3, [r7, #20]
 8017eea:	e002      	b.n	8017ef2 <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8017eec:	f04f 33ff 	mov.w	r3, #4294967295
 8017ef0:	617b      	str	r3, [r7, #20]
    return rc;
 8017ef2:	697b      	ldr	r3, [r7, #20]
}
 8017ef4:	4618      	mov	r0, r3
 8017ef6:	371c      	adds	r7, #28
 8017ef8:	46bd      	mov	sp, r7
 8017efa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017efc <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8017efc:	b580      	push	{r7, lr}
 8017efe:	b086      	sub	sp, #24
 8017f00:	af00      	add	r7, sp, #0
 8017f02:	60f8      	str	r0, [r7, #12]
 8017f04:	60b9      	str	r1, [r7, #8]
 8017f06:	607a      	str	r2, [r7, #4]
 8017f08:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8017f0a:	68fb      	ldr	r3, [r7, #12]
 8017f0c:	68ba      	ldr	r2, [r7, #8]
 8017f0e:	655a      	str	r2, [r3, #84]	; 0x54

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8017f10:	2300      	movs	r3, #0
 8017f12:	617b      	str	r3, [r7, #20]
 8017f14:	e008      	b.n	8017f28 <MQTTClientInit+0x2c>
        c->messageHandlers[i].topicFilter = 0;
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	697a      	ldr	r2, [r7, #20]
 8017f1a:	3205      	adds	r2, #5
 8017f1c:	2100      	movs	r1, #0
 8017f1e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8017f22:	697b      	ldr	r3, [r7, #20]
 8017f24:	3301      	adds	r3, #1
 8017f26:	617b      	str	r3, [r7, #20]
 8017f28:	697b      	ldr	r3, [r7, #20]
 8017f2a:	2b04      	cmp	r3, #4
 8017f2c:	ddf3      	ble.n	8017f16 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	687a      	ldr	r2, [r7, #4]
 8017f32:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 8017f34:	68fb      	ldr	r3, [r7, #12]
 8017f36:	683a      	ldr	r2, [r7, #0]
 8017f38:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 8017f3a:	68fb      	ldr	r3, [r7, #12]
 8017f3c:	6a3a      	ldr	r2, [r7, #32]
 8017f3e:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017f44:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 8017f46:	68fb      	ldr	r3, [r7, #12]
 8017f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017f4a:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8017f4c:	68fb      	ldr	r3, [r7, #12]
 8017f4e:	2200      	movs	r2, #0
 8017f50:	621a      	str	r2, [r3, #32]
    c->cleansession = 0;
 8017f52:	68fb      	ldr	r3, [r7, #12]
 8017f54:	2200      	movs	r2, #0
 8017f56:	625a      	str	r2, [r3, #36]	; 0x24
    c->ping_outstanding = 0;
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	2200      	movs	r2, #0
 8017f5c:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	2200      	movs	r2, #0
 8017f62:	651a      	str	r2, [r3, #80]	; 0x50
	  c->next_packetid = 1;
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	2201      	movs	r2, #1
 8017f68:	601a      	str	r2, [r3, #0]
    TimerInit(&c->last_sent);
 8017f6a:	68fb      	ldr	r3, [r7, #12]
 8017f6c:	3358      	adds	r3, #88	; 0x58
 8017f6e:	4618      	mov	r0, r3
 8017f70:	f000 fe76 	bl	8018c60 <TimerInit>
    TimerInit(&c->last_received);
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	3360      	adds	r3, #96	; 0x60
 8017f78:	4618      	mov	r0, r3
 8017f7a:	f000 fe71 	bl	8018c60 <TimerInit>
#if defined(MQTT_TASK)
	  MutexInit(&c->mutex);
#endif
}
 8017f7e:	bf00      	nop
 8017f80:	3718      	adds	r7, #24
 8017f82:	46bd      	mov	sp, r7
 8017f84:	bd80      	pop	{r7, pc}

08017f86 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 8017f86:	b590      	push	{r4, r7, lr}
 8017f88:	b08b      	sub	sp, #44	; 0x2c
 8017f8a:	af00      	add	r7, sp, #0
 8017f8c:	60f8      	str	r0, [r7, #12]
 8017f8e:	60b9      	str	r1, [r7, #8]
 8017f90:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 8017f92:	2301      	movs	r3, #1
 8017f94:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 8017f96:	2300      	movs	r3, #0
 8017f98:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8017f9a:	2304      	movs	r3, #4
 8017f9c:	61fb      	str	r3, [r7, #28]

    *value = 0;
 8017f9e:	68bb      	ldr	r3, [r7, #8]
 8017fa0:	2200      	movs	r2, #0
 8017fa2:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 8017fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8017fa8:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8017faa:	6a3b      	ldr	r3, [r7, #32]
 8017fac:	3301      	adds	r3, #1
 8017fae:	623b      	str	r3, [r7, #32]
 8017fb0:	6a3a      	ldr	r2, [r7, #32]
 8017fb2:	69fb      	ldr	r3, [r7, #28]
 8017fb4:	429a      	cmp	r2, r3
 8017fb6:	dd03      	ble.n	8017fc0 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 8017fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8017fbc:	61bb      	str	r3, [r7, #24]
            goto exit;
 8017fbe:	e021      	b.n	8018004 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 8017fc0:	68fb      	ldr	r3, [r7, #12]
 8017fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017fc4:	685c      	ldr	r4, [r3, #4]
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8017fca:	f107 0117 	add.w	r1, r7, #23
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	2201      	movs	r2, #1
 8017fd2:	47a0      	blx	r4
 8017fd4:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 8017fd6:	69bb      	ldr	r3, [r7, #24]
 8017fd8:	2b01      	cmp	r3, #1
 8017fda:	d112      	bne.n	8018002 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 8017fdc:	68bb      	ldr	r3, [r7, #8]
 8017fde:	681a      	ldr	r2, [r3, #0]
 8017fe0:	7dfb      	ldrb	r3, [r7, #23]
 8017fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017fe6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017fe8:	fb01 f303 	mul.w	r3, r1, r3
 8017fec:	441a      	add	r2, r3
 8017fee:	68bb      	ldr	r3, [r7, #8]
 8017ff0:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 8017ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ff4:	01db      	lsls	r3, r3, #7
 8017ff6:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 8017ff8:	7dfb      	ldrb	r3, [r7, #23]
 8017ffa:	b25b      	sxtb	r3, r3
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	dbd1      	blt.n	8017fa4 <decodePacket+0x1e>
exit:
 8018000:	e000      	b.n	8018004 <decodePacket+0x7e>
            goto exit;
 8018002:	bf00      	nop
    return len;
 8018004:	6a3b      	ldr	r3, [r7, #32]
}
 8018006:	4618      	mov	r0, r3
 8018008:	372c      	adds	r7, #44	; 0x2c
 801800a:	46bd      	mov	sp, r7
 801800c:	bd90      	pop	{r4, r7, pc}

0801800e <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 801800e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018010:	b089      	sub	sp, #36	; 0x24
 8018012:	af00      	add	r7, sp, #0
 8018014:	60f8      	str	r0, [r7, #12]
 8018016:	60b9      	str	r1, [r7, #8]
    MQTTHeader header = {0};
 8018018:	2300      	movs	r3, #0
 801801a:	617b      	str	r3, [r7, #20]
    int len = 0;
 801801c:	2300      	movs	r3, #0
 801801e:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 8018020:	2300      	movs	r3, #0
 8018022:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 8018024:	68fb      	ldr	r3, [r7, #12]
 8018026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018028:	685c      	ldr	r4, [r3, #4]
 801802a:	68fb      	ldr	r3, [r7, #12]
 801802c:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	695e      	ldr	r6, [r3, #20]
 8018032:	68b8      	ldr	r0, [r7, #8]
 8018034:	f000 fdfe 	bl	8018c34 <TimerLeftMS>
 8018038:	4603      	mov	r3, r0
 801803a:	2201      	movs	r2, #1
 801803c:	4631      	mov	r1, r6
 801803e:	4628      	mov	r0, r5
 8018040:	47a0      	blx	r4
 8018042:	61f8      	str	r0, [r7, #28]
    if (rc != 1)
 8018044:	69fb      	ldr	r3, [r7, #28]
 8018046:	2b01      	cmp	r3, #1
 8018048:	d15d      	bne.n	8018106 <readPacket+0xf8>
        goto exit;

    len = 1;
 801804a:	2301      	movs	r3, #1
 801804c:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 801804e:	68b8      	ldr	r0, [r7, #8]
 8018050:	f000 fdf0 	bl	8018c34 <TimerLeftMS>
 8018054:	4602      	mov	r2, r0
 8018056:	f107 0310 	add.w	r3, r7, #16
 801805a:	4619      	mov	r1, r3
 801805c:	68f8      	ldr	r0, [r7, #12]
 801805e:	f7ff ff92 	bl	8017f86 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 8018062:	68fb      	ldr	r3, [r7, #12]
 8018064:	695b      	ldr	r3, [r3, #20]
 8018066:	3301      	adds	r3, #1
 8018068:	693a      	ldr	r2, [r7, #16]
 801806a:	4611      	mov	r1, r2
 801806c:	4618      	mov	r0, r3
 801806e:	f001 f972 	bl	8019356 <MQTTPacket_encode>
 8018072:	4602      	mov	r2, r0
 8018074:	69bb      	ldr	r3, [r7, #24]
 8018076:	4413      	add	r3, r2
 8018078:	61bb      	str	r3, [r7, #24]

    if (rem_len > (c->readbuf_size - len))
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	68da      	ldr	r2, [r3, #12]
 801807e:	69bb      	ldr	r3, [r7, #24]
 8018080:	1ad3      	subs	r3, r2, r3
 8018082:	693a      	ldr	r2, [r7, #16]
 8018084:	4293      	cmp	r3, r2
 8018086:	d203      	bcs.n	8018090 <readPacket+0x82>
    {
        rc = BUFFER_OVERFLOW;
 8018088:	f06f 0301 	mvn.w	r3, #1
 801808c:	61fb      	str	r3, [r7, #28]
        goto exit;
 801808e:	e03d      	b.n	801810c <readPacket+0xfe>
    }

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len)) {
 8018090:	693b      	ldr	r3, [r7, #16]
 8018092:	2b00      	cmp	r3, #0
 8018094:	dd20      	ble.n	80180d8 <readPacket+0xca>
 8018096:	68fb      	ldr	r3, [r7, #12]
 8018098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801809a:	685c      	ldr	r4, [r3, #4]
 801809c:	68fb      	ldr	r3, [r7, #12]
 801809e:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80180a0:	68fb      	ldr	r3, [r7, #12]
 80180a2:	695a      	ldr	r2, [r3, #20]
 80180a4:	69bb      	ldr	r3, [r7, #24]
 80180a6:	18d6      	adds	r6, r2, r3
 80180a8:	693b      	ldr	r3, [r7, #16]
 80180aa:	607b      	str	r3, [r7, #4]
 80180ac:	68b8      	ldr	r0, [r7, #8]
 80180ae:	f000 fdc1 	bl	8018c34 <TimerLeftMS>
 80180b2:	4603      	mov	r3, r0
 80180b4:	687a      	ldr	r2, [r7, #4]
 80180b6:	4631      	mov	r1, r6
 80180b8:	4628      	mov	r0, r5
 80180ba:	47a0      	blx	r4
 80180bc:	4602      	mov	r2, r0
 80180be:	693b      	ldr	r3, [r7, #16]
 80180c0:	429a      	cmp	r2, r3
 80180c2:	bf14      	ite	ne
 80180c4:	2301      	movne	r3, #1
 80180c6:	2300      	moveq	r3, #0
 80180c8:	b2db      	uxtb	r3, r3
 80180ca:	61fb      	str	r3, [r7, #28]
 80180cc:	69fb      	ldr	r3, [r7, #28]
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d002      	beq.n	80180d8 <readPacket+0xca>
        rc = 0;
 80180d2:	2300      	movs	r3, #0
 80180d4:	61fb      	str	r3, [r7, #28]
        goto exit;
 80180d6:	e019      	b.n	801810c <readPacket+0xfe>
    }

    header.byte = c->readbuf[0];
 80180d8:	68fb      	ldr	r3, [r7, #12]
 80180da:	695b      	ldr	r3, [r3, #20]
 80180dc:	781b      	ldrb	r3, [r3, #0]
 80180de:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 80180e0:	7d3b      	ldrb	r3, [r7, #20]
 80180e2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80180e6:	b2db      	uxtb	r3, r3
 80180e8:	61fb      	str	r3, [r7, #28]
    if (c->keepAliveInterval > 0)
 80180ea:	68fb      	ldr	r3, [r7, #12]
 80180ec:	699b      	ldr	r3, [r3, #24]
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d00b      	beq.n	801810a <readPacket+0xfc>
        TimerCountdown(&c->last_received, c->keepAliveInterval); // record the fact that we have MQTT_SUCCESSfully received a packet
 80180f2:	68fb      	ldr	r3, [r7, #12]
 80180f4:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80180f8:	68fb      	ldr	r3, [r7, #12]
 80180fa:	699b      	ldr	r3, [r3, #24]
 80180fc:	4619      	mov	r1, r3
 80180fe:	4610      	mov	r0, r2
 8018100:	f000 fd80 	bl	8018c04 <TimerCountdown>
 8018104:	e002      	b.n	801810c <readPacket+0xfe>
        goto exit;
 8018106:	bf00      	nop
 8018108:	e000      	b.n	801810c <readPacket+0xfe>
exit:
 801810a:	bf00      	nop
    return rc;
 801810c:	69fb      	ldr	r3, [r7, #28]
}
 801810e:	4618      	mov	r0, r3
 8018110:	3724      	adds	r7, #36	; 0x24
 8018112:	46bd      	mov	sp, r7
 8018114:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018116 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 8018116:	b480      	push	{r7}
 8018118:	b087      	sub	sp, #28
 801811a:	af00      	add	r7, sp, #0
 801811c:	6078      	str	r0, [r7, #4]
 801811e:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 8018124:	683b      	ldr	r3, [r7, #0]
 8018126:	689b      	ldr	r3, [r3, #8]
 8018128:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 801812a:	683b      	ldr	r3, [r7, #0]
 801812c:	685b      	ldr	r3, [r3, #4]
 801812e:	461a      	mov	r2, r3
 8018130:	693b      	ldr	r3, [r7, #16]
 8018132:	4413      	add	r3, r2
 8018134:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 8018136:	e039      	b.n	80181ac <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 8018138:	693b      	ldr	r3, [r7, #16]
 801813a:	781b      	ldrb	r3, [r3, #0]
 801813c:	2b2f      	cmp	r3, #47	; 0x2f
 801813e:	d103      	bne.n	8018148 <isTopicMatched+0x32>
 8018140:	697b      	ldr	r3, [r7, #20]
 8018142:	781b      	ldrb	r3, [r3, #0]
 8018144:	2b2f      	cmp	r3, #47	; 0x2f
 8018146:	d13a      	bne.n	80181be <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8018148:	697b      	ldr	r3, [r7, #20]
 801814a:	781b      	ldrb	r3, [r3, #0]
 801814c:	2b2b      	cmp	r3, #43	; 0x2b
 801814e:	d009      	beq.n	8018164 <isTopicMatched+0x4e>
 8018150:	697b      	ldr	r3, [r7, #20]
 8018152:	781b      	ldrb	r3, [r3, #0]
 8018154:	2b23      	cmp	r3, #35	; 0x23
 8018156:	d005      	beq.n	8018164 <isTopicMatched+0x4e>
 8018158:	697b      	ldr	r3, [r7, #20]
 801815a:	781a      	ldrb	r2, [r3, #0]
 801815c:	693b      	ldr	r3, [r7, #16]
 801815e:	781b      	ldrb	r3, [r3, #0]
 8018160:	429a      	cmp	r2, r3
 8018162:	d12e      	bne.n	80181c2 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 8018164:	697b      	ldr	r3, [r7, #20]
 8018166:	781b      	ldrb	r3, [r3, #0]
 8018168:	2b2b      	cmp	r3, #43	; 0x2b
 801816a:	d112      	bne.n	8018192 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 801816c:	693b      	ldr	r3, [r7, #16]
 801816e:	3301      	adds	r3, #1
 8018170:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8018172:	e005      	b.n	8018180 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 8018174:	693b      	ldr	r3, [r7, #16]
 8018176:	3301      	adds	r3, #1
 8018178:	613b      	str	r3, [r7, #16]
 801817a:	693b      	ldr	r3, [r7, #16]
 801817c:	3301      	adds	r3, #1
 801817e:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8018180:	68fa      	ldr	r2, [r7, #12]
 8018182:	68bb      	ldr	r3, [r7, #8]
 8018184:	429a      	cmp	r2, r3
 8018186:	d20b      	bcs.n	80181a0 <isTopicMatched+0x8a>
 8018188:	68fb      	ldr	r3, [r7, #12]
 801818a:	781b      	ldrb	r3, [r3, #0]
 801818c:	2b2f      	cmp	r3, #47	; 0x2f
 801818e:	d1f1      	bne.n	8018174 <isTopicMatched+0x5e>
 8018190:	e006      	b.n	80181a0 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 8018192:	697b      	ldr	r3, [r7, #20]
 8018194:	781b      	ldrb	r3, [r3, #0]
 8018196:	2b23      	cmp	r3, #35	; 0x23
 8018198:	d102      	bne.n	80181a0 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 801819a:	68bb      	ldr	r3, [r7, #8]
 801819c:	3b01      	subs	r3, #1
 801819e:	613b      	str	r3, [r7, #16]
        curf++;
 80181a0:	697b      	ldr	r3, [r7, #20]
 80181a2:	3301      	adds	r3, #1
 80181a4:	617b      	str	r3, [r7, #20]
        curn++;
 80181a6:	693b      	ldr	r3, [r7, #16]
 80181a8:	3301      	adds	r3, #1
 80181aa:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 80181ac:	697b      	ldr	r3, [r7, #20]
 80181ae:	781b      	ldrb	r3, [r3, #0]
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d007      	beq.n	80181c4 <isTopicMatched+0xae>
 80181b4:	693a      	ldr	r2, [r7, #16]
 80181b6:	68bb      	ldr	r3, [r7, #8]
 80181b8:	429a      	cmp	r2, r3
 80181ba:	d3bd      	bcc.n	8018138 <isTopicMatched+0x22>
 80181bc:	e002      	b.n	80181c4 <isTopicMatched+0xae>
            break;
 80181be:	bf00      	nop
 80181c0:	e000      	b.n	80181c4 <isTopicMatched+0xae>
            break;
 80181c2:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 80181c4:	693a      	ldr	r2, [r7, #16]
 80181c6:	68bb      	ldr	r3, [r7, #8]
 80181c8:	429a      	cmp	r2, r3
 80181ca:	d105      	bne.n	80181d8 <isTopicMatched+0xc2>
 80181cc:	697b      	ldr	r3, [r7, #20]
 80181ce:	781b      	ldrb	r3, [r3, #0]
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d101      	bne.n	80181d8 <isTopicMatched+0xc2>
 80181d4:	2301      	movs	r3, #1
 80181d6:	e000      	b.n	80181da <isTopicMatched+0xc4>
 80181d8:	2300      	movs	r3, #0
 80181da:	b2db      	uxtb	r3, r3
}
 80181dc:	4618      	mov	r0, r3
 80181de:	371c      	adds	r7, #28
 80181e0:	46bd      	mov	sp, r7
 80181e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181e6:	4770      	bx	lr

080181e8 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 80181e8:	b580      	push	{r7, lr}
 80181ea:	b08a      	sub	sp, #40	; 0x28
 80181ec:	af00      	add	r7, sp, #0
 80181ee:	60f8      	str	r0, [r7, #12]
 80181f0:	60b9      	str	r1, [r7, #8]
 80181f2:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 80181f4:	f04f 33ff 	mov.w	r3, #4294967295
 80181f8:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80181fa:	2300      	movs	r3, #0
 80181fc:	627b      	str	r3, [r7, #36]	; 0x24
 80181fe:	e03c      	b.n	801827a <deliverMessage+0x92>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8018200:	68fb      	ldr	r3, [r7, #12]
 8018202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018204:	3205      	adds	r2, #5
 8018206:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d032      	beq.n	8018274 <deliverMessage+0x8c>
 801820e:	68fb      	ldr	r3, [r7, #12]
 8018210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018212:	3205      	adds	r2, #5
 8018214:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8018218:	4619      	mov	r1, r3
 801821a:	68b8      	ldr	r0, [r7, #8]
 801821c:	f001 fa6a 	bl	80196f4 <MQTTPacket_equals>
 8018220:	4603      	mov	r3, r0
 8018222:	2b00      	cmp	r3, #0
 8018224:	d10b      	bne.n	801823e <deliverMessage+0x56>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 8018226:	68fb      	ldr	r3, [r7, #12]
 8018228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801822a:	3205      	adds	r2, #5
 801822c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8018230:	68b9      	ldr	r1, [r7, #8]
 8018232:	4618      	mov	r0, r3
 8018234:	f7ff ff6f 	bl	8018116 <isTopicMatched>
 8018238:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 801823a:	2b00      	cmp	r3, #0
 801823c:	d01a      	beq.n	8018274 <deliverMessage+0x8c>
        {
            if (c->messageHandlers[i].fp != NULL)
 801823e:	68fa      	ldr	r2, [r7, #12]
 8018240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018242:	3305      	adds	r3, #5
 8018244:	00db      	lsls	r3, r3, #3
 8018246:	4413      	add	r3, r2
 8018248:	685b      	ldr	r3, [r3, #4]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d012      	beq.n	8018274 <deliverMessage+0x8c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 801824e:	f107 0318 	add.w	r3, r7, #24
 8018252:	687a      	ldr	r2, [r7, #4]
 8018254:	68b9      	ldr	r1, [r7, #8]
 8018256:	4618      	mov	r0, r3
 8018258:	f7ff fddc 	bl	8017e14 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 801825c:	68fa      	ldr	r2, [r7, #12]
 801825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018260:	3305      	adds	r3, #5
 8018262:	00db      	lsls	r3, r3, #3
 8018264:	4413      	add	r3, r2
 8018266:	685b      	ldr	r3, [r3, #4]
 8018268:	f107 0218 	add.w	r2, r7, #24
 801826c:	4610      	mov	r0, r2
 801826e:	4798      	blx	r3
                rc = MQTT_SUCCESS;
 8018270:	2300      	movs	r3, #0
 8018272:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018276:	3301      	adds	r3, #1
 8018278:	627b      	str	r3, [r7, #36]	; 0x24
 801827a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801827c:	2b04      	cmp	r3, #4
 801827e:	ddbf      	ble.n	8018200 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 8018280:	6a3b      	ldr	r3, [r7, #32]
 8018282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018286:	d112      	bne.n	80182ae <deliverMessage+0xc6>
 8018288:	68fb      	ldr	r3, [r7, #12]
 801828a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801828c:	2b00      	cmp	r3, #0
 801828e:	d00e      	beq.n	80182ae <deliverMessage+0xc6>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 8018290:	f107 0310 	add.w	r3, r7, #16
 8018294:	687a      	ldr	r2, [r7, #4]
 8018296:	68b9      	ldr	r1, [r7, #8]
 8018298:	4618      	mov	r0, r3
 801829a:	f7ff fdbb 	bl	8017e14 <NewMessageData>
        c->defaultMessageHandler(&md);
 801829e:	68fb      	ldr	r3, [r7, #12]
 80182a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80182a2:	f107 0210 	add.w	r2, r7, #16
 80182a6:	4610      	mov	r0, r2
 80182a8:	4798      	blx	r3
        rc = MQTT_SUCCESS;
 80182aa:	2300      	movs	r3, #0
 80182ac:	623b      	str	r3, [r7, #32]
    }

    return rc;
 80182ae:	6a3b      	ldr	r3, [r7, #32]
}
 80182b0:	4618      	mov	r0, r3
 80182b2:	3728      	adds	r7, #40	; 0x28
 80182b4:	46bd      	mov	sp, r7
 80182b6:	bd80      	pop	{r7, pc}

080182b8 <keepalive>:


int keepalive(MQTTClient* c)
{
 80182b8:	b580      	push	{r7, lr}
 80182ba:	b086      	sub	sp, #24
 80182bc:	af00      	add	r7, sp, #0
 80182be:	6078      	str	r0, [r7, #4]
    int rc = MQTT_SUCCESS;
 80182c0:	2300      	movs	r3, #0
 80182c2:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	699b      	ldr	r3, [r3, #24]
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d03e      	beq.n	801834a <keepalive+0x92>
        goto exit;

    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	3358      	adds	r3, #88	; 0x58
 80182d0:	4618      	mov	r0, r3
 80182d2:	f000 fc6d 	bl	8018bb0 <TimerIsExpired>
 80182d6:	4603      	mov	r3, r0
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d107      	bne.n	80182ec <keepalive+0x34>
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	3360      	adds	r3, #96	; 0x60
 80182e0:	4618      	mov	r0, r3
 80182e2:	f000 fc65 	bl	8018bb0 <TimerIsExpired>
 80182e6:	4603      	mov	r3, r0
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d030      	beq.n	801834e <keepalive+0x96>
    {
        if (c->ping_outstanding)
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	7f1b      	ldrb	r3, [r3, #28]
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d003      	beq.n	80182fc <keepalive+0x44>
            rc = FAILURE; /* PINGRESP not received in keepalive interval */
 80182f4:	f04f 33ff 	mov.w	r3, #4294967295
 80182f8:	617b      	str	r3, [r7, #20]
 80182fa:	e029      	b.n	8018350 <keepalive+0x98>
        else
        {
            Timer timer;
            TimerInit(&timer);
 80182fc:	f107 0308 	add.w	r3, r7, #8
 8018300:	4618      	mov	r0, r3
 8018302:	f000 fcad 	bl	8018c60 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 8018306:	f107 0308 	add.w	r3, r7, #8
 801830a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801830e:	4618      	mov	r0, r3
 8018310:	f000 fc64 	bl	8018bdc <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	691a      	ldr	r2, [r3, #16]
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	689b      	ldr	r3, [r3, #8]
 801831c:	4619      	mov	r1, r3
 801831e:	4610      	mov	r0, r2
 8018320:	f000 ff4d 	bl	80191be <MQTTSerialize_pingreq>
 8018324:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQTT_SUCCESS) // send the ping packet
 8018326:	693b      	ldr	r3, [r7, #16]
 8018328:	2b00      	cmp	r3, #0
 801832a:	dd11      	ble.n	8018350 <keepalive+0x98>
 801832c:	f107 0308 	add.w	r3, r7, #8
 8018330:	461a      	mov	r2, r3
 8018332:	6939      	ldr	r1, [r7, #16]
 8018334:	6878      	ldr	r0, [r7, #4]
 8018336:	f7ff fd98 	bl	8017e6a <sendPacket>
 801833a:	6178      	str	r0, [r7, #20]
 801833c:	697b      	ldr	r3, [r7, #20]
 801833e:	2b00      	cmp	r3, #0
 8018340:	d106      	bne.n	8018350 <keepalive+0x98>
                c->ping_outstanding = 1;
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	2201      	movs	r2, #1
 8018346:	771a      	strb	r2, [r3, #28]
 8018348:	e002      	b.n	8018350 <keepalive+0x98>
        goto exit;
 801834a:	bf00      	nop
 801834c:	e000      	b.n	8018350 <keepalive+0x98>
        }
    }

exit:
 801834e:	bf00      	nop
    return rc;
 8018350:	697b      	ldr	r3, [r7, #20]
}
 8018352:	4618      	mov	r0, r3
 8018354:	3718      	adds	r7, #24
 8018356:	46bd      	mov	sp, r7
 8018358:	bd80      	pop	{r7, pc}

0801835a <MQTTCleanSession>:


void MQTTCleanSession(MQTTClient* c)
{
 801835a:	b480      	push	{r7}
 801835c:	b085      	sub	sp, #20
 801835e:	af00      	add	r7, sp, #0
 8018360:	6078      	str	r0, [r7, #4]
    int i = 0;
 8018362:	2300      	movs	r3, #0
 8018364:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018366:	2300      	movs	r3, #0
 8018368:	60fb      	str	r3, [r7, #12]
 801836a:	e008      	b.n	801837e <MQTTCleanSession+0x24>
        c->messageHandlers[i].topicFilter = NULL;
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	68fa      	ldr	r2, [r7, #12]
 8018370:	3205      	adds	r2, #5
 8018372:	2100      	movs	r1, #0
 8018374:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018378:	68fb      	ldr	r3, [r7, #12]
 801837a:	3301      	adds	r3, #1
 801837c:	60fb      	str	r3, [r7, #12]
 801837e:	68fb      	ldr	r3, [r7, #12]
 8018380:	2b04      	cmp	r3, #4
 8018382:	ddf3      	ble.n	801836c <MQTTCleanSession+0x12>
}
 8018384:	bf00      	nop
 8018386:	3714      	adds	r7, #20
 8018388:	46bd      	mov	sp, r7
 801838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801838e:	4770      	bx	lr

08018390 <MQTTCloseSession>:


void MQTTCloseSession(MQTTClient* c)
{
 8018390:	b580      	push	{r7, lr}
 8018392:	b082      	sub	sp, #8
 8018394:	af00      	add	r7, sp, #0
 8018396:	6078      	str	r0, [r7, #4]
    c->ping_outstanding = 0;
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	2200      	movs	r2, #0
 801839c:	771a      	strb	r2, [r3, #28]
    c->isconnected = 0;
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	2200      	movs	r2, #0
 80183a2:	621a      	str	r2, [r3, #32]
    if (c->cleansession)
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d002      	beq.n	80183b2 <MQTTCloseSession+0x22>
        MQTTCleanSession(c);
 80183ac:	6878      	ldr	r0, [r7, #4]
 80183ae:	f7ff ffd4 	bl	801835a <MQTTCleanSession>
}
 80183b2:	bf00      	nop
 80183b4:	3708      	adds	r7, #8
 80183b6:	46bd      	mov	sp, r7
 80183b8:	bd80      	pop	{r7, pc}
	...

080183bc <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 80183bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183be:	b095      	sub	sp, #84	; 0x54
 80183c0:	af06      	add	r7, sp, #24
 80183c2:	6078      	str	r0, [r7, #4]
 80183c4:	6039      	str	r1, [r7, #0]
    int len = 0,
 80183c6:	2300      	movs	r3, #0
 80183c8:	637b      	str	r3, [r7, #52]	; 0x34
        rc = MQTT_SUCCESS;
 80183ca:	2300      	movs	r3, #0
 80183cc:	633b      	str	r3, [r7, #48]	; 0x30

    int packet_type = readPacket(c, timer);     /* read the socket, see what work is due */
 80183ce:	6839      	ldr	r1, [r7, #0]
 80183d0:	6878      	ldr	r0, [r7, #4]
 80183d2:	f7ff fe1c 	bl	801800e <readPacket>
 80183d6:	62f8      	str	r0, [r7, #44]	; 0x2c

    switch (packet_type)
 80183d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183da:	2b0d      	cmp	r3, #13
 80183dc:	d81e      	bhi.n	801841c <cycle+0x60>
 80183de:	a201      	add	r2, pc, #4	; (adr r2, 80183e4 <cycle+0x28>)
 80183e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183e4:	08018575 	.word	0x08018575
 80183e8:	0801841d 	.word	0x0801841d
 80183ec:	08018575 	.word	0x08018575
 80183f0:	08018423 	.word	0x08018423
 80183f4:	08018575 	.word	0x08018575
 80183f8:	080184f1 	.word	0x080184f1
 80183fc:	080184f1 	.word	0x080184f1
 8018400:	08018575 	.word	0x08018575
 8018404:	0801841d 	.word	0x0801841d
 8018408:	08018575 	.word	0x08018575
 801840c:	0801841d 	.word	0x0801841d
 8018410:	08018575 	.word	0x08018575
 8018414:	0801841d 	.word	0x0801841d
 8018418:	0801856d 	.word	0x0801856d
    {
        default:
            /* no more data to read, unrecoverable. Or read packet fails due to unexpected network error */
            rc = packet_type;
 801841c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801841e:	633b      	str	r3, [r7, #48]	; 0x30
            goto exit;
 8018420:	e0ba      	b.n	8018598 <cycle+0x1dc>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            msg.payloadlen = 0; /* this is a size_t, but deserialize publish sets this as int */
 8018422:	2300      	movs	r3, #0
 8018424:	61fb      	str	r3, [r7, #28]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 801842a:	687a      	ldr	r2, [r7, #4]
 801842c:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 801842e:	4616      	mov	r6, r2
 8018430:	f107 0210 	add.w	r2, r7, #16
 8018434:	1d15      	adds	r5, r2, #4
 8018436:	f107 0210 	add.w	r2, r7, #16
 801843a:	1c54      	adds	r4, r2, #1
 801843c:	f107 010c 	add.w	r1, r7, #12
 8018440:	f107 0210 	add.w	r2, r7, #16
 8018444:	1c90      	adds	r0, r2, #2
 8018446:	9604      	str	r6, [sp, #16]
 8018448:	9303      	str	r3, [sp, #12]
 801844a:	f107 0310 	add.w	r3, r7, #16
 801844e:	330c      	adds	r3, #12
 8018450:	9302      	str	r3, [sp, #8]
 8018452:	f107 0310 	add.w	r3, r7, #16
 8018456:	3308      	adds	r3, #8
 8018458:	9301      	str	r3, [sp, #4]
 801845a:	f107 0320 	add.w	r3, r7, #32
 801845e:	9300      	str	r3, [sp, #0]
 8018460:	462b      	mov	r3, r5
 8018462:	4622      	mov	r2, r4
 8018464:	f000 feba 	bl	80191dc <MQTTDeserialize_publish>
 8018468:	4603      	mov	r3, r0
 801846a:	2b01      	cmp	r3, #1
 801846c:	f040 8091 	bne.w	8018592 <cycle+0x1d6>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 8018470:	68fb      	ldr	r3, [r7, #12]
 8018472:	b2db      	uxtb	r3, r3
 8018474:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 8018476:	f107 0210 	add.w	r2, r7, #16
 801847a:	f107 0320 	add.w	r3, r7, #32
 801847e:	4619      	mov	r1, r3
 8018480:	6878      	ldr	r0, [r7, #4]
 8018482:	f7ff feb1 	bl	80181e8 <deliverMessage>
            if (msg.qos != QOS0)
 8018486:	7c3b      	ldrb	r3, [r7, #16]
 8018488:	2b00      	cmp	r3, #0
 801848a:	d075      	beq.n	8018578 <cycle+0x1bc>
            {
                if (msg.qos == QOS1)
 801848c:	7c3b      	ldrb	r3, [r7, #16]
 801848e:	2b01      	cmp	r3, #1
 8018490:	d10c      	bne.n	80184ac <cycle+0xf0>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	6918      	ldr	r0, [r3, #16]
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	689b      	ldr	r3, [r3, #8]
 801849a:	4619      	mov	r1, r3
 801849c:	8abb      	ldrh	r3, [r7, #20]
 801849e:	9300      	str	r3, [sp, #0]
 80184a0:	2300      	movs	r3, #0
 80184a2:	2204      	movs	r2, #4
 80184a4:	f001 f9f4 	bl	8019890 <MQTTSerialize_ack>
 80184a8:	6378      	str	r0, [r7, #52]	; 0x34
 80184aa:	e00e      	b.n	80184ca <cycle+0x10e>
                else if (msg.qos == QOS2)
 80184ac:	7c3b      	ldrb	r3, [r7, #16]
 80184ae:	2b02      	cmp	r3, #2
 80184b0:	d10b      	bne.n	80184ca <cycle+0x10e>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	6918      	ldr	r0, [r3, #16]
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	689b      	ldr	r3, [r3, #8]
 80184ba:	4619      	mov	r1, r3
 80184bc:	8abb      	ldrh	r3, [r7, #20]
 80184be:	9300      	str	r3, [sp, #0]
 80184c0:	2300      	movs	r3, #0
 80184c2:	2205      	movs	r2, #5
 80184c4:	f001 f9e4 	bl	8019890 <MQTTSerialize_ack>
 80184c8:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 80184ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	dc03      	bgt.n	80184d8 <cycle+0x11c>
                    rc = FAILURE;
 80184d0:	f04f 33ff 	mov.w	r3, #4294967295
 80184d4:	633b      	str	r3, [r7, #48]	; 0x30
 80184d6:	e005      	b.n	80184e4 <cycle+0x128>
                else
                    rc = sendPacket(c, len, timer);
 80184d8:	683a      	ldr	r2, [r7, #0]
 80184da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80184dc:	6878      	ldr	r0, [r7, #4]
 80184de:	f7ff fcc4 	bl	8017e6a <sendPacket>
 80184e2:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 80184e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80184ea:	d145      	bne.n	8018578 <cycle+0x1bc>
                    goto exit; // there was a problem
 80184ec:	bf00      	nop
 80184ee:	e053      	b.n	8018598 <cycle+0x1dc>
        case PUBREC:
        case PUBREL:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	695c      	ldr	r4, [r3, #20]
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	68db      	ldr	r3, [r3, #12]
 80184f8:	f107 020a 	add.w	r2, r7, #10
 80184fc:	f107 0109 	add.w	r1, r7, #9
 8018500:	f107 0008 	add.w	r0, r7, #8
 8018504:	9300      	str	r3, [sp, #0]
 8018506:	4623      	mov	r3, r4
 8018508:	f000 feda 	bl	80192c0 <MQTTDeserialize_ack>
 801850c:	4603      	mov	r3, r0
 801850e:	2b01      	cmp	r3, #1
 8018510:	d003      	beq.n	801851a <cycle+0x15e>
                rc = FAILURE;
 8018512:	f04f 33ff 	mov.w	r3, #4294967295
 8018516:	633b      	str	r3, [r7, #48]	; 0x30
 8018518:	e023      	b.n	8018562 <cycle+0x1a6>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size,
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	6918      	ldr	r0, [r3, #16]
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	689b      	ldr	r3, [r3, #8]
 8018522:	4619      	mov	r1, r3
 8018524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018526:	2b05      	cmp	r3, #5
 8018528:	d101      	bne.n	801852e <cycle+0x172>
 801852a:	2206      	movs	r2, #6
 801852c:	e000      	b.n	8018530 <cycle+0x174>
 801852e:	2207      	movs	r2, #7
 8018530:	897b      	ldrh	r3, [r7, #10]
 8018532:	9300      	str	r3, [sp, #0]
 8018534:	2300      	movs	r3, #0
 8018536:	f001 f9ab 	bl	8019890 <MQTTSerialize_ack>
 801853a:	6378      	str	r0, [r7, #52]	; 0x34
 801853c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801853e:	2b00      	cmp	r3, #0
 8018540:	dc03      	bgt.n	801854a <cycle+0x18e>
                (packet_type == PUBREC) ? PUBREL : PUBCOMP, 0, mypacketid)) <= 0)
                rc = FAILURE;
 8018542:	f04f 33ff 	mov.w	r3, #4294967295
 8018546:	633b      	str	r3, [r7, #48]	; 0x30
 8018548:	e00b      	b.n	8018562 <cycle+0x1a6>
            else if ((rc = sendPacket(c, len, timer)) != MQTT_SUCCESS) // send the PUBREL packet
 801854a:	683a      	ldr	r2, [r7, #0]
 801854c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801854e:	6878      	ldr	r0, [r7, #4]
 8018550:	f7ff fc8b 	bl	8017e6a <sendPacket>
 8018554:	6338      	str	r0, [r7, #48]	; 0x30
 8018556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018558:	2b00      	cmp	r3, #0
 801855a:	d002      	beq.n	8018562 <cycle+0x1a6>
                rc = FAILURE; // there was a problem
 801855c:	f04f 33ff 	mov.w	r3, #4294967295
 8018560:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 8018562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018568:	d108      	bne.n	801857c <cycle+0x1c0>
                goto exit; // there was a problem
 801856a:	e015      	b.n	8018598 <cycle+0x1dc>
        }

        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	2200      	movs	r2, #0
 8018570:	771a      	strb	r2, [r3, #28]
            break;
 8018572:	e004      	b.n	801857e <cycle+0x1c2>
            break;
 8018574:	bf00      	nop
 8018576:	e002      	b.n	801857e <cycle+0x1c2>
            break;
 8018578:	bf00      	nop
 801857a:	e000      	b.n	801857e <cycle+0x1c2>
            break;
 801857c:	bf00      	nop
    }

    if (keepalive(c) != MQTT_SUCCESS) {
 801857e:	6878      	ldr	r0, [r7, #4]
 8018580:	f7ff fe9a 	bl	80182b8 <keepalive>
 8018584:	4603      	mov	r3, r0
 8018586:	2b00      	cmp	r3, #0
 8018588:	d005      	beq.n	8018596 <cycle+0x1da>
        //check only keepalive FAILURE status so that previous FAILURE status can be considered as FAULT
        rc = FAILURE;
 801858a:	f04f 33ff 	mov.w	r3, #4294967295
 801858e:	633b      	str	r3, [r7, #48]	; 0x30
 8018590:	e002      	b.n	8018598 <cycle+0x1dc>
                goto exit;
 8018592:	bf00      	nop
 8018594:	e000      	b.n	8018598 <cycle+0x1dc>
    }

exit:
 8018596:	bf00      	nop
    if (rc == MQTT_SUCCESS)
 8018598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801859a:	2b00      	cmp	r3, #0
 801859c:	d102      	bne.n	80185a4 <cycle+0x1e8>
        rc = packet_type;
 801859e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185a0:	633b      	str	r3, [r7, #48]	; 0x30
 80185a2:	e006      	b.n	80185b2 <cycle+0x1f6>
    else if (c->isconnected)
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	6a1b      	ldr	r3, [r3, #32]
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d002      	beq.n	80185b2 <cycle+0x1f6>
        MQTTCloseSession(c);
 80185ac:	6878      	ldr	r0, [r7, #4]
 80185ae:	f7ff feef 	bl	8018390 <MQTTCloseSession>
    return rc;
 80185b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80185b4:	4618      	mov	r0, r3
 80185b6:	373c      	adds	r7, #60	; 0x3c
 80185b8:	46bd      	mov	sp, r7
 80185ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080185bc <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 80185bc:	b580      	push	{r7, lr}
 80185be:	b086      	sub	sp, #24
 80185c0:	af00      	add	r7, sp, #0
 80185c2:	6078      	str	r0, [r7, #4]
 80185c4:	6039      	str	r1, [r7, #0]
    int rc = MQTT_SUCCESS;
 80185c6:	2300      	movs	r3, #0
 80185c8:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 80185ca:	f107 030c 	add.w	r3, r7, #12
 80185ce:	4618      	mov	r0, r3
 80185d0:	f000 fb46 	bl	8018c60 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 80185d4:	683a      	ldr	r2, [r7, #0]
 80185d6:	f107 030c 	add.w	r3, r7, #12
 80185da:	4611      	mov	r1, r2
 80185dc:	4618      	mov	r0, r3
 80185de:	f000 fafd 	bl	8018bdc <TimerCountdownMS>

	  do
    {
        if (cycle(c, &timer) < 0)
 80185e2:	f107 030c 	add.w	r3, r7, #12
 80185e6:	4619      	mov	r1, r3
 80185e8:	6878      	ldr	r0, [r7, #4]
 80185ea:	f7ff fee7 	bl	80183bc <cycle>
 80185ee:	4603      	mov	r3, r0
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	da03      	bge.n	80185fc <MQTTYield+0x40>
        {
            rc = FAILURE;
 80185f4:	f04f 33ff 	mov.w	r3, #4294967295
 80185f8:	617b      	str	r3, [r7, #20]
            break;
 80185fa:	e007      	b.n	801860c <MQTTYield+0x50>
        }
  	} while (!TimerIsExpired(&timer));
 80185fc:	f107 030c 	add.w	r3, r7, #12
 8018600:	4618      	mov	r0, r3
 8018602:	f000 fad5 	bl	8018bb0 <TimerIsExpired>
 8018606:	4603      	mov	r3, r0
 8018608:	2b00      	cmp	r3, #0
 801860a:	d0ea      	beq.n	80185e2 <MQTTYield+0x26>

    return rc;
 801860c:	697b      	ldr	r3, [r7, #20]
}
 801860e:	4618      	mov	r0, r3
 8018610:	3718      	adds	r7, #24
 8018612:	46bd      	mov	sp, r7
 8018614:	bd80      	pop	{r7, pc}

08018616 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 8018616:	b580      	push	{r7, lr}
 8018618:	b086      	sub	sp, #24
 801861a:	af00      	add	r7, sp, #0
 801861c:	60f8      	str	r0, [r7, #12]
 801861e:	60b9      	str	r1, [r7, #8]
 8018620:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8018622:	f04f 33ff 	mov.w	r3, #4294967295
 8018626:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 8018628:	6878      	ldr	r0, [r7, #4]
 801862a:	f000 fac1 	bl	8018bb0 <TimerIsExpired>
 801862e:	4603      	mov	r3, r0
 8018630:	2b00      	cmp	r3, #0
 8018632:	d10c      	bne.n	801864e <waitfor+0x38>
            break; // we timed out
        rc = cycle(c, timer);
 8018634:	6879      	ldr	r1, [r7, #4]
 8018636:	68f8      	ldr	r0, [r7, #12]
 8018638:	f7ff fec0 	bl	80183bc <cycle>
 801863c:	6178      	str	r0, [r7, #20]
    }
    while (rc != packet_type && rc >= 0);
 801863e:	697a      	ldr	r2, [r7, #20]
 8018640:	68bb      	ldr	r3, [r7, #8]
 8018642:	429a      	cmp	r2, r3
 8018644:	d004      	beq.n	8018650 <waitfor+0x3a>
 8018646:	697b      	ldr	r3, [r7, #20]
 8018648:	2b00      	cmp	r3, #0
 801864a:	daed      	bge.n	8018628 <waitfor+0x12>
 801864c:	e000      	b.n	8018650 <waitfor+0x3a>
            break; // we timed out
 801864e:	bf00      	nop

    return rc;
 8018650:	697b      	ldr	r3, [r7, #20]
}
 8018652:	4618      	mov	r0, r3
 8018654:	3718      	adds	r7, #24
 8018656:	46bd      	mov	sp, r7
 8018658:	bd80      	pop	{r7, pc}
	...

0801865c <MQTTConnectWithResults>:




int MQTTConnectWithResults(MQTTClient* c, MQTTPacket_connectData* options, MQTTConnackData* data)
{
 801865c:	b580      	push	{r7, lr}
 801865e:	b09e      	sub	sp, #120	; 0x78
 8018660:	af00      	add	r7, sp, #0
 8018662:	60f8      	str	r0, [r7, #12]
 8018664:	60b9      	str	r1, [r7, #8]
 8018666:	607a      	str	r2, [r7, #4]
    Timer connect_timer;
    int rc = FAILURE;
 8018668:	f04f 33ff 	mov.w	r3, #4294967295
 801866c:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 801866e:	4a43      	ldr	r2, [pc, #268]	; (801877c <MQTTConnectWithResults+0x120>)
 8018670:	f107 0310 	add.w	r3, r7, #16
 8018674:	4611      	mov	r1, r2
 8018676:	2258      	movs	r2, #88	; 0x58
 8018678:	4618      	mov	r0, r3
 801867a:	f001 fabe 	bl	8019bfa <memcpy>
    int len = 0;
 801867e:	2300      	movs	r3, #0
 8018680:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (c->isconnected) /* don't send connect packet again if we are already connected */
 8018682:	68fb      	ldr	r3, [r7, #12]
 8018684:	6a1b      	ldr	r3, [r3, #32]
 8018686:	2b00      	cmp	r3, #0
 8018688:	d164      	bne.n	8018754 <MQTTConnectWithResults+0xf8>
		  goto exit;

    TimerInit(&connect_timer);
 801868a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801868e:	4618      	mov	r0, r3
 8018690:	f000 fae6 	bl	8018c60 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	685a      	ldr	r2, [r3, #4]
 8018698:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801869c:	4611      	mov	r1, r2
 801869e:	4618      	mov	r0, r3
 80186a0:	f000 fa9c 	bl	8018bdc <TimerCountdownMS>

    if (options == 0)
 80186a4:	68bb      	ldr	r3, [r7, #8]
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d102      	bne.n	80186b0 <MQTTConnectWithResults+0x54>
        options = &default_options; /* set default options if none were supplied */
 80186aa:	f107 0310 	add.w	r3, r7, #16
 80186ae:	60bb      	str	r3, [r7, #8]

    c->keepAliveInterval = options->keepAliveInterval;
 80186b0:	68bb      	ldr	r3, [r7, #8]
 80186b2:	8b1b      	ldrh	r3, [r3, #24]
 80186b4:	461a      	mov	r2, r3
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	619a      	str	r2, [r3, #24]
    c->cleansession = options->cleansession;
 80186ba:	68bb      	ldr	r3, [r7, #8]
 80186bc:	7e9b      	ldrb	r3, [r3, #26]
 80186be:	461a      	mov	r2, r3
 80186c0:	68fb      	ldr	r3, [r7, #12]
 80186c2:	625a      	str	r2, [r3, #36]	; 0x24
    TimerCountdown(&c->last_received, c->keepAliveInterval);
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80186ca:	68fb      	ldr	r3, [r7, #12]
 80186cc:	699b      	ldr	r3, [r3, #24]
 80186ce:	4619      	mov	r1, r3
 80186d0:	4610      	mov	r0, r2
 80186d2:	f000 fa97 	bl	8018c04 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 80186d6:	68fb      	ldr	r3, [r7, #12]
 80186d8:	6918      	ldr	r0, [r3, #16]
 80186da:	68fb      	ldr	r3, [r7, #12]
 80186dc:	689b      	ldr	r3, [r3, #8]
 80186de:	68ba      	ldr	r2, [r7, #8]
 80186e0:	4619      	mov	r1, r3
 80186e2:	f000 fbe1 	bl	8018ea8 <MQTTSerialize_connect>
 80186e6:	6738      	str	r0, [r7, #112]	; 0x70
 80186e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	dd34      	ble.n	8018758 <MQTTConnectWithResults+0xfc>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != MQTT_SUCCESS)  // send the connect packet
 80186ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80186f2:	461a      	mov	r2, r3
 80186f4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80186f6:	68f8      	ldr	r0, [r7, #12]
 80186f8:	f7ff fbb7 	bl	8017e6a <sendPacket>
 80186fc:	6778      	str	r0, [r7, #116]	; 0x74
 80186fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018700:	2b00      	cmp	r3, #0
 8018702:	d12b      	bne.n	801875c <MQTTConnectWithResults+0x100>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 8018704:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8018708:	461a      	mov	r2, r3
 801870a:	2102      	movs	r1, #2
 801870c:	68f8      	ldr	r0, [r7, #12]
 801870e:	f7ff ff82 	bl	8018616 <waitfor>
 8018712:	4603      	mov	r3, r0
 8018714:	2b02      	cmp	r3, #2
 8018716:	d119      	bne.n	801874c <MQTTConnectWithResults+0xf0>
    {
        data->rc = 0;
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	2200      	movs	r2, #0
 801871c:	701a      	strb	r2, [r3, #0]
        data->sessionPresent = 0;
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	2200      	movs	r2, #0
 8018722:	705a      	strb	r2, [r3, #1]
        if (MQTTDeserialize_connack(&data->sessionPresent, &data->rc, c->readbuf, c->readbuf_size) == 1)
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	1c58      	adds	r0, r3, #1
 8018728:	6879      	ldr	r1, [r7, #4]
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	695a      	ldr	r2, [r3, #20]
 801872e:	68fb      	ldr	r3, [r7, #12]
 8018730:	68db      	ldr	r3, [r3, #12]
 8018732:	f000 fca7 	bl	8019084 <MQTTDeserialize_connack>
 8018736:	4603      	mov	r3, r0
 8018738:	2b01      	cmp	r3, #1
 801873a:	d103      	bne.n	8018744 <MQTTConnectWithResults+0xe8>
            rc = data->rc;
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	781b      	ldrb	r3, [r3, #0]
 8018740:	677b      	str	r3, [r7, #116]	; 0x74
 8018742:	e00c      	b.n	801875e <MQTTConnectWithResults+0x102>
        else
            rc = FAILURE;
 8018744:	f04f 33ff 	mov.w	r3, #4294967295
 8018748:	677b      	str	r3, [r7, #116]	; 0x74
 801874a:	e008      	b.n	801875e <MQTTConnectWithResults+0x102>
    }
    else
        rc = FAILURE;
 801874c:	f04f 33ff 	mov.w	r3, #4294967295
 8018750:	677b      	str	r3, [r7, #116]	; 0x74
 8018752:	e004      	b.n	801875e <MQTTConnectWithResults+0x102>
		  goto exit;
 8018754:	bf00      	nop
 8018756:	e002      	b.n	801875e <MQTTConnectWithResults+0x102>
        goto exit;
 8018758:	bf00      	nop
 801875a:	e000      	b.n	801875e <MQTTConnectWithResults+0x102>
        goto exit; // there was a problem
 801875c:	bf00      	nop

exit:
    if (rc == MQTT_SUCCESS)
 801875e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018760:	2b00      	cmp	r3, #0
 8018762:	d105      	bne.n	8018770 <MQTTConnectWithResults+0x114>
    {
        c->isconnected = 1;
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	2201      	movs	r2, #1
 8018768:	621a      	str	r2, [r3, #32]
        c->ping_outstanding = 0;
 801876a:	68fb      	ldr	r3, [r7, #12]
 801876c:	2200      	movs	r2, #0
 801876e:	771a      	strb	r2, [r3, #28]

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif

    return rc;
 8018770:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8018772:	4618      	mov	r0, r3
 8018774:	3778      	adds	r7, #120	; 0x78
 8018776:	46bd      	mov	sp, r7
 8018778:	bd80      	pop	{r7, pc}
 801877a:	bf00      	nop
 801877c:	0801eaa4 	.word	0x0801eaa4

08018780 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 8018780:	b580      	push	{r7, lr}
 8018782:	b084      	sub	sp, #16
 8018784:	af00      	add	r7, sp, #0
 8018786:	6078      	str	r0, [r7, #4]
 8018788:	6039      	str	r1, [r7, #0]
    MQTTConnackData data;
    return MQTTConnectWithResults(c, options, &data);
 801878a:	f107 030c 	add.w	r3, r7, #12
 801878e:	461a      	mov	r2, r3
 8018790:	6839      	ldr	r1, [r7, #0]
 8018792:	6878      	ldr	r0, [r7, #4]
 8018794:	f7ff ff62 	bl	801865c <MQTTConnectWithResults>
 8018798:	4603      	mov	r3, r0
}
 801879a:	4618      	mov	r0, r3
 801879c:	3710      	adds	r7, #16
 801879e:	46bd      	mov	sp, r7
 80187a0:	bd80      	pop	{r7, pc}

080187a2 <MQTTSetMessageHandler>:


int MQTTSetMessageHandler(MQTTClient* c, const char* topicFilter, messageHandler messageHandler)
{
 80187a2:	b580      	push	{r7, lr}
 80187a4:	b086      	sub	sp, #24
 80187a6:	af00      	add	r7, sp, #0
 80187a8:	60f8      	str	r0, [r7, #12]
 80187aa:	60b9      	str	r1, [r7, #8]
 80187ac:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 80187ae:	f04f 33ff 	mov.w	r3, #4294967295
 80187b2:	617b      	str	r3, [r7, #20]
    int i = -1;
 80187b4:	f04f 33ff 	mov.w	r3, #4294967295
 80187b8:	613b      	str	r3, [r7, #16]

    /* first check for an existing matching slot */
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80187ba:	2300      	movs	r3, #0
 80187bc:	613b      	str	r3, [r7, #16]
 80187be:	e028      	b.n	8018812 <MQTTSetMessageHandler+0x70>
    {
        if (c->messageHandlers[i].topicFilter != NULL && strcmp(c->messageHandlers[i].topicFilter, topicFilter) == 0)
 80187c0:	68fb      	ldr	r3, [r7, #12]
 80187c2:	693a      	ldr	r2, [r7, #16]
 80187c4:	3205      	adds	r2, #5
 80187c6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d01e      	beq.n	801880c <MQTTSetMessageHandler+0x6a>
 80187ce:	68fb      	ldr	r3, [r7, #12]
 80187d0:	693a      	ldr	r2, [r7, #16]
 80187d2:	3205      	adds	r2, #5
 80187d4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80187d8:	68b9      	ldr	r1, [r7, #8]
 80187da:	4618      	mov	r0, r3
 80187dc:	f7e7 fd30 	bl	8000240 <strcmp>
 80187e0:	4603      	mov	r3, r0
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d112      	bne.n	801880c <MQTTSetMessageHandler+0x6a>
        {
            if (messageHandler == NULL) /* remove existing */
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d10c      	bne.n	8018806 <MQTTSetMessageHandler+0x64>
            {
                c->messageHandlers[i].topicFilter = NULL;
 80187ec:	68fb      	ldr	r3, [r7, #12]
 80187ee:	693a      	ldr	r2, [r7, #16]
 80187f0:	3205      	adds	r2, #5
 80187f2:	2100      	movs	r1, #0
 80187f4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
                c->messageHandlers[i].fp = NULL;
 80187f8:	68fa      	ldr	r2, [r7, #12]
 80187fa:	693b      	ldr	r3, [r7, #16]
 80187fc:	3305      	adds	r3, #5
 80187fe:	00db      	lsls	r3, r3, #3
 8018800:	4413      	add	r3, r2
 8018802:	2200      	movs	r2, #0
 8018804:	605a      	str	r2, [r3, #4]
            }
            rc = MQTT_SUCCESS; /* return i when adding new subscription */
 8018806:	2300      	movs	r3, #0
 8018808:	617b      	str	r3, [r7, #20]
            break;
 801880a:	e005      	b.n	8018818 <MQTTSetMessageHandler+0x76>
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801880c:	693b      	ldr	r3, [r7, #16]
 801880e:	3301      	adds	r3, #1
 8018810:	613b      	str	r3, [r7, #16]
 8018812:	693b      	ldr	r3, [r7, #16]
 8018814:	2b04      	cmp	r3, #4
 8018816:	ddd3      	ble.n	80187c0 <MQTTSetMessageHandler+0x1e>
        }
    }
    /* if no existing, look for empty slot (unless we are removing) */
    if (messageHandler != NULL) {
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	2b00      	cmp	r3, #0
 801881c:	d026      	beq.n	801886c <MQTTSetMessageHandler+0xca>
        if (rc == FAILURE)
 801881e:	697b      	ldr	r3, [r7, #20]
 8018820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018824:	d112      	bne.n	801884c <MQTTSetMessageHandler+0xaa>
        {
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018826:	2300      	movs	r3, #0
 8018828:	613b      	str	r3, [r7, #16]
 801882a:	e00c      	b.n	8018846 <MQTTSetMessageHandler+0xa4>
            {
                if (c->messageHandlers[i].topicFilter == NULL)
 801882c:	68fb      	ldr	r3, [r7, #12]
 801882e:	693a      	ldr	r2, [r7, #16]
 8018830:	3205      	adds	r2, #5
 8018832:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8018836:	2b00      	cmp	r3, #0
 8018838:	d102      	bne.n	8018840 <MQTTSetMessageHandler+0x9e>
                {
                    rc = MQTT_SUCCESS;
 801883a:	2300      	movs	r3, #0
 801883c:	617b      	str	r3, [r7, #20]
                    break;
 801883e:	e005      	b.n	801884c <MQTTSetMessageHandler+0xaa>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018840:	693b      	ldr	r3, [r7, #16]
 8018842:	3301      	adds	r3, #1
 8018844:	613b      	str	r3, [r7, #16]
 8018846:	693b      	ldr	r3, [r7, #16]
 8018848:	2b04      	cmp	r3, #4
 801884a:	ddef      	ble.n	801882c <MQTTSetMessageHandler+0x8a>
                }
            }
        }
        if (i < MAX_MESSAGE_HANDLERS)
 801884c:	693b      	ldr	r3, [r7, #16]
 801884e:	2b04      	cmp	r3, #4
 8018850:	dc0c      	bgt.n	801886c <MQTTSetMessageHandler+0xca>
        {
            c->messageHandlers[i].topicFilter = topicFilter;
 8018852:	68fb      	ldr	r3, [r7, #12]
 8018854:	693a      	ldr	r2, [r7, #16]
 8018856:	3205      	adds	r2, #5
 8018858:	68b9      	ldr	r1, [r7, #8]
 801885a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            c->messageHandlers[i].fp = messageHandler;
 801885e:	68fa      	ldr	r2, [r7, #12]
 8018860:	693b      	ldr	r3, [r7, #16]
 8018862:	3305      	adds	r3, #5
 8018864:	00db      	lsls	r3, r3, #3
 8018866:	4413      	add	r3, r2
 8018868:	687a      	ldr	r2, [r7, #4]
 801886a:	605a      	str	r2, [r3, #4]
        }
    }
    return rc;
 801886c:	697b      	ldr	r3, [r7, #20]
}
 801886e:	4618      	mov	r0, r3
 8018870:	3718      	adds	r7, #24
 8018872:	46bd      	mov	sp, r7
 8018874:	bd80      	pop	{r7, pc}

08018876 <MQTTSubscribeWithResults>:


int MQTTSubscribeWithResults(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler, MQTTSubackData* data)
{
 8018876:	b5b0      	push	{r4, r5, r7, lr}
 8018878:	b092      	sub	sp, #72	; 0x48
 801887a:	af04      	add	r7, sp, #16
 801887c:	60f8      	str	r0, [r7, #12]
 801887e:	60b9      	str	r1, [r7, #8]
 8018880:	603b      	str	r3, [r7, #0]
 8018882:	4613      	mov	r3, r2
 8018884:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 8018886:	f04f 33ff 	mov.w	r3, #4294967295
 801888a:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    int len = 0;
 801888c:	2300      	movs	r3, #0
 801888e:	633b      	str	r3, [r7, #48]	; 0x30
    MQTTString topic = MQTTString_initializer;
 8018890:	2300      	movs	r3, #0
 8018892:	61fb      	str	r3, [r7, #28]
 8018894:	2300      	movs	r3, #0
 8018896:	623b      	str	r3, [r7, #32]
 8018898:	2300      	movs	r3, #0
 801889a:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicFilter;
 801889c:	68bb      	ldr	r3, [r7, #8]
 801889e:	61fb      	str	r3, [r7, #28]

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 80188a0:	68fb      	ldr	r3, [r7, #12]
 80188a2:	6a1b      	ldr	r3, [r3, #32]
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d063      	beq.n	8018970 <MQTTSubscribeWithResults+0xfa>
		    goto exit;

    TimerInit(&timer);
 80188a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80188ac:	4618      	mov	r0, r3
 80188ae:	f000 f9d7 	bl	8018c60 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 80188b2:	68fb      	ldr	r3, [r7, #12]
 80188b4:	685a      	ldr	r2, [r3, #4]
 80188b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80188ba:	4611      	mov	r1, r2
 80188bc:	4618      	mov	r0, r3
 80188be:	f000 f98d 	bl	8018bdc <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 80188c2:	68fb      	ldr	r3, [r7, #12]
 80188c4:	691c      	ldr	r4, [r3, #16]
 80188c6:	68fb      	ldr	r3, [r7, #12]
 80188c8:	689b      	ldr	r3, [r3, #8]
 80188ca:	461d      	mov	r5, r3
 80188cc:	68f8      	ldr	r0, [r7, #12]
 80188ce:	f7ff fab3 	bl	8017e38 <getNextPacketId>
 80188d2:	4603      	mov	r3, r0
 80188d4:	b29a      	uxth	r2, r3
 80188d6:	1dfb      	adds	r3, r7, #7
 80188d8:	9302      	str	r3, [sp, #8]
 80188da:	f107 031c 	add.w	r3, r7, #28
 80188de:	9301      	str	r3, [sp, #4]
 80188e0:	2301      	movs	r3, #1
 80188e2:	9300      	str	r3, [sp, #0]
 80188e4:	4613      	mov	r3, r2
 80188e6:	2200      	movs	r2, #0
 80188e8:	4629      	mov	r1, r5
 80188ea:	4620      	mov	r0, r4
 80188ec:	f001 f84d 	bl	801998a <MQTTSerialize_subscribe>
 80188f0:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 80188f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	dd3d      	ble.n	8018974 <MQTTSubscribeWithResults+0xfe>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 80188f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80188fc:	461a      	mov	r2, r3
 80188fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018900:	68f8      	ldr	r0, [r7, #12]
 8018902:	f7ff fab2 	bl	8017e6a <sendPacket>
 8018906:	6378      	str	r0, [r7, #52]	; 0x34
 8018908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801890a:	2b00      	cmp	r3, #0
 801890c:	d134      	bne.n	8018978 <MQTTSubscribeWithResults+0x102>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 801890e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018912:	461a      	mov	r2, r3
 8018914:	2109      	movs	r1, #9
 8018916:	68f8      	ldr	r0, [r7, #12]
 8018918:	f7ff fe7d 	bl	8018616 <waitfor>
 801891c:	4603      	mov	r3, r0
 801891e:	2b09      	cmp	r3, #9
 8018920:	d122      	bne.n	8018968 <MQTTSubscribeWithResults+0xf2>
    {
        int count = 0;
 8018922:	2300      	movs	r3, #0
 8018924:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        data->grantedQoS = QOS0;
 8018926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018928:	2200      	movs	r2, #0
 801892a:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, (int*)&data->grantedQoS, c->readbuf, c->readbuf_size) == 1)
 801892c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801892e:	68fb      	ldr	r3, [r7, #12]
 8018930:	695b      	ldr	r3, [r3, #20]
 8018932:	68fa      	ldr	r2, [r7, #12]
 8018934:	68d2      	ldr	r2, [r2, #12]
 8018936:	4614      	mov	r4, r2
 8018938:	f107 0218 	add.w	r2, r7, #24
 801893c:	f107 0016 	add.w	r0, r7, #22
 8018940:	9401      	str	r4, [sp, #4]
 8018942:	9300      	str	r3, [sp, #0]
 8018944:	460b      	mov	r3, r1
 8018946:	2101      	movs	r1, #1
 8018948:	f001 f89c 	bl	8019a84 <MQTTDeserialize_suback>
 801894c:	4603      	mov	r3, r0
 801894e:	2b01      	cmp	r3, #1
 8018950:	d113      	bne.n	801897a <MQTTSubscribeWithResults+0x104>
        {
            if (data->grantedQoS != 0x80)
 8018952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018954:	781b      	ldrb	r3, [r3, #0]
 8018956:	2b80      	cmp	r3, #128	; 0x80
 8018958:	d00f      	beq.n	801897a <MQTTSubscribeWithResults+0x104>
                rc = MQTTSetMessageHandler(c, topicFilter, messageHandler);
 801895a:	683a      	ldr	r2, [r7, #0]
 801895c:	68b9      	ldr	r1, [r7, #8]
 801895e:	68f8      	ldr	r0, [r7, #12]
 8018960:	f7ff ff1f 	bl	80187a2 <MQTTSetMessageHandler>
 8018964:	6378      	str	r0, [r7, #52]	; 0x34
 8018966:	e008      	b.n	801897a <MQTTSubscribeWithResults+0x104>
        }
    }
    else
        rc = FAILURE;
 8018968:	f04f 33ff 	mov.w	r3, #4294967295
 801896c:	637b      	str	r3, [r7, #52]	; 0x34
 801896e:	e004      	b.n	801897a <MQTTSubscribeWithResults+0x104>
		    goto exit;
 8018970:	bf00      	nop
 8018972:	e002      	b.n	801897a <MQTTSubscribeWithResults+0x104>
        goto exit;
 8018974:	bf00      	nop
 8018976:	e000      	b.n	801897a <MQTTSubscribeWithResults+0x104>
        goto exit;             // there was a problem
 8018978:	bf00      	nop

exit:
    if (rc == FAILURE)
 801897a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801897c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018980:	d102      	bne.n	8018988 <MQTTSubscribeWithResults+0x112>
        MQTTCloseSession(c);
 8018982:	68f8      	ldr	r0, [r7, #12]
 8018984:	f7ff fd04 	bl	8018390 <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 8018988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801898a:	4618      	mov	r0, r3
 801898c:	3738      	adds	r7, #56	; 0x38
 801898e:	46bd      	mov	sp, r7
 8018990:	bdb0      	pop	{r4, r5, r7, pc}

08018992 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler)
{
 8018992:	b580      	push	{r7, lr}
 8018994:	b088      	sub	sp, #32
 8018996:	af02      	add	r7, sp, #8
 8018998:	60f8      	str	r0, [r7, #12]
 801899a:	60b9      	str	r1, [r7, #8]
 801899c:	603b      	str	r3, [r7, #0]
 801899e:	4613      	mov	r3, r2
 80189a0:	71fb      	strb	r3, [r7, #7]
    MQTTSubackData data;
    return MQTTSubscribeWithResults(c, topicFilter, qos, messageHandler, &data);
 80189a2:	79fa      	ldrb	r2, [r7, #7]
 80189a4:	f107 0314 	add.w	r3, r7, #20
 80189a8:	9300      	str	r3, [sp, #0]
 80189aa:	683b      	ldr	r3, [r7, #0]
 80189ac:	68b9      	ldr	r1, [r7, #8]
 80189ae:	68f8      	ldr	r0, [r7, #12]
 80189b0:	f7ff ff61 	bl	8018876 <MQTTSubscribeWithResults>
 80189b4:	4603      	mov	r3, r0
}
 80189b6:	4618      	mov	r0, r3
 80189b8:	3718      	adds	r7, #24
 80189ba:	46bd      	mov	sp, r7
 80189bc:	bd80      	pop	{r7, pc}

080189be <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 80189be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80189c0:	b097      	sub	sp, #92	; 0x5c
 80189c2:	af08      	add	r7, sp, #32
 80189c4:	60f8      	str	r0, [r7, #12]
 80189c6:	60b9      	str	r1, [r7, #8]
 80189c8:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 80189ca:	f04f 33ff 	mov.w	r3, #4294967295
 80189ce:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 80189d0:	2300      	movs	r3, #0
 80189d2:	61fb      	str	r3, [r7, #28]
 80189d4:	2300      	movs	r3, #0
 80189d6:	623b      	str	r3, [r7, #32]
 80189d8:	2300      	movs	r3, #0
 80189da:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 80189dc:	68bb      	ldr	r3, [r7, #8]
 80189de:	61fb      	str	r3, [r7, #28]
    int len = 0;
 80189e0:	2300      	movs	r3, #0
 80189e2:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 80189e4:	68fb      	ldr	r3, [r7, #12]
 80189e6:	6a1b      	ldr	r3, [r3, #32]
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	f000 809b 	beq.w	8018b24 <MQTTPublish+0x166>
		    goto exit;

    TimerInit(&timer);
 80189ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80189f2:	4618      	mov	r0, r3
 80189f4:	f000 f934 	bl	8018c60 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 80189f8:	68fb      	ldr	r3, [r7, #12]
 80189fa:	685a      	ldr	r2, [r3, #4]
 80189fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018a00:	4611      	mov	r1, r2
 8018a02:	4618      	mov	r0, r3
 8018a04:	f000 f8ea 	bl	8018bdc <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	781b      	ldrb	r3, [r3, #0]
 8018a0c:	2b01      	cmp	r3, #1
 8018a0e:	d003      	beq.n	8018a18 <MQTTPublish+0x5a>
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	781b      	ldrb	r3, [r3, #0]
 8018a14:	2b02      	cmp	r3, #2
 8018a16:	d106      	bne.n	8018a26 <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 8018a18:	68f8      	ldr	r0, [r7, #12]
 8018a1a:	f7ff fa0d 	bl	8017e38 <getNextPacketId>
 8018a1e:	4603      	mov	r3, r0
 8018a20:	b29a      	uxth	r2, r3
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 8018a26:	68fb      	ldr	r3, [r7, #12]
 8018a28:	691b      	ldr	r3, [r3, #16]
 8018a2a:	603b      	str	r3, [r7, #0]
 8018a2c:	68fb      	ldr	r3, [r7, #12]
 8018a2e:	689b      	ldr	r3, [r3, #8]
 8018a30:	469c      	mov	ip, r3
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	781b      	ldrb	r3, [r3, #0]
 8018a36:	469e      	mov	lr, r3
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	785d      	ldrb	r5, [r3, #1]
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	689b      	ldr	r3, [r3, #8]
 8018a44:	687a      	ldr	r2, [r7, #4]
 8018a46:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 8018a48:	9206      	str	r2, [sp, #24]
 8018a4a:	9305      	str	r3, [sp, #20]
 8018a4c:	ac02      	add	r4, sp, #8
 8018a4e:	f107 031c 	add.w	r3, r7, #28
 8018a52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018a56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8018a5a:	9601      	str	r6, [sp, #4]
 8018a5c:	9500      	str	r5, [sp, #0]
 8018a5e:	4673      	mov	r3, lr
 8018a60:	2200      	movs	r2, #0
 8018a62:	4661      	mov	r1, ip
 8018a64:	6838      	ldr	r0, [r7, #0]
 8018a66:	f000 fe9c 	bl	80197a2 <MQTTSerialize_publish>
 8018a6a:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 8018a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	dd5a      	ble.n	8018b28 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 8018a72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018a76:	461a      	mov	r2, r3
 8018a78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018a7a:	68f8      	ldr	r0, [r7, #12]
 8018a7c:	f7ff f9f5 	bl	8017e6a <sendPacket>
 8018a80:	6378      	str	r0, [r7, #52]	; 0x34
 8018a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d151      	bne.n	8018b2c <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	781b      	ldrb	r3, [r3, #0]
 8018a8c:	2b01      	cmp	r3, #1
 8018a8e:	d122      	bne.n	8018ad6 <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 8018a90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018a94:	461a      	mov	r2, r3
 8018a96:	2104      	movs	r1, #4
 8018a98:	68f8      	ldr	r0, [r7, #12]
 8018a9a:	f7ff fdbc 	bl	8018616 <waitfor>
 8018a9e:	4603      	mov	r3, r0
 8018aa0:	2b04      	cmp	r3, #4
 8018aa2:	d114      	bne.n	8018ace <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8018aa4:	68fb      	ldr	r3, [r7, #12]
 8018aa6:	695c      	ldr	r4, [r3, #20]
 8018aa8:	68fb      	ldr	r3, [r7, #12]
 8018aaa:	68db      	ldr	r3, [r3, #12]
 8018aac:	f107 021a 	add.w	r2, r7, #26
 8018ab0:	f107 0119 	add.w	r1, r7, #25
 8018ab4:	f107 0018 	add.w	r0, r7, #24
 8018ab8:	9300      	str	r3, [sp, #0]
 8018aba:	4623      	mov	r3, r4
 8018abc:	f000 fc00 	bl	80192c0 <MQTTDeserialize_ack>
 8018ac0:	4603      	mov	r3, r0
 8018ac2:	2b01      	cmp	r3, #1
 8018ac4:	d035      	beq.n	8018b32 <MQTTPublish+0x174>
                rc = FAILURE;
 8018ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8018aca:	637b      	str	r3, [r7, #52]	; 0x34
 8018acc:	e031      	b.n	8018b32 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8018ace:	f04f 33ff 	mov.w	r3, #4294967295
 8018ad2:	637b      	str	r3, [r7, #52]	; 0x34
 8018ad4:	e02d      	b.n	8018b32 <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	781b      	ldrb	r3, [r3, #0]
 8018ada:	2b02      	cmp	r3, #2
 8018adc:	d128      	bne.n	8018b30 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 8018ade:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018ae2:	461a      	mov	r2, r3
 8018ae4:	2107      	movs	r1, #7
 8018ae6:	68f8      	ldr	r0, [r7, #12]
 8018ae8:	f7ff fd95 	bl	8018616 <waitfor>
 8018aec:	4603      	mov	r3, r0
 8018aee:	2b07      	cmp	r3, #7
 8018af0:	d114      	bne.n	8018b1c <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	695c      	ldr	r4, [r3, #20]
 8018af6:	68fb      	ldr	r3, [r7, #12]
 8018af8:	68db      	ldr	r3, [r3, #12]
 8018afa:	f107 0216 	add.w	r2, r7, #22
 8018afe:	f107 0115 	add.w	r1, r7, #21
 8018b02:	f107 0014 	add.w	r0, r7, #20
 8018b06:	9300      	str	r3, [sp, #0]
 8018b08:	4623      	mov	r3, r4
 8018b0a:	f000 fbd9 	bl	80192c0 <MQTTDeserialize_ack>
 8018b0e:	4603      	mov	r3, r0
 8018b10:	2b01      	cmp	r3, #1
 8018b12:	d00e      	beq.n	8018b32 <MQTTPublish+0x174>
                rc = FAILURE;
 8018b14:	f04f 33ff 	mov.w	r3, #4294967295
 8018b18:	637b      	str	r3, [r7, #52]	; 0x34
 8018b1a:	e00a      	b.n	8018b32 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8018b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8018b20:	637b      	str	r3, [r7, #52]	; 0x34
 8018b22:	e006      	b.n	8018b32 <MQTTPublish+0x174>
		    goto exit;
 8018b24:	bf00      	nop
 8018b26:	e004      	b.n	8018b32 <MQTTPublish+0x174>
        goto exit;
 8018b28:	bf00      	nop
 8018b2a:	e002      	b.n	8018b32 <MQTTPublish+0x174>
        goto exit; // there was a problem
 8018b2c:	bf00      	nop
 8018b2e:	e000      	b.n	8018b32 <MQTTPublish+0x174>
    }

exit:
 8018b30:	bf00      	nop
    if (rc == FAILURE)
 8018b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b38:	d102      	bne.n	8018b40 <MQTTPublish+0x182>
        MQTTCloseSession(c);
 8018b3a:	68f8      	ldr	r0, [r7, #12]
 8018b3c:	f7ff fc28 	bl	8018390 <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 8018b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8018b42:	4618      	mov	r0, r3
 8018b44:	373c      	adds	r7, #60	; 0x3c
 8018b46:	46bd      	mov	sp, r7
 8018b48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018b4a <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{
 8018b4a:	b580      	push	{r7, lr}
 8018b4c:	b086      	sub	sp, #24
 8018b4e:	af00      	add	r7, sp, #0
 8018b50:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 8018b52:	f04f 33ff 	mov.w	r3, #4294967295
 8018b56:	617b      	str	r3, [r7, #20]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
 8018b58:	2300      	movs	r3, #0
 8018b5a:	613b      	str	r3, [r7, #16]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
 8018b5c:	f107 0308 	add.w	r3, r7, #8
 8018b60:	4618      	mov	r0, r3
 8018b62:	f000 f87d 	bl	8018c60 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	685a      	ldr	r2, [r3, #4]
 8018b6a:	f107 0308 	add.w	r3, r7, #8
 8018b6e:	4611      	mov	r1, r2
 8018b70:	4618      	mov	r0, r3
 8018b72:	f000 f833 	bl	8018bdc <TimerCountdownMS>

	  len = MQTTSerialize_disconnect(c->buf, c->buf_size);
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	691a      	ldr	r2, [r3, #16]
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	689b      	ldr	r3, [r3, #8]
 8018b7e:	4619      	mov	r1, r3
 8018b80:	4610      	mov	r0, r2
 8018b82:	f000 fb0d 	bl	80191a0 <MQTTSerialize_disconnect>
 8018b86:	6138      	str	r0, [r7, #16]
    if (len > 0)
 8018b88:	693b      	ldr	r3, [r7, #16]
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	dd07      	ble.n	8018b9e <MQTTDisconnect+0x54>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
 8018b8e:	f107 0308 	add.w	r3, r7, #8
 8018b92:	461a      	mov	r2, r3
 8018b94:	6939      	ldr	r1, [r7, #16]
 8018b96:	6878      	ldr	r0, [r7, #4]
 8018b98:	f7ff f967 	bl	8017e6a <sendPacket>
 8018b9c:	6178      	str	r0, [r7, #20]
    MQTTCloseSession(c);
 8018b9e:	6878      	ldr	r0, [r7, #4]
 8018ba0:	f7ff fbf6 	bl	8018390 <MQTTCloseSession>

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 8018ba4:	697b      	ldr	r3, [r7, #20]
}
 8018ba6:	4618      	mov	r0, r3
 8018ba8:	3718      	adds	r7, #24
 8018baa:	46bd      	mov	sp, r7
 8018bac:	bd80      	pop	{r7, pc}
	...

08018bb0 <TimerIsExpired>:
#define SERVER_IP4	227

uint32_t MilliTimer;

//Timer functions
char TimerIsExpired(Timer *timer) {
 8018bb0:	b480      	push	{r7}
 8018bb2:	b085      	sub	sp, #20
 8018bb4:	af00      	add	r7, sp, #0
 8018bb6:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	685a      	ldr	r2, [r3, #4]
 8018bbc:	4b06      	ldr	r3, [pc, #24]	; (8018bd8 <TimerIsExpired+0x28>)
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	1ad3      	subs	r3, r2, r3
 8018bc2:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	0fdb      	lsrs	r3, r3, #31
 8018bc8:	b2db      	uxtb	r3, r3
}
 8018bca:	4618      	mov	r0, r3
 8018bcc:	3714      	adds	r7, #20
 8018bce:	46bd      	mov	sp, r7
 8018bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bd4:	4770      	bx	lr
 8018bd6:	bf00      	nop
 8018bd8:	2000fd84 	.word	0x2000fd84

08018bdc <TimerCountdownMS>:

void TimerCountdownMS(Timer *timer, unsigned int timeout) {
 8018bdc:	b480      	push	{r7}
 8018bde:	b083      	sub	sp, #12
 8018be0:	af00      	add	r7, sp, #0
 8018be2:	6078      	str	r0, [r7, #4]
 8018be4:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 8018be6:	4b06      	ldr	r3, [pc, #24]	; (8018c00 <TimerCountdownMS+0x24>)
 8018be8:	681a      	ldr	r2, [r3, #0]
 8018bea:	683b      	ldr	r3, [r7, #0]
 8018bec:	441a      	add	r2, r3
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	605a      	str	r2, [r3, #4]
}
 8018bf2:	bf00      	nop
 8018bf4:	370c      	adds	r7, #12
 8018bf6:	46bd      	mov	sp, r7
 8018bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bfc:	4770      	bx	lr
 8018bfe:	bf00      	nop
 8018c00:	2000fd84 	.word	0x2000fd84

08018c04 <TimerCountdown>:

void TimerCountdown(Timer *timer, unsigned int timeout) {
 8018c04:	b480      	push	{r7}
 8018c06:	b083      	sub	sp, #12
 8018c08:	af00      	add	r7, sp, #0
 8018c0a:	6078      	str	r0, [r7, #4]
 8018c0c:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 8018c0e:	683b      	ldr	r3, [r7, #0]
 8018c10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018c14:	fb02 f203 	mul.w	r2, r2, r3
 8018c18:	4b05      	ldr	r3, [pc, #20]	; (8018c30 <TimerCountdown+0x2c>)
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	441a      	add	r2, r3
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	605a      	str	r2, [r3, #4]
}
 8018c22:	bf00      	nop
 8018c24:	370c      	adds	r7, #12
 8018c26:	46bd      	mov	sp, r7
 8018c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c2c:	4770      	bx	lr
 8018c2e:	bf00      	nop
 8018c30:	2000fd84 	.word	0x2000fd84

08018c34 <TimerLeftMS>:

int TimerLeftMS(Timer *timer) {
 8018c34:	b480      	push	{r7}
 8018c36:	b085      	sub	sp, #20
 8018c38:	af00      	add	r7, sp, #0
 8018c3a:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	685a      	ldr	r2, [r3, #4]
 8018c40:	4b06      	ldr	r3, [pc, #24]	; (8018c5c <TimerLeftMS+0x28>)
 8018c42:	681b      	ldr	r3, [r3, #0]
 8018c44:	1ad3      	subs	r3, r2, r3
 8018c46:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 8018c48:	68fb      	ldr	r3, [r7, #12]
 8018c4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 8018c4e:	4618      	mov	r0, r3
 8018c50:	3714      	adds	r7, #20
 8018c52:	46bd      	mov	sp, r7
 8018c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c58:	4770      	bx	lr
 8018c5a:	bf00      	nop
 8018c5c:	2000fd84 	.word	0x2000fd84

08018c60 <TimerInit>:

void TimerInit(Timer *timer) {
 8018c60:	b480      	push	{r7}
 8018c62:	b083      	sub	sp, #12
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	2200      	movs	r2, #0
 8018c6c:	605a      	str	r2, [r3, #4]
}
 8018c6e:	bf00      	nop
 8018c70:	370c      	adds	r7, #12
 8018c72:	46bd      	mov	sp, r7
 8018c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c78:	4770      	bx	lr
	...

08018c7c <NewNetwork>:

#ifdef MQTT_LWIP_SOCKET
void NewNetwork(Network *n) {
 8018c7c:	b480      	push	{r7}
 8018c7e:	b083      	sub	sp, #12
 8018c80:	af00      	add	r7, sp, #0
 8018c82:	6078      	str	r0, [r7, #4]
	n->socket = 0; //clear
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	2200      	movs	r2, #0
 8018c88:	601a      	str	r2, [r3, #0]
	n->mqttread = net_read; //receive function
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	4a06      	ldr	r2, [pc, #24]	; (8018ca8 <NewNetwork+0x2c>)
 8018c8e:	605a      	str	r2, [r3, #4]
	n->mqttwrite = net_write; //send function
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	4a06      	ldr	r2, [pc, #24]	; (8018cac <NewNetwork+0x30>)
 8018c94:	609a      	str	r2, [r3, #8]
	n->disconnect = net_disconnect; //disconnection function
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	4a05      	ldr	r2, [pc, #20]	; (8018cb0 <NewNetwork+0x34>)
 8018c9a:	60da      	str	r2, [r3, #12]
}
 8018c9c:	bf00      	nop
 8018c9e:	370c      	adds	r7, #12
 8018ca0:	46bd      	mov	sp, r7
 8018ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ca6:	4770      	bx	lr
 8018ca8:	08018d51 	.word	0x08018d51
 8018cac:	08018da1 	.word	0x08018da1
 8018cb0:	08018dc7 	.word	0x08018dc7

08018cb4 <ConnectNetwork>:

int ConnectNetwork(Network *n, char *ip, int port) {
 8018cb4:	b580      	push	{r7, lr}
 8018cb6:	b088      	sub	sp, #32
 8018cb8:	af00      	add	r7, sp, #0
 8018cba:	60f8      	str	r0, [r7, #12]
 8018cbc:	60b9      	str	r1, [r7, #8]
 8018cbe:	607a      	str	r2, [r7, #4]
	struct sockaddr_in server_addr;

	if(n->socket)
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d004      	beq.n	8018cd2 <ConnectNetwork+0x1e>
	{
		close(n->socket);
 8018cc8:	68fb      	ldr	r3, [r7, #12]
 8018cca:	681b      	ldr	r3, [r3, #0]
 8018ccc:	4618      	mov	r0, r3
 8018cce:	f7f0 fced 	bl	80096ac <lwip_close>
	}

	n->socket = socket(PF_INET, SOCK_STREAM, 0); //create socket
 8018cd2:	2200      	movs	r2, #0
 8018cd4:	2101      	movs	r1, #1
 8018cd6:	2002      	movs	r0, #2
 8018cd8:	f7f1 f9fc 	bl	800a0d4 <lwip_socket>
 8018cdc:	4602      	mov	r2, r0
 8018cde:	68fb      	ldr	r3, [r7, #12]
 8018ce0:	601a      	str	r2, [r3, #0]
	if(n->socket < 0)
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	da05      	bge.n	8018cf6 <ConnectNetwork+0x42>
	{
		n->socket = 0;
 8018cea:	68fb      	ldr	r3, [r7, #12]
 8018cec:	2200      	movs	r2, #0
 8018cee:	601a      	str	r2, [r3, #0]
		return -1;
 8018cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8018cf4:	e028      	b.n	8018d48 <ConnectNetwork+0x94>
	}

	memset(&server_addr, 0, sizeof(struct sockaddr_in)); //broker address info
 8018cf6:	f107 0310 	add.w	r3, r7, #16
 8018cfa:	2210      	movs	r2, #16
 8018cfc:	2100      	movs	r1, #0
 8018cfe:	4618      	mov	r0, r3
 8018d00:	f000 ff86 	bl	8019c10 <memset>
	server_addr.sin_family = AF_INET;
 8018d04:	2302      	movs	r3, #2
 8018d06:	747b      	strb	r3, [r7, #17]
	server_addr.sin_addr.s_addr = inet_addr(ip);
 8018d08:	68b8      	ldr	r0, [r7, #8]
 8018d0a:	f7fd fe50 	bl	80169ae <ipaddr_addr>
 8018d0e:	4603      	mov	r3, r0
 8018d10:	617b      	str	r3, [r7, #20]
	server_addr.sin_port = htons(port);
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	b29b      	uxth	r3, r3
 8018d16:	4618      	mov	r0, r3
 8018d18:	f7f1 fe10 	bl	800a93c <lwip_htons>
 8018d1c:	4603      	mov	r3, r0
 8018d1e:	827b      	strh	r3, [r7, #18]

	if(connect(n->socket, (struct sockaddr*)&server_addr, sizeof(struct sockaddr_in)) < 0) //connect to the broker
 8018d20:	68fb      	ldr	r3, [r7, #12]
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	f107 0110 	add.w	r1, r7, #16
 8018d28:	2210      	movs	r2, #16
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	f7f0 fd14 	bl	8009758 <lwip_connect>
 8018d30:	4603      	mov	r3, r0
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	da07      	bge.n	8018d46 <ConnectNetwork+0x92>
	{
		close(n->socket);
 8018d36:	68fb      	ldr	r3, [r7, #12]
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	4618      	mov	r0, r3
 8018d3c:	f7f0 fcb6 	bl	80096ac <lwip_close>
		return -1;
 8018d40:	f04f 33ff 	mov.w	r3, #4294967295
 8018d44:	e000      	b.n	8018d48 <ConnectNetwork+0x94>
	}
	return 0;
 8018d46:	2300      	movs	r3, #0
}
 8018d48:	4618      	mov	r0, r3
 8018d4a:	3720      	adds	r7, #32
 8018d4c:	46bd      	mov	sp, r7
 8018d4e:	bd80      	pop	{r7, pc}

08018d50 <net_read>:

int net_read(Network *n, unsigned char *buffer, int len, int timeout_ms) {
 8018d50:	b580      	push	{r7, lr}
 8018d52:	b086      	sub	sp, #24
 8018d54:	af00      	add	r7, sp, #0
 8018d56:	60f8      	str	r0, [r7, #12]
 8018d58:	60b9      	str	r1, [r7, #8]
 8018d5a:	607a      	str	r2, [r7, #4]
 8018d5c:	603b      	str	r3, [r7, #0]
	int available;

	/* !!! LWIP_SO_RCVBUF must be enabled !!! */
	if(ioctl(n->socket, FIONREAD, &available) < 0) return -1; //check receive buffer
 8018d5e:	68fb      	ldr	r3, [r7, #12]
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	f107 0214 	add.w	r2, r7, #20
 8018d66:	490d      	ldr	r1, [pc, #52]	; (8018d9c <net_read+0x4c>)
 8018d68:	4618      	mov	r0, r3
 8018d6a:	f7f1 fb8f 	bl	800a48c <lwip_ioctl>
 8018d6e:	4603      	mov	r3, r0
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	da02      	bge.n	8018d7a <net_read+0x2a>
 8018d74:	f04f 33ff 	mov.w	r3, #4294967295
 8018d78:	e00c      	b.n	8018d94 <net_read+0x44>

	if(available > 0)
 8018d7a:	697b      	ldr	r3, [r7, #20]
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	dd08      	ble.n	8018d92 <net_read+0x42>
	{
		return recv(n->socket, buffer, len, 0);
 8018d80:	68fb      	ldr	r3, [r7, #12]
 8018d82:	6818      	ldr	r0, [r3, #0]
 8018d84:	687a      	ldr	r2, [r7, #4]
 8018d86:	2300      	movs	r3, #0
 8018d88:	68b9      	ldr	r1, [r7, #8]
 8018d8a:	f7f1 f87d 	bl	8009e88 <lwip_recv>
 8018d8e:	4603      	mov	r3, r0
 8018d90:	e000      	b.n	8018d94 <net_read+0x44>
	}

	return 0;
 8018d92:	2300      	movs	r3, #0
}
 8018d94:	4618      	mov	r0, r3
 8018d96:	3718      	adds	r7, #24
 8018d98:	46bd      	mov	sp, r7
 8018d9a:	bd80      	pop	{r7, pc}
 8018d9c:	4004667f 	.word	0x4004667f

08018da0 <net_write>:

int net_write(Network *n, unsigned char *buffer, int len, int timeout_ms) {
 8018da0:	b580      	push	{r7, lr}
 8018da2:	b084      	sub	sp, #16
 8018da4:	af00      	add	r7, sp, #0
 8018da6:	60f8      	str	r0, [r7, #12]
 8018da8:	60b9      	str	r1, [r7, #8]
 8018daa:	607a      	str	r2, [r7, #4]
 8018dac:	603b      	str	r3, [r7, #0]
	return send(n->socket, buffer, len, 0);
 8018dae:	68fb      	ldr	r3, [r7, #12]
 8018db0:	6818      	ldr	r0, [r3, #0]
 8018db2:	687a      	ldr	r2, [r7, #4]
 8018db4:	2300      	movs	r3, #0
 8018db6:	68b9      	ldr	r1, [r7, #8]
 8018db8:	f7f1 f87c 	bl	8009eb4 <lwip_send>
 8018dbc:	4603      	mov	r3, r0
}
 8018dbe:	4618      	mov	r0, r3
 8018dc0:	3710      	adds	r7, #16
 8018dc2:	46bd      	mov	sp, r7
 8018dc4:	bd80      	pop	{r7, pc}

08018dc6 <net_disconnect>:

void net_disconnect(Network *n) {
 8018dc6:	b580      	push	{r7, lr}
 8018dc8:	b082      	sub	sp, #8
 8018dca:	af00      	add	r7, sp, #0
 8018dcc:	6078      	str	r0, [r7, #4]
	close(n->socket);
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	681b      	ldr	r3, [r3, #0]
 8018dd2:	4618      	mov	r0, r3
 8018dd4:	f7f0 fc6a 	bl	80096ac <lwip_close>
	n->socket = 0;
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	2200      	movs	r2, #0
 8018ddc:	601a      	str	r2, [r3, #0]
}
 8018dde:	bf00      	nop
 8018de0:	3708      	adds	r7, #8
 8018de2:	46bd      	mov	sp, r7
 8018de4:	bd80      	pop	{r7, pc}

08018de6 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8018de6:	b590      	push	{r4, r7, lr}
 8018de8:	b085      	sub	sp, #20
 8018dea:	af00      	add	r7, sp, #0
 8018dec:	6078      	str	r0, [r7, #4]
	int len = 0;
 8018dee:	2300      	movs	r3, #0
 8018df0:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	7a1b      	ldrb	r3, [r3, #8]
 8018df6:	2b03      	cmp	r3, #3
 8018df8:	d102      	bne.n	8018e00 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8018dfa:	230c      	movs	r3, #12
 8018dfc:	60fb      	str	r3, [r7, #12]
 8018dfe:	e005      	b.n	8018e0c <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	7a1b      	ldrb	r3, [r3, #8]
 8018e04:	2b04      	cmp	r3, #4
 8018e06:	d101      	bne.n	8018e0c <MQTTSerialize_connectLength+0x26>
		len = 10;
 8018e08:	230a      	movs	r3, #10
 8018e0a:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	330c      	adds	r3, #12
 8018e10:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018e14:	f000 fc55 	bl	80196c2 <MQTTstrlen>
 8018e18:	4603      	mov	r3, r0
 8018e1a:	3302      	adds	r3, #2
 8018e1c:	68fa      	ldr	r2, [r7, #12]
 8018e1e:	4413      	add	r3, r2
 8018e20:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	7edb      	ldrb	r3, [r3, #27]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d013      	beq.n	8018e52 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	3324      	adds	r3, #36	; 0x24
 8018e2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018e32:	f000 fc46 	bl	80196c2 <MQTTstrlen>
 8018e36:	4603      	mov	r3, r0
 8018e38:	1c9c      	adds	r4, r3, #2
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	3330      	adds	r3, #48	; 0x30
 8018e3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018e42:	f000 fc3e 	bl	80196c2 <MQTTstrlen>
 8018e46:	4603      	mov	r3, r0
 8018e48:	4423      	add	r3, r4
 8018e4a:	3302      	adds	r3, #2
 8018e4c:	68fa      	ldr	r2, [r7, #12]
 8018e4e:	4413      	add	r3, r2
 8018e50:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	d103      	bne.n	8018e62 <MQTTSerialize_connectLength+0x7c>
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d00a      	beq.n	8018e78 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	3340      	adds	r3, #64	; 0x40
 8018e66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018e6a:	f000 fc2a 	bl	80196c2 <MQTTstrlen>
 8018e6e:	4603      	mov	r3, r0
 8018e70:	3302      	adds	r3, #2
 8018e72:	68fa      	ldr	r2, [r7, #12]
 8018e74:	4413      	add	r3, r2
 8018e76:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d103      	bne.n	8018e88 <MQTTSerialize_connectLength+0xa2>
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d00a      	beq.n	8018e9e <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	334c      	adds	r3, #76	; 0x4c
 8018e8c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018e90:	f000 fc17 	bl	80196c2 <MQTTstrlen>
 8018e94:	4603      	mov	r3, r0
 8018e96:	3302      	adds	r3, #2
 8018e98:	68fa      	ldr	r2, [r7, #12]
 8018e9a:	4413      	add	r3, r2
 8018e9c:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8018e9e:	68fb      	ldr	r3, [r7, #12]
}
 8018ea0:	4618      	mov	r0, r3
 8018ea2:	3714      	adds	r7, #20
 8018ea4:	46bd      	mov	sp, r7
 8018ea6:	bd90      	pop	{r4, r7, pc}

08018ea8 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8018ea8:	b580      	push	{r7, lr}
 8018eaa:	b08a      	sub	sp, #40	; 0x28
 8018eac:	af00      	add	r7, sp, #0
 8018eae:	60f8      	str	r0, [r7, #12]
 8018eb0:	60b9      	str	r1, [r7, #8]
 8018eb2:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8018eb4:	68fb      	ldr	r3, [r7, #12]
 8018eb6:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8018eb8:	2300      	movs	r3, #0
 8018eba:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8018ebc:	2300      	movs	r3, #0
 8018ebe:	617b      	str	r3, [r7, #20]
	int len = 0;
 8018ec0:	2300      	movs	r3, #0
 8018ec2:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8018ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8018ec8:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8018eca:	6878      	ldr	r0, [r7, #4]
 8018ecc:	f7ff ff8b 	bl	8018de6 <MQTTSerialize_connectLength>
 8018ed0:	6238      	str	r0, [r7, #32]
 8018ed2:	6a38      	ldr	r0, [r7, #32]
 8018ed4:	f000 faaa 	bl	801942c <MQTTPacket_len>
 8018ed8:	4602      	mov	r2, r0
 8018eda:	68bb      	ldr	r3, [r7, #8]
 8018edc:	4293      	cmp	r3, r2
 8018ede:	da03      	bge.n	8018ee8 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8018ee0:	f06f 0301 	mvn.w	r3, #1
 8018ee4:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8018ee6:	e0c3      	b.n	8019070 <MQTTSerialize_connect+0x1c8>
	}

	header.byte = 0;
 8018ee8:	2300      	movs	r3, #0
 8018eea:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8018eec:	7e3b      	ldrb	r3, [r7, #24]
 8018eee:	2201      	movs	r2, #1
 8018ef0:	f362 1307 	bfi	r3, r2, #4, #4
 8018ef4:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8018ef6:	7e3a      	ldrb	r2, [r7, #24]
 8018ef8:	f107 031c 	add.w	r3, r7, #28
 8018efc:	4611      	mov	r1, r2
 8018efe:	4618      	mov	r0, r3
 8018f00:	f000 fb23 	bl	801954a <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8018f04:	69fb      	ldr	r3, [r7, #28]
 8018f06:	6a39      	ldr	r1, [r7, #32]
 8018f08:	4618      	mov	r0, r3
 8018f0a:	f000 fa24 	bl	8019356 <MQTTPacket_encode>
 8018f0e:	4602      	mov	r2, r0
 8018f10:	69fb      	ldr	r3, [r7, #28]
 8018f12:	4413      	add	r3, r2
 8018f14:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	7a1b      	ldrb	r3, [r3, #8]
 8018f1a:	2b04      	cmp	r3, #4
 8018f1c:	d10c      	bne.n	8018f38 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 8018f1e:	f107 031c 	add.w	r3, r7, #28
 8018f22:	4956      	ldr	r1, [pc, #344]	; (801907c <MQTTSerialize_connect+0x1d4>)
 8018f24:	4618      	mov	r0, r3
 8018f26:	f000 fb4e 	bl	80195c6 <writeCString>
		writeChar(&ptr, (char) 4);
 8018f2a:	f107 031c 	add.w	r3, r7, #28
 8018f2e:	2104      	movs	r1, #4
 8018f30:	4618      	mov	r0, r3
 8018f32:	f000 fb0a 	bl	801954a <writeChar>
 8018f36:	e00b      	b.n	8018f50 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8018f38:	f107 031c 	add.w	r3, r7, #28
 8018f3c:	4950      	ldr	r1, [pc, #320]	; (8019080 <MQTTSerialize_connect+0x1d8>)
 8018f3e:	4618      	mov	r0, r3
 8018f40:	f000 fb41 	bl	80195c6 <writeCString>
		writeChar(&ptr, (char) 3);
 8018f44:	f107 031c 	add.w	r3, r7, #28
 8018f48:	2103      	movs	r1, #3
 8018f4a:	4618      	mov	r0, r3
 8018f4c:	f000 fafd 	bl	801954a <writeChar>
	}

	flags.all = 0;
 8018f50:	2300      	movs	r3, #0
 8018f52:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	7e9b      	ldrb	r3, [r3, #26]
 8018f58:	f003 0301 	and.w	r3, r3, #1
 8018f5c:	b2da      	uxtb	r2, r3
 8018f5e:	7d3b      	ldrb	r3, [r7, #20]
 8018f60:	f362 0341 	bfi	r3, r2, #1, #1
 8018f64:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	7edb      	ldrb	r3, [r3, #27]
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	bf14      	ite	ne
 8018f6e:	2301      	movne	r3, #1
 8018f70:	2300      	moveq	r3, #0
 8018f72:	b2da      	uxtb	r2, r3
 8018f74:	7d3b      	ldrb	r3, [r7, #20]
 8018f76:	f362 0382 	bfi	r3, r2, #2, #1
 8018f7a:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8018f7c:	7d3b      	ldrb	r3, [r7, #20]
 8018f7e:	f003 0304 	and.w	r3, r3, #4
 8018f82:	b2db      	uxtb	r3, r3
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d013      	beq.n	8018fb0 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018f8e:	f003 0303 	and.w	r3, r3, #3
 8018f92:	b2da      	uxtb	r2, r3
 8018f94:	7d3b      	ldrb	r3, [r7, #20]
 8018f96:	f362 03c4 	bfi	r3, r2, #3, #2
 8018f9a:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018fa2:	f003 0301 	and.w	r3, r3, #1
 8018fa6:	b2da      	uxtb	r2, r3
 8018fa8:	7d3b      	ldrb	r3, [r7, #20]
 8018faa:	f362 1345 	bfi	r3, r2, #5, #1
 8018fae:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	d103      	bne.n	8018fc0 <MQTTSerialize_connect+0x118>
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d003      	beq.n	8018fc8 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8018fc0:	7d3b      	ldrb	r3, [r7, #20]
 8018fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018fc6:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d103      	bne.n	8018fd8 <MQTTSerialize_connect+0x130>
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d003      	beq.n	8018fe0 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8018fd8:	7d3b      	ldrb	r3, [r7, #20]
 8018fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018fde:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8018fe0:	7d3a      	ldrb	r2, [r7, #20]
 8018fe2:	f107 031c 	add.w	r3, r7, #28
 8018fe6:	4611      	mov	r1, r2
 8018fe8:	4618      	mov	r0, r3
 8018fea:	f000 faae 	bl	801954a <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	8b1b      	ldrh	r3, [r3, #24]
 8018ff2:	461a      	mov	r2, r3
 8018ff4:	f107 031c 	add.w	r3, r7, #28
 8018ff8:	4611      	mov	r1, r2
 8018ffa:	4618      	mov	r0, r3
 8018ffc:	f000 faba 	bl	8019574 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	f107 001c 	add.w	r0, r7, #28
 8019006:	330c      	adds	r3, #12
 8019008:	cb0e      	ldmia	r3, {r1, r2, r3}
 801900a:	f000 fafb 	bl	8019604 <writeMQTTString>
	if (options->willFlag)
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	7edb      	ldrb	r3, [r3, #27]
 8019012:	2b00      	cmp	r3, #0
 8019014:	d00d      	beq.n	8019032 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	f107 001c 	add.w	r0, r7, #28
 801901c:	3324      	adds	r3, #36	; 0x24
 801901e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019020:	f000 faf0 	bl	8019604 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	f107 001c 	add.w	r0, r7, #28
 801902a:	3330      	adds	r3, #48	; 0x30
 801902c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801902e:	f000 fae9 	bl	8019604 <writeMQTTString>
	}
	if (flags.bits.username)
 8019032:	7d3b      	ldrb	r3, [r7, #20]
 8019034:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8019038:	b2db      	uxtb	r3, r3
 801903a:	2b00      	cmp	r3, #0
 801903c:	d006      	beq.n	801904c <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	f107 001c 	add.w	r0, r7, #28
 8019044:	3340      	adds	r3, #64	; 0x40
 8019046:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019048:	f000 fadc 	bl	8019604 <writeMQTTString>
	if (flags.bits.password)
 801904c:	7d3b      	ldrb	r3, [r7, #20]
 801904e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019052:	b2db      	uxtb	r3, r3
 8019054:	2b00      	cmp	r3, #0
 8019056:	d006      	beq.n	8019066 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	f107 001c 	add.w	r0, r7, #28
 801905e:	334c      	adds	r3, #76	; 0x4c
 8019060:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019062:	f000 facf 	bl	8019604 <writeMQTTString>

	rc = ptr - buf;
 8019066:	69fb      	ldr	r3, [r7, #28]
 8019068:	461a      	mov	r2, r3
 801906a:	68fb      	ldr	r3, [r7, #12]
 801906c:	1ad3      	subs	r3, r2, r3
 801906e:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8019070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019072:	4618      	mov	r0, r3
 8019074:	3728      	adds	r7, #40	; 0x28
 8019076:	46bd      	mov	sp, r7
 8019078:	bd80      	pop	{r7, pc}
 801907a:	bf00      	nop
 801907c:	0801eafc 	.word	0x0801eafc
 8019080:	0801eb04 	.word	0x0801eb04

08019084 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 8019084:	b580      	push	{r7, lr}
 8019086:	b08a      	sub	sp, #40	; 0x28
 8019088:	af00      	add	r7, sp, #0
 801908a:	60f8      	str	r0, [r7, #12]
 801908c:	60b9      	str	r1, [r7, #8]
 801908e:	607a      	str	r2, [r7, #4]
 8019090:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8019092:	2300      	movs	r3, #0
 8019094:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801909a:	2300      	movs	r3, #0
 801909c:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801909e:	2300      	movs	r3, #0
 80190a0:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 80190a2:	2300      	movs	r3, #0
 80190a4:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80190a6:	f107 0318 	add.w	r3, r7, #24
 80190aa:	4618      	mov	r0, r3
 80190ac:	f000 fa39 	bl	8019522 <readChar>
 80190b0:	4603      	mov	r3, r0
 80190b2:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 80190b4:	7f3b      	ldrb	r3, [r7, #28]
 80190b6:	f023 030f 	bic.w	r3, r3, #15
 80190ba:	b2db      	uxtb	r3, r3
 80190bc:	2b20      	cmp	r3, #32
 80190be:	d12e      	bne.n	801911e <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 80190c0:	69bb      	ldr	r3, [r7, #24]
 80190c2:	f107 0214 	add.w	r2, r7, #20
 80190c6:	4611      	mov	r1, r2
 80190c8:	4618      	mov	r0, r3
 80190ca:	f000 f9f9 	bl	80194c0 <MQTTPacket_decodeBuf>
 80190ce:	6278      	str	r0, [r7, #36]	; 0x24
 80190d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80190d2:	69bb      	ldr	r3, [r7, #24]
 80190d4:	4413      	add	r3, r2
 80190d6:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80190d8:	69bb      	ldr	r3, [r7, #24]
 80190da:	697a      	ldr	r2, [r7, #20]
 80190dc:	4413      	add	r3, r2
 80190de:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 80190e0:	6a3b      	ldr	r3, [r7, #32]
 80190e2:	69ba      	ldr	r2, [r7, #24]
 80190e4:	1a9b      	subs	r3, r3, r2
 80190e6:	2b01      	cmp	r3, #1
 80190e8:	dd1b      	ble.n	8019122 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 80190ea:	f107 0318 	add.w	r3, r7, #24
 80190ee:	4618      	mov	r0, r3
 80190f0:	f000 fa17 	bl	8019522 <readChar>
 80190f4:	4603      	mov	r3, r0
 80190f6:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 80190f8:	7c3b      	ldrb	r3, [r7, #16]
 80190fa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80190fe:	b2db      	uxtb	r3, r3
 8019100:	461a      	mov	r2, r3
 8019102:	68fb      	ldr	r3, [r7, #12]
 8019104:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 8019106:	f107 0318 	add.w	r3, r7, #24
 801910a:	4618      	mov	r0, r3
 801910c:	f000 fa09 	bl	8019522 <readChar>
 8019110:	4603      	mov	r3, r0
 8019112:	461a      	mov	r2, r3
 8019114:	68bb      	ldr	r3, [r7, #8]
 8019116:	701a      	strb	r2, [r3, #0]

	rc = 1;
 8019118:	2301      	movs	r3, #1
 801911a:	627b      	str	r3, [r7, #36]	; 0x24
 801911c:	e002      	b.n	8019124 <MQTTDeserialize_connack+0xa0>
		goto exit;
 801911e:	bf00      	nop
 8019120:	e000      	b.n	8019124 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8019122:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8019124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019126:	4618      	mov	r0, r3
 8019128:	3728      	adds	r7, #40	; 0x28
 801912a:	46bd      	mov	sp, r7
 801912c:	bd80      	pop	{r7, pc}

0801912e <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 801912e:	b580      	push	{r7, lr}
 8019130:	b088      	sub	sp, #32
 8019132:	af00      	add	r7, sp, #0
 8019134:	60f8      	str	r0, [r7, #12]
 8019136:	60b9      	str	r1, [r7, #8]
 8019138:	4613      	mov	r3, r2
 801913a:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 801913c:	2300      	movs	r3, #0
 801913e:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 8019140:	f04f 33ff 	mov.w	r3, #4294967295
 8019144:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8019146:	68fb      	ldr	r3, [r7, #12]
 8019148:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 801914a:	68bb      	ldr	r3, [r7, #8]
 801914c:	2b01      	cmp	r3, #1
 801914e:	dc03      	bgt.n	8019158 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8019150:	f06f 0301 	mvn.w	r3, #1
 8019154:	61fb      	str	r3, [r7, #28]
		goto exit;
 8019156:	e01e      	b.n	8019196 <MQTTSerialize_zero+0x68>
	}
	header.byte = 0;
 8019158:	2300      	movs	r3, #0
 801915a:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 801915c:	79fb      	ldrb	r3, [r7, #7]
 801915e:	f003 030f 	and.w	r3, r3, #15
 8019162:	b2da      	uxtb	r2, r3
 8019164:	7e3b      	ldrb	r3, [r7, #24]
 8019166:	f362 1307 	bfi	r3, r2, #4, #4
 801916a:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801916c:	7e3a      	ldrb	r2, [r7, #24]
 801916e:	f107 0314 	add.w	r3, r7, #20
 8019172:	4611      	mov	r1, r2
 8019174:	4618      	mov	r0, r3
 8019176:	f000 f9e8 	bl	801954a <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 801917a:	697b      	ldr	r3, [r7, #20]
 801917c:	2100      	movs	r1, #0
 801917e:	4618      	mov	r0, r3
 8019180:	f000 f8e9 	bl	8019356 <MQTTPacket_encode>
 8019184:	4602      	mov	r2, r0
 8019186:	697b      	ldr	r3, [r7, #20]
 8019188:	4413      	add	r3, r2
 801918a:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 801918c:	697b      	ldr	r3, [r7, #20]
 801918e:	461a      	mov	r2, r3
 8019190:	68fb      	ldr	r3, [r7, #12]
 8019192:	1ad3      	subs	r3, r2, r3
 8019194:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8019196:	69fb      	ldr	r3, [r7, #28]
}
 8019198:	4618      	mov	r0, r3
 801919a:	3720      	adds	r7, #32
 801919c:	46bd      	mov	sp, r7
 801919e:	bd80      	pop	{r7, pc}

080191a0 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
 80191a0:	b580      	push	{r7, lr}
 80191a2:	b082      	sub	sp, #8
 80191a4:	af00      	add	r7, sp, #0
 80191a6:	6078      	str	r0, [r7, #4]
 80191a8:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 80191aa:	220e      	movs	r2, #14
 80191ac:	6839      	ldr	r1, [r7, #0]
 80191ae:	6878      	ldr	r0, [r7, #4]
 80191b0:	f7ff ffbd 	bl	801912e <MQTTSerialize_zero>
 80191b4:	4603      	mov	r3, r0
}
 80191b6:	4618      	mov	r0, r3
 80191b8:	3708      	adds	r7, #8
 80191ba:	46bd      	mov	sp, r7
 80191bc:	bd80      	pop	{r7, pc}

080191be <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 80191be:	b580      	push	{r7, lr}
 80191c0:	b082      	sub	sp, #8
 80191c2:	af00      	add	r7, sp, #0
 80191c4:	6078      	str	r0, [r7, #4]
 80191c6:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 80191c8:	220c      	movs	r2, #12
 80191ca:	6839      	ldr	r1, [r7, #0]
 80191cc:	6878      	ldr	r0, [r7, #4]
 80191ce:	f7ff ffae 	bl	801912e <MQTTSerialize_zero>
 80191d2:	4603      	mov	r3, r0
}
 80191d4:	4618      	mov	r0, r3
 80191d6:	3708      	adds	r7, #8
 80191d8:	46bd      	mov	sp, r7
 80191da:	bd80      	pop	{r7, pc}

080191dc <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 80191dc:	b580      	push	{r7, lr}
 80191de:	b08a      	sub	sp, #40	; 0x28
 80191e0:	af00      	add	r7, sp, #0
 80191e2:	60f8      	str	r0, [r7, #12]
 80191e4:	60b9      	str	r1, [r7, #8]
 80191e6:	607a      	str	r2, [r7, #4]
 80191e8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80191ea:	2300      	movs	r3, #0
 80191ec:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80191ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80191f0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80191f2:	2300      	movs	r3, #0
 80191f4:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80191f6:	2300      	movs	r3, #0
 80191f8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 80191fa:	2300      	movs	r3, #0
 80191fc:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80191fe:	f107 0318 	add.w	r3, r7, #24
 8019202:	4618      	mov	r0, r3
 8019204:	f000 f98d 	bl	8019522 <readChar>
 8019208:	4603      	mov	r3, r0
 801920a:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 801920c:	7f3b      	ldrb	r3, [r7, #28]
 801920e:	f023 030f 	bic.w	r3, r3, #15
 8019212:	b2db      	uxtb	r3, r3
 8019214:	2b30      	cmp	r3, #48	; 0x30
 8019216:	d14b      	bne.n	80192b0 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8019218:	7f3b      	ldrb	r3, [r7, #28]
 801921a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801921e:	b2db      	uxtb	r3, r3
 8019220:	461a      	mov	r2, r3
 8019222:	68fb      	ldr	r3, [r7, #12]
 8019224:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8019226:	7f3b      	ldrb	r3, [r7, #28]
 8019228:	f3c3 0341 	ubfx	r3, r3, #1, #2
 801922c:	b2db      	uxtb	r3, r3
 801922e:	461a      	mov	r2, r3
 8019230:	68bb      	ldr	r3, [r7, #8]
 8019232:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8019234:	7f3b      	ldrb	r3, [r7, #28]
 8019236:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801923a:	b2db      	uxtb	r3, r3
 801923c:	461a      	mov	r2, r3
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8019242:	69bb      	ldr	r3, [r7, #24]
 8019244:	f107 0214 	add.w	r2, r7, #20
 8019248:	4611      	mov	r1, r2
 801924a:	4618      	mov	r0, r3
 801924c:	f000 f938 	bl	80194c0 <MQTTPacket_decodeBuf>
 8019250:	6278      	str	r0, [r7, #36]	; 0x24
 8019252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019254:	69bb      	ldr	r3, [r7, #24]
 8019256:	4413      	add	r3, r2
 8019258:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801925a:	69bb      	ldr	r3, [r7, #24]
 801925c:	697a      	ldr	r2, [r7, #20]
 801925e:	4413      	add	r3, r2
 8019260:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8019262:	f107 0318 	add.w	r3, r7, #24
 8019266:	6a3a      	ldr	r2, [r7, #32]
 8019268:	4619      	mov	r1, r3
 801926a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801926c:	f000 f9f8 	bl	8019660 <readMQTTLenString>
 8019270:	4603      	mov	r3, r0
 8019272:	2b00      	cmp	r3, #0
 8019274:	d01e      	beq.n	80192b4 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 8019276:	6a3b      	ldr	r3, [r7, #32]
 8019278:	69ba      	ldr	r2, [r7, #24]
 801927a:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801927c:	2b00      	cmp	r3, #0
 801927e:	db19      	blt.n	80192b4 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 8019280:	68bb      	ldr	r3, [r7, #8]
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	2b00      	cmp	r3, #0
 8019286:	dd08      	ble.n	801929a <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8019288:	f107 0318 	add.w	r3, r7, #24
 801928c:	4618      	mov	r0, r3
 801928e:	f000 f92d 	bl	80194ec <readInt>
 8019292:	4603      	mov	r3, r0
 8019294:	b29a      	uxth	r2, r3
 8019296:	683b      	ldr	r3, [r7, #0]
 8019298:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 801929a:	6a3b      	ldr	r3, [r7, #32]
 801929c:	69ba      	ldr	r2, [r7, #24]
 801929e:	1a9a      	subs	r2, r3, r2
 80192a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192a2:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 80192a4:	69ba      	ldr	r2, [r7, #24]
 80192a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192a8:	601a      	str	r2, [r3, #0]
	rc = 1;
 80192aa:	2301      	movs	r3, #1
 80192ac:	627b      	str	r3, [r7, #36]	; 0x24
 80192ae:	e002      	b.n	80192b6 <MQTTDeserialize_publish+0xda>
		goto exit;
 80192b0:	bf00      	nop
 80192b2:	e000      	b.n	80192b6 <MQTTDeserialize_publish+0xda>
exit:
 80192b4:	bf00      	nop
	FUNC_EXIT_RC(rc);
	return rc;
 80192b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80192b8:	4618      	mov	r0, r3
 80192ba:	3728      	adds	r7, #40	; 0x28
 80192bc:	46bd      	mov	sp, r7
 80192be:	bd80      	pop	{r7, pc}

080192c0 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 80192c0:	b580      	push	{r7, lr}
 80192c2:	b08a      	sub	sp, #40	; 0x28
 80192c4:	af00      	add	r7, sp, #0
 80192c6:	60f8      	str	r0, [r7, #12]
 80192c8:	60b9      	str	r1, [r7, #8]
 80192ca:	607a      	str	r2, [r7, #4]
 80192cc:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80192ce:	2300      	movs	r3, #0
 80192d0:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80192d2:	683b      	ldr	r3, [r7, #0]
 80192d4:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80192d6:	2300      	movs	r3, #0
 80192d8:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80192da:	2300      	movs	r3, #0
 80192dc:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80192de:	f107 0318 	add.w	r3, r7, #24
 80192e2:	4618      	mov	r0, r3
 80192e4:	f000 f91d 	bl	8019522 <readChar>
 80192e8:	4603      	mov	r3, r0
 80192ea:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 80192ec:	7f3b      	ldrb	r3, [r7, #28]
 80192ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80192f2:	b2db      	uxtb	r3, r3
 80192f4:	461a      	mov	r2, r3
 80192f6:	68bb      	ldr	r3, [r7, #8]
 80192f8:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 80192fa:	7f3b      	ldrb	r3, [r7, #28]
 80192fc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8019300:	b2db      	uxtb	r3, r3
 8019302:	461a      	mov	r2, r3
 8019304:	68fb      	ldr	r3, [r7, #12]
 8019306:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8019308:	69bb      	ldr	r3, [r7, #24]
 801930a:	f107 0214 	add.w	r2, r7, #20
 801930e:	4611      	mov	r1, r2
 8019310:	4618      	mov	r0, r3
 8019312:	f000 f8d5 	bl	80194c0 <MQTTPacket_decodeBuf>
 8019316:	6278      	str	r0, [r7, #36]	; 0x24
 8019318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801931a:	69bb      	ldr	r3, [r7, #24]
 801931c:	4413      	add	r3, r2
 801931e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8019320:	69bb      	ldr	r3, [r7, #24]
 8019322:	697a      	ldr	r2, [r7, #20]
 8019324:	4413      	add	r3, r2
 8019326:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 8019328:	6a3b      	ldr	r3, [r7, #32]
 801932a:	69ba      	ldr	r2, [r7, #24]
 801932c:	1a9b      	subs	r3, r3, r2
 801932e:	2b01      	cmp	r3, #1
 8019330:	dd0b      	ble.n	801934a <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8019332:	f107 0318 	add.w	r3, r7, #24
 8019336:	4618      	mov	r0, r3
 8019338:	f000 f8d8 	bl	80194ec <readInt>
 801933c:	4603      	mov	r3, r0
 801933e:	b29a      	uxth	r2, r3
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	801a      	strh	r2, [r3, #0]

	rc = 1;
 8019344:	2301      	movs	r3, #1
 8019346:	627b      	str	r3, [r7, #36]	; 0x24
 8019348:	e000      	b.n	801934c <MQTTDeserialize_ack+0x8c>
		goto exit;
 801934a:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801934c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801934e:	4618      	mov	r0, r3
 8019350:	3728      	adds	r7, #40	; 0x28
 8019352:	46bd      	mov	sp, r7
 8019354:	bd80      	pop	{r7, pc}

08019356 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8019356:	b480      	push	{r7}
 8019358:	b085      	sub	sp, #20
 801935a:	af00      	add	r7, sp, #0
 801935c:	6078      	str	r0, [r7, #4]
 801935e:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8019360:	2300      	movs	r3, #0
 8019362:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8019364:	683b      	ldr	r3, [r7, #0]
 8019366:	425a      	negs	r2, r3
 8019368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801936c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8019370:	bf58      	it	pl
 8019372:	4253      	negpl	r3, r2
 8019374:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8019376:	683b      	ldr	r3, [r7, #0]
 8019378:	2b00      	cmp	r3, #0
 801937a:	da00      	bge.n	801937e <MQTTPacket_encode+0x28>
 801937c:	337f      	adds	r3, #127	; 0x7f
 801937e:	11db      	asrs	r3, r3, #7
 8019380:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8019382:	683b      	ldr	r3, [r7, #0]
 8019384:	2b00      	cmp	r3, #0
 8019386:	dd03      	ble.n	8019390 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8019388:	7afb      	ldrb	r3, [r7, #11]
 801938a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801938e:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8019390:	68fb      	ldr	r3, [r7, #12]
 8019392:	1c5a      	adds	r2, r3, #1
 8019394:	60fa      	str	r2, [r7, #12]
 8019396:	461a      	mov	r2, r3
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	4413      	add	r3, r2
 801939c:	7afa      	ldrb	r2, [r7, #11]
 801939e:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 80193a0:	683b      	ldr	r3, [r7, #0]
 80193a2:	2b00      	cmp	r3, #0
 80193a4:	dcde      	bgt.n	8019364 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 80193a6:	68fb      	ldr	r3, [r7, #12]
}
 80193a8:	4618      	mov	r0, r3
 80193aa:	3714      	adds	r7, #20
 80193ac:	46bd      	mov	sp, r7
 80193ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193b2:	4770      	bx	lr

080193b4 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 80193b4:	b580      	push	{r7, lr}
 80193b6:	b086      	sub	sp, #24
 80193b8:	af00      	add	r7, sp, #0
 80193ba:	6078      	str	r0, [r7, #4]
 80193bc:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 80193be:	2301      	movs	r3, #1
 80193c0:	617b      	str	r3, [r7, #20]
	int len = 0;
 80193c2:	2300      	movs	r3, #0
 80193c4:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 80193c6:	683b      	ldr	r3, [r7, #0]
 80193c8:	2200      	movs	r2, #0
 80193ca:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 80193cc:	f04f 33ff 	mov.w	r3, #4294967295
 80193d0:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 80193d2:	693b      	ldr	r3, [r7, #16]
 80193d4:	3301      	adds	r3, #1
 80193d6:	613b      	str	r3, [r7, #16]
 80193d8:	693b      	ldr	r3, [r7, #16]
 80193da:	2b04      	cmp	r3, #4
 80193dc:	dd03      	ble.n	80193e6 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 80193de:	f04f 33ff 	mov.w	r3, #4294967295
 80193e2:	60fb      	str	r3, [r7, #12]
			goto exit;
 80193e4:	e01d      	b.n	8019422 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 80193e6:	f107 020b 	add.w	r2, r7, #11
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	2101      	movs	r1, #1
 80193ee:	4610      	mov	r0, r2
 80193f0:	4798      	blx	r3
 80193f2:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 80193f4:	68fb      	ldr	r3, [r7, #12]
 80193f6:	2b01      	cmp	r3, #1
 80193f8:	d112      	bne.n	8019420 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 80193fa:	683b      	ldr	r3, [r7, #0]
 80193fc:	681a      	ldr	r2, [r3, #0]
 80193fe:	7afb      	ldrb	r3, [r7, #11]
 8019400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019404:	6979      	ldr	r1, [r7, #20]
 8019406:	fb01 f303 	mul.w	r3, r1, r3
 801940a:	441a      	add	r2, r3
 801940c:	683b      	ldr	r3, [r7, #0]
 801940e:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8019410:	697b      	ldr	r3, [r7, #20]
 8019412:	01db      	lsls	r3, r3, #7
 8019414:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8019416:	7afb      	ldrb	r3, [r7, #11]
 8019418:	b25b      	sxtb	r3, r3
 801941a:	2b00      	cmp	r3, #0
 801941c:	dbd6      	blt.n	80193cc <MQTTPacket_decode+0x18>
exit:
 801941e:	e000      	b.n	8019422 <MQTTPacket_decode+0x6e>
			goto exit;
 8019420:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8019422:	693b      	ldr	r3, [r7, #16]
}
 8019424:	4618      	mov	r0, r3
 8019426:	3718      	adds	r7, #24
 8019428:	46bd      	mov	sp, r7
 801942a:	bd80      	pop	{r7, pc}

0801942c <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 801942c:	b480      	push	{r7}
 801942e:	b083      	sub	sp, #12
 8019430:	af00      	add	r7, sp, #0
 8019432:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	3301      	adds	r3, #1
 8019438:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	2b7f      	cmp	r3, #127	; 0x7f
 801943e:	dc03      	bgt.n	8019448 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	3301      	adds	r3, #1
 8019444:	607b      	str	r3, [r7, #4]
 8019446:	e012      	b.n	801946e <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801944e:	da03      	bge.n	8019458 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	3302      	adds	r3, #2
 8019454:	607b      	str	r3, [r7, #4]
 8019456:	e00a      	b.n	801946e <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	4a08      	ldr	r2, [pc, #32]	; (801947c <MQTTPacket_len+0x50>)
 801945c:	4293      	cmp	r3, r2
 801945e:	dc03      	bgt.n	8019468 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	3303      	adds	r3, #3
 8019464:	607b      	str	r3, [r7, #4]
 8019466:	e002      	b.n	801946e <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	3304      	adds	r3, #4
 801946c:	607b      	str	r3, [r7, #4]
	return rem_len;
 801946e:	687b      	ldr	r3, [r7, #4]
}
 8019470:	4618      	mov	r0, r3
 8019472:	370c      	adds	r7, #12
 8019474:	46bd      	mov	sp, r7
 8019476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801947a:	4770      	bx	lr
 801947c:	001ffffe 	.word	0x001ffffe

08019480 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8019480:	b480      	push	{r7}
 8019482:	b085      	sub	sp, #20
 8019484:	af00      	add	r7, sp, #0
 8019486:	6078      	str	r0, [r7, #4]
 8019488:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 801948a:	2300      	movs	r3, #0
 801948c:	60fb      	str	r3, [r7, #12]
 801948e:	e00a      	b.n	80194a6 <bufchar+0x26>
		*c = *bufptr++;
 8019490:	4b0a      	ldr	r3, [pc, #40]	; (80194bc <bufchar+0x3c>)
 8019492:	681b      	ldr	r3, [r3, #0]
 8019494:	1c5a      	adds	r2, r3, #1
 8019496:	4909      	ldr	r1, [pc, #36]	; (80194bc <bufchar+0x3c>)
 8019498:	600a      	str	r2, [r1, #0]
 801949a:	781a      	ldrb	r2, [r3, #0]
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 80194a0:	68fb      	ldr	r3, [r7, #12]
 80194a2:	3301      	adds	r3, #1
 80194a4:	60fb      	str	r3, [r7, #12]
 80194a6:	68fa      	ldr	r2, [r7, #12]
 80194a8:	683b      	ldr	r3, [r7, #0]
 80194aa:	429a      	cmp	r2, r3
 80194ac:	dbf0      	blt.n	8019490 <bufchar+0x10>
	return count;
 80194ae:	683b      	ldr	r3, [r7, #0]
}
 80194b0:	4618      	mov	r0, r3
 80194b2:	3714      	adds	r7, #20
 80194b4:	46bd      	mov	sp, r7
 80194b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ba:	4770      	bx	lr
 80194bc:	20008798 	.word	0x20008798

080194c0 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 80194c0:	b580      	push	{r7, lr}
 80194c2:	b082      	sub	sp, #8
 80194c4:	af00      	add	r7, sp, #0
 80194c6:	6078      	str	r0, [r7, #4]
 80194c8:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 80194ca:	4a06      	ldr	r2, [pc, #24]	; (80194e4 <MQTTPacket_decodeBuf+0x24>)
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 80194d0:	6839      	ldr	r1, [r7, #0]
 80194d2:	4805      	ldr	r0, [pc, #20]	; (80194e8 <MQTTPacket_decodeBuf+0x28>)
 80194d4:	f7ff ff6e 	bl	80193b4 <MQTTPacket_decode>
 80194d8:	4603      	mov	r3, r0
}
 80194da:	4618      	mov	r0, r3
 80194dc:	3708      	adds	r7, #8
 80194de:	46bd      	mov	sp, r7
 80194e0:	bd80      	pop	{r7, pc}
 80194e2:	bf00      	nop
 80194e4:	20008798 	.word	0x20008798
 80194e8:	08019481 	.word	0x08019481

080194ec <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 80194ec:	b480      	push	{r7}
 80194ee:	b085      	sub	sp, #20
 80194f0:	af00      	add	r7, sp, #0
 80194f2:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	681b      	ldr	r3, [r3, #0]
 80194f8:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 80194fa:	68fb      	ldr	r3, [r7, #12]
 80194fc:	781b      	ldrb	r3, [r3, #0]
 80194fe:	021b      	lsls	r3, r3, #8
 8019500:	68fa      	ldr	r2, [r7, #12]
 8019502:	3201      	adds	r2, #1
 8019504:	7812      	ldrb	r2, [r2, #0]
 8019506:	4413      	add	r3, r2
 8019508:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	681b      	ldr	r3, [r3, #0]
 801950e:	1c9a      	adds	r2, r3, #2
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	601a      	str	r2, [r3, #0]
	return len;
 8019514:	68bb      	ldr	r3, [r7, #8]
}
 8019516:	4618      	mov	r0, r3
 8019518:	3714      	adds	r7, #20
 801951a:	46bd      	mov	sp, r7
 801951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019520:	4770      	bx	lr

08019522 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8019522:	b480      	push	{r7}
 8019524:	b085      	sub	sp, #20
 8019526:	af00      	add	r7, sp, #0
 8019528:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	681b      	ldr	r3, [r3, #0]
 801952e:	781b      	ldrb	r3, [r3, #0]
 8019530:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	681b      	ldr	r3, [r3, #0]
 8019536:	1c5a      	adds	r2, r3, #1
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	601a      	str	r2, [r3, #0]
	return c;
 801953c:	7bfb      	ldrb	r3, [r7, #15]
}
 801953e:	4618      	mov	r0, r3
 8019540:	3714      	adds	r7, #20
 8019542:	46bd      	mov	sp, r7
 8019544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019548:	4770      	bx	lr

0801954a <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 801954a:	b480      	push	{r7}
 801954c:	b083      	sub	sp, #12
 801954e:	af00      	add	r7, sp, #0
 8019550:	6078      	str	r0, [r7, #4]
 8019552:	460b      	mov	r3, r1
 8019554:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	78fa      	ldrb	r2, [r7, #3]
 801955c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	1c5a      	adds	r2, r3, #1
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	601a      	str	r2, [r3, #0]
}
 8019568:	bf00      	nop
 801956a:	370c      	adds	r7, #12
 801956c:	46bd      	mov	sp, r7
 801956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019572:	4770      	bx	lr

08019574 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8019574:	b480      	push	{r7}
 8019576:	b083      	sub	sp, #12
 8019578:	af00      	add	r7, sp, #0
 801957a:	6078      	str	r0, [r7, #4]
 801957c:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 801957e:	683b      	ldr	r3, [r7, #0]
 8019580:	2b00      	cmp	r3, #0
 8019582:	da00      	bge.n	8019586 <writeInt+0x12>
 8019584:	33ff      	adds	r3, #255	; 0xff
 8019586:	121b      	asrs	r3, r3, #8
 8019588:	461a      	mov	r2, r3
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	b2d2      	uxtb	r2, r2
 8019590:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	1c5a      	adds	r2, r3, #1
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 801959c:	683b      	ldr	r3, [r7, #0]
 801959e:	425a      	negs	r2, r3
 80195a0:	b2db      	uxtb	r3, r3
 80195a2:	b2d2      	uxtb	r2, r2
 80195a4:	bf58      	it	pl
 80195a6:	4253      	negpl	r3, r2
 80195a8:	687a      	ldr	r2, [r7, #4]
 80195aa:	6812      	ldr	r2, [r2, #0]
 80195ac:	b2db      	uxtb	r3, r3
 80195ae:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	681b      	ldr	r3, [r3, #0]
 80195b4:	1c5a      	adds	r2, r3, #1
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	601a      	str	r2, [r3, #0]
}
 80195ba:	bf00      	nop
 80195bc:	370c      	adds	r7, #12
 80195be:	46bd      	mov	sp, r7
 80195c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195c4:	4770      	bx	lr

080195c6 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 80195c6:	b580      	push	{r7, lr}
 80195c8:	b084      	sub	sp, #16
 80195ca:	af00      	add	r7, sp, #0
 80195cc:	6078      	str	r0, [r7, #4]
 80195ce:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 80195d0:	6838      	ldr	r0, [r7, #0]
 80195d2:	f7e6 fe3f 	bl	8000254 <strlen>
 80195d6:	4603      	mov	r3, r0
 80195d8:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 80195da:	68f9      	ldr	r1, [r7, #12]
 80195dc:	6878      	ldr	r0, [r7, #4]
 80195de:	f7ff ffc9 	bl	8019574 <writeInt>
	memcpy(*pptr, string, len);
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	68fa      	ldr	r2, [r7, #12]
 80195e8:	6839      	ldr	r1, [r7, #0]
 80195ea:	4618      	mov	r0, r3
 80195ec:	f000 fb05 	bl	8019bfa <memcpy>
	*pptr += len;
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	681a      	ldr	r2, [r3, #0]
 80195f4:	68fb      	ldr	r3, [r7, #12]
 80195f6:	441a      	add	r2, r3
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	601a      	str	r2, [r3, #0]
}
 80195fc:	bf00      	nop
 80195fe:	3710      	adds	r7, #16
 8019600:	46bd      	mov	sp, r7
 8019602:	bd80      	pop	{r7, pc}

08019604 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8019604:	b580      	push	{r7, lr}
 8019606:	b084      	sub	sp, #16
 8019608:	af00      	add	r7, sp, #0
 801960a:	60f8      	str	r0, [r7, #12]
 801960c:	4638      	mov	r0, r7
 801960e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	2b00      	cmp	r3, #0
 8019616:	dd12      	ble.n	801963e <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	4619      	mov	r1, r3
 801961c:	68f8      	ldr	r0, [r7, #12]
 801961e:	f7ff ffa9 	bl	8019574 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8019622:	68fb      	ldr	r3, [r7, #12]
 8019624:	681b      	ldr	r3, [r3, #0]
 8019626:	68b9      	ldr	r1, [r7, #8]
 8019628:	687a      	ldr	r2, [r7, #4]
 801962a:	4618      	mov	r0, r3
 801962c:	f000 fae5 	bl	8019bfa <memcpy>
		*pptr += mqttstring.lenstring.len;
 8019630:	68fb      	ldr	r3, [r7, #12]
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	687a      	ldr	r2, [r7, #4]
 8019636:	441a      	add	r2, r3
 8019638:	68fb      	ldr	r3, [r7, #12]
 801963a:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 801963c:	e00c      	b.n	8019658 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 801963e:	683b      	ldr	r3, [r7, #0]
 8019640:	2b00      	cmp	r3, #0
 8019642:	d005      	beq.n	8019650 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8019644:	683b      	ldr	r3, [r7, #0]
 8019646:	4619      	mov	r1, r3
 8019648:	68f8      	ldr	r0, [r7, #12]
 801964a:	f7ff ffbc 	bl	80195c6 <writeCString>
}
 801964e:	e003      	b.n	8019658 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8019650:	2100      	movs	r1, #0
 8019652:	68f8      	ldr	r0, [r7, #12]
 8019654:	f7ff ff8e 	bl	8019574 <writeInt>
}
 8019658:	bf00      	nop
 801965a:	3710      	adds	r7, #16
 801965c:	46bd      	mov	sp, r7
 801965e:	bd80      	pop	{r7, pc}

08019660 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8019660:	b580      	push	{r7, lr}
 8019662:	b086      	sub	sp, #24
 8019664:	af00      	add	r7, sp, #0
 8019666:	60f8      	str	r0, [r7, #12]
 8019668:	60b9      	str	r1, [r7, #8]
 801966a:	607a      	str	r2, [r7, #4]
	int rc = 0;
 801966c:	2300      	movs	r3, #0
 801966e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	68ba      	ldr	r2, [r7, #8]
 8019674:	6812      	ldr	r2, [r2, #0]
 8019676:	1a9b      	subs	r3, r3, r2
 8019678:	2b01      	cmp	r3, #1
 801967a:	dd1a      	ble.n	80196b2 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 801967c:	68b8      	ldr	r0, [r7, #8]
 801967e:	f7ff ff35 	bl	80194ec <readInt>
 8019682:	4602      	mov	r2, r0
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8019688:	68bb      	ldr	r3, [r7, #8]
 801968a:	681b      	ldr	r3, [r3, #0]
 801968c:	68fa      	ldr	r2, [r7, #12]
 801968e:	6852      	ldr	r2, [r2, #4]
 8019690:	4413      	add	r3, r2
 8019692:	687a      	ldr	r2, [r7, #4]
 8019694:	429a      	cmp	r2, r3
 8019696:	d30c      	bcc.n	80196b2 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8019698:	68bb      	ldr	r3, [r7, #8]
 801969a:	681a      	ldr	r2, [r3, #0]
 801969c:	68fb      	ldr	r3, [r7, #12]
 801969e:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 80196a0:	68bb      	ldr	r3, [r7, #8]
 80196a2:	681b      	ldr	r3, [r3, #0]
 80196a4:	68fa      	ldr	r2, [r7, #12]
 80196a6:	6852      	ldr	r2, [r2, #4]
 80196a8:	441a      	add	r2, r3
 80196aa:	68bb      	ldr	r3, [r7, #8]
 80196ac:	601a      	str	r2, [r3, #0]
			rc = 1;
 80196ae:	2301      	movs	r3, #1
 80196b0:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 80196b2:	68fb      	ldr	r3, [r7, #12]
 80196b4:	2200      	movs	r2, #0
 80196b6:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 80196b8:	697b      	ldr	r3, [r7, #20]
}
 80196ba:	4618      	mov	r0, r3
 80196bc:	3718      	adds	r7, #24
 80196be:	46bd      	mov	sp, r7
 80196c0:	bd80      	pop	{r7, pc}

080196c2 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 80196c2:	b580      	push	{r7, lr}
 80196c4:	b086      	sub	sp, #24
 80196c6:	af00      	add	r7, sp, #0
 80196c8:	1d3b      	adds	r3, r7, #4
 80196ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 80196ce:	2300      	movs	r3, #0
 80196d0:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d006      	beq.n	80196e6 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	4618      	mov	r0, r3
 80196dc:	f7e6 fdba 	bl	8000254 <strlen>
 80196e0:	4603      	mov	r3, r0
 80196e2:	617b      	str	r3, [r7, #20]
 80196e4:	e001      	b.n	80196ea <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 80196e6:	68bb      	ldr	r3, [r7, #8]
 80196e8:	617b      	str	r3, [r7, #20]
	return rc;
 80196ea:	697b      	ldr	r3, [r7, #20]
}
 80196ec:	4618      	mov	r0, r3
 80196ee:	3718      	adds	r7, #24
 80196f0:	46bd      	mov	sp, r7
 80196f2:	bd80      	pop	{r7, pc}

080196f4 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 80196f4:	b580      	push	{r7, lr}
 80196f6:	b086      	sub	sp, #24
 80196f8:	af00      	add	r7, sp, #0
 80196fa:	6078      	str	r0, [r7, #4]
 80196fc:	6039      	str	r1, [r7, #0]
	int alen = 0,
 80196fe:	2300      	movs	r3, #0
 8019700:	617b      	str	r3, [r7, #20]
		blen = 0;
 8019702:	2300      	movs	r3, #0
 8019704:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	2b00      	cmp	r3, #0
 801970c:	d00a      	beq.n	8019724 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	681b      	ldr	r3, [r3, #0]
 8019712:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	4618      	mov	r0, r3
 801971a:	f7e6 fd9b 	bl	8000254 <strlen>
 801971e:	4603      	mov	r3, r0
 8019720:	617b      	str	r3, [r7, #20]
 8019722:	e005      	b.n	8019730 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	689b      	ldr	r3, [r3, #8]
 8019728:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	685b      	ldr	r3, [r3, #4]
 801972e:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 8019730:	6838      	ldr	r0, [r7, #0]
 8019732:	f7e6 fd8f 	bl	8000254 <strlen>
 8019736:	4603      	mov	r3, r0
 8019738:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 801973a:	697a      	ldr	r2, [r7, #20]
 801973c:	68fb      	ldr	r3, [r7, #12]
 801973e:	429a      	cmp	r2, r3
 8019740:	d10a      	bne.n	8019758 <MQTTPacket_equals+0x64>
 8019742:	697b      	ldr	r3, [r7, #20]
 8019744:	461a      	mov	r2, r3
 8019746:	6839      	ldr	r1, [r7, #0]
 8019748:	6938      	ldr	r0, [r7, #16]
 801974a:	f000 fb19 	bl	8019d80 <strncmp>
 801974e:	4603      	mov	r3, r0
 8019750:	2b00      	cmp	r3, #0
 8019752:	d101      	bne.n	8019758 <MQTTPacket_equals+0x64>
 8019754:	2301      	movs	r3, #1
 8019756:	e000      	b.n	801975a <MQTTPacket_equals+0x66>
 8019758:	2300      	movs	r3, #0
}
 801975a:	4618      	mov	r0, r3
 801975c:	3718      	adds	r7, #24
 801975e:	46bd      	mov	sp, r7
 8019760:	bd80      	pop	{r7, pc}

08019762 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8019762:	b580      	push	{r7, lr}
 8019764:	b086      	sub	sp, #24
 8019766:	af00      	add	r7, sp, #0
 8019768:	60f8      	str	r0, [r7, #12]
 801976a:	4638      	mov	r0, r7
 801976c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8019770:	2300      	movs	r3, #0
 8019772:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8019774:	463b      	mov	r3, r7
 8019776:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801977a:	f7ff ffa2 	bl	80196c2 <MQTTstrlen>
 801977e:	4603      	mov	r3, r0
 8019780:	1c9a      	adds	r2, r3, #2
 8019782:	6a3b      	ldr	r3, [r7, #32]
 8019784:	4413      	add	r3, r2
 8019786:	697a      	ldr	r2, [r7, #20]
 8019788:	4413      	add	r3, r2
 801978a:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 801978c:	68fb      	ldr	r3, [r7, #12]
 801978e:	2b00      	cmp	r3, #0
 8019790:	dd02      	ble.n	8019798 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 8019792:	697b      	ldr	r3, [r7, #20]
 8019794:	3302      	adds	r3, #2
 8019796:	617b      	str	r3, [r7, #20]
	return len;
 8019798:	697b      	ldr	r3, [r7, #20]
}
 801979a:	4618      	mov	r0, r3
 801979c:	3718      	adds	r7, #24
 801979e:	46bd      	mov	sp, r7
 80197a0:	bd80      	pop	{r7, pc}

080197a2 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 80197a2:	b580      	push	{r7, lr}
 80197a4:	b08a      	sub	sp, #40	; 0x28
 80197a6:	af02      	add	r7, sp, #8
 80197a8:	60f8      	str	r0, [r7, #12]
 80197aa:	60b9      	str	r1, [r7, #8]
 80197ac:	603b      	str	r3, [r7, #0]
 80197ae:	4613      	mov	r3, r2
 80197b0:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 80197b2:	68fb      	ldr	r3, [r7, #12]
 80197b4:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 80197b6:	2300      	movs	r3, #0
 80197b8:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 80197ba:	2300      	movs	r3, #0
 80197bc:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 80197be:	2300      	movs	r3, #0
 80197c0:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 80197c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80197c4:	9300      	str	r3, [sp, #0]
 80197c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80197ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80197cc:	6838      	ldr	r0, [r7, #0]
 80197ce:	f7ff ffc8 	bl	8019762 <MQTTSerialize_publishLength>
 80197d2:	61b8      	str	r0, [r7, #24]
 80197d4:	69b8      	ldr	r0, [r7, #24]
 80197d6:	f7ff fe29 	bl	801942c <MQTTPacket_len>
 80197da:	4602      	mov	r2, r0
 80197dc:	68bb      	ldr	r3, [r7, #8]
 80197de:	4293      	cmp	r3, r2
 80197e0:	da03      	bge.n	80197ea <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80197e2:	f06f 0301 	mvn.w	r3, #1
 80197e6:	61fb      	str	r3, [r7, #28]
		goto exit;
 80197e8:	e04d      	b.n	8019886 <MQTTSerialize_publish+0xe4>
	}

	header.bits.type = PUBLISH;
 80197ea:	7c3b      	ldrb	r3, [r7, #16]
 80197ec:	2203      	movs	r2, #3
 80197ee:	f362 1307 	bfi	r3, r2, #4, #4
 80197f2:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 80197f4:	79fb      	ldrb	r3, [r7, #7]
 80197f6:	f003 0301 	and.w	r3, r3, #1
 80197fa:	b2da      	uxtb	r2, r3
 80197fc:	7c3b      	ldrb	r3, [r7, #16]
 80197fe:	f362 03c3 	bfi	r3, r2, #3, #1
 8019802:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8019804:	683b      	ldr	r3, [r7, #0]
 8019806:	f003 0303 	and.w	r3, r3, #3
 801980a:	b2da      	uxtb	r2, r3
 801980c:	7c3b      	ldrb	r3, [r7, #16]
 801980e:	f362 0342 	bfi	r3, r2, #1, #2
 8019812:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8019814:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019818:	f003 0301 	and.w	r3, r3, #1
 801981c:	b2da      	uxtb	r2, r3
 801981e:	7c3b      	ldrb	r3, [r7, #16]
 8019820:	f362 0300 	bfi	r3, r2, #0, #1
 8019824:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8019826:	7c3a      	ldrb	r2, [r7, #16]
 8019828:	f107 0314 	add.w	r3, r7, #20
 801982c:	4611      	mov	r1, r2
 801982e:	4618      	mov	r0, r3
 8019830:	f7ff fe8b 	bl	801954a <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8019834:	697b      	ldr	r3, [r7, #20]
 8019836:	69b9      	ldr	r1, [r7, #24]
 8019838:	4618      	mov	r0, r3
 801983a:	f7ff fd8c 	bl	8019356 <MQTTPacket_encode>
 801983e:	4602      	mov	r2, r0
 8019840:	697b      	ldr	r3, [r7, #20]
 8019842:	4413      	add	r3, r2
 8019844:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8019846:	f107 0014 	add.w	r0, r7, #20
 801984a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801984e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019850:	f7ff fed8 	bl	8019604 <writeMQTTString>

	if (qos > 0)
 8019854:	683b      	ldr	r3, [r7, #0]
 8019856:	2b00      	cmp	r3, #0
 8019858:	dd06      	ble.n	8019868 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 801985a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801985c:	f107 0314 	add.w	r3, r7, #20
 8019860:	4611      	mov	r1, r2
 8019862:	4618      	mov	r0, r3
 8019864:	f7ff fe86 	bl	8019574 <writeInt>

	memcpy(ptr, payload, payloadlen);
 8019868:	697b      	ldr	r3, [r7, #20]
 801986a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801986c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801986e:	4618      	mov	r0, r3
 8019870:	f000 f9c3 	bl	8019bfa <memcpy>
	ptr += payloadlen;
 8019874:	697a      	ldr	r2, [r7, #20]
 8019876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019878:	4413      	add	r3, r2
 801987a:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 801987c:	697b      	ldr	r3, [r7, #20]
 801987e:	461a      	mov	r2, r3
 8019880:	68fb      	ldr	r3, [r7, #12]
 8019882:	1ad3      	subs	r3, r2, r3
 8019884:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8019886:	69fb      	ldr	r3, [r7, #28]
}
 8019888:	4618      	mov	r0, r3
 801988a:	3720      	adds	r7, #32
 801988c:	46bd      	mov	sp, r7
 801988e:	bd80      	pop	{r7, pc}

08019890 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 8019890:	b580      	push	{r7, lr}
 8019892:	b088      	sub	sp, #32
 8019894:	af00      	add	r7, sp, #0
 8019896:	60f8      	str	r0, [r7, #12]
 8019898:	60b9      	str	r1, [r7, #8]
 801989a:	4611      	mov	r1, r2
 801989c:	461a      	mov	r2, r3
 801989e:	460b      	mov	r3, r1
 80198a0:	71fb      	strb	r3, [r7, #7]
 80198a2:	4613      	mov	r3, r2
 80198a4:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 80198a6:	2300      	movs	r3, #0
 80198a8:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 80198aa:	2300      	movs	r3, #0
 80198ac:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 80198ae:	68fb      	ldr	r3, [r7, #12]
 80198b0:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 80198b2:	68bb      	ldr	r3, [r7, #8]
 80198b4:	2b03      	cmp	r3, #3
 80198b6:	dc03      	bgt.n	80198c0 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80198b8:	f06f 0301 	mvn.w	r3, #1
 80198bc:	61fb      	str	r3, [r7, #28]
		goto exit;
 80198be:	e038      	b.n	8019932 <MQTTSerialize_ack+0xa2>
	}
	header.bits.type = packettype;
 80198c0:	79fb      	ldrb	r3, [r7, #7]
 80198c2:	f003 030f 	and.w	r3, r3, #15
 80198c6:	b2da      	uxtb	r2, r3
 80198c8:	7e3b      	ldrb	r3, [r7, #24]
 80198ca:	f362 1307 	bfi	r3, r2, #4, #4
 80198ce:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 80198d0:	79bb      	ldrb	r3, [r7, #6]
 80198d2:	f003 0301 	and.w	r3, r3, #1
 80198d6:	b2da      	uxtb	r2, r3
 80198d8:	7e3b      	ldrb	r3, [r7, #24]
 80198da:	f362 03c3 	bfi	r3, r2, #3, #1
 80198de:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 80198e0:	79fb      	ldrb	r3, [r7, #7]
 80198e2:	2b06      	cmp	r3, #6
 80198e4:	bf0c      	ite	eq
 80198e6:	2301      	moveq	r3, #1
 80198e8:	2300      	movne	r3, #0
 80198ea:	b2db      	uxtb	r3, r3
 80198ec:	f003 0303 	and.w	r3, r3, #3
 80198f0:	b2da      	uxtb	r2, r3
 80198f2:	7e3b      	ldrb	r3, [r7, #24]
 80198f4:	f362 0342 	bfi	r3, r2, #1, #2
 80198f8:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80198fa:	7e3a      	ldrb	r2, [r7, #24]
 80198fc:	f107 0314 	add.w	r3, r7, #20
 8019900:	4611      	mov	r1, r2
 8019902:	4618      	mov	r0, r3
 8019904:	f7ff fe21 	bl	801954a <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 8019908:	697b      	ldr	r3, [r7, #20]
 801990a:	2102      	movs	r1, #2
 801990c:	4618      	mov	r0, r3
 801990e:	f7ff fd22 	bl	8019356 <MQTTPacket_encode>
 8019912:	4602      	mov	r2, r0
 8019914:	697b      	ldr	r3, [r7, #20]
 8019916:	4413      	add	r3, r2
 8019918:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 801991a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801991c:	f107 0314 	add.w	r3, r7, #20
 8019920:	4611      	mov	r1, r2
 8019922:	4618      	mov	r0, r3
 8019924:	f7ff fe26 	bl	8019574 <writeInt>
	rc = ptr - buf;
 8019928:	697b      	ldr	r3, [r7, #20]
 801992a:	461a      	mov	r2, r3
 801992c:	68fb      	ldr	r3, [r7, #12]
 801992e:	1ad3      	subs	r3, r2, r3
 8019930:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8019932:	69fb      	ldr	r3, [r7, #28]
}
 8019934:	4618      	mov	r0, r3
 8019936:	3720      	adds	r7, #32
 8019938:	46bd      	mov	sp, r7
 801993a:	bd80      	pop	{r7, pc}

0801993c <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 801993c:	b580      	push	{r7, lr}
 801993e:	b084      	sub	sp, #16
 8019940:	af00      	add	r7, sp, #0
 8019942:	6078      	str	r0, [r7, #4]
 8019944:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8019946:	2302      	movs	r3, #2
 8019948:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 801994a:	2300      	movs	r3, #0
 801994c:	60fb      	str	r3, [r7, #12]
 801994e:	e013      	b.n	8019978 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8019950:	68fa      	ldr	r2, [r7, #12]
 8019952:	4613      	mov	r3, r2
 8019954:	005b      	lsls	r3, r3, #1
 8019956:	4413      	add	r3, r2
 8019958:	009b      	lsls	r3, r3, #2
 801995a:	461a      	mov	r2, r3
 801995c:	683b      	ldr	r3, [r7, #0]
 801995e:	4413      	add	r3, r2
 8019960:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019964:	f7ff fead 	bl	80196c2 <MQTTstrlen>
 8019968:	4603      	mov	r3, r0
 801996a:	3303      	adds	r3, #3
 801996c:	68ba      	ldr	r2, [r7, #8]
 801996e:	4413      	add	r3, r2
 8019970:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 8019972:	68fb      	ldr	r3, [r7, #12]
 8019974:	3301      	adds	r3, #1
 8019976:	60fb      	str	r3, [r7, #12]
 8019978:	68fa      	ldr	r2, [r7, #12]
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	429a      	cmp	r2, r3
 801997e:	dbe7      	blt.n	8019950 <MQTTSerialize_subscribeLength+0x14>
	return len;
 8019980:	68bb      	ldr	r3, [r7, #8]
}
 8019982:	4618      	mov	r0, r3
 8019984:	3710      	adds	r7, #16
 8019986:	46bd      	mov	sp, r7
 8019988:	bd80      	pop	{r7, pc}

0801998a <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 801998a:	b580      	push	{r7, lr}
 801998c:	b08a      	sub	sp, #40	; 0x28
 801998e:	af00      	add	r7, sp, #0
 8019990:	60f8      	str	r0, [r7, #12]
 8019992:	60b9      	str	r1, [r7, #8]
 8019994:	4611      	mov	r1, r2
 8019996:	461a      	mov	r2, r3
 8019998:	460b      	mov	r3, r1
 801999a:	71fb      	strb	r3, [r7, #7]
 801999c:	4613      	mov	r3, r2
 801999e:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 80199a0:	68fb      	ldr	r3, [r7, #12]
 80199a2:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 80199a4:	2300      	movs	r3, #0
 80199a6:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 80199a8:	2300      	movs	r3, #0
 80199aa:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 80199ac:	2300      	movs	r3, #0
 80199ae:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 80199b0:	2300      	movs	r3, #0
 80199b2:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 80199b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80199b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80199b8:	f7ff ffc0 	bl	801993c <MQTTSerialize_subscribeLength>
 80199bc:	61f8      	str	r0, [r7, #28]
 80199be:	69f8      	ldr	r0, [r7, #28]
 80199c0:	f7ff fd34 	bl	801942c <MQTTPacket_len>
 80199c4:	4602      	mov	r2, r0
 80199c6:	68bb      	ldr	r3, [r7, #8]
 80199c8:	4293      	cmp	r3, r2
 80199ca:	da03      	bge.n	80199d4 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80199cc:	f06f 0301 	mvn.w	r3, #1
 80199d0:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 80199d2:	e052      	b.n	8019a7a <MQTTSerialize_subscribe+0xf0>
	}

	header.byte = 0;
 80199d4:	2300      	movs	r3, #0
 80199d6:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 80199d8:	7d3b      	ldrb	r3, [r7, #20]
 80199da:	2208      	movs	r2, #8
 80199dc:	f362 1307 	bfi	r3, r2, #4, #4
 80199e0:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 80199e2:	79fb      	ldrb	r3, [r7, #7]
 80199e4:	f003 0301 	and.w	r3, r3, #1
 80199e8:	b2da      	uxtb	r2, r3
 80199ea:	7d3b      	ldrb	r3, [r7, #20]
 80199ec:	f362 03c3 	bfi	r3, r2, #3, #1
 80199f0:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 80199f2:	7d3b      	ldrb	r3, [r7, #20]
 80199f4:	2201      	movs	r2, #1
 80199f6:	f362 0342 	bfi	r3, r2, #1, #2
 80199fa:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 80199fc:	7d3a      	ldrb	r2, [r7, #20]
 80199fe:	f107 0318 	add.w	r3, r7, #24
 8019a02:	4611      	mov	r1, r2
 8019a04:	4618      	mov	r0, r3
 8019a06:	f7ff fda0 	bl	801954a <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8019a0a:	69bb      	ldr	r3, [r7, #24]
 8019a0c:	69f9      	ldr	r1, [r7, #28]
 8019a0e:	4618      	mov	r0, r3
 8019a10:	f7ff fca1 	bl	8019356 <MQTTPacket_encode>
 8019a14:	4602      	mov	r2, r0
 8019a16:	69bb      	ldr	r3, [r7, #24]
 8019a18:	4413      	add	r3, r2
 8019a1a:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 8019a1c:	88ba      	ldrh	r2, [r7, #4]
 8019a1e:	f107 0318 	add.w	r3, r7, #24
 8019a22:	4611      	mov	r1, r2
 8019a24:	4618      	mov	r0, r3
 8019a26:	f7ff fda5 	bl	8019574 <writeInt>

	for (i = 0; i < count; ++i)
 8019a2a:	2300      	movs	r3, #0
 8019a2c:	623b      	str	r3, [r7, #32]
 8019a2e:	e01b      	b.n	8019a68 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 8019a30:	6a3a      	ldr	r2, [r7, #32]
 8019a32:	4613      	mov	r3, r2
 8019a34:	005b      	lsls	r3, r3, #1
 8019a36:	4413      	add	r3, r2
 8019a38:	009b      	lsls	r3, r3, #2
 8019a3a:	461a      	mov	r2, r3
 8019a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a3e:	4413      	add	r3, r2
 8019a40:	f107 0018 	add.w	r0, r7, #24
 8019a44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019a46:	f7ff fddd 	bl	8019604 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 8019a4a:	6a3b      	ldr	r3, [r7, #32]
 8019a4c:	009b      	lsls	r3, r3, #2
 8019a4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019a50:	4413      	add	r3, r2
 8019a52:	681b      	ldr	r3, [r3, #0]
 8019a54:	b2da      	uxtb	r2, r3
 8019a56:	f107 0318 	add.w	r3, r7, #24
 8019a5a:	4611      	mov	r1, r2
 8019a5c:	4618      	mov	r0, r3
 8019a5e:	f7ff fd74 	bl	801954a <writeChar>
	for (i = 0; i < count; ++i)
 8019a62:	6a3b      	ldr	r3, [r7, #32]
 8019a64:	3301      	adds	r3, #1
 8019a66:	623b      	str	r3, [r7, #32]
 8019a68:	6a3a      	ldr	r2, [r7, #32]
 8019a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a6c:	429a      	cmp	r2, r3
 8019a6e:	dbdf      	blt.n	8019a30 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 8019a70:	69bb      	ldr	r3, [r7, #24]
 8019a72:	461a      	mov	r2, r3
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	1ad3      	subs	r3, r2, r3
 8019a78:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8019a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019a7c:	4618      	mov	r0, r3
 8019a7e:	3728      	adds	r7, #40	; 0x28
 8019a80:	46bd      	mov	sp, r7
 8019a82:	bd80      	pop	{r7, pc}

08019a84 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 8019a84:	b580      	push	{r7, lr}
 8019a86:	b08a      	sub	sp, #40	; 0x28
 8019a88:	af00      	add	r7, sp, #0
 8019a8a:	60f8      	str	r0, [r7, #12]
 8019a8c:	60b9      	str	r1, [r7, #8]
 8019a8e:	607a      	str	r2, [r7, #4]
 8019a90:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8019a92:	2300      	movs	r3, #0
 8019a94:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8019a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a98:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8019a9a:	2300      	movs	r3, #0
 8019a9c:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8019a9e:	2300      	movs	r3, #0
 8019aa0:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8019aa2:	f107 0318 	add.w	r3, r7, #24
 8019aa6:	4618      	mov	r0, r3
 8019aa8:	f7ff fd3b 	bl	8019522 <readChar>
 8019aac:	4603      	mov	r3, r0
 8019aae:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 8019ab0:	7f3b      	ldrb	r3, [r7, #28]
 8019ab2:	f023 030f 	bic.w	r3, r3, #15
 8019ab6:	b2db      	uxtb	r3, r3
 8019ab8:	2b90      	cmp	r3, #144	; 0x90
 8019aba:	d142      	bne.n	8019b42 <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8019abc:	69bb      	ldr	r3, [r7, #24]
 8019abe:	f107 0214 	add.w	r2, r7, #20
 8019ac2:	4611      	mov	r1, r2
 8019ac4:	4618      	mov	r0, r3
 8019ac6:	f7ff fcfb 	bl	80194c0 <MQTTPacket_decodeBuf>
 8019aca:	6278      	str	r0, [r7, #36]	; 0x24
 8019acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ace:	69bb      	ldr	r3, [r7, #24]
 8019ad0:	4413      	add	r3, r2
 8019ad2:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8019ad4:	69bb      	ldr	r3, [r7, #24]
 8019ad6:	697a      	ldr	r2, [r7, #20]
 8019ad8:	4413      	add	r3, r2
 8019ada:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8019adc:	6a3b      	ldr	r3, [r7, #32]
 8019ade:	69ba      	ldr	r2, [r7, #24]
 8019ae0:	1a9b      	subs	r3, r3, r2
 8019ae2:	2b01      	cmp	r3, #1
 8019ae4:	dd2f      	ble.n	8019b46 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 8019ae6:	f107 0318 	add.w	r3, r7, #24
 8019aea:	4618      	mov	r0, r3
 8019aec:	f7ff fcfe 	bl	80194ec <readInt>
 8019af0:	4603      	mov	r3, r0
 8019af2:	b29a      	uxth	r2, r3
 8019af4:	68fb      	ldr	r3, [r7, #12]
 8019af6:	801a      	strh	r2, [r3, #0]

	*count = 0;
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	2200      	movs	r2, #0
 8019afc:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8019afe:	e019      	b.n	8019b34 <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	681b      	ldr	r3, [r3, #0]
 8019b04:	68ba      	ldr	r2, [r7, #8]
 8019b06:	429a      	cmp	r2, r3
 8019b08:	da03      	bge.n	8019b12 <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 8019b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8019b0e:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 8019b10:	e01a      	b.n	8019b48 <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 8019b12:	f107 0318 	add.w	r3, r7, #24
 8019b16:	4618      	mov	r0, r3
 8019b18:	f7ff fd03 	bl	8019522 <readChar>
 8019b1c:	4603      	mov	r3, r0
 8019b1e:	4618      	mov	r0, r3
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	1c59      	adds	r1, r3, #1
 8019b26:	687a      	ldr	r2, [r7, #4]
 8019b28:	6011      	str	r1, [r2, #0]
 8019b2a:	009b      	lsls	r3, r3, #2
 8019b2c:	683a      	ldr	r2, [r7, #0]
 8019b2e:	4413      	add	r3, r2
 8019b30:	4602      	mov	r2, r0
 8019b32:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8019b34:	69bb      	ldr	r3, [r7, #24]
 8019b36:	6a3a      	ldr	r2, [r7, #32]
 8019b38:	429a      	cmp	r2, r3
 8019b3a:	d8e1      	bhi.n	8019b00 <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 8019b3c:	2301      	movs	r3, #1
 8019b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8019b40:	e002      	b.n	8019b48 <MQTTDeserialize_suback+0xc4>
		goto exit;
 8019b42:	bf00      	nop
 8019b44:	e000      	b.n	8019b48 <MQTTDeserialize_suback+0xc4>
		goto exit;
 8019b46:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8019b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019b4a:	4618      	mov	r0, r3
 8019b4c:	3728      	adds	r7, #40	; 0x28
 8019b4e:	46bd      	mov	sp, r7
 8019b50:	bd80      	pop	{r7, pc}
	...

08019b54 <__libc_init_array>:
 8019b54:	b570      	push	{r4, r5, r6, lr}
 8019b56:	4e0d      	ldr	r6, [pc, #52]	; (8019b8c <__libc_init_array+0x38>)
 8019b58:	4c0d      	ldr	r4, [pc, #52]	; (8019b90 <__libc_init_array+0x3c>)
 8019b5a:	1ba4      	subs	r4, r4, r6
 8019b5c:	10a4      	asrs	r4, r4, #2
 8019b5e:	2500      	movs	r5, #0
 8019b60:	42a5      	cmp	r5, r4
 8019b62:	d109      	bne.n	8019b78 <__libc_init_array+0x24>
 8019b64:	4e0b      	ldr	r6, [pc, #44]	; (8019b94 <__libc_init_array+0x40>)
 8019b66:	4c0c      	ldr	r4, [pc, #48]	; (8019b98 <__libc_init_array+0x44>)
 8019b68:	f000 fffe 	bl	801ab68 <_init>
 8019b6c:	1ba4      	subs	r4, r4, r6
 8019b6e:	10a4      	asrs	r4, r4, #2
 8019b70:	2500      	movs	r5, #0
 8019b72:	42a5      	cmp	r5, r4
 8019b74:	d105      	bne.n	8019b82 <__libc_init_array+0x2e>
 8019b76:	bd70      	pop	{r4, r5, r6, pc}
 8019b78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019b7c:	4798      	blx	r3
 8019b7e:	3501      	adds	r5, #1
 8019b80:	e7ee      	b.n	8019b60 <__libc_init_array+0xc>
 8019b82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019b86:	4798      	blx	r3
 8019b88:	3501      	adds	r5, #1
 8019b8a:	e7f2      	b.n	8019b72 <__libc_init_array+0x1e>
 8019b8c:	0801ee58 	.word	0x0801ee58
 8019b90:	0801ee58 	.word	0x0801ee58
 8019b94:	0801ee58 	.word	0x0801ee58
 8019b98:	0801ee5c 	.word	0x0801ee5c

08019b9c <__locale_ctype_ptr>:
 8019b9c:	4b04      	ldr	r3, [pc, #16]	; (8019bb0 <__locale_ctype_ptr+0x14>)
 8019b9e:	4a05      	ldr	r2, [pc, #20]	; (8019bb4 <__locale_ctype_ptr+0x18>)
 8019ba0:	681b      	ldr	r3, [r3, #0]
 8019ba2:	6a1b      	ldr	r3, [r3, #32]
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	bf08      	it	eq
 8019ba8:	4613      	moveq	r3, r2
 8019baa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8019bae:	4770      	bx	lr
 8019bb0:	20000020 	.word	0x20000020
 8019bb4:	20000084 	.word	0x20000084

08019bb8 <__ascii_mbtowc>:
 8019bb8:	b082      	sub	sp, #8
 8019bba:	b901      	cbnz	r1, 8019bbe <__ascii_mbtowc+0x6>
 8019bbc:	a901      	add	r1, sp, #4
 8019bbe:	b142      	cbz	r2, 8019bd2 <__ascii_mbtowc+0x1a>
 8019bc0:	b14b      	cbz	r3, 8019bd6 <__ascii_mbtowc+0x1e>
 8019bc2:	7813      	ldrb	r3, [r2, #0]
 8019bc4:	600b      	str	r3, [r1, #0]
 8019bc6:	7812      	ldrb	r2, [r2, #0]
 8019bc8:	1c10      	adds	r0, r2, #0
 8019bca:	bf18      	it	ne
 8019bcc:	2001      	movne	r0, #1
 8019bce:	b002      	add	sp, #8
 8019bd0:	4770      	bx	lr
 8019bd2:	4610      	mov	r0, r2
 8019bd4:	e7fb      	b.n	8019bce <__ascii_mbtowc+0x16>
 8019bd6:	f06f 0001 	mvn.w	r0, #1
 8019bda:	e7f8      	b.n	8019bce <__ascii_mbtowc+0x16>

08019bdc <memcmp>:
 8019bdc:	b530      	push	{r4, r5, lr}
 8019bde:	2400      	movs	r4, #0
 8019be0:	42a2      	cmp	r2, r4
 8019be2:	d101      	bne.n	8019be8 <memcmp+0xc>
 8019be4:	2000      	movs	r0, #0
 8019be6:	e007      	b.n	8019bf8 <memcmp+0x1c>
 8019be8:	5d03      	ldrb	r3, [r0, r4]
 8019bea:	3401      	adds	r4, #1
 8019bec:	190d      	adds	r5, r1, r4
 8019bee:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8019bf2:	42ab      	cmp	r3, r5
 8019bf4:	d0f4      	beq.n	8019be0 <memcmp+0x4>
 8019bf6:	1b58      	subs	r0, r3, r5
 8019bf8:	bd30      	pop	{r4, r5, pc}

08019bfa <memcpy>:
 8019bfa:	b510      	push	{r4, lr}
 8019bfc:	1e43      	subs	r3, r0, #1
 8019bfe:	440a      	add	r2, r1
 8019c00:	4291      	cmp	r1, r2
 8019c02:	d100      	bne.n	8019c06 <memcpy+0xc>
 8019c04:	bd10      	pop	{r4, pc}
 8019c06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019c0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019c0e:	e7f7      	b.n	8019c00 <memcpy+0x6>

08019c10 <memset>:
 8019c10:	4402      	add	r2, r0
 8019c12:	4603      	mov	r3, r0
 8019c14:	4293      	cmp	r3, r2
 8019c16:	d100      	bne.n	8019c1a <memset+0xa>
 8019c18:	4770      	bx	lr
 8019c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8019c1e:	e7f9      	b.n	8019c14 <memset+0x4>

08019c20 <iprintf>:
 8019c20:	b40f      	push	{r0, r1, r2, r3}
 8019c22:	4b0a      	ldr	r3, [pc, #40]	; (8019c4c <iprintf+0x2c>)
 8019c24:	b513      	push	{r0, r1, r4, lr}
 8019c26:	681c      	ldr	r4, [r3, #0]
 8019c28:	b124      	cbz	r4, 8019c34 <iprintf+0x14>
 8019c2a:	69a3      	ldr	r3, [r4, #24]
 8019c2c:	b913      	cbnz	r3, 8019c34 <iprintf+0x14>
 8019c2e:	4620      	mov	r0, r4
 8019c30:	f000 fa76 	bl	801a120 <__sinit>
 8019c34:	ab05      	add	r3, sp, #20
 8019c36:	9a04      	ldr	r2, [sp, #16]
 8019c38:	68a1      	ldr	r1, [r4, #8]
 8019c3a:	9301      	str	r3, [sp, #4]
 8019c3c:	4620      	mov	r0, r4
 8019c3e:	f000 fc37 	bl	801a4b0 <_vfiprintf_r>
 8019c42:	b002      	add	sp, #8
 8019c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019c48:	b004      	add	sp, #16
 8019c4a:	4770      	bx	lr
 8019c4c:	20000020 	.word	0x20000020

08019c50 <_puts_r>:
 8019c50:	b570      	push	{r4, r5, r6, lr}
 8019c52:	460e      	mov	r6, r1
 8019c54:	4605      	mov	r5, r0
 8019c56:	b118      	cbz	r0, 8019c60 <_puts_r+0x10>
 8019c58:	6983      	ldr	r3, [r0, #24]
 8019c5a:	b90b      	cbnz	r3, 8019c60 <_puts_r+0x10>
 8019c5c:	f000 fa60 	bl	801a120 <__sinit>
 8019c60:	69ab      	ldr	r3, [r5, #24]
 8019c62:	68ac      	ldr	r4, [r5, #8]
 8019c64:	b913      	cbnz	r3, 8019c6c <_puts_r+0x1c>
 8019c66:	4628      	mov	r0, r5
 8019c68:	f000 fa5a 	bl	801a120 <__sinit>
 8019c6c:	4b23      	ldr	r3, [pc, #140]	; (8019cfc <_puts_r+0xac>)
 8019c6e:	429c      	cmp	r4, r3
 8019c70:	d117      	bne.n	8019ca2 <_puts_r+0x52>
 8019c72:	686c      	ldr	r4, [r5, #4]
 8019c74:	89a3      	ldrh	r3, [r4, #12]
 8019c76:	071b      	lsls	r3, r3, #28
 8019c78:	d51d      	bpl.n	8019cb6 <_puts_r+0x66>
 8019c7a:	6923      	ldr	r3, [r4, #16]
 8019c7c:	b1db      	cbz	r3, 8019cb6 <_puts_r+0x66>
 8019c7e:	3e01      	subs	r6, #1
 8019c80:	68a3      	ldr	r3, [r4, #8]
 8019c82:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019c86:	3b01      	subs	r3, #1
 8019c88:	60a3      	str	r3, [r4, #8]
 8019c8a:	b9e9      	cbnz	r1, 8019cc8 <_puts_r+0x78>
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	da2e      	bge.n	8019cee <_puts_r+0x9e>
 8019c90:	4622      	mov	r2, r4
 8019c92:	210a      	movs	r1, #10
 8019c94:	4628      	mov	r0, r5
 8019c96:	f000 f885 	bl	8019da4 <__swbuf_r>
 8019c9a:	3001      	adds	r0, #1
 8019c9c:	d011      	beq.n	8019cc2 <_puts_r+0x72>
 8019c9e:	200a      	movs	r0, #10
 8019ca0:	e011      	b.n	8019cc6 <_puts_r+0x76>
 8019ca2:	4b17      	ldr	r3, [pc, #92]	; (8019d00 <_puts_r+0xb0>)
 8019ca4:	429c      	cmp	r4, r3
 8019ca6:	d101      	bne.n	8019cac <_puts_r+0x5c>
 8019ca8:	68ac      	ldr	r4, [r5, #8]
 8019caa:	e7e3      	b.n	8019c74 <_puts_r+0x24>
 8019cac:	4b15      	ldr	r3, [pc, #84]	; (8019d04 <_puts_r+0xb4>)
 8019cae:	429c      	cmp	r4, r3
 8019cb0:	bf08      	it	eq
 8019cb2:	68ec      	ldreq	r4, [r5, #12]
 8019cb4:	e7de      	b.n	8019c74 <_puts_r+0x24>
 8019cb6:	4621      	mov	r1, r4
 8019cb8:	4628      	mov	r0, r5
 8019cba:	f000 f8d3 	bl	8019e64 <__swsetup_r>
 8019cbe:	2800      	cmp	r0, #0
 8019cc0:	d0dd      	beq.n	8019c7e <_puts_r+0x2e>
 8019cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8019cc6:	bd70      	pop	{r4, r5, r6, pc}
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	da04      	bge.n	8019cd6 <_puts_r+0x86>
 8019ccc:	69a2      	ldr	r2, [r4, #24]
 8019cce:	429a      	cmp	r2, r3
 8019cd0:	dc06      	bgt.n	8019ce0 <_puts_r+0x90>
 8019cd2:	290a      	cmp	r1, #10
 8019cd4:	d004      	beq.n	8019ce0 <_puts_r+0x90>
 8019cd6:	6823      	ldr	r3, [r4, #0]
 8019cd8:	1c5a      	adds	r2, r3, #1
 8019cda:	6022      	str	r2, [r4, #0]
 8019cdc:	7019      	strb	r1, [r3, #0]
 8019cde:	e7cf      	b.n	8019c80 <_puts_r+0x30>
 8019ce0:	4622      	mov	r2, r4
 8019ce2:	4628      	mov	r0, r5
 8019ce4:	f000 f85e 	bl	8019da4 <__swbuf_r>
 8019ce8:	3001      	adds	r0, #1
 8019cea:	d1c9      	bne.n	8019c80 <_puts_r+0x30>
 8019cec:	e7e9      	b.n	8019cc2 <_puts_r+0x72>
 8019cee:	6823      	ldr	r3, [r4, #0]
 8019cf0:	200a      	movs	r0, #10
 8019cf2:	1c5a      	adds	r2, r3, #1
 8019cf4:	6022      	str	r2, [r4, #0]
 8019cf6:	7018      	strb	r0, [r3, #0]
 8019cf8:	e7e5      	b.n	8019cc6 <_puts_r+0x76>
 8019cfa:	bf00      	nop
 8019cfc:	0801eddc 	.word	0x0801eddc
 8019d00:	0801edfc 	.word	0x0801edfc
 8019d04:	0801edbc 	.word	0x0801edbc

08019d08 <puts>:
 8019d08:	4b02      	ldr	r3, [pc, #8]	; (8019d14 <puts+0xc>)
 8019d0a:	4601      	mov	r1, r0
 8019d0c:	6818      	ldr	r0, [r3, #0]
 8019d0e:	f7ff bf9f 	b.w	8019c50 <_puts_r>
 8019d12:	bf00      	nop
 8019d14:	20000020 	.word	0x20000020

08019d18 <rand>:
 8019d18:	b538      	push	{r3, r4, r5, lr}
 8019d1a:	4b13      	ldr	r3, [pc, #76]	; (8019d68 <rand+0x50>)
 8019d1c:	681c      	ldr	r4, [r3, #0]
 8019d1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019d20:	b97b      	cbnz	r3, 8019d42 <rand+0x2a>
 8019d22:	2018      	movs	r0, #24
 8019d24:	f000 faea 	bl	801a2fc <malloc>
 8019d28:	4a10      	ldr	r2, [pc, #64]	; (8019d6c <rand+0x54>)
 8019d2a:	4b11      	ldr	r3, [pc, #68]	; (8019d70 <rand+0x58>)
 8019d2c:	63a0      	str	r0, [r4, #56]	; 0x38
 8019d2e:	e9c0 2300 	strd	r2, r3, [r0]
 8019d32:	4b10      	ldr	r3, [pc, #64]	; (8019d74 <rand+0x5c>)
 8019d34:	6083      	str	r3, [r0, #8]
 8019d36:	230b      	movs	r3, #11
 8019d38:	8183      	strh	r3, [r0, #12]
 8019d3a:	2201      	movs	r2, #1
 8019d3c:	2300      	movs	r3, #0
 8019d3e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8019d42:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019d44:	480c      	ldr	r0, [pc, #48]	; (8019d78 <rand+0x60>)
 8019d46:	690a      	ldr	r2, [r1, #16]
 8019d48:	694b      	ldr	r3, [r1, #20]
 8019d4a:	4c0c      	ldr	r4, [pc, #48]	; (8019d7c <rand+0x64>)
 8019d4c:	4350      	muls	r0, r2
 8019d4e:	fb04 0003 	mla	r0, r4, r3, r0
 8019d52:	fba2 2304 	umull	r2, r3, r2, r4
 8019d56:	4403      	add	r3, r0
 8019d58:	1c54      	adds	r4, r2, #1
 8019d5a:	f143 0500 	adc.w	r5, r3, #0
 8019d5e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8019d62:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8019d66:	bd38      	pop	{r3, r4, r5, pc}
 8019d68:	20000020 	.word	0x20000020
 8019d6c:	abcd330e 	.word	0xabcd330e
 8019d70:	e66d1234 	.word	0xe66d1234
 8019d74:	0005deec 	.word	0x0005deec
 8019d78:	5851f42d 	.word	0x5851f42d
 8019d7c:	4c957f2d 	.word	0x4c957f2d

08019d80 <strncmp>:
 8019d80:	b510      	push	{r4, lr}
 8019d82:	b16a      	cbz	r2, 8019da0 <strncmp+0x20>
 8019d84:	3901      	subs	r1, #1
 8019d86:	1884      	adds	r4, r0, r2
 8019d88:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019d8c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019d90:	4293      	cmp	r3, r2
 8019d92:	d103      	bne.n	8019d9c <strncmp+0x1c>
 8019d94:	42a0      	cmp	r0, r4
 8019d96:	d001      	beq.n	8019d9c <strncmp+0x1c>
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d1f5      	bne.n	8019d88 <strncmp+0x8>
 8019d9c:	1a98      	subs	r0, r3, r2
 8019d9e:	bd10      	pop	{r4, pc}
 8019da0:	4610      	mov	r0, r2
 8019da2:	e7fc      	b.n	8019d9e <strncmp+0x1e>

08019da4 <__swbuf_r>:
 8019da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019da6:	460e      	mov	r6, r1
 8019da8:	4614      	mov	r4, r2
 8019daa:	4605      	mov	r5, r0
 8019dac:	b118      	cbz	r0, 8019db6 <__swbuf_r+0x12>
 8019dae:	6983      	ldr	r3, [r0, #24]
 8019db0:	b90b      	cbnz	r3, 8019db6 <__swbuf_r+0x12>
 8019db2:	f000 f9b5 	bl	801a120 <__sinit>
 8019db6:	4b21      	ldr	r3, [pc, #132]	; (8019e3c <__swbuf_r+0x98>)
 8019db8:	429c      	cmp	r4, r3
 8019dba:	d12a      	bne.n	8019e12 <__swbuf_r+0x6e>
 8019dbc:	686c      	ldr	r4, [r5, #4]
 8019dbe:	69a3      	ldr	r3, [r4, #24]
 8019dc0:	60a3      	str	r3, [r4, #8]
 8019dc2:	89a3      	ldrh	r3, [r4, #12]
 8019dc4:	071a      	lsls	r2, r3, #28
 8019dc6:	d52e      	bpl.n	8019e26 <__swbuf_r+0x82>
 8019dc8:	6923      	ldr	r3, [r4, #16]
 8019dca:	b363      	cbz	r3, 8019e26 <__swbuf_r+0x82>
 8019dcc:	6923      	ldr	r3, [r4, #16]
 8019dce:	6820      	ldr	r0, [r4, #0]
 8019dd0:	1ac0      	subs	r0, r0, r3
 8019dd2:	6963      	ldr	r3, [r4, #20]
 8019dd4:	b2f6      	uxtb	r6, r6
 8019dd6:	4283      	cmp	r3, r0
 8019dd8:	4637      	mov	r7, r6
 8019dda:	dc04      	bgt.n	8019de6 <__swbuf_r+0x42>
 8019ddc:	4621      	mov	r1, r4
 8019dde:	4628      	mov	r0, r5
 8019de0:	f000 f934 	bl	801a04c <_fflush_r>
 8019de4:	bb28      	cbnz	r0, 8019e32 <__swbuf_r+0x8e>
 8019de6:	68a3      	ldr	r3, [r4, #8]
 8019de8:	3b01      	subs	r3, #1
 8019dea:	60a3      	str	r3, [r4, #8]
 8019dec:	6823      	ldr	r3, [r4, #0]
 8019dee:	1c5a      	adds	r2, r3, #1
 8019df0:	6022      	str	r2, [r4, #0]
 8019df2:	701e      	strb	r6, [r3, #0]
 8019df4:	6963      	ldr	r3, [r4, #20]
 8019df6:	3001      	adds	r0, #1
 8019df8:	4283      	cmp	r3, r0
 8019dfa:	d004      	beq.n	8019e06 <__swbuf_r+0x62>
 8019dfc:	89a3      	ldrh	r3, [r4, #12]
 8019dfe:	07db      	lsls	r3, r3, #31
 8019e00:	d519      	bpl.n	8019e36 <__swbuf_r+0x92>
 8019e02:	2e0a      	cmp	r6, #10
 8019e04:	d117      	bne.n	8019e36 <__swbuf_r+0x92>
 8019e06:	4621      	mov	r1, r4
 8019e08:	4628      	mov	r0, r5
 8019e0a:	f000 f91f 	bl	801a04c <_fflush_r>
 8019e0e:	b190      	cbz	r0, 8019e36 <__swbuf_r+0x92>
 8019e10:	e00f      	b.n	8019e32 <__swbuf_r+0x8e>
 8019e12:	4b0b      	ldr	r3, [pc, #44]	; (8019e40 <__swbuf_r+0x9c>)
 8019e14:	429c      	cmp	r4, r3
 8019e16:	d101      	bne.n	8019e1c <__swbuf_r+0x78>
 8019e18:	68ac      	ldr	r4, [r5, #8]
 8019e1a:	e7d0      	b.n	8019dbe <__swbuf_r+0x1a>
 8019e1c:	4b09      	ldr	r3, [pc, #36]	; (8019e44 <__swbuf_r+0xa0>)
 8019e1e:	429c      	cmp	r4, r3
 8019e20:	bf08      	it	eq
 8019e22:	68ec      	ldreq	r4, [r5, #12]
 8019e24:	e7cb      	b.n	8019dbe <__swbuf_r+0x1a>
 8019e26:	4621      	mov	r1, r4
 8019e28:	4628      	mov	r0, r5
 8019e2a:	f000 f81b 	bl	8019e64 <__swsetup_r>
 8019e2e:	2800      	cmp	r0, #0
 8019e30:	d0cc      	beq.n	8019dcc <__swbuf_r+0x28>
 8019e32:	f04f 37ff 	mov.w	r7, #4294967295
 8019e36:	4638      	mov	r0, r7
 8019e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e3a:	bf00      	nop
 8019e3c:	0801eddc 	.word	0x0801eddc
 8019e40:	0801edfc 	.word	0x0801edfc
 8019e44:	0801edbc 	.word	0x0801edbc

08019e48 <__ascii_wctomb>:
 8019e48:	b149      	cbz	r1, 8019e5e <__ascii_wctomb+0x16>
 8019e4a:	2aff      	cmp	r2, #255	; 0xff
 8019e4c:	bf85      	ittet	hi
 8019e4e:	238a      	movhi	r3, #138	; 0x8a
 8019e50:	6003      	strhi	r3, [r0, #0]
 8019e52:	700a      	strbls	r2, [r1, #0]
 8019e54:	f04f 30ff 	movhi.w	r0, #4294967295
 8019e58:	bf98      	it	ls
 8019e5a:	2001      	movls	r0, #1
 8019e5c:	4770      	bx	lr
 8019e5e:	4608      	mov	r0, r1
 8019e60:	4770      	bx	lr
	...

08019e64 <__swsetup_r>:
 8019e64:	4b32      	ldr	r3, [pc, #200]	; (8019f30 <__swsetup_r+0xcc>)
 8019e66:	b570      	push	{r4, r5, r6, lr}
 8019e68:	681d      	ldr	r5, [r3, #0]
 8019e6a:	4606      	mov	r6, r0
 8019e6c:	460c      	mov	r4, r1
 8019e6e:	b125      	cbz	r5, 8019e7a <__swsetup_r+0x16>
 8019e70:	69ab      	ldr	r3, [r5, #24]
 8019e72:	b913      	cbnz	r3, 8019e7a <__swsetup_r+0x16>
 8019e74:	4628      	mov	r0, r5
 8019e76:	f000 f953 	bl	801a120 <__sinit>
 8019e7a:	4b2e      	ldr	r3, [pc, #184]	; (8019f34 <__swsetup_r+0xd0>)
 8019e7c:	429c      	cmp	r4, r3
 8019e7e:	d10f      	bne.n	8019ea0 <__swsetup_r+0x3c>
 8019e80:	686c      	ldr	r4, [r5, #4]
 8019e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019e86:	b29a      	uxth	r2, r3
 8019e88:	0715      	lsls	r5, r2, #28
 8019e8a:	d42c      	bmi.n	8019ee6 <__swsetup_r+0x82>
 8019e8c:	06d0      	lsls	r0, r2, #27
 8019e8e:	d411      	bmi.n	8019eb4 <__swsetup_r+0x50>
 8019e90:	2209      	movs	r2, #9
 8019e92:	6032      	str	r2, [r6, #0]
 8019e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019e98:	81a3      	strh	r3, [r4, #12]
 8019e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8019e9e:	e03e      	b.n	8019f1e <__swsetup_r+0xba>
 8019ea0:	4b25      	ldr	r3, [pc, #148]	; (8019f38 <__swsetup_r+0xd4>)
 8019ea2:	429c      	cmp	r4, r3
 8019ea4:	d101      	bne.n	8019eaa <__swsetup_r+0x46>
 8019ea6:	68ac      	ldr	r4, [r5, #8]
 8019ea8:	e7eb      	b.n	8019e82 <__swsetup_r+0x1e>
 8019eaa:	4b24      	ldr	r3, [pc, #144]	; (8019f3c <__swsetup_r+0xd8>)
 8019eac:	429c      	cmp	r4, r3
 8019eae:	bf08      	it	eq
 8019eb0:	68ec      	ldreq	r4, [r5, #12]
 8019eb2:	e7e6      	b.n	8019e82 <__swsetup_r+0x1e>
 8019eb4:	0751      	lsls	r1, r2, #29
 8019eb6:	d512      	bpl.n	8019ede <__swsetup_r+0x7a>
 8019eb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019eba:	b141      	cbz	r1, 8019ece <__swsetup_r+0x6a>
 8019ebc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019ec0:	4299      	cmp	r1, r3
 8019ec2:	d002      	beq.n	8019eca <__swsetup_r+0x66>
 8019ec4:	4630      	mov	r0, r6
 8019ec6:	f000 fa21 	bl	801a30c <_free_r>
 8019eca:	2300      	movs	r3, #0
 8019ecc:	6363      	str	r3, [r4, #52]	; 0x34
 8019ece:	89a3      	ldrh	r3, [r4, #12]
 8019ed0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019ed4:	81a3      	strh	r3, [r4, #12]
 8019ed6:	2300      	movs	r3, #0
 8019ed8:	6063      	str	r3, [r4, #4]
 8019eda:	6923      	ldr	r3, [r4, #16]
 8019edc:	6023      	str	r3, [r4, #0]
 8019ede:	89a3      	ldrh	r3, [r4, #12]
 8019ee0:	f043 0308 	orr.w	r3, r3, #8
 8019ee4:	81a3      	strh	r3, [r4, #12]
 8019ee6:	6923      	ldr	r3, [r4, #16]
 8019ee8:	b94b      	cbnz	r3, 8019efe <__swsetup_r+0x9a>
 8019eea:	89a3      	ldrh	r3, [r4, #12]
 8019eec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019ef4:	d003      	beq.n	8019efe <__swsetup_r+0x9a>
 8019ef6:	4621      	mov	r1, r4
 8019ef8:	4630      	mov	r0, r6
 8019efa:	f000 f9bf 	bl	801a27c <__smakebuf_r>
 8019efe:	89a2      	ldrh	r2, [r4, #12]
 8019f00:	f012 0301 	ands.w	r3, r2, #1
 8019f04:	d00c      	beq.n	8019f20 <__swsetup_r+0xbc>
 8019f06:	2300      	movs	r3, #0
 8019f08:	60a3      	str	r3, [r4, #8]
 8019f0a:	6963      	ldr	r3, [r4, #20]
 8019f0c:	425b      	negs	r3, r3
 8019f0e:	61a3      	str	r3, [r4, #24]
 8019f10:	6923      	ldr	r3, [r4, #16]
 8019f12:	b953      	cbnz	r3, 8019f2a <__swsetup_r+0xc6>
 8019f14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019f18:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8019f1c:	d1ba      	bne.n	8019e94 <__swsetup_r+0x30>
 8019f1e:	bd70      	pop	{r4, r5, r6, pc}
 8019f20:	0792      	lsls	r2, r2, #30
 8019f22:	bf58      	it	pl
 8019f24:	6963      	ldrpl	r3, [r4, #20]
 8019f26:	60a3      	str	r3, [r4, #8]
 8019f28:	e7f2      	b.n	8019f10 <__swsetup_r+0xac>
 8019f2a:	2000      	movs	r0, #0
 8019f2c:	e7f7      	b.n	8019f1e <__swsetup_r+0xba>
 8019f2e:	bf00      	nop
 8019f30:	20000020 	.word	0x20000020
 8019f34:	0801eddc 	.word	0x0801eddc
 8019f38:	0801edfc 	.word	0x0801edfc
 8019f3c:	0801edbc 	.word	0x0801edbc

08019f40 <__sflush_r>:
 8019f40:	898a      	ldrh	r2, [r1, #12]
 8019f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f46:	4605      	mov	r5, r0
 8019f48:	0710      	lsls	r0, r2, #28
 8019f4a:	460c      	mov	r4, r1
 8019f4c:	d458      	bmi.n	801a000 <__sflush_r+0xc0>
 8019f4e:	684b      	ldr	r3, [r1, #4]
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	dc05      	bgt.n	8019f60 <__sflush_r+0x20>
 8019f54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019f56:	2b00      	cmp	r3, #0
 8019f58:	dc02      	bgt.n	8019f60 <__sflush_r+0x20>
 8019f5a:	2000      	movs	r0, #0
 8019f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019f62:	2e00      	cmp	r6, #0
 8019f64:	d0f9      	beq.n	8019f5a <__sflush_r+0x1a>
 8019f66:	2300      	movs	r3, #0
 8019f68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019f6c:	682f      	ldr	r7, [r5, #0]
 8019f6e:	6a21      	ldr	r1, [r4, #32]
 8019f70:	602b      	str	r3, [r5, #0]
 8019f72:	d032      	beq.n	8019fda <__sflush_r+0x9a>
 8019f74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019f76:	89a3      	ldrh	r3, [r4, #12]
 8019f78:	075a      	lsls	r2, r3, #29
 8019f7a:	d505      	bpl.n	8019f88 <__sflush_r+0x48>
 8019f7c:	6863      	ldr	r3, [r4, #4]
 8019f7e:	1ac0      	subs	r0, r0, r3
 8019f80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019f82:	b10b      	cbz	r3, 8019f88 <__sflush_r+0x48>
 8019f84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019f86:	1ac0      	subs	r0, r0, r3
 8019f88:	2300      	movs	r3, #0
 8019f8a:	4602      	mov	r2, r0
 8019f8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019f8e:	6a21      	ldr	r1, [r4, #32]
 8019f90:	4628      	mov	r0, r5
 8019f92:	47b0      	blx	r6
 8019f94:	1c43      	adds	r3, r0, #1
 8019f96:	89a3      	ldrh	r3, [r4, #12]
 8019f98:	d106      	bne.n	8019fa8 <__sflush_r+0x68>
 8019f9a:	6829      	ldr	r1, [r5, #0]
 8019f9c:	291d      	cmp	r1, #29
 8019f9e:	d848      	bhi.n	801a032 <__sflush_r+0xf2>
 8019fa0:	4a29      	ldr	r2, [pc, #164]	; (801a048 <__sflush_r+0x108>)
 8019fa2:	40ca      	lsrs	r2, r1
 8019fa4:	07d6      	lsls	r6, r2, #31
 8019fa6:	d544      	bpl.n	801a032 <__sflush_r+0xf2>
 8019fa8:	2200      	movs	r2, #0
 8019faa:	6062      	str	r2, [r4, #4]
 8019fac:	04d9      	lsls	r1, r3, #19
 8019fae:	6922      	ldr	r2, [r4, #16]
 8019fb0:	6022      	str	r2, [r4, #0]
 8019fb2:	d504      	bpl.n	8019fbe <__sflush_r+0x7e>
 8019fb4:	1c42      	adds	r2, r0, #1
 8019fb6:	d101      	bne.n	8019fbc <__sflush_r+0x7c>
 8019fb8:	682b      	ldr	r3, [r5, #0]
 8019fba:	b903      	cbnz	r3, 8019fbe <__sflush_r+0x7e>
 8019fbc:	6560      	str	r0, [r4, #84]	; 0x54
 8019fbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019fc0:	602f      	str	r7, [r5, #0]
 8019fc2:	2900      	cmp	r1, #0
 8019fc4:	d0c9      	beq.n	8019f5a <__sflush_r+0x1a>
 8019fc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019fca:	4299      	cmp	r1, r3
 8019fcc:	d002      	beq.n	8019fd4 <__sflush_r+0x94>
 8019fce:	4628      	mov	r0, r5
 8019fd0:	f000 f99c 	bl	801a30c <_free_r>
 8019fd4:	2000      	movs	r0, #0
 8019fd6:	6360      	str	r0, [r4, #52]	; 0x34
 8019fd8:	e7c0      	b.n	8019f5c <__sflush_r+0x1c>
 8019fda:	2301      	movs	r3, #1
 8019fdc:	4628      	mov	r0, r5
 8019fde:	47b0      	blx	r6
 8019fe0:	1c41      	adds	r1, r0, #1
 8019fe2:	d1c8      	bne.n	8019f76 <__sflush_r+0x36>
 8019fe4:	682b      	ldr	r3, [r5, #0]
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	d0c5      	beq.n	8019f76 <__sflush_r+0x36>
 8019fea:	2b1d      	cmp	r3, #29
 8019fec:	d001      	beq.n	8019ff2 <__sflush_r+0xb2>
 8019fee:	2b16      	cmp	r3, #22
 8019ff0:	d101      	bne.n	8019ff6 <__sflush_r+0xb6>
 8019ff2:	602f      	str	r7, [r5, #0]
 8019ff4:	e7b1      	b.n	8019f5a <__sflush_r+0x1a>
 8019ff6:	89a3      	ldrh	r3, [r4, #12]
 8019ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019ffc:	81a3      	strh	r3, [r4, #12]
 8019ffe:	e7ad      	b.n	8019f5c <__sflush_r+0x1c>
 801a000:	690f      	ldr	r7, [r1, #16]
 801a002:	2f00      	cmp	r7, #0
 801a004:	d0a9      	beq.n	8019f5a <__sflush_r+0x1a>
 801a006:	0793      	lsls	r3, r2, #30
 801a008:	680e      	ldr	r6, [r1, #0]
 801a00a:	bf08      	it	eq
 801a00c:	694b      	ldreq	r3, [r1, #20]
 801a00e:	600f      	str	r7, [r1, #0]
 801a010:	bf18      	it	ne
 801a012:	2300      	movne	r3, #0
 801a014:	eba6 0807 	sub.w	r8, r6, r7
 801a018:	608b      	str	r3, [r1, #8]
 801a01a:	f1b8 0f00 	cmp.w	r8, #0
 801a01e:	dd9c      	ble.n	8019f5a <__sflush_r+0x1a>
 801a020:	4643      	mov	r3, r8
 801a022:	463a      	mov	r2, r7
 801a024:	6a21      	ldr	r1, [r4, #32]
 801a026:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a028:	4628      	mov	r0, r5
 801a02a:	47b0      	blx	r6
 801a02c:	2800      	cmp	r0, #0
 801a02e:	dc06      	bgt.n	801a03e <__sflush_r+0xfe>
 801a030:	89a3      	ldrh	r3, [r4, #12]
 801a032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a036:	81a3      	strh	r3, [r4, #12]
 801a038:	f04f 30ff 	mov.w	r0, #4294967295
 801a03c:	e78e      	b.n	8019f5c <__sflush_r+0x1c>
 801a03e:	4407      	add	r7, r0
 801a040:	eba8 0800 	sub.w	r8, r8, r0
 801a044:	e7e9      	b.n	801a01a <__sflush_r+0xda>
 801a046:	bf00      	nop
 801a048:	20400001 	.word	0x20400001

0801a04c <_fflush_r>:
 801a04c:	b538      	push	{r3, r4, r5, lr}
 801a04e:	690b      	ldr	r3, [r1, #16]
 801a050:	4605      	mov	r5, r0
 801a052:	460c      	mov	r4, r1
 801a054:	b1db      	cbz	r3, 801a08e <_fflush_r+0x42>
 801a056:	b118      	cbz	r0, 801a060 <_fflush_r+0x14>
 801a058:	6983      	ldr	r3, [r0, #24]
 801a05a:	b90b      	cbnz	r3, 801a060 <_fflush_r+0x14>
 801a05c:	f000 f860 	bl	801a120 <__sinit>
 801a060:	4b0c      	ldr	r3, [pc, #48]	; (801a094 <_fflush_r+0x48>)
 801a062:	429c      	cmp	r4, r3
 801a064:	d109      	bne.n	801a07a <_fflush_r+0x2e>
 801a066:	686c      	ldr	r4, [r5, #4]
 801a068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a06c:	b17b      	cbz	r3, 801a08e <_fflush_r+0x42>
 801a06e:	4621      	mov	r1, r4
 801a070:	4628      	mov	r0, r5
 801a072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a076:	f7ff bf63 	b.w	8019f40 <__sflush_r>
 801a07a:	4b07      	ldr	r3, [pc, #28]	; (801a098 <_fflush_r+0x4c>)
 801a07c:	429c      	cmp	r4, r3
 801a07e:	d101      	bne.n	801a084 <_fflush_r+0x38>
 801a080:	68ac      	ldr	r4, [r5, #8]
 801a082:	e7f1      	b.n	801a068 <_fflush_r+0x1c>
 801a084:	4b05      	ldr	r3, [pc, #20]	; (801a09c <_fflush_r+0x50>)
 801a086:	429c      	cmp	r4, r3
 801a088:	bf08      	it	eq
 801a08a:	68ec      	ldreq	r4, [r5, #12]
 801a08c:	e7ec      	b.n	801a068 <_fflush_r+0x1c>
 801a08e:	2000      	movs	r0, #0
 801a090:	bd38      	pop	{r3, r4, r5, pc}
 801a092:	bf00      	nop
 801a094:	0801eddc 	.word	0x0801eddc
 801a098:	0801edfc 	.word	0x0801edfc
 801a09c:	0801edbc 	.word	0x0801edbc

0801a0a0 <std>:
 801a0a0:	2300      	movs	r3, #0
 801a0a2:	b510      	push	{r4, lr}
 801a0a4:	4604      	mov	r4, r0
 801a0a6:	e9c0 3300 	strd	r3, r3, [r0]
 801a0aa:	6083      	str	r3, [r0, #8]
 801a0ac:	8181      	strh	r1, [r0, #12]
 801a0ae:	6643      	str	r3, [r0, #100]	; 0x64
 801a0b0:	81c2      	strh	r2, [r0, #14]
 801a0b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a0b6:	6183      	str	r3, [r0, #24]
 801a0b8:	4619      	mov	r1, r3
 801a0ba:	2208      	movs	r2, #8
 801a0bc:	305c      	adds	r0, #92	; 0x5c
 801a0be:	f7ff fda7 	bl	8019c10 <memset>
 801a0c2:	4b05      	ldr	r3, [pc, #20]	; (801a0d8 <std+0x38>)
 801a0c4:	6263      	str	r3, [r4, #36]	; 0x24
 801a0c6:	4b05      	ldr	r3, [pc, #20]	; (801a0dc <std+0x3c>)
 801a0c8:	62a3      	str	r3, [r4, #40]	; 0x28
 801a0ca:	4b05      	ldr	r3, [pc, #20]	; (801a0e0 <std+0x40>)
 801a0cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a0ce:	4b05      	ldr	r3, [pc, #20]	; (801a0e4 <std+0x44>)
 801a0d0:	6224      	str	r4, [r4, #32]
 801a0d2:	6323      	str	r3, [r4, #48]	; 0x30
 801a0d4:	bd10      	pop	{r4, pc}
 801a0d6:	bf00      	nop
 801a0d8:	0801aa0d 	.word	0x0801aa0d
 801a0dc:	0801aa2f 	.word	0x0801aa2f
 801a0e0:	0801aa67 	.word	0x0801aa67
 801a0e4:	0801aa8b 	.word	0x0801aa8b

0801a0e8 <_cleanup_r>:
 801a0e8:	4901      	ldr	r1, [pc, #4]	; (801a0f0 <_cleanup_r+0x8>)
 801a0ea:	f000 b885 	b.w	801a1f8 <_fwalk_reent>
 801a0ee:	bf00      	nop
 801a0f0:	0801a04d 	.word	0x0801a04d

0801a0f4 <__sfmoreglue>:
 801a0f4:	b570      	push	{r4, r5, r6, lr}
 801a0f6:	1e4a      	subs	r2, r1, #1
 801a0f8:	2568      	movs	r5, #104	; 0x68
 801a0fa:	4355      	muls	r5, r2
 801a0fc:	460e      	mov	r6, r1
 801a0fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a102:	f000 f951 	bl	801a3a8 <_malloc_r>
 801a106:	4604      	mov	r4, r0
 801a108:	b140      	cbz	r0, 801a11c <__sfmoreglue+0x28>
 801a10a:	2100      	movs	r1, #0
 801a10c:	e9c0 1600 	strd	r1, r6, [r0]
 801a110:	300c      	adds	r0, #12
 801a112:	60a0      	str	r0, [r4, #8]
 801a114:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a118:	f7ff fd7a 	bl	8019c10 <memset>
 801a11c:	4620      	mov	r0, r4
 801a11e:	bd70      	pop	{r4, r5, r6, pc}

0801a120 <__sinit>:
 801a120:	6983      	ldr	r3, [r0, #24]
 801a122:	b510      	push	{r4, lr}
 801a124:	4604      	mov	r4, r0
 801a126:	bb33      	cbnz	r3, 801a176 <__sinit+0x56>
 801a128:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801a12c:	6503      	str	r3, [r0, #80]	; 0x50
 801a12e:	4b12      	ldr	r3, [pc, #72]	; (801a178 <__sinit+0x58>)
 801a130:	4a12      	ldr	r2, [pc, #72]	; (801a17c <__sinit+0x5c>)
 801a132:	681b      	ldr	r3, [r3, #0]
 801a134:	6282      	str	r2, [r0, #40]	; 0x28
 801a136:	4298      	cmp	r0, r3
 801a138:	bf04      	itt	eq
 801a13a:	2301      	moveq	r3, #1
 801a13c:	6183      	streq	r3, [r0, #24]
 801a13e:	f000 f81f 	bl	801a180 <__sfp>
 801a142:	6060      	str	r0, [r4, #4]
 801a144:	4620      	mov	r0, r4
 801a146:	f000 f81b 	bl	801a180 <__sfp>
 801a14a:	60a0      	str	r0, [r4, #8]
 801a14c:	4620      	mov	r0, r4
 801a14e:	f000 f817 	bl	801a180 <__sfp>
 801a152:	2200      	movs	r2, #0
 801a154:	60e0      	str	r0, [r4, #12]
 801a156:	2104      	movs	r1, #4
 801a158:	6860      	ldr	r0, [r4, #4]
 801a15a:	f7ff ffa1 	bl	801a0a0 <std>
 801a15e:	2201      	movs	r2, #1
 801a160:	2109      	movs	r1, #9
 801a162:	68a0      	ldr	r0, [r4, #8]
 801a164:	f7ff ff9c 	bl	801a0a0 <std>
 801a168:	2202      	movs	r2, #2
 801a16a:	2112      	movs	r1, #18
 801a16c:	68e0      	ldr	r0, [r4, #12]
 801a16e:	f7ff ff97 	bl	801a0a0 <std>
 801a172:	2301      	movs	r3, #1
 801a174:	61a3      	str	r3, [r4, #24]
 801a176:	bd10      	pop	{r4, pc}
 801a178:	0801ecac 	.word	0x0801ecac
 801a17c:	0801a0e9 	.word	0x0801a0e9

0801a180 <__sfp>:
 801a180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a182:	4b1b      	ldr	r3, [pc, #108]	; (801a1f0 <__sfp+0x70>)
 801a184:	681e      	ldr	r6, [r3, #0]
 801a186:	69b3      	ldr	r3, [r6, #24]
 801a188:	4607      	mov	r7, r0
 801a18a:	b913      	cbnz	r3, 801a192 <__sfp+0x12>
 801a18c:	4630      	mov	r0, r6
 801a18e:	f7ff ffc7 	bl	801a120 <__sinit>
 801a192:	3648      	adds	r6, #72	; 0x48
 801a194:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a198:	3b01      	subs	r3, #1
 801a19a:	d503      	bpl.n	801a1a4 <__sfp+0x24>
 801a19c:	6833      	ldr	r3, [r6, #0]
 801a19e:	b133      	cbz	r3, 801a1ae <__sfp+0x2e>
 801a1a0:	6836      	ldr	r6, [r6, #0]
 801a1a2:	e7f7      	b.n	801a194 <__sfp+0x14>
 801a1a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a1a8:	b16d      	cbz	r5, 801a1c6 <__sfp+0x46>
 801a1aa:	3468      	adds	r4, #104	; 0x68
 801a1ac:	e7f4      	b.n	801a198 <__sfp+0x18>
 801a1ae:	2104      	movs	r1, #4
 801a1b0:	4638      	mov	r0, r7
 801a1b2:	f7ff ff9f 	bl	801a0f4 <__sfmoreglue>
 801a1b6:	6030      	str	r0, [r6, #0]
 801a1b8:	2800      	cmp	r0, #0
 801a1ba:	d1f1      	bne.n	801a1a0 <__sfp+0x20>
 801a1bc:	230c      	movs	r3, #12
 801a1be:	603b      	str	r3, [r7, #0]
 801a1c0:	4604      	mov	r4, r0
 801a1c2:	4620      	mov	r0, r4
 801a1c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a1c6:	4b0b      	ldr	r3, [pc, #44]	; (801a1f4 <__sfp+0x74>)
 801a1c8:	6665      	str	r5, [r4, #100]	; 0x64
 801a1ca:	e9c4 5500 	strd	r5, r5, [r4]
 801a1ce:	60a5      	str	r5, [r4, #8]
 801a1d0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801a1d4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801a1d8:	2208      	movs	r2, #8
 801a1da:	4629      	mov	r1, r5
 801a1dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a1e0:	f7ff fd16 	bl	8019c10 <memset>
 801a1e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a1e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a1ec:	e7e9      	b.n	801a1c2 <__sfp+0x42>
 801a1ee:	bf00      	nop
 801a1f0:	0801ecac 	.word	0x0801ecac
 801a1f4:	ffff0001 	.word	0xffff0001

0801a1f8 <_fwalk_reent>:
 801a1f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a1fc:	4680      	mov	r8, r0
 801a1fe:	4689      	mov	r9, r1
 801a200:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a204:	2600      	movs	r6, #0
 801a206:	b914      	cbnz	r4, 801a20e <_fwalk_reent+0x16>
 801a208:	4630      	mov	r0, r6
 801a20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a20e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801a212:	3f01      	subs	r7, #1
 801a214:	d501      	bpl.n	801a21a <_fwalk_reent+0x22>
 801a216:	6824      	ldr	r4, [r4, #0]
 801a218:	e7f5      	b.n	801a206 <_fwalk_reent+0xe>
 801a21a:	89ab      	ldrh	r3, [r5, #12]
 801a21c:	2b01      	cmp	r3, #1
 801a21e:	d907      	bls.n	801a230 <_fwalk_reent+0x38>
 801a220:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a224:	3301      	adds	r3, #1
 801a226:	d003      	beq.n	801a230 <_fwalk_reent+0x38>
 801a228:	4629      	mov	r1, r5
 801a22a:	4640      	mov	r0, r8
 801a22c:	47c8      	blx	r9
 801a22e:	4306      	orrs	r6, r0
 801a230:	3568      	adds	r5, #104	; 0x68
 801a232:	e7ee      	b.n	801a212 <_fwalk_reent+0x1a>

0801a234 <__swhatbuf_r>:
 801a234:	b570      	push	{r4, r5, r6, lr}
 801a236:	460e      	mov	r6, r1
 801a238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a23c:	2900      	cmp	r1, #0
 801a23e:	b096      	sub	sp, #88	; 0x58
 801a240:	4614      	mov	r4, r2
 801a242:	461d      	mov	r5, r3
 801a244:	da07      	bge.n	801a256 <__swhatbuf_r+0x22>
 801a246:	2300      	movs	r3, #0
 801a248:	602b      	str	r3, [r5, #0]
 801a24a:	89b3      	ldrh	r3, [r6, #12]
 801a24c:	061a      	lsls	r2, r3, #24
 801a24e:	d410      	bmi.n	801a272 <__swhatbuf_r+0x3e>
 801a250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a254:	e00e      	b.n	801a274 <__swhatbuf_r+0x40>
 801a256:	466a      	mov	r2, sp
 801a258:	f000 fc3e 	bl	801aad8 <_fstat_r>
 801a25c:	2800      	cmp	r0, #0
 801a25e:	dbf2      	blt.n	801a246 <__swhatbuf_r+0x12>
 801a260:	9a01      	ldr	r2, [sp, #4]
 801a262:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a266:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a26a:	425a      	negs	r2, r3
 801a26c:	415a      	adcs	r2, r3
 801a26e:	602a      	str	r2, [r5, #0]
 801a270:	e7ee      	b.n	801a250 <__swhatbuf_r+0x1c>
 801a272:	2340      	movs	r3, #64	; 0x40
 801a274:	2000      	movs	r0, #0
 801a276:	6023      	str	r3, [r4, #0]
 801a278:	b016      	add	sp, #88	; 0x58
 801a27a:	bd70      	pop	{r4, r5, r6, pc}

0801a27c <__smakebuf_r>:
 801a27c:	898b      	ldrh	r3, [r1, #12]
 801a27e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a280:	079d      	lsls	r5, r3, #30
 801a282:	4606      	mov	r6, r0
 801a284:	460c      	mov	r4, r1
 801a286:	d507      	bpl.n	801a298 <__smakebuf_r+0x1c>
 801a288:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a28c:	6023      	str	r3, [r4, #0]
 801a28e:	6123      	str	r3, [r4, #16]
 801a290:	2301      	movs	r3, #1
 801a292:	6163      	str	r3, [r4, #20]
 801a294:	b002      	add	sp, #8
 801a296:	bd70      	pop	{r4, r5, r6, pc}
 801a298:	ab01      	add	r3, sp, #4
 801a29a:	466a      	mov	r2, sp
 801a29c:	f7ff ffca 	bl	801a234 <__swhatbuf_r>
 801a2a0:	9900      	ldr	r1, [sp, #0]
 801a2a2:	4605      	mov	r5, r0
 801a2a4:	4630      	mov	r0, r6
 801a2a6:	f000 f87f 	bl	801a3a8 <_malloc_r>
 801a2aa:	b948      	cbnz	r0, 801a2c0 <__smakebuf_r+0x44>
 801a2ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a2b0:	059a      	lsls	r2, r3, #22
 801a2b2:	d4ef      	bmi.n	801a294 <__smakebuf_r+0x18>
 801a2b4:	f023 0303 	bic.w	r3, r3, #3
 801a2b8:	f043 0302 	orr.w	r3, r3, #2
 801a2bc:	81a3      	strh	r3, [r4, #12]
 801a2be:	e7e3      	b.n	801a288 <__smakebuf_r+0xc>
 801a2c0:	4b0d      	ldr	r3, [pc, #52]	; (801a2f8 <__smakebuf_r+0x7c>)
 801a2c2:	62b3      	str	r3, [r6, #40]	; 0x28
 801a2c4:	89a3      	ldrh	r3, [r4, #12]
 801a2c6:	6020      	str	r0, [r4, #0]
 801a2c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a2cc:	81a3      	strh	r3, [r4, #12]
 801a2ce:	9b00      	ldr	r3, [sp, #0]
 801a2d0:	6163      	str	r3, [r4, #20]
 801a2d2:	9b01      	ldr	r3, [sp, #4]
 801a2d4:	6120      	str	r0, [r4, #16]
 801a2d6:	b15b      	cbz	r3, 801a2f0 <__smakebuf_r+0x74>
 801a2d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a2dc:	4630      	mov	r0, r6
 801a2de:	f000 fc0d 	bl	801aafc <_isatty_r>
 801a2e2:	b128      	cbz	r0, 801a2f0 <__smakebuf_r+0x74>
 801a2e4:	89a3      	ldrh	r3, [r4, #12]
 801a2e6:	f023 0303 	bic.w	r3, r3, #3
 801a2ea:	f043 0301 	orr.w	r3, r3, #1
 801a2ee:	81a3      	strh	r3, [r4, #12]
 801a2f0:	89a3      	ldrh	r3, [r4, #12]
 801a2f2:	431d      	orrs	r5, r3
 801a2f4:	81a5      	strh	r5, [r4, #12]
 801a2f6:	e7cd      	b.n	801a294 <__smakebuf_r+0x18>
 801a2f8:	0801a0e9 	.word	0x0801a0e9

0801a2fc <malloc>:
 801a2fc:	4b02      	ldr	r3, [pc, #8]	; (801a308 <malloc+0xc>)
 801a2fe:	4601      	mov	r1, r0
 801a300:	6818      	ldr	r0, [r3, #0]
 801a302:	f000 b851 	b.w	801a3a8 <_malloc_r>
 801a306:	bf00      	nop
 801a308:	20000020 	.word	0x20000020

0801a30c <_free_r>:
 801a30c:	b538      	push	{r3, r4, r5, lr}
 801a30e:	4605      	mov	r5, r0
 801a310:	2900      	cmp	r1, #0
 801a312:	d045      	beq.n	801a3a0 <_free_r+0x94>
 801a314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a318:	1f0c      	subs	r4, r1, #4
 801a31a:	2b00      	cmp	r3, #0
 801a31c:	bfb8      	it	lt
 801a31e:	18e4      	addlt	r4, r4, r3
 801a320:	f000 fc0e 	bl	801ab40 <__malloc_lock>
 801a324:	4a1f      	ldr	r2, [pc, #124]	; (801a3a4 <_free_r+0x98>)
 801a326:	6813      	ldr	r3, [r2, #0]
 801a328:	4610      	mov	r0, r2
 801a32a:	b933      	cbnz	r3, 801a33a <_free_r+0x2e>
 801a32c:	6063      	str	r3, [r4, #4]
 801a32e:	6014      	str	r4, [r2, #0]
 801a330:	4628      	mov	r0, r5
 801a332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a336:	f000 bc04 	b.w	801ab42 <__malloc_unlock>
 801a33a:	42a3      	cmp	r3, r4
 801a33c:	d90c      	bls.n	801a358 <_free_r+0x4c>
 801a33e:	6821      	ldr	r1, [r4, #0]
 801a340:	1862      	adds	r2, r4, r1
 801a342:	4293      	cmp	r3, r2
 801a344:	bf04      	itt	eq
 801a346:	681a      	ldreq	r2, [r3, #0]
 801a348:	685b      	ldreq	r3, [r3, #4]
 801a34a:	6063      	str	r3, [r4, #4]
 801a34c:	bf04      	itt	eq
 801a34e:	1852      	addeq	r2, r2, r1
 801a350:	6022      	streq	r2, [r4, #0]
 801a352:	6004      	str	r4, [r0, #0]
 801a354:	e7ec      	b.n	801a330 <_free_r+0x24>
 801a356:	4613      	mov	r3, r2
 801a358:	685a      	ldr	r2, [r3, #4]
 801a35a:	b10a      	cbz	r2, 801a360 <_free_r+0x54>
 801a35c:	42a2      	cmp	r2, r4
 801a35e:	d9fa      	bls.n	801a356 <_free_r+0x4a>
 801a360:	6819      	ldr	r1, [r3, #0]
 801a362:	1858      	adds	r0, r3, r1
 801a364:	42a0      	cmp	r0, r4
 801a366:	d10b      	bne.n	801a380 <_free_r+0x74>
 801a368:	6820      	ldr	r0, [r4, #0]
 801a36a:	4401      	add	r1, r0
 801a36c:	1858      	adds	r0, r3, r1
 801a36e:	4282      	cmp	r2, r0
 801a370:	6019      	str	r1, [r3, #0]
 801a372:	d1dd      	bne.n	801a330 <_free_r+0x24>
 801a374:	6810      	ldr	r0, [r2, #0]
 801a376:	6852      	ldr	r2, [r2, #4]
 801a378:	605a      	str	r2, [r3, #4]
 801a37a:	4401      	add	r1, r0
 801a37c:	6019      	str	r1, [r3, #0]
 801a37e:	e7d7      	b.n	801a330 <_free_r+0x24>
 801a380:	d902      	bls.n	801a388 <_free_r+0x7c>
 801a382:	230c      	movs	r3, #12
 801a384:	602b      	str	r3, [r5, #0]
 801a386:	e7d3      	b.n	801a330 <_free_r+0x24>
 801a388:	6820      	ldr	r0, [r4, #0]
 801a38a:	1821      	adds	r1, r4, r0
 801a38c:	428a      	cmp	r2, r1
 801a38e:	bf04      	itt	eq
 801a390:	6811      	ldreq	r1, [r2, #0]
 801a392:	6852      	ldreq	r2, [r2, #4]
 801a394:	6062      	str	r2, [r4, #4]
 801a396:	bf04      	itt	eq
 801a398:	1809      	addeq	r1, r1, r0
 801a39a:	6021      	streq	r1, [r4, #0]
 801a39c:	605c      	str	r4, [r3, #4]
 801a39e:	e7c7      	b.n	801a330 <_free_r+0x24>
 801a3a0:	bd38      	pop	{r3, r4, r5, pc}
 801a3a2:	bf00      	nop
 801a3a4:	2000879c 	.word	0x2000879c

0801a3a8 <_malloc_r>:
 801a3a8:	b570      	push	{r4, r5, r6, lr}
 801a3aa:	1ccd      	adds	r5, r1, #3
 801a3ac:	f025 0503 	bic.w	r5, r5, #3
 801a3b0:	3508      	adds	r5, #8
 801a3b2:	2d0c      	cmp	r5, #12
 801a3b4:	bf38      	it	cc
 801a3b6:	250c      	movcc	r5, #12
 801a3b8:	2d00      	cmp	r5, #0
 801a3ba:	4606      	mov	r6, r0
 801a3bc:	db01      	blt.n	801a3c2 <_malloc_r+0x1a>
 801a3be:	42a9      	cmp	r1, r5
 801a3c0:	d903      	bls.n	801a3ca <_malloc_r+0x22>
 801a3c2:	230c      	movs	r3, #12
 801a3c4:	6033      	str	r3, [r6, #0]
 801a3c6:	2000      	movs	r0, #0
 801a3c8:	bd70      	pop	{r4, r5, r6, pc}
 801a3ca:	f000 fbb9 	bl	801ab40 <__malloc_lock>
 801a3ce:	4a21      	ldr	r2, [pc, #132]	; (801a454 <_malloc_r+0xac>)
 801a3d0:	6814      	ldr	r4, [r2, #0]
 801a3d2:	4621      	mov	r1, r4
 801a3d4:	b991      	cbnz	r1, 801a3fc <_malloc_r+0x54>
 801a3d6:	4c20      	ldr	r4, [pc, #128]	; (801a458 <_malloc_r+0xb0>)
 801a3d8:	6823      	ldr	r3, [r4, #0]
 801a3da:	b91b      	cbnz	r3, 801a3e4 <_malloc_r+0x3c>
 801a3dc:	4630      	mov	r0, r6
 801a3de:	f000 fb05 	bl	801a9ec <_sbrk_r>
 801a3e2:	6020      	str	r0, [r4, #0]
 801a3e4:	4629      	mov	r1, r5
 801a3e6:	4630      	mov	r0, r6
 801a3e8:	f000 fb00 	bl	801a9ec <_sbrk_r>
 801a3ec:	1c43      	adds	r3, r0, #1
 801a3ee:	d124      	bne.n	801a43a <_malloc_r+0x92>
 801a3f0:	230c      	movs	r3, #12
 801a3f2:	6033      	str	r3, [r6, #0]
 801a3f4:	4630      	mov	r0, r6
 801a3f6:	f000 fba4 	bl	801ab42 <__malloc_unlock>
 801a3fa:	e7e4      	b.n	801a3c6 <_malloc_r+0x1e>
 801a3fc:	680b      	ldr	r3, [r1, #0]
 801a3fe:	1b5b      	subs	r3, r3, r5
 801a400:	d418      	bmi.n	801a434 <_malloc_r+0x8c>
 801a402:	2b0b      	cmp	r3, #11
 801a404:	d90f      	bls.n	801a426 <_malloc_r+0x7e>
 801a406:	600b      	str	r3, [r1, #0]
 801a408:	50cd      	str	r5, [r1, r3]
 801a40a:	18cc      	adds	r4, r1, r3
 801a40c:	4630      	mov	r0, r6
 801a40e:	f000 fb98 	bl	801ab42 <__malloc_unlock>
 801a412:	f104 000b 	add.w	r0, r4, #11
 801a416:	1d23      	adds	r3, r4, #4
 801a418:	f020 0007 	bic.w	r0, r0, #7
 801a41c:	1ac3      	subs	r3, r0, r3
 801a41e:	d0d3      	beq.n	801a3c8 <_malloc_r+0x20>
 801a420:	425a      	negs	r2, r3
 801a422:	50e2      	str	r2, [r4, r3]
 801a424:	e7d0      	b.n	801a3c8 <_malloc_r+0x20>
 801a426:	428c      	cmp	r4, r1
 801a428:	684b      	ldr	r3, [r1, #4]
 801a42a:	bf16      	itet	ne
 801a42c:	6063      	strne	r3, [r4, #4]
 801a42e:	6013      	streq	r3, [r2, #0]
 801a430:	460c      	movne	r4, r1
 801a432:	e7eb      	b.n	801a40c <_malloc_r+0x64>
 801a434:	460c      	mov	r4, r1
 801a436:	6849      	ldr	r1, [r1, #4]
 801a438:	e7cc      	b.n	801a3d4 <_malloc_r+0x2c>
 801a43a:	1cc4      	adds	r4, r0, #3
 801a43c:	f024 0403 	bic.w	r4, r4, #3
 801a440:	42a0      	cmp	r0, r4
 801a442:	d005      	beq.n	801a450 <_malloc_r+0xa8>
 801a444:	1a21      	subs	r1, r4, r0
 801a446:	4630      	mov	r0, r6
 801a448:	f000 fad0 	bl	801a9ec <_sbrk_r>
 801a44c:	3001      	adds	r0, #1
 801a44e:	d0cf      	beq.n	801a3f0 <_malloc_r+0x48>
 801a450:	6025      	str	r5, [r4, #0]
 801a452:	e7db      	b.n	801a40c <_malloc_r+0x64>
 801a454:	2000879c 	.word	0x2000879c
 801a458:	200087a0 	.word	0x200087a0

0801a45c <__sfputc_r>:
 801a45c:	6893      	ldr	r3, [r2, #8]
 801a45e:	3b01      	subs	r3, #1
 801a460:	2b00      	cmp	r3, #0
 801a462:	b410      	push	{r4}
 801a464:	6093      	str	r3, [r2, #8]
 801a466:	da08      	bge.n	801a47a <__sfputc_r+0x1e>
 801a468:	6994      	ldr	r4, [r2, #24]
 801a46a:	42a3      	cmp	r3, r4
 801a46c:	db01      	blt.n	801a472 <__sfputc_r+0x16>
 801a46e:	290a      	cmp	r1, #10
 801a470:	d103      	bne.n	801a47a <__sfputc_r+0x1e>
 801a472:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a476:	f7ff bc95 	b.w	8019da4 <__swbuf_r>
 801a47a:	6813      	ldr	r3, [r2, #0]
 801a47c:	1c58      	adds	r0, r3, #1
 801a47e:	6010      	str	r0, [r2, #0]
 801a480:	7019      	strb	r1, [r3, #0]
 801a482:	4608      	mov	r0, r1
 801a484:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a488:	4770      	bx	lr

0801a48a <__sfputs_r>:
 801a48a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a48c:	4606      	mov	r6, r0
 801a48e:	460f      	mov	r7, r1
 801a490:	4614      	mov	r4, r2
 801a492:	18d5      	adds	r5, r2, r3
 801a494:	42ac      	cmp	r4, r5
 801a496:	d101      	bne.n	801a49c <__sfputs_r+0x12>
 801a498:	2000      	movs	r0, #0
 801a49a:	e007      	b.n	801a4ac <__sfputs_r+0x22>
 801a49c:	463a      	mov	r2, r7
 801a49e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a4a2:	4630      	mov	r0, r6
 801a4a4:	f7ff ffda 	bl	801a45c <__sfputc_r>
 801a4a8:	1c43      	adds	r3, r0, #1
 801a4aa:	d1f3      	bne.n	801a494 <__sfputs_r+0xa>
 801a4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a4b0 <_vfiprintf_r>:
 801a4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4b4:	460c      	mov	r4, r1
 801a4b6:	b09d      	sub	sp, #116	; 0x74
 801a4b8:	4617      	mov	r7, r2
 801a4ba:	461d      	mov	r5, r3
 801a4bc:	4606      	mov	r6, r0
 801a4be:	b118      	cbz	r0, 801a4c8 <_vfiprintf_r+0x18>
 801a4c0:	6983      	ldr	r3, [r0, #24]
 801a4c2:	b90b      	cbnz	r3, 801a4c8 <_vfiprintf_r+0x18>
 801a4c4:	f7ff fe2c 	bl	801a120 <__sinit>
 801a4c8:	4b7c      	ldr	r3, [pc, #496]	; (801a6bc <_vfiprintf_r+0x20c>)
 801a4ca:	429c      	cmp	r4, r3
 801a4cc:	d158      	bne.n	801a580 <_vfiprintf_r+0xd0>
 801a4ce:	6874      	ldr	r4, [r6, #4]
 801a4d0:	89a3      	ldrh	r3, [r4, #12]
 801a4d2:	0718      	lsls	r0, r3, #28
 801a4d4:	d55e      	bpl.n	801a594 <_vfiprintf_r+0xe4>
 801a4d6:	6923      	ldr	r3, [r4, #16]
 801a4d8:	2b00      	cmp	r3, #0
 801a4da:	d05b      	beq.n	801a594 <_vfiprintf_r+0xe4>
 801a4dc:	2300      	movs	r3, #0
 801a4de:	9309      	str	r3, [sp, #36]	; 0x24
 801a4e0:	2320      	movs	r3, #32
 801a4e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a4e6:	2330      	movs	r3, #48	; 0x30
 801a4e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a4ec:	9503      	str	r5, [sp, #12]
 801a4ee:	f04f 0b01 	mov.w	fp, #1
 801a4f2:	46b8      	mov	r8, r7
 801a4f4:	4645      	mov	r5, r8
 801a4f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a4fa:	b10b      	cbz	r3, 801a500 <_vfiprintf_r+0x50>
 801a4fc:	2b25      	cmp	r3, #37	; 0x25
 801a4fe:	d154      	bne.n	801a5aa <_vfiprintf_r+0xfa>
 801a500:	ebb8 0a07 	subs.w	sl, r8, r7
 801a504:	d00b      	beq.n	801a51e <_vfiprintf_r+0x6e>
 801a506:	4653      	mov	r3, sl
 801a508:	463a      	mov	r2, r7
 801a50a:	4621      	mov	r1, r4
 801a50c:	4630      	mov	r0, r6
 801a50e:	f7ff ffbc 	bl	801a48a <__sfputs_r>
 801a512:	3001      	adds	r0, #1
 801a514:	f000 80c2 	beq.w	801a69c <_vfiprintf_r+0x1ec>
 801a518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a51a:	4453      	add	r3, sl
 801a51c:	9309      	str	r3, [sp, #36]	; 0x24
 801a51e:	f898 3000 	ldrb.w	r3, [r8]
 801a522:	2b00      	cmp	r3, #0
 801a524:	f000 80ba 	beq.w	801a69c <_vfiprintf_r+0x1ec>
 801a528:	2300      	movs	r3, #0
 801a52a:	f04f 32ff 	mov.w	r2, #4294967295
 801a52e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a532:	9304      	str	r3, [sp, #16]
 801a534:	9307      	str	r3, [sp, #28]
 801a536:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a53a:	931a      	str	r3, [sp, #104]	; 0x68
 801a53c:	46a8      	mov	r8, r5
 801a53e:	2205      	movs	r2, #5
 801a540:	f818 1b01 	ldrb.w	r1, [r8], #1
 801a544:	485e      	ldr	r0, [pc, #376]	; (801a6c0 <_vfiprintf_r+0x210>)
 801a546:	f7e5 fe93 	bl	8000270 <memchr>
 801a54a:	9b04      	ldr	r3, [sp, #16]
 801a54c:	bb78      	cbnz	r0, 801a5ae <_vfiprintf_r+0xfe>
 801a54e:	06d9      	lsls	r1, r3, #27
 801a550:	bf44      	itt	mi
 801a552:	2220      	movmi	r2, #32
 801a554:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a558:	071a      	lsls	r2, r3, #28
 801a55a:	bf44      	itt	mi
 801a55c:	222b      	movmi	r2, #43	; 0x2b
 801a55e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a562:	782a      	ldrb	r2, [r5, #0]
 801a564:	2a2a      	cmp	r2, #42	; 0x2a
 801a566:	d02a      	beq.n	801a5be <_vfiprintf_r+0x10e>
 801a568:	9a07      	ldr	r2, [sp, #28]
 801a56a:	46a8      	mov	r8, r5
 801a56c:	2000      	movs	r0, #0
 801a56e:	250a      	movs	r5, #10
 801a570:	4641      	mov	r1, r8
 801a572:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a576:	3b30      	subs	r3, #48	; 0x30
 801a578:	2b09      	cmp	r3, #9
 801a57a:	d969      	bls.n	801a650 <_vfiprintf_r+0x1a0>
 801a57c:	b360      	cbz	r0, 801a5d8 <_vfiprintf_r+0x128>
 801a57e:	e024      	b.n	801a5ca <_vfiprintf_r+0x11a>
 801a580:	4b50      	ldr	r3, [pc, #320]	; (801a6c4 <_vfiprintf_r+0x214>)
 801a582:	429c      	cmp	r4, r3
 801a584:	d101      	bne.n	801a58a <_vfiprintf_r+0xda>
 801a586:	68b4      	ldr	r4, [r6, #8]
 801a588:	e7a2      	b.n	801a4d0 <_vfiprintf_r+0x20>
 801a58a:	4b4f      	ldr	r3, [pc, #316]	; (801a6c8 <_vfiprintf_r+0x218>)
 801a58c:	429c      	cmp	r4, r3
 801a58e:	bf08      	it	eq
 801a590:	68f4      	ldreq	r4, [r6, #12]
 801a592:	e79d      	b.n	801a4d0 <_vfiprintf_r+0x20>
 801a594:	4621      	mov	r1, r4
 801a596:	4630      	mov	r0, r6
 801a598:	f7ff fc64 	bl	8019e64 <__swsetup_r>
 801a59c:	2800      	cmp	r0, #0
 801a59e:	d09d      	beq.n	801a4dc <_vfiprintf_r+0x2c>
 801a5a0:	f04f 30ff 	mov.w	r0, #4294967295
 801a5a4:	b01d      	add	sp, #116	; 0x74
 801a5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5aa:	46a8      	mov	r8, r5
 801a5ac:	e7a2      	b.n	801a4f4 <_vfiprintf_r+0x44>
 801a5ae:	4a44      	ldr	r2, [pc, #272]	; (801a6c0 <_vfiprintf_r+0x210>)
 801a5b0:	1a80      	subs	r0, r0, r2
 801a5b2:	fa0b f000 	lsl.w	r0, fp, r0
 801a5b6:	4318      	orrs	r0, r3
 801a5b8:	9004      	str	r0, [sp, #16]
 801a5ba:	4645      	mov	r5, r8
 801a5bc:	e7be      	b.n	801a53c <_vfiprintf_r+0x8c>
 801a5be:	9a03      	ldr	r2, [sp, #12]
 801a5c0:	1d11      	adds	r1, r2, #4
 801a5c2:	6812      	ldr	r2, [r2, #0]
 801a5c4:	9103      	str	r1, [sp, #12]
 801a5c6:	2a00      	cmp	r2, #0
 801a5c8:	db01      	blt.n	801a5ce <_vfiprintf_r+0x11e>
 801a5ca:	9207      	str	r2, [sp, #28]
 801a5cc:	e004      	b.n	801a5d8 <_vfiprintf_r+0x128>
 801a5ce:	4252      	negs	r2, r2
 801a5d0:	f043 0302 	orr.w	r3, r3, #2
 801a5d4:	9207      	str	r2, [sp, #28]
 801a5d6:	9304      	str	r3, [sp, #16]
 801a5d8:	f898 3000 	ldrb.w	r3, [r8]
 801a5dc:	2b2e      	cmp	r3, #46	; 0x2e
 801a5de:	d10e      	bne.n	801a5fe <_vfiprintf_r+0x14e>
 801a5e0:	f898 3001 	ldrb.w	r3, [r8, #1]
 801a5e4:	2b2a      	cmp	r3, #42	; 0x2a
 801a5e6:	d138      	bne.n	801a65a <_vfiprintf_r+0x1aa>
 801a5e8:	9b03      	ldr	r3, [sp, #12]
 801a5ea:	1d1a      	adds	r2, r3, #4
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	9203      	str	r2, [sp, #12]
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	bfb8      	it	lt
 801a5f4:	f04f 33ff 	movlt.w	r3, #4294967295
 801a5f8:	f108 0802 	add.w	r8, r8, #2
 801a5fc:	9305      	str	r3, [sp, #20]
 801a5fe:	4d33      	ldr	r5, [pc, #204]	; (801a6cc <_vfiprintf_r+0x21c>)
 801a600:	f898 1000 	ldrb.w	r1, [r8]
 801a604:	2203      	movs	r2, #3
 801a606:	4628      	mov	r0, r5
 801a608:	f7e5 fe32 	bl	8000270 <memchr>
 801a60c:	b140      	cbz	r0, 801a620 <_vfiprintf_r+0x170>
 801a60e:	2340      	movs	r3, #64	; 0x40
 801a610:	1b40      	subs	r0, r0, r5
 801a612:	fa03 f000 	lsl.w	r0, r3, r0
 801a616:	9b04      	ldr	r3, [sp, #16]
 801a618:	4303      	orrs	r3, r0
 801a61a:	f108 0801 	add.w	r8, r8, #1
 801a61e:	9304      	str	r3, [sp, #16]
 801a620:	f898 1000 	ldrb.w	r1, [r8]
 801a624:	482a      	ldr	r0, [pc, #168]	; (801a6d0 <_vfiprintf_r+0x220>)
 801a626:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a62a:	2206      	movs	r2, #6
 801a62c:	f108 0701 	add.w	r7, r8, #1
 801a630:	f7e5 fe1e 	bl	8000270 <memchr>
 801a634:	2800      	cmp	r0, #0
 801a636:	d037      	beq.n	801a6a8 <_vfiprintf_r+0x1f8>
 801a638:	4b26      	ldr	r3, [pc, #152]	; (801a6d4 <_vfiprintf_r+0x224>)
 801a63a:	bb1b      	cbnz	r3, 801a684 <_vfiprintf_r+0x1d4>
 801a63c:	9b03      	ldr	r3, [sp, #12]
 801a63e:	3307      	adds	r3, #7
 801a640:	f023 0307 	bic.w	r3, r3, #7
 801a644:	3308      	adds	r3, #8
 801a646:	9303      	str	r3, [sp, #12]
 801a648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a64a:	444b      	add	r3, r9
 801a64c:	9309      	str	r3, [sp, #36]	; 0x24
 801a64e:	e750      	b.n	801a4f2 <_vfiprintf_r+0x42>
 801a650:	fb05 3202 	mla	r2, r5, r2, r3
 801a654:	2001      	movs	r0, #1
 801a656:	4688      	mov	r8, r1
 801a658:	e78a      	b.n	801a570 <_vfiprintf_r+0xc0>
 801a65a:	2300      	movs	r3, #0
 801a65c:	f108 0801 	add.w	r8, r8, #1
 801a660:	9305      	str	r3, [sp, #20]
 801a662:	4619      	mov	r1, r3
 801a664:	250a      	movs	r5, #10
 801a666:	4640      	mov	r0, r8
 801a668:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a66c:	3a30      	subs	r2, #48	; 0x30
 801a66e:	2a09      	cmp	r2, #9
 801a670:	d903      	bls.n	801a67a <_vfiprintf_r+0x1ca>
 801a672:	2b00      	cmp	r3, #0
 801a674:	d0c3      	beq.n	801a5fe <_vfiprintf_r+0x14e>
 801a676:	9105      	str	r1, [sp, #20]
 801a678:	e7c1      	b.n	801a5fe <_vfiprintf_r+0x14e>
 801a67a:	fb05 2101 	mla	r1, r5, r1, r2
 801a67e:	2301      	movs	r3, #1
 801a680:	4680      	mov	r8, r0
 801a682:	e7f0      	b.n	801a666 <_vfiprintf_r+0x1b6>
 801a684:	ab03      	add	r3, sp, #12
 801a686:	9300      	str	r3, [sp, #0]
 801a688:	4622      	mov	r2, r4
 801a68a:	4b13      	ldr	r3, [pc, #76]	; (801a6d8 <_vfiprintf_r+0x228>)
 801a68c:	a904      	add	r1, sp, #16
 801a68e:	4630      	mov	r0, r6
 801a690:	f3af 8000 	nop.w
 801a694:	f1b0 3fff 	cmp.w	r0, #4294967295
 801a698:	4681      	mov	r9, r0
 801a69a:	d1d5      	bne.n	801a648 <_vfiprintf_r+0x198>
 801a69c:	89a3      	ldrh	r3, [r4, #12]
 801a69e:	065b      	lsls	r3, r3, #25
 801a6a0:	f53f af7e 	bmi.w	801a5a0 <_vfiprintf_r+0xf0>
 801a6a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a6a6:	e77d      	b.n	801a5a4 <_vfiprintf_r+0xf4>
 801a6a8:	ab03      	add	r3, sp, #12
 801a6aa:	9300      	str	r3, [sp, #0]
 801a6ac:	4622      	mov	r2, r4
 801a6ae:	4b0a      	ldr	r3, [pc, #40]	; (801a6d8 <_vfiprintf_r+0x228>)
 801a6b0:	a904      	add	r1, sp, #16
 801a6b2:	4630      	mov	r0, r6
 801a6b4:	f000 f888 	bl	801a7c8 <_printf_i>
 801a6b8:	e7ec      	b.n	801a694 <_vfiprintf_r+0x1e4>
 801a6ba:	bf00      	nop
 801a6bc:	0801eddc 	.word	0x0801eddc
 801a6c0:	0801ee1c 	.word	0x0801ee1c
 801a6c4:	0801edfc 	.word	0x0801edfc
 801a6c8:	0801edbc 	.word	0x0801edbc
 801a6cc:	0801ee22 	.word	0x0801ee22
 801a6d0:	0801ee26 	.word	0x0801ee26
 801a6d4:	00000000 	.word	0x00000000
 801a6d8:	0801a48b 	.word	0x0801a48b

0801a6dc <_printf_common>:
 801a6dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a6e0:	4691      	mov	r9, r2
 801a6e2:	461f      	mov	r7, r3
 801a6e4:	688a      	ldr	r2, [r1, #8]
 801a6e6:	690b      	ldr	r3, [r1, #16]
 801a6e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a6ec:	4293      	cmp	r3, r2
 801a6ee:	bfb8      	it	lt
 801a6f0:	4613      	movlt	r3, r2
 801a6f2:	f8c9 3000 	str.w	r3, [r9]
 801a6f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a6fa:	4606      	mov	r6, r0
 801a6fc:	460c      	mov	r4, r1
 801a6fe:	b112      	cbz	r2, 801a706 <_printf_common+0x2a>
 801a700:	3301      	adds	r3, #1
 801a702:	f8c9 3000 	str.w	r3, [r9]
 801a706:	6823      	ldr	r3, [r4, #0]
 801a708:	0699      	lsls	r1, r3, #26
 801a70a:	bf42      	ittt	mi
 801a70c:	f8d9 3000 	ldrmi.w	r3, [r9]
 801a710:	3302      	addmi	r3, #2
 801a712:	f8c9 3000 	strmi.w	r3, [r9]
 801a716:	6825      	ldr	r5, [r4, #0]
 801a718:	f015 0506 	ands.w	r5, r5, #6
 801a71c:	d107      	bne.n	801a72e <_printf_common+0x52>
 801a71e:	f104 0a19 	add.w	sl, r4, #25
 801a722:	68e3      	ldr	r3, [r4, #12]
 801a724:	f8d9 2000 	ldr.w	r2, [r9]
 801a728:	1a9b      	subs	r3, r3, r2
 801a72a:	42ab      	cmp	r3, r5
 801a72c:	dc28      	bgt.n	801a780 <_printf_common+0xa4>
 801a72e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801a732:	6822      	ldr	r2, [r4, #0]
 801a734:	3300      	adds	r3, #0
 801a736:	bf18      	it	ne
 801a738:	2301      	movne	r3, #1
 801a73a:	0692      	lsls	r2, r2, #26
 801a73c:	d42d      	bmi.n	801a79a <_printf_common+0xbe>
 801a73e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a742:	4639      	mov	r1, r7
 801a744:	4630      	mov	r0, r6
 801a746:	47c0      	blx	r8
 801a748:	3001      	adds	r0, #1
 801a74a:	d020      	beq.n	801a78e <_printf_common+0xb2>
 801a74c:	6823      	ldr	r3, [r4, #0]
 801a74e:	68e5      	ldr	r5, [r4, #12]
 801a750:	f8d9 2000 	ldr.w	r2, [r9]
 801a754:	f003 0306 	and.w	r3, r3, #6
 801a758:	2b04      	cmp	r3, #4
 801a75a:	bf08      	it	eq
 801a75c:	1aad      	subeq	r5, r5, r2
 801a75e:	68a3      	ldr	r3, [r4, #8]
 801a760:	6922      	ldr	r2, [r4, #16]
 801a762:	bf0c      	ite	eq
 801a764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a768:	2500      	movne	r5, #0
 801a76a:	4293      	cmp	r3, r2
 801a76c:	bfc4      	itt	gt
 801a76e:	1a9b      	subgt	r3, r3, r2
 801a770:	18ed      	addgt	r5, r5, r3
 801a772:	f04f 0900 	mov.w	r9, #0
 801a776:	341a      	adds	r4, #26
 801a778:	454d      	cmp	r5, r9
 801a77a:	d11a      	bne.n	801a7b2 <_printf_common+0xd6>
 801a77c:	2000      	movs	r0, #0
 801a77e:	e008      	b.n	801a792 <_printf_common+0xb6>
 801a780:	2301      	movs	r3, #1
 801a782:	4652      	mov	r2, sl
 801a784:	4639      	mov	r1, r7
 801a786:	4630      	mov	r0, r6
 801a788:	47c0      	blx	r8
 801a78a:	3001      	adds	r0, #1
 801a78c:	d103      	bne.n	801a796 <_printf_common+0xba>
 801a78e:	f04f 30ff 	mov.w	r0, #4294967295
 801a792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a796:	3501      	adds	r5, #1
 801a798:	e7c3      	b.n	801a722 <_printf_common+0x46>
 801a79a:	18e1      	adds	r1, r4, r3
 801a79c:	1c5a      	adds	r2, r3, #1
 801a79e:	2030      	movs	r0, #48	; 0x30
 801a7a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a7a4:	4422      	add	r2, r4
 801a7a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a7aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a7ae:	3302      	adds	r3, #2
 801a7b0:	e7c5      	b.n	801a73e <_printf_common+0x62>
 801a7b2:	2301      	movs	r3, #1
 801a7b4:	4622      	mov	r2, r4
 801a7b6:	4639      	mov	r1, r7
 801a7b8:	4630      	mov	r0, r6
 801a7ba:	47c0      	blx	r8
 801a7bc:	3001      	adds	r0, #1
 801a7be:	d0e6      	beq.n	801a78e <_printf_common+0xb2>
 801a7c0:	f109 0901 	add.w	r9, r9, #1
 801a7c4:	e7d8      	b.n	801a778 <_printf_common+0x9c>
	...

0801a7c8 <_printf_i>:
 801a7c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a7cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801a7d0:	460c      	mov	r4, r1
 801a7d2:	7e09      	ldrb	r1, [r1, #24]
 801a7d4:	b085      	sub	sp, #20
 801a7d6:	296e      	cmp	r1, #110	; 0x6e
 801a7d8:	4617      	mov	r7, r2
 801a7da:	4606      	mov	r6, r0
 801a7dc:	4698      	mov	r8, r3
 801a7de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a7e0:	f000 80b3 	beq.w	801a94a <_printf_i+0x182>
 801a7e4:	d822      	bhi.n	801a82c <_printf_i+0x64>
 801a7e6:	2963      	cmp	r1, #99	; 0x63
 801a7e8:	d036      	beq.n	801a858 <_printf_i+0x90>
 801a7ea:	d80a      	bhi.n	801a802 <_printf_i+0x3a>
 801a7ec:	2900      	cmp	r1, #0
 801a7ee:	f000 80b9 	beq.w	801a964 <_printf_i+0x19c>
 801a7f2:	2958      	cmp	r1, #88	; 0x58
 801a7f4:	f000 8083 	beq.w	801a8fe <_printf_i+0x136>
 801a7f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a7fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801a800:	e032      	b.n	801a868 <_printf_i+0xa0>
 801a802:	2964      	cmp	r1, #100	; 0x64
 801a804:	d001      	beq.n	801a80a <_printf_i+0x42>
 801a806:	2969      	cmp	r1, #105	; 0x69
 801a808:	d1f6      	bne.n	801a7f8 <_printf_i+0x30>
 801a80a:	6820      	ldr	r0, [r4, #0]
 801a80c:	6813      	ldr	r3, [r2, #0]
 801a80e:	0605      	lsls	r5, r0, #24
 801a810:	f103 0104 	add.w	r1, r3, #4
 801a814:	d52a      	bpl.n	801a86c <_printf_i+0xa4>
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	6011      	str	r1, [r2, #0]
 801a81a:	2b00      	cmp	r3, #0
 801a81c:	da03      	bge.n	801a826 <_printf_i+0x5e>
 801a81e:	222d      	movs	r2, #45	; 0x2d
 801a820:	425b      	negs	r3, r3
 801a822:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801a826:	486f      	ldr	r0, [pc, #444]	; (801a9e4 <_printf_i+0x21c>)
 801a828:	220a      	movs	r2, #10
 801a82a:	e039      	b.n	801a8a0 <_printf_i+0xd8>
 801a82c:	2973      	cmp	r1, #115	; 0x73
 801a82e:	f000 809d 	beq.w	801a96c <_printf_i+0x1a4>
 801a832:	d808      	bhi.n	801a846 <_printf_i+0x7e>
 801a834:	296f      	cmp	r1, #111	; 0x6f
 801a836:	d020      	beq.n	801a87a <_printf_i+0xb2>
 801a838:	2970      	cmp	r1, #112	; 0x70
 801a83a:	d1dd      	bne.n	801a7f8 <_printf_i+0x30>
 801a83c:	6823      	ldr	r3, [r4, #0]
 801a83e:	f043 0320 	orr.w	r3, r3, #32
 801a842:	6023      	str	r3, [r4, #0]
 801a844:	e003      	b.n	801a84e <_printf_i+0x86>
 801a846:	2975      	cmp	r1, #117	; 0x75
 801a848:	d017      	beq.n	801a87a <_printf_i+0xb2>
 801a84a:	2978      	cmp	r1, #120	; 0x78
 801a84c:	d1d4      	bne.n	801a7f8 <_printf_i+0x30>
 801a84e:	2378      	movs	r3, #120	; 0x78
 801a850:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a854:	4864      	ldr	r0, [pc, #400]	; (801a9e8 <_printf_i+0x220>)
 801a856:	e055      	b.n	801a904 <_printf_i+0x13c>
 801a858:	6813      	ldr	r3, [r2, #0]
 801a85a:	1d19      	adds	r1, r3, #4
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	6011      	str	r1, [r2, #0]
 801a860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a864:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a868:	2301      	movs	r3, #1
 801a86a:	e08c      	b.n	801a986 <_printf_i+0x1be>
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	6011      	str	r1, [r2, #0]
 801a870:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a874:	bf18      	it	ne
 801a876:	b21b      	sxthne	r3, r3
 801a878:	e7cf      	b.n	801a81a <_printf_i+0x52>
 801a87a:	6813      	ldr	r3, [r2, #0]
 801a87c:	6825      	ldr	r5, [r4, #0]
 801a87e:	1d18      	adds	r0, r3, #4
 801a880:	6010      	str	r0, [r2, #0]
 801a882:	0628      	lsls	r0, r5, #24
 801a884:	d501      	bpl.n	801a88a <_printf_i+0xc2>
 801a886:	681b      	ldr	r3, [r3, #0]
 801a888:	e002      	b.n	801a890 <_printf_i+0xc8>
 801a88a:	0668      	lsls	r0, r5, #25
 801a88c:	d5fb      	bpl.n	801a886 <_printf_i+0xbe>
 801a88e:	881b      	ldrh	r3, [r3, #0]
 801a890:	4854      	ldr	r0, [pc, #336]	; (801a9e4 <_printf_i+0x21c>)
 801a892:	296f      	cmp	r1, #111	; 0x6f
 801a894:	bf14      	ite	ne
 801a896:	220a      	movne	r2, #10
 801a898:	2208      	moveq	r2, #8
 801a89a:	2100      	movs	r1, #0
 801a89c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a8a0:	6865      	ldr	r5, [r4, #4]
 801a8a2:	60a5      	str	r5, [r4, #8]
 801a8a4:	2d00      	cmp	r5, #0
 801a8a6:	f2c0 8095 	blt.w	801a9d4 <_printf_i+0x20c>
 801a8aa:	6821      	ldr	r1, [r4, #0]
 801a8ac:	f021 0104 	bic.w	r1, r1, #4
 801a8b0:	6021      	str	r1, [r4, #0]
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	d13d      	bne.n	801a932 <_printf_i+0x16a>
 801a8b6:	2d00      	cmp	r5, #0
 801a8b8:	f040 808e 	bne.w	801a9d8 <_printf_i+0x210>
 801a8bc:	4665      	mov	r5, ip
 801a8be:	2a08      	cmp	r2, #8
 801a8c0:	d10b      	bne.n	801a8da <_printf_i+0x112>
 801a8c2:	6823      	ldr	r3, [r4, #0]
 801a8c4:	07db      	lsls	r3, r3, #31
 801a8c6:	d508      	bpl.n	801a8da <_printf_i+0x112>
 801a8c8:	6923      	ldr	r3, [r4, #16]
 801a8ca:	6862      	ldr	r2, [r4, #4]
 801a8cc:	429a      	cmp	r2, r3
 801a8ce:	bfde      	ittt	le
 801a8d0:	2330      	movle	r3, #48	; 0x30
 801a8d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a8d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a8da:	ebac 0305 	sub.w	r3, ip, r5
 801a8de:	6123      	str	r3, [r4, #16]
 801a8e0:	f8cd 8000 	str.w	r8, [sp]
 801a8e4:	463b      	mov	r3, r7
 801a8e6:	aa03      	add	r2, sp, #12
 801a8e8:	4621      	mov	r1, r4
 801a8ea:	4630      	mov	r0, r6
 801a8ec:	f7ff fef6 	bl	801a6dc <_printf_common>
 801a8f0:	3001      	adds	r0, #1
 801a8f2:	d14d      	bne.n	801a990 <_printf_i+0x1c8>
 801a8f4:	f04f 30ff 	mov.w	r0, #4294967295
 801a8f8:	b005      	add	sp, #20
 801a8fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a8fe:	4839      	ldr	r0, [pc, #228]	; (801a9e4 <_printf_i+0x21c>)
 801a900:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801a904:	6813      	ldr	r3, [r2, #0]
 801a906:	6821      	ldr	r1, [r4, #0]
 801a908:	1d1d      	adds	r5, r3, #4
 801a90a:	681b      	ldr	r3, [r3, #0]
 801a90c:	6015      	str	r5, [r2, #0]
 801a90e:	060a      	lsls	r2, r1, #24
 801a910:	d50b      	bpl.n	801a92a <_printf_i+0x162>
 801a912:	07ca      	lsls	r2, r1, #31
 801a914:	bf44      	itt	mi
 801a916:	f041 0120 	orrmi.w	r1, r1, #32
 801a91a:	6021      	strmi	r1, [r4, #0]
 801a91c:	b91b      	cbnz	r3, 801a926 <_printf_i+0x15e>
 801a91e:	6822      	ldr	r2, [r4, #0]
 801a920:	f022 0220 	bic.w	r2, r2, #32
 801a924:	6022      	str	r2, [r4, #0]
 801a926:	2210      	movs	r2, #16
 801a928:	e7b7      	b.n	801a89a <_printf_i+0xd2>
 801a92a:	064d      	lsls	r5, r1, #25
 801a92c:	bf48      	it	mi
 801a92e:	b29b      	uxthmi	r3, r3
 801a930:	e7ef      	b.n	801a912 <_printf_i+0x14a>
 801a932:	4665      	mov	r5, ip
 801a934:	fbb3 f1f2 	udiv	r1, r3, r2
 801a938:	fb02 3311 	mls	r3, r2, r1, r3
 801a93c:	5cc3      	ldrb	r3, [r0, r3]
 801a93e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801a942:	460b      	mov	r3, r1
 801a944:	2900      	cmp	r1, #0
 801a946:	d1f5      	bne.n	801a934 <_printf_i+0x16c>
 801a948:	e7b9      	b.n	801a8be <_printf_i+0xf6>
 801a94a:	6813      	ldr	r3, [r2, #0]
 801a94c:	6825      	ldr	r5, [r4, #0]
 801a94e:	6961      	ldr	r1, [r4, #20]
 801a950:	1d18      	adds	r0, r3, #4
 801a952:	6010      	str	r0, [r2, #0]
 801a954:	0628      	lsls	r0, r5, #24
 801a956:	681b      	ldr	r3, [r3, #0]
 801a958:	d501      	bpl.n	801a95e <_printf_i+0x196>
 801a95a:	6019      	str	r1, [r3, #0]
 801a95c:	e002      	b.n	801a964 <_printf_i+0x19c>
 801a95e:	066a      	lsls	r2, r5, #25
 801a960:	d5fb      	bpl.n	801a95a <_printf_i+0x192>
 801a962:	8019      	strh	r1, [r3, #0]
 801a964:	2300      	movs	r3, #0
 801a966:	6123      	str	r3, [r4, #16]
 801a968:	4665      	mov	r5, ip
 801a96a:	e7b9      	b.n	801a8e0 <_printf_i+0x118>
 801a96c:	6813      	ldr	r3, [r2, #0]
 801a96e:	1d19      	adds	r1, r3, #4
 801a970:	6011      	str	r1, [r2, #0]
 801a972:	681d      	ldr	r5, [r3, #0]
 801a974:	6862      	ldr	r2, [r4, #4]
 801a976:	2100      	movs	r1, #0
 801a978:	4628      	mov	r0, r5
 801a97a:	f7e5 fc79 	bl	8000270 <memchr>
 801a97e:	b108      	cbz	r0, 801a984 <_printf_i+0x1bc>
 801a980:	1b40      	subs	r0, r0, r5
 801a982:	6060      	str	r0, [r4, #4]
 801a984:	6863      	ldr	r3, [r4, #4]
 801a986:	6123      	str	r3, [r4, #16]
 801a988:	2300      	movs	r3, #0
 801a98a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a98e:	e7a7      	b.n	801a8e0 <_printf_i+0x118>
 801a990:	6923      	ldr	r3, [r4, #16]
 801a992:	462a      	mov	r2, r5
 801a994:	4639      	mov	r1, r7
 801a996:	4630      	mov	r0, r6
 801a998:	47c0      	blx	r8
 801a99a:	3001      	adds	r0, #1
 801a99c:	d0aa      	beq.n	801a8f4 <_printf_i+0x12c>
 801a99e:	6823      	ldr	r3, [r4, #0]
 801a9a0:	079b      	lsls	r3, r3, #30
 801a9a2:	d413      	bmi.n	801a9cc <_printf_i+0x204>
 801a9a4:	68e0      	ldr	r0, [r4, #12]
 801a9a6:	9b03      	ldr	r3, [sp, #12]
 801a9a8:	4298      	cmp	r0, r3
 801a9aa:	bfb8      	it	lt
 801a9ac:	4618      	movlt	r0, r3
 801a9ae:	e7a3      	b.n	801a8f8 <_printf_i+0x130>
 801a9b0:	2301      	movs	r3, #1
 801a9b2:	464a      	mov	r2, r9
 801a9b4:	4639      	mov	r1, r7
 801a9b6:	4630      	mov	r0, r6
 801a9b8:	47c0      	blx	r8
 801a9ba:	3001      	adds	r0, #1
 801a9bc:	d09a      	beq.n	801a8f4 <_printf_i+0x12c>
 801a9be:	3501      	adds	r5, #1
 801a9c0:	68e3      	ldr	r3, [r4, #12]
 801a9c2:	9a03      	ldr	r2, [sp, #12]
 801a9c4:	1a9b      	subs	r3, r3, r2
 801a9c6:	42ab      	cmp	r3, r5
 801a9c8:	dcf2      	bgt.n	801a9b0 <_printf_i+0x1e8>
 801a9ca:	e7eb      	b.n	801a9a4 <_printf_i+0x1dc>
 801a9cc:	2500      	movs	r5, #0
 801a9ce:	f104 0919 	add.w	r9, r4, #25
 801a9d2:	e7f5      	b.n	801a9c0 <_printf_i+0x1f8>
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	d1ac      	bne.n	801a932 <_printf_i+0x16a>
 801a9d8:	7803      	ldrb	r3, [r0, #0]
 801a9da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a9de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a9e2:	e76c      	b.n	801a8be <_printf_i+0xf6>
 801a9e4:	0801ee2d 	.word	0x0801ee2d
 801a9e8:	0801ee3e 	.word	0x0801ee3e

0801a9ec <_sbrk_r>:
 801a9ec:	b538      	push	{r3, r4, r5, lr}
 801a9ee:	4c06      	ldr	r4, [pc, #24]	; (801aa08 <_sbrk_r+0x1c>)
 801a9f0:	2300      	movs	r3, #0
 801a9f2:	4605      	mov	r5, r0
 801a9f4:	4608      	mov	r0, r1
 801a9f6:	6023      	str	r3, [r4, #0]
 801a9f8:	f7e6 f9d4 	bl	8000da4 <_sbrk>
 801a9fc:	1c43      	adds	r3, r0, #1
 801a9fe:	d102      	bne.n	801aa06 <_sbrk_r+0x1a>
 801aa00:	6823      	ldr	r3, [r4, #0]
 801aa02:	b103      	cbz	r3, 801aa06 <_sbrk_r+0x1a>
 801aa04:	602b      	str	r3, [r5, #0]
 801aa06:	bd38      	pop	{r3, r4, r5, pc}
 801aa08:	2000fd7c 	.word	0x2000fd7c

0801aa0c <__sread>:
 801aa0c:	b510      	push	{r4, lr}
 801aa0e:	460c      	mov	r4, r1
 801aa10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aa14:	f000 f896 	bl	801ab44 <_read_r>
 801aa18:	2800      	cmp	r0, #0
 801aa1a:	bfab      	itete	ge
 801aa1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801aa1e:	89a3      	ldrhlt	r3, [r4, #12]
 801aa20:	181b      	addge	r3, r3, r0
 801aa22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801aa26:	bfac      	ite	ge
 801aa28:	6563      	strge	r3, [r4, #84]	; 0x54
 801aa2a:	81a3      	strhlt	r3, [r4, #12]
 801aa2c:	bd10      	pop	{r4, pc}

0801aa2e <__swrite>:
 801aa2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa32:	461f      	mov	r7, r3
 801aa34:	898b      	ldrh	r3, [r1, #12]
 801aa36:	05db      	lsls	r3, r3, #23
 801aa38:	4605      	mov	r5, r0
 801aa3a:	460c      	mov	r4, r1
 801aa3c:	4616      	mov	r6, r2
 801aa3e:	d505      	bpl.n	801aa4c <__swrite+0x1e>
 801aa40:	2302      	movs	r3, #2
 801aa42:	2200      	movs	r2, #0
 801aa44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aa48:	f000 f868 	bl	801ab1c <_lseek_r>
 801aa4c:	89a3      	ldrh	r3, [r4, #12]
 801aa4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801aa52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801aa56:	81a3      	strh	r3, [r4, #12]
 801aa58:	4632      	mov	r2, r6
 801aa5a:	463b      	mov	r3, r7
 801aa5c:	4628      	mov	r0, r5
 801aa5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aa62:	f000 b817 	b.w	801aa94 <_write_r>

0801aa66 <__sseek>:
 801aa66:	b510      	push	{r4, lr}
 801aa68:	460c      	mov	r4, r1
 801aa6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aa6e:	f000 f855 	bl	801ab1c <_lseek_r>
 801aa72:	1c43      	adds	r3, r0, #1
 801aa74:	89a3      	ldrh	r3, [r4, #12]
 801aa76:	bf15      	itete	ne
 801aa78:	6560      	strne	r0, [r4, #84]	; 0x54
 801aa7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801aa7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801aa82:	81a3      	strheq	r3, [r4, #12]
 801aa84:	bf18      	it	ne
 801aa86:	81a3      	strhne	r3, [r4, #12]
 801aa88:	bd10      	pop	{r4, pc}

0801aa8a <__sclose>:
 801aa8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aa8e:	f000 b813 	b.w	801aab8 <_close_r>
	...

0801aa94 <_write_r>:
 801aa94:	b538      	push	{r3, r4, r5, lr}
 801aa96:	4c07      	ldr	r4, [pc, #28]	; (801aab4 <_write_r+0x20>)
 801aa98:	4605      	mov	r5, r0
 801aa9a:	4608      	mov	r0, r1
 801aa9c:	4611      	mov	r1, r2
 801aa9e:	2200      	movs	r2, #0
 801aaa0:	6022      	str	r2, [r4, #0]
 801aaa2:	461a      	mov	r2, r3
 801aaa4:	f7e5 ffbb 	bl	8000a1e <_write>
 801aaa8:	1c43      	adds	r3, r0, #1
 801aaaa:	d102      	bne.n	801aab2 <_write_r+0x1e>
 801aaac:	6823      	ldr	r3, [r4, #0]
 801aaae:	b103      	cbz	r3, 801aab2 <_write_r+0x1e>
 801aab0:	602b      	str	r3, [r5, #0]
 801aab2:	bd38      	pop	{r3, r4, r5, pc}
 801aab4:	2000fd7c 	.word	0x2000fd7c

0801aab8 <_close_r>:
 801aab8:	b538      	push	{r3, r4, r5, lr}
 801aaba:	4c06      	ldr	r4, [pc, #24]	; (801aad4 <_close_r+0x1c>)
 801aabc:	2300      	movs	r3, #0
 801aabe:	4605      	mov	r5, r0
 801aac0:	4608      	mov	r0, r1
 801aac2:	6023      	str	r3, [r4, #0]
 801aac4:	f7e6 f939 	bl	8000d3a <_close>
 801aac8:	1c43      	adds	r3, r0, #1
 801aaca:	d102      	bne.n	801aad2 <_close_r+0x1a>
 801aacc:	6823      	ldr	r3, [r4, #0]
 801aace:	b103      	cbz	r3, 801aad2 <_close_r+0x1a>
 801aad0:	602b      	str	r3, [r5, #0]
 801aad2:	bd38      	pop	{r3, r4, r5, pc}
 801aad4:	2000fd7c 	.word	0x2000fd7c

0801aad8 <_fstat_r>:
 801aad8:	b538      	push	{r3, r4, r5, lr}
 801aada:	4c07      	ldr	r4, [pc, #28]	; (801aaf8 <_fstat_r+0x20>)
 801aadc:	2300      	movs	r3, #0
 801aade:	4605      	mov	r5, r0
 801aae0:	4608      	mov	r0, r1
 801aae2:	4611      	mov	r1, r2
 801aae4:	6023      	str	r3, [r4, #0]
 801aae6:	f7e6 f934 	bl	8000d52 <_fstat>
 801aaea:	1c43      	adds	r3, r0, #1
 801aaec:	d102      	bne.n	801aaf4 <_fstat_r+0x1c>
 801aaee:	6823      	ldr	r3, [r4, #0]
 801aaf0:	b103      	cbz	r3, 801aaf4 <_fstat_r+0x1c>
 801aaf2:	602b      	str	r3, [r5, #0]
 801aaf4:	bd38      	pop	{r3, r4, r5, pc}
 801aaf6:	bf00      	nop
 801aaf8:	2000fd7c 	.word	0x2000fd7c

0801aafc <_isatty_r>:
 801aafc:	b538      	push	{r3, r4, r5, lr}
 801aafe:	4c06      	ldr	r4, [pc, #24]	; (801ab18 <_isatty_r+0x1c>)
 801ab00:	2300      	movs	r3, #0
 801ab02:	4605      	mov	r5, r0
 801ab04:	4608      	mov	r0, r1
 801ab06:	6023      	str	r3, [r4, #0]
 801ab08:	f7e6 f933 	bl	8000d72 <_isatty>
 801ab0c:	1c43      	adds	r3, r0, #1
 801ab0e:	d102      	bne.n	801ab16 <_isatty_r+0x1a>
 801ab10:	6823      	ldr	r3, [r4, #0]
 801ab12:	b103      	cbz	r3, 801ab16 <_isatty_r+0x1a>
 801ab14:	602b      	str	r3, [r5, #0]
 801ab16:	bd38      	pop	{r3, r4, r5, pc}
 801ab18:	2000fd7c 	.word	0x2000fd7c

0801ab1c <_lseek_r>:
 801ab1c:	b538      	push	{r3, r4, r5, lr}
 801ab1e:	4c07      	ldr	r4, [pc, #28]	; (801ab3c <_lseek_r+0x20>)
 801ab20:	4605      	mov	r5, r0
 801ab22:	4608      	mov	r0, r1
 801ab24:	4611      	mov	r1, r2
 801ab26:	2200      	movs	r2, #0
 801ab28:	6022      	str	r2, [r4, #0]
 801ab2a:	461a      	mov	r2, r3
 801ab2c:	f7e6 f92c 	bl	8000d88 <_lseek>
 801ab30:	1c43      	adds	r3, r0, #1
 801ab32:	d102      	bne.n	801ab3a <_lseek_r+0x1e>
 801ab34:	6823      	ldr	r3, [r4, #0]
 801ab36:	b103      	cbz	r3, 801ab3a <_lseek_r+0x1e>
 801ab38:	602b      	str	r3, [r5, #0]
 801ab3a:	bd38      	pop	{r3, r4, r5, pc}
 801ab3c:	2000fd7c 	.word	0x2000fd7c

0801ab40 <__malloc_lock>:
 801ab40:	4770      	bx	lr

0801ab42 <__malloc_unlock>:
 801ab42:	4770      	bx	lr

0801ab44 <_read_r>:
 801ab44:	b538      	push	{r3, r4, r5, lr}
 801ab46:	4c07      	ldr	r4, [pc, #28]	; (801ab64 <_read_r+0x20>)
 801ab48:	4605      	mov	r5, r0
 801ab4a:	4608      	mov	r0, r1
 801ab4c:	4611      	mov	r1, r2
 801ab4e:	2200      	movs	r2, #0
 801ab50:	6022      	str	r2, [r4, #0]
 801ab52:	461a      	mov	r2, r3
 801ab54:	f7e6 f8d4 	bl	8000d00 <_read>
 801ab58:	1c43      	adds	r3, r0, #1
 801ab5a:	d102      	bne.n	801ab62 <_read_r+0x1e>
 801ab5c:	6823      	ldr	r3, [r4, #0]
 801ab5e:	b103      	cbz	r3, 801ab62 <_read_r+0x1e>
 801ab60:	602b      	str	r3, [r5, #0]
 801ab62:	bd38      	pop	{r3, r4, r5, pc}
 801ab64:	2000fd7c 	.word	0x2000fd7c

0801ab68 <_init>:
 801ab68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab6a:	bf00      	nop
 801ab6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ab6e:	bc08      	pop	{r3}
 801ab70:	469e      	mov	lr, r3
 801ab72:	4770      	bx	lr

0801ab74 <_fini>:
 801ab74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab76:	bf00      	nop
 801ab78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ab7a:	bc08      	pop	{r3}
 801ab7c:	469e      	mov	lr, r3
 801ab7e:	4770      	bx	lr
